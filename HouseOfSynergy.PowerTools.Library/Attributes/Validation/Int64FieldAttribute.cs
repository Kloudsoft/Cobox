using System;
using System.Collections.Generic;

namespace HouseOfSynergy.PowerTools.Library.Attributes
{
	public class Int64FieldAttribute:
		HouseOfSynergy.PowerTools.Library.Attributes.TextBoxFieldAttribute
	{
		public bool AutoGenerated { get; private set; }

		public long Minimum { get; private set; }

		public long Maximum { get; private set; }

		public Int64FieldAttribute
		(
			System.Type Type,
			int Ordinal,
			string Name,
			string Description,
			string Label,
			string Tooltip,
			bool Required,
			bool ReadOnly,
			bool AutoGenerated,
			long Minimum,
			long Maximum
		)
			: base(Type, Ordinal, Name, Description, Label, Tooltip, Required, ReadOnly)
		{
			if (Minimum > Maximum)
			{
				throw (new ArgumentException("Minimum cannot be greater than Maximum.", "Minimum, Maximum"));
			}

			this.AutoGenerated = AutoGenerated;
			this.Minimum = Minimum;
			this.Maximum = Maximum;
		}

		public override System.Windows.Forms.TextBox CreateTextBoxControl ()
		{
			base.CreateTextBoxControl();

			this.TextBoxControl.MaxLength = System.Math.Max(this.Minimum.ToString().Length, this.Maximum.ToString().Length);

			return (this.TextBoxControl);
		}

		public override void OnHelpTextRequest (List<string> helpTextLines)
		{
			base.OnHelpTextRequest(helpTextLines);

			if (this.AutoGenerated)
			{
				helpTextLines.Add("This field is auto-generated.");
			}
			else
			{
				helpTextLines.Add("This field can accept values between " + this.Minimum.ToString("N0") + " and " + this.Maximum.ToString("N0") + " inclusively.");
			}
		}

		protected override bool OnValidate ()
		{
			long number = 0;
			bool result = false;

			if (this.TextBoxControl.Text.Length <= this.Maximum.ToString().Length)
			{
				if (this.TextBoxControl.Text.Trim().Length > 0)
				{
					result = true;
					foreach (char c in this.TextBoxControl.Text)
					{
						if (!char.IsDigit(c))
						{
							result = false;

							break;
						}
					}

					if (result)
					{
						result = false;
						if (long.TryParse(this.TextBoxControl.Text, out number))
						{
							if ((number >= this.Minimum) && (number <= this.Maximum))
							{
								result = true;
							}
						}
					}
				}
			}

			return (result);
		}
	}
}