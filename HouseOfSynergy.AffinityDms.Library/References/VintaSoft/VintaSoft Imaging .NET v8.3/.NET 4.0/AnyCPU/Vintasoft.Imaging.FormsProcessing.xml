<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Vintasoft.Imaging.FormsProcessing</name>
    </assembly>
    <members>
        <member name="T:Vintasoft.Imaging.FormsProcessing.FormRecognitionErrorEventArgs">
            <summary>
            Provides data for the
            <see cref="E:Vintasoft.Imaging.FormsProcessing.FormRecognitionManager.ImageRecognitionError" /> event.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognitionErrorEventArgs.#ctor(System.Exception,Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognitionErrorEventArgs" /> class.
            </summary>
            <param name="exception">Exception which was thrown.</param>
            <param name="image">Image which recognition caused the exception.</param>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognitionErrorEventArgs.Image">
            <summary>
            Gets the image which recognition caused the exception.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.FormsProcessing.FormRecognitionFinishedEventArgs">
            <summary>
            Provides data for the
            <see cref="E:Vintasoft.Imaging.FormsProcessing.FormRecognitionManager.RecognitionFinished" /> event.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognitionFinishedEventArgs.#ctor(Vintasoft.Imaging.FormsProcessing.FormRecognitionResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognitionFinishedEventArgs" /> class.
            </summary>
            <param name="recognitionResult">The form recognition result.</param>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognitionFinishedEventArgs.RecognitionResult">
            <summary>
            Gets the result of template matching and form field recognition of an image.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.FormsProcessing.FormRecognitionManager">
            <summary>
            Provides the synchronous and asynchronous forms recognition.
            </summary>
            <example>
            Here is an example that demonstrates how to identify and recognize a form asynchronously.
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Recognizes single image asynchronously.
            ''' &lt;/summary&gt;
            ''' &lt;param name="templateManager"&gt;The template manager.&lt;/param&gt;
            ''' &lt;param name="image"&gt;The image.&lt;/param&gt;
            Public Shared Sub RecognizeSingleImageAsync(templateManager As FormTemplateManager, image As VintasoftImage)
                ' create template matching command
                Dim templateMatching As New TemplateMatchingCommand()
                ' set minimal confidence
                templateMatching.MinConfidence = 0.6F
                ' set template images
                templateMatching.TemplateImages = templateManager.TemplateImages
                ' create recognition manager
                Dim recognitionManager As New FormRecognitionManager(templateMatching, templateManager)
                ' create recognition task
                Dim singleImageRecognitionTask As New FormRecognitionTask(image)
                ' subscribe to Finished event
                AddHandler singleImageRecognitionTask.Finished, New EventHandler(AddressOf singleImageRecognitionTask_Finished)
                ' start recognition of the image
                recognitionManager.RecognizeAsync(singleImageRecognitionTask)
            End Sub
            
            ''' &lt;summary&gt;
            ''' Handles the Finished event of the recognition task
            ''' and outputs the recognition results.
            ''' &lt;/summary&gt;
            ''' &lt;param name="sender"&gt;The source of the event.&lt;/param&gt;
            ''' &lt;param name="e"&gt;The &lt;see cref="EventArgs"/&gt; instance containing the event data.&lt;/param&gt;
            Private Shared Sub singleImageRecognitionTask_Finished(sender As Object, e As EventArgs)
                ' get the recognition task
                Dim task As FormRecognitionTask = DirectCast(sender, FormRecognitionTask)
                ' get the result of recognition
                Dim recognitionResult As FormRecognitionResult = task.Results(0)
                ' get the result of image comparison
                Dim imageCompareResult As ImageImprintCompareResult = recognitionResult.TemplateMatchingResult.ImageCompareResult
                ' if result is not reliable
                If Not imageCompareResult.IsReliable Then
                    ' matching template is not found
                    Console.WriteLine("Matching template is not found.")
                Else
                    ' get recognized page
                    Dim recognizedPage As FormPage = recognitionResult.RecognizedPage
                    ' write page info
                    Console.WriteLine(String.Format("Matching template: {0}; confidence: {0:F1}%.", recognizedPage.Name, imageCompareResult.Confidence * 100))
            
                    ' get form field count
                    If recognizedPage.Items.Count = 0 Then
                        Console.WriteLine("No form fields were recognized.")
                    Else
                        Console.WriteLine(String.Format("Recognized form field count: {0}", recognizedPage.Items.Count))
                        ' for each recognized form field
                        For Each recognizedField As FormField In recognizedPage.Items
                            ' write field info
                            Console.WriteLine(String.Format("  Name: {0}; value: {1}; confidence: {2:F1}%", recognizedField.Name, recognizedField.Value, recognizedField.Confidence * 100))
                        Next
                    End If
                End If
            End Sub
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Recognizes single image asynchronously.
            /// &lt;/summary&gt;
            /// &lt;param name="templateManager"&gt;The template manager.&lt;/param&gt;
            /// &lt;param name="image"&gt;The image.&lt;/param&gt;
            public static void RecognizeSingleImageAsync(FormTemplateManager templateManager, VintasoftImage image)
            {
                // create template matching command
                TemplateMatchingCommand templateMatching = new TemplateMatchingCommand();
                // set minimal confidence
                templateMatching.MinConfidence = 0.6f;
                // set template images
                templateMatching.TemplateImages = templateManager.TemplateImages;
                // create recognition manager
                FormRecognitionManager recognitionManager = new FormRecognitionManager(
                    templateMatching, templateManager);
                // create recognition task
                FormRecognitionTask singleImageRecognitionTask = new FormRecognitionTask(image);
                // subscribe to Finished event
                singleImageRecognitionTask.Finished += new EventHandler(singleImageRecognitionTask_Finished);
                // start recognition of the image
                recognitionManager.RecognizeAsync(singleImageRecognitionTask);
            }
            
            /// &lt;summary&gt;
            /// Handles the Finished event of the recognition task
            /// and outputs the recognition results.
            /// &lt;/summary&gt;
            /// &lt;param name="sender"&gt;The source of the event.&lt;/param&gt;
            /// &lt;param name="e"&gt;The &lt;see cref="EventArgs"/&gt; instance containing the event data.&lt;/param&gt;
            private static void singleImageRecognitionTask_Finished(object sender, EventArgs e)
            {
                // get the recognition task
                FormRecognitionTask task = (FormRecognitionTask)sender;
                // get the result of recognition
                FormRecognitionResult recognitionResult = task.Results[0];
                // get the result of image comparison
                ImageImprintCompareResult imageCompareResult =
                    recognitionResult.TemplateMatchingResult.ImageCompareResult;
                // if result is not reliable
                if (!imageCompareResult.IsReliable)
                {
                    // matching template is not found
                    Console.WriteLine("Matching template is not found.");
                }
                else
                {
                    // get recognized page
                    FormPage recognizedPage = recognitionResult.RecognizedPage;
                    // write page info
                    Console.WriteLine(string.Format(
                        "Matching template: {0}; confidence: {0:F1}%.",
                        recognizedPage.Name,
                        imageCompareResult.Confidence * 100));
            
                    // get form field count
                    if (recognizedPage.Items.Count == 0)
                    {
                        Console.WriteLine("No form fields were recognized.");
                    }
                    else
                    {
                        Console.WriteLine(string.Format(
                            "Recognized form field count: {0}",
                            recognizedPage.Items.Count));
                        // for each recognized form field
                        foreach (FormField recognizedField in recognizedPage.Items)
                        {
                            // write field info
                            Console.WriteLine(string.Format(
                                "  Name: {0}; value: {1}; confidence: {2:F1}%",
                                recognizedField.Name,
                                recognizedField.Value,
                                recognizedField.Confidence * 100));
                        }
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognitionManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognitionManager" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognitionManager.#ctor(Vintasoft.Imaging.FormsProcessing.TemplateMatching.TemplateMatchingCommand,Vintasoft.Imaging.FormsProcessing.FormRecognition.FormTemplateManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognitionManager" /> class.
            </summary>
            <param name="templateMatching">The template matching command.</param>
            <param name="formTemplates">The form template manager.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if
            <i>templateMatching</i> or <i>formTemplates</i> is <b>null</b>.
            </exception>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognitionManager.Recognize(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Recognizes forms in the specified image synchronously.
            </summary>
            <param name="image">The image to process.</param>
            <returns>Image recognition result.</returns>
            <remarks>
            This method is NOT thread-safe.
            </remarks>
            <example>
            Here is an example that demonstrates how to identify and recognize a form synchronously.
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Recognizes single image synchronously.
            ''' &lt;/summary&gt;
            ''' &lt;param name="templateManager"&gt;The template manager.&lt;/param&gt;
            ''' &lt;param name="image"&gt;The image.&lt;/param&gt;
            Public Shared Sub RecognizeSingleImageSync(templateManager As FormTemplateManager, image As VintasoftImage)
                ' create template matching command
                Dim templateMatching As New TemplateMatchingCommand()
                ' set minimal confidence
                templateMatching.MinConfidence = 0.6F
                ' set template images
                templateMatching.TemplateImages = templateManager.TemplateImages
                ' create recognition manager
                Dim recognitionManager As New FormRecognitionManager(templateMatching, templateManager)
                ' recognize the image
                Dim recognitionResult As FormRecognitionResult = recognitionManager.Recognize(image)
            
                ' get the result of image comparison
                Dim imageCompareResult As ImageImprintCompareResult = recognitionResult.TemplateMatchingResult.ImageCompareResult
                ' if result is not reliable
                If Not imageCompareResult.IsReliable Then
                    ' matching template is not found
                    Console.WriteLine("Matching template is not found.")
                Else
                    ' get recognized page
                    Dim recognizedPage As FormPage = recognitionResult.RecognizedPage
                    ' write page info
                    Console.WriteLine(String.Format("Matching template: {0}; confidence: {0:F1}%.", recognizedPage.Name, imageCompareResult.Confidence * 100))
            
                    ' get form field count
                    If recognizedPage.Items.Count = 0 Then
                        Console.WriteLine("No form fields were recognized.")
                    Else
                        Console.WriteLine(String.Format("Recognized form field count: {0}", recognizedPage.Items.Count))
                        ' for each recognized form field
                        For Each recognizedField As FormField In recognizedPage.Items
                            ' write field info
                            Console.WriteLine(String.Format("  Name: {0}; value: {1}; confidence: {2:F1}%", recognizedField.Name, recognizedField.Value, recognizedField.Confidence * 100))
                        Next
                    End If
                End If
            End Sub
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Recognizes single image synchronously.
            /// &lt;/summary&gt;
            /// &lt;param name="templateManager"&gt;The template manager.&lt;/param&gt;
            /// &lt;param name="image"&gt;The image.&lt;/param&gt;
            public static void RecognizeSingleImageSync(FormTemplateManager templateManager, VintasoftImage image)
            {
                // create template matching command
                TemplateMatchingCommand templateMatching = new TemplateMatchingCommand();
                // set minimal confidence
                templateMatching.MinConfidence = 0.6f;
                // set template images
                templateMatching.TemplateImages = templateManager.TemplateImages;
                // create recognition manager
                FormRecognitionManager recognitionManager = new FormRecognitionManager(
                    templateMatching, templateManager);
                // recognize the image
                FormRecognitionResult recognitionResult = recognitionManager.Recognize(image);
            
                // get the result of image comparison
                ImageImprintCompareResult imageCompareResult =
                    recognitionResult.TemplateMatchingResult.ImageCompareResult;
                // if result is not reliable
                if (!imageCompareResult.IsReliable)
                {
                    // matching template is not found
                    Console.WriteLine("Matching template is not found.");
                }
                else
                {
                    // get recognized page
                    FormPage recognizedPage = recognitionResult.RecognizedPage;
                    // write page info
                    Console.WriteLine(string.Format(
                        "Matching template: {0}; confidence: {0:F1}%.",
                        recognizedPage.Name,
                        imageCompareResult.Confidence * 100));
            
                    // get form field count
                    if (recognizedPage.Items.Count == 0)
                    {
                        Console.WriteLine("No form fields were recognized.");
                    }
                    else
                    {
                        Console.WriteLine(string.Format(
                            "Recognized form field count: {0}",
                            recognizedPage.Items.Count));
                        // for each recognized form field
                        foreach (FormField recognizedField in recognizedPage.Items)
                        {
                            // write field info
                            Console.WriteLine(string.Format(
                                "  Name: {0}; value: {1}; confidence: {2:F1}%",
                                recognizedField.Name,
                                recognizedField.Value,
                                recognizedField.Confidence * 100));
                        }
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognitionManager.Recognize(Vintasoft.Imaging.VintasoftImage[])">
            <summary>
            Recognizes forms in the specified image synchronously.
            </summary>
            <param name="images">The image to process.</param>
            <returns>Image recognition results.</returns>
            <remarks>
            This method is NOT thread-safe.<br />
            <br />
            Forms recognition will be performed in multiple threads if
            <see cref="P:Vintasoft.Imaging.FormsProcessing.FormRecognitionManager.MaxThreads" /> value is greater than 1.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognitionManager.Recognize(Vintasoft.Imaging.VintasoftImage,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})">
            <summary>
            Recognizes forms in the specified image synchronously.
            </summary>
            <param name="image">The image to process.</param>
            <param name="progress">Progress delegate.</param>
            <returns>Form recognition result.</returns>
            <remarks>
            This method is thread-safe.<br />
            <br />
            This method raises only the following events:
            <see cref="E:Vintasoft.Imaging.FormsProcessing.FormRecognitionManager.ImageRecognitionStarted" />, 
            <see cref="E:Vintasoft.Imaging.FormsProcessing.FormRecognitionManager.ImageRecognitionFinished" />.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognitionManager.Recognize(Vintasoft.Imaging.FormsProcessing.FormRecognitionTask)">
            <summary>
            Recognizes forms in the specified image synchronously.
            </summary>
            <param name="task">The task that defines parameters of forms recognition.</param>
            <remarks>
            This method is thread-safe.<br />
            <br />
            <b>Important!</b> Events <see cref="E:Vintasoft.Imaging.FormsProcessing.FormRecognitionManager.RecognitionStarted" />, <see cref="E:Vintasoft.Imaging.FormsProcessing.FormRecognitionManager.RecognitionFinished" />,
            <see cref="E:Vintasoft.Imaging.FormsProcessing.FormRecognitionManager.ImageRecognitionStarted" />, <see cref="E:Vintasoft.Imaging.FormsProcessing.FormRecognitionManager.ImageRecognitionFinished" /> and
            <see cref="E:Vintasoft.Imaging.FormsProcessing.FormRecognitionManager.RecognitionProgress" /> are not raised during execution of this method.<br />
            Task events <see cref="E:Vintasoft.Imaging.FormsProcessing.FormRecognitionTask.Started" />,
            <see cref="E:Vintasoft.Imaging.FormsProcessing.FormRecognitionTask.Finished" />,
            <see cref="E:Vintasoft.Imaging.FormsProcessing.FormRecognitionTask.ImageRecognitionStarted" />,
            <see cref="E:Vintasoft.Imaging.FormsProcessing.FormRecognitionTask.ImageRecognitionFinished" /> and
            <see cref="E:Vintasoft.Imaging.FormsProcessing.FormRecognitionTask.Progress" /> must be used if events are necessary.<br />
            <br />
            Forms recognition will be performed in multiple threads if
            <see cref="P:Vintasoft.Imaging.FormsProcessing.FormRecognitionManager.MaxThreads" /> value is greater than 1.
            </remarks>
            <seealso cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognitionTask" />
            <seealso cref="E:Vintasoft.Imaging.FormsProcessing.FormRecognitionTask.Started" />
            <seealso cref="E:Vintasoft.Imaging.FormsProcessing.FormRecognitionTask.Finished" />
            <seealso cref="E:Vintasoft.Imaging.FormsProcessing.FormRecognitionTask.ImageRecognitionStarted" />
            <seealso cref="E:Vintasoft.Imaging.FormsProcessing.FormRecognitionTask.ImageRecognitionFinished" />
            <seealso cref="E:Vintasoft.Imaging.FormsProcessing.FormRecognitionTask.Progress" />
            <example>
            Here is an example that demonstrates how to identify and recognize a form synchronously.
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Recognizes single image synchronously.
            ''' &lt;/summary&gt;
            ''' &lt;param name="templateManager"&gt;The template manager.&lt;/param&gt;
            ''' &lt;param name="image"&gt;The image.&lt;/param&gt;
            Public Shared Sub RecognizeSingleImageSync(templateManager As FormTemplateManager, image As VintasoftImage)
                ' create template matching command
                Dim templateMatching As New TemplateMatchingCommand()
                ' set minimal confidence
                templateMatching.MinConfidence = 0.6F
                ' set template images
                templateMatching.TemplateImages = templateManager.TemplateImages
                ' create recognition manager
                Dim recognitionManager As New FormRecognitionManager(templateMatching, templateManager)
                ' recognize the image
                Dim recognitionResult As FormRecognitionResult = recognitionManager.Recognize(image)
            
                ' get the result of image comparison
                Dim imageCompareResult As ImageImprintCompareResult = recognitionResult.TemplateMatchingResult.ImageCompareResult
                ' if result is not reliable
                If Not imageCompareResult.IsReliable Then
                    ' matching template is not found
                    Console.WriteLine("Matching template is not found.")
                Else
                    ' get recognized page
                    Dim recognizedPage As FormPage = recognitionResult.RecognizedPage
                    ' write page info
                    Console.WriteLine(String.Format("Matching template: {0}; confidence: {0:F1}%.", recognizedPage.Name, imageCompareResult.Confidence * 100))
            
                    ' get form field count
                    If recognizedPage.Items.Count = 0 Then
                        Console.WriteLine("No form fields were recognized.")
                    Else
                        Console.WriteLine(String.Format("Recognized form field count: {0}", recognizedPage.Items.Count))
                        ' for each recognized form field
                        For Each recognizedField As FormField In recognizedPage.Items
                            ' write field info
                            Console.WriteLine(String.Format("  Name: {0}; value: {1}; confidence: {2:F1}%", recognizedField.Name, recognizedField.Value, recognizedField.Confidence * 100))
                        Next
                    End If
                End If
            End Sub
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Recognizes single image synchronously.
            /// &lt;/summary&gt;
            /// &lt;param name="templateManager"&gt;The template manager.&lt;/param&gt;
            /// &lt;param name="image"&gt;The image.&lt;/param&gt;
            public static void RecognizeSingleImageSync(FormTemplateManager templateManager, VintasoftImage image)
            {
                // create template matching command
                TemplateMatchingCommand templateMatching = new TemplateMatchingCommand();
                // set minimal confidence
                templateMatching.MinConfidence = 0.6f;
                // set template images
                templateMatching.TemplateImages = templateManager.TemplateImages;
                // create recognition manager
                FormRecognitionManager recognitionManager = new FormRecognitionManager(
                    templateMatching, templateManager);
                // recognize the image
                FormRecognitionResult recognitionResult = recognitionManager.Recognize(image);
            
                // get the result of image comparison
                ImageImprintCompareResult imageCompareResult =
                    recognitionResult.TemplateMatchingResult.ImageCompareResult;
                // if result is not reliable
                if (!imageCompareResult.IsReliable)
                {
                    // matching template is not found
                    Console.WriteLine("Matching template is not found.");
                }
                else
                {
                    // get recognized page
                    FormPage recognizedPage = recognitionResult.RecognizedPage;
                    // write page info
                    Console.WriteLine(string.Format(
                        "Matching template: {0}; confidence: {0:F1}%.",
                        recognizedPage.Name,
                        imageCompareResult.Confidence * 100));
            
                    // get form field count
                    if (recognizedPage.Items.Count == 0)
                    {
                        Console.WriteLine("No form fields were recognized.");
                    }
                    else
                    {
                        Console.WriteLine(string.Format(
                            "Recognized form field count: {0}",
                            recognizedPage.Items.Count));
                        // for each recognized form field
                        foreach (FormField recognizedField in recognizedPage.Items)
                        {
                            // write field info
                            Console.WriteLine(string.Format(
                                "  Name: {0}; value: {1}; confidence: {2:F1}%",
                                recognizedField.Name,
                                recognizedField.Value,
                                recognizedField.Confidence * 100));
                        }
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognitionManager.RecognizeAsync(Vintasoft.Imaging.FormsProcessing.FormRecognitionTask)">
            <summary>
            Recognizes forms in the specified image asynchronously.
            </summary>
            <param name="task">The task that defines parameters of forms recognition.</param>
            <remarks>
            This method is thread-safe.<br />
            <br />
            <b>Important!</b> Events <see cref="E:Vintasoft.Imaging.FormsProcessing.FormRecognitionManager.RecognitionStarted" />, <see cref="E:Vintasoft.Imaging.FormsProcessing.FormRecognitionManager.RecognitionFinished" />,
            <see cref="E:Vintasoft.Imaging.FormsProcessing.FormRecognitionManager.ImageRecognitionStarted" />, <see cref="E:Vintasoft.Imaging.FormsProcessing.FormRecognitionManager.ImageRecognitionFinished" /> and
            <see cref="E:Vintasoft.Imaging.FormsProcessing.FormRecognitionManager.RecognitionProgress" /> are not raised during execution of this method.<br />
            Task events <see cref="E:Vintasoft.Imaging.FormsProcessing.FormRecognitionTask.Started" />,
            <see cref="E:Vintasoft.Imaging.FormsProcessing.FormRecognitionTask.Finished" />,
            <see cref="E:Vintasoft.Imaging.FormsProcessing.FormRecognitionTask.ImageRecognitionStarted" />,
            <see cref="E:Vintasoft.Imaging.FormsProcessing.FormRecognitionTask.ImageRecognitionFinished" /> and
            <see cref="E:Vintasoft.Imaging.FormsProcessing.FormRecognitionTask.Progress" /> must be used if events are necessary.<br />
            <br />
            Forms recognition will be performed in multiple threads if
            <see cref="P:Vintasoft.Imaging.FormsProcessing.FormRecognitionManager.MaxThreads" /> value is greater than 1.
            </remarks>
            <seealso cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognitionTask" />
            <seealso cref="E:Vintasoft.Imaging.FormsProcessing.FormRecognitionTask.Started" />
            <seealso cref="E:Vintasoft.Imaging.FormsProcessing.FormRecognitionTask.Finished" />
            <seealso cref="E:Vintasoft.Imaging.FormsProcessing.FormRecognitionTask.ImageRecognitionStarted" />
            <seealso cref="E:Vintasoft.Imaging.FormsProcessing.FormRecognitionTask.ImageRecognitionFinished" />
            <seealso cref="E:Vintasoft.Imaging.FormsProcessing.FormRecognitionTask.Progress" />
            <example>
            Here is an example that demonstrates how to identify and recognize several forms asynchronously.
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Recognizes array of images synchronously.
            ''' &lt;/summary&gt;
            ''' &lt;param name="templateManager"&gt;The template manager.&lt;/param&gt;
            ''' &lt;param name="images"&gt;The images.&lt;/param&gt;
            Public Shared Sub RecognizeImagesSync(templateManager As FormTemplateManager, images As VintasoftImage())
                ' create template matching command
                Dim templateMatching As New TemplateMatchingCommand()
                ' set minimal confidence
                templateMatching.MinConfidence = 0.6F
                ' set template images
                templateMatching.TemplateImages = templateManager.TemplateImages
                ' create recognition manager
                Dim recognitionManager As New FormRecognitionManager(templateMatching, templateManager)
                ' recognize the images
                Dim recognitionResults As FormRecognitionResult() = recognitionManager.Recognize(images)
                ' for each recognition result
                For i As Integer = 0 To recognitionResults.Length - 1
                    Console.WriteLine(String.Format("Image {0} of {1}:", i + 1, recognitionResults.Length))
                    Console.WriteLine()
            
                    Dim recognitionResult As FormRecognitionResult = recognitionResults(i)
            
                    ' get the result of image comparison
                    Dim imageCompareResult As ImageImprintCompareResult = recognitionResult.TemplateMatchingResult.ImageCompareResult
                    ' if result is not reliable
                    If Not imageCompareResult.IsReliable Then
                        ' matching template is not found
                        Console.WriteLine("Matching template is not found.")
                    Else
                        ' get recognized page
                        Dim recognizedPage As FormPage = recognitionResult.RecognizedPage
                        ' write page info
                        Console.WriteLine(String.Format("Matching template: {0}; confidence: {0:F1}%.", recognizedPage.Name, imageCompareResult.Confidence * 100))
            
                        ' get form field count
                        If recognizedPage.Items.Count = 0 Then
                            Console.WriteLine("No form fields were recognized.")
                        Else
                            Console.WriteLine(String.Format("Recognized form field count: {0}", recognizedPage.Items.Count))
                            ' for each recognized form field
                            For Each recognizedField As FormField In recognizedPage.Items
                                ' write field info
                                Console.WriteLine(String.Format("  Name: {0}; value: {1}; confidence: {2:F1}%", recognizedField.Name, recognizedField.Value, recognizedField.Confidence * 100))
                            Next
                        End If
                    End If
            
                    Console.WriteLine()
                    Console.WriteLine()
                Next
            End Sub
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Recognizes array of images synchronously.
            /// &lt;/summary&gt;
            /// &lt;param name="templateManager"&gt;The template manager.&lt;/param&gt;
            /// &lt;param name="images"&gt;The images.&lt;/param&gt;
            public static void RecognizeImagesSync(FormTemplateManager templateManager, VintasoftImage[] images)
            {
                // create template matching command
                TemplateMatchingCommand templateMatching = new TemplateMatchingCommand();
                // set minimal confidence
                templateMatching.MinConfidence = 0.6f;
                // set template images
                templateMatching.TemplateImages = templateManager.TemplateImages;
                // create recognition manager
                FormRecognitionManager recognitionManager = new FormRecognitionManager(
                    templateMatching, templateManager);
                // recognize the images
                FormRecognitionResult[] recognitionResults = recognitionManager.Recognize(images);
                // for each recognition result
                for (int i = 0; i &lt; recognitionResults.Length; i++)
                {
                    Console.WriteLine(string.Format(
                        "Image {0} of {1}:",
                        i + 1,
                        recognitionResults.Length));
                    Console.WriteLine();
            
                    FormRecognitionResult recognitionResult = recognitionResults[i];
            
                    // get the result of image comparison
                    ImageImprintCompareResult imageCompareResult =
                        recognitionResult.TemplateMatchingResult.ImageCompareResult;
                    // if result is not reliable
                    if (!imageCompareResult.IsReliable)
                    {
                        // matching template is not found
                        Console.WriteLine("Matching template is not found.");
                    }
                    else
                    {
                        // get recognized page
                        FormPage recognizedPage = recognitionResult.RecognizedPage;
                        // write page info
                        Console.WriteLine(string.Format(
                            "Matching template: {0}; confidence: {0:F1}%.",
                            recognizedPage.Name,
                            imageCompareResult.Confidence * 100));
            
                        // get form field count
                        if (recognizedPage.Items.Count == 0)
                        {
                            Console.WriteLine("No form fields were recognized.");
                        }
                        else
                        {
                            Console.WriteLine(string.Format(
                                "Recognized form field count: {0}",
                                recognizedPage.Items.Count));
                            // for each recognized form field
                            foreach (FormField recognizedField in recognizedPage.Items)
                            {
                                // write field info
                                Console.WriteLine(string.Format(
                                    "  Name: {0}; value: {1}; confidence: {2:F1}%",
                                    recognizedField.Name,
                                    recognizedField.Value,
                                    recognizedField.Confidence * 100));
                            }
                        }
                    }
            
                    Console.WriteLine();
                    Console.WriteLine();
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognitionManager.Dispose">
            <summary>
            Releases all resources used by this <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognitionManager" /> object.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognitionManager.OnRecognitionStarted(System.EventArgs)">
            <summary>
            Raises the <see cref="E:RecognitionStarted" /> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognitionManager.OnRecognitionFinished(System.EventArgs)">
            <summary>
            Raises the <see cref="E:RecognitionFinished" /> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognitionManager.OnImageRecognitionStarted(Vintasoft.Imaging.ImageEventArgs)">
            <summary>
            Raises the <see cref="E:ImageRecognitionStarted" /> event.
            </summary>
            <param name="e">The <see cref="T:Vintasoft.Imaging.ImageEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognitionManager.OnImageRecognitionFinished(Vintasoft.Imaging.FormsProcessing.FormRecognitionFinishedEventArgs)">
            <summary>
            Raises the <see cref="E:ImageRecognitionFinished" /> event.
            </summary>
            <param name="e">The <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognitionFinishedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognitionManager.OnImageRecognitionError(Vintasoft.Imaging.FormsProcessing.FormRecognitionErrorEventArgs)">
            <summary>
            Raises the <see cref="E:ImageRecognitionError" /> event.
            </summary>
            <param name="e">The <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognitionErrorEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognitionManager.OnRecognitionProgress(Vintasoft.Imaging.ProgressEventArgs)">
            <summary>
            Raises the <see cref="E:RecognitionProgress" /> event.
            </summary>
            <param name="e">The <see cref="T:Vintasoft.Imaging.ProgressEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognitionManager.TemplateImages">
            <summary>
            Gets or sets the collection of template images.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognitionManager.FormTemplates">
            <summary>
            Gets the form page template manager used during the forms recognition.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognitionManager.TemplateMatching">
            <summary>
            Gets the command used for the template matching during the forms processing.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognitionManager.MaxThreads">
            <summary>
            Gets or sets the maximum count of threads that can be used for forms recognition.
            </summary>
            <value>
            1 - SDK will execute forms recognition in current thread;<br />
            2 - SDK can execute 2 background threads for forms recognition;<br />
            N - SDK can execute N background threads for forms recognition.<br />
            Default value is <see cref="T:Vintasoft.Imaging.ImagingEnvironment" />.MaxThreads.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            value is less than 1.</exception>
        </member>
        <member name="E:Vintasoft.Imaging.FormsProcessing.FormRecognitionManager.RecognitionStarted">
            <summary>
            Occurs when recognition is started.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.FormsProcessing.FormRecognitionManager.RecognitionFinished">
            <summary>
            Occurs when recognition is finished.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.FormsProcessing.FormRecognitionManager.ImageRecognitionStarted">
            <summary>
            Occurs when recognition of an image is started.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.FormsProcessing.FormRecognitionManager.ImageRecognitionFinished">
            <summary>
            Occurs when recognition of an image is finished.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.FormsProcessing.FormRecognitionManager.ImageRecognitionError">
            <summary>
            Occurs when exception is thrown during image recognition.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.FormsProcessing.FormRecognitionManager.RecognitionProgress">
            <summary>
            Occurs when the progress of recognition is changed.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.FormsProcessing.FormRecognitionResult">
            <summary>
            Contains information about the result of template matching and form field recognition
            of an image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognitionResult.TemplateMatchingResult">
            <summary>
            Gets the result of template matching.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognitionResult.RecognizedPage">
            <summary>
            Gets the result of form field recognition.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.FormsProcessing.FormRecognitionTask">
            <summary>
            Provides information about the form processing task.
            </summary>
            <seealso cref="M:Vintasoft.Imaging.FormsProcessing.FormRecognitionManager.Recognize(Vintasoft.Imaging.FormsProcessing.FormRecognitionTask)" />
            <seealso cref="M:Vintasoft.Imaging.FormsProcessing.FormRecognitionManager.RecognizeAsync(Vintasoft.Imaging.FormsProcessing.FormRecognitionTask)" />
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognitionTask.#ctor(Vintasoft.Imaging.VintasoftImage[])">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognitionTask" /> class.
            </summary>
            <param name="images">The images to recognize.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognitionTask.#ctor(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognitionTask" /> class.
            </summary>
            <param name="image">The image to recognize.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognitionTask.OnProgress(Vintasoft.Imaging.ProgressEventArgs)">
            <summary>
            Raises the <see cref="E:Progress" /> event.
            </summary>
            <param name="e">The <see cref="T:Vintasoft.Imaging.ProgressEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognitionTask.OnStarted(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Started" /> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognitionTask.OnFinished(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Finished" /> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognitionTask.OnImageRecognitionStarted(Vintasoft.Imaging.ImageEventArgs)">
            <summary>
            Raises the <see cref="E:ImageRecognitionStarted" /> event.
            </summary>
            <param name="e">The <see cref="T:Vintasoft.Imaging.ImageEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognitionTask.OnImageRecognitionFinished(Vintasoft.Imaging.FormsProcessing.FormRecognitionFinishedEventArgs)">
            <summary>
            Raises the <see cref="E:ImageRecognitionFinished" /> event.
            </summary>
            <param name="e">The <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognitionFinishedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognitionTask.OnImageRecognitionError(Vintasoft.Imaging.FormsProcessing.FormRecognitionErrorEventArgs)">
            <summary>
            Raises the <see cref="E:ImageRecognitionError" /> event.
            </summary>
            <param name="e">The <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognitionErrorEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognitionTask.Images">
            <summary>
            Gets the images of the form recognition task.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognitionTask.Results">
            <summary>
            Gets the results of the form recognition task.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognitionTask.IsStarted">
            <summary>
            Gets a value indicating whether recognition is started.
            </summary>
            <value>
            <b>true</b> if recognition is started; otherwise, <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognitionTask.IsFinished">
            <summary>
            Gets a value indicating whether recognition is finished.
            </summary>
            <value>
            <b>true</b> if recognition is finished; otherwise, <b>false</b>.
            </value>
        </member>
        <member name="E:Vintasoft.Imaging.FormsProcessing.FormRecognitionTask.Started">
            <summary>
            Occurs when recognition task is started.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.FormsProcessing.FormRecognitionTask.Finished">
            <summary>
            Occurs when recognition task is finished.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.FormsProcessing.FormRecognitionTask.ImageRecognitionStarted">
            <summary>
            Occurs when recognition of an image is started.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.FormsProcessing.FormRecognitionTask.ImageRecognitionFinished">
            <summary>
            Occurs when recognition of an image is finished.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.FormsProcessing.FormRecognitionTask.ImageRecognitionError">
            <summary>
            Occurs when recognition of an image throws an exception.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.FormsProcessing.FormRecognitionTask.Progress">
            <summary>
            Occurs when the progress of recognition task is changed.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplatePropertyChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplateCollection.ItemPropertyChanged" />.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplatePropertyChangedEventArgs.#ctor(Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplate,Vintasoft.Imaging.ObjectPropertyChangedEventArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplatePropertyChangedEventArgs" /> class.
            </summary>
            <param name="formFieldTemplate">Form field template whose property is changed.</param>
            <param name="changedArgs">Information about changed property.</param>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplatePropertyChangedEventArgs.FormFieldTemplate">
            <summary>
            Gets the form field template data whose property is changed.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplatePropertyChangedEventArgs.ChangedArgs">
            <summary>
            Gets the information about changed property.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplate">
            <summary>
            Provides the abstract base class that contains information about form field template.
            </summary>
            <seealso cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormField" />
            <example>
            Here is an example that demonstrates how to create a form template
            and add some form field templates to it from code.
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Creates a page template and adds field templates.
            ''' &lt;/summary&gt;
            ''' &lt;returns&gt;
            ''' A &lt;see cref="FormPageTemplate"/&gt; instance that contains
            ''' created form field templates.
            ''' &lt;/returns&gt;
            Public Shared Function CreatePageTemplateAndAddFieldTemplates() As FormPageTemplate
                ' create empty page template
                Dim pageTemplate As New FormPageTemplate()
            
                ' create OMR field
                Dim omrFieldTemplate As OmrFieldTemplate = New OmrRectangularFieldTemplate()
                omrFieldTemplate.Name = "'I agree' check box"
                omrFieldTemplate.BoundingBox = New System.Drawing.RectangleF(1200, 2400, 40, 40)
                omrFieldTemplate.Threshold = 0.1F
                omrFieldTemplate.FilledValue = "YES"
                omrFieldTemplate.UnfilledValue = ""
                omrFieldTemplate.UndefinedValue = "?"
            
                ' add field template to page template
                pageTemplate.Items.Add(omrFieldTemplate)
            
                ' create OCR field
                Dim ocrFieldTemplate As New OcrFieldTemplate()
                ocrFieldTemplate.Name = "Last name"
                ocrFieldTemplate.BoundingBox = New System.Drawing.RectangleF(300, 400, 500, 200)
                ocrFieldTemplate.OcrEngineSettings = New OcrEngineSettings(OcrLanguage.English)
            
                ' add field template to page template
                pageTemplate.Items.Add(ocrFieldTemplate)
            
                Return pageTemplate
            End Function
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Creates a page template and adds field templates.
            /// &lt;/summary&gt;
            /// &lt;returns&gt;
            /// A &lt;see cref="FormPageTemplate"/&gt; instance that contains
            /// created form field templates.
            /// &lt;/returns&gt;
            public static FormPageTemplate CreatePageTemplateAndAddFieldTemplates()
            {
                // create empty page template
                FormPageTemplate pageTemplate = new FormPageTemplate();
            
                // create OMR field
                OmrFieldTemplate omrFieldTemplate = new OmrRectangularFieldTemplate();
                omrFieldTemplate.Name = "'I agree' check box";
                omrFieldTemplate.BoundingBox = new System.Drawing.RectangleF(1200, 2400, 40, 40);
                omrFieldTemplate.Threshold = 0.1f;
                omrFieldTemplate.FilledValue = "YES";
                omrFieldTemplate.UnfilledValue = "";
                omrFieldTemplate.UndefinedValue = "?";
            
                // add field template to page template
                pageTemplate.Items.Add(omrFieldTemplate);
            
                // create OCR field
                OcrFieldTemplate ocrFieldTemplate = new OcrFieldTemplate();
                ocrFieldTemplate.Name = "Last name";
                ocrFieldTemplate.BoundingBox = new System.Drawing.RectangleF(300, 400, 500, 200);
                ocrFieldTemplate.OcrEngineSettings = new OcrEngineSettings(OcrLanguage.English);
            
                // add field template to page template
                pageTemplate.Items.Add(ocrFieldTemplate);
            
                return pageTemplate;
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplate" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplate.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplate" /> class.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplate.CompensateTemplateImageBackground(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Analyzes the template image and saves information required for compensation
            of background of template image during form field recognition.
            </summary>
            <param name="templateImage">The template image.</param>
            <remarks>
            Method clears information required for compensation
            of background of template image during form field recognition if
            <i>templateImage</i> is <b>null</b>.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplate.Recognize(Vintasoft.Imaging.FormsProcessing.FormRecognition.FormRecognitionParams)">
            <summary>
            Recognizes a form field on the specified image.
            </summary>
            <param name="formRecognitionParams">Recognition parameters of a form field
            that specify a transform from <i>image</i> to the template image.</param>
            <returns>Recognized field.</returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <i>formRecognitionParams</i> is <b>null</b>.
            </exception>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplate.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplate.OnPropertyChanging(Vintasoft.Imaging.ObjectPropertyChangingEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplate.PropertyChanging" /> event.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.ObjectPropertyChangingEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplate.OnPropertyChanged(Vintasoft.Imaging.ObjectPropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplate.PropertyChanged" /> event.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.ObjectPropertyChangedEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplate.GetBoundingBoxOnImage(Vintasoft.Imaging.ImageSize)">
            <summary>
            Returns the bounding rectangle, in the device-independent pixels (1/96th inch),
            of the form field template on the template image.
            </summary>
            <param name="templateSize">The size of the template image.</param>
            <returns>The bounding rectangle, in the device-independent pixels (1/96th inch),
            of the form field template on the template image.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplate.Name">
            <summary>
            Gets or sets the name of form field template.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplate.BoundingBox">
            <summary>
            Gets or sets the bounding rectangle, in the device-independent pixels (1/96th inch),
            of the form field template on the template image.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplate.PropertyChanging">
            <summary>
            Occurs when the form field template property is changing.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplate.PropertyChanged">
            <summary>
            Occurs when the form field template property is changed.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormField">
            <summary>
            Provides the abstract base class that contains information about recognized form field.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormField.#ctor(Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplate)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormField" /> class.
            </summary>
            <param name="fieldTemplate">Template of the form field.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormField.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormField.FieldTemplate">
            <summary>
            Gets the template of the form field.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormField.Name">
            <summary>
            Gets the name of the form field.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormField.Value">
            <summary>
            Gets the value of the form field in a text form.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormField.Confidence">
            <summary>
            Gets the confidence of the recognition result.
            </summary>
            <value>
            Possible values are from 0.0 (0%) to 1.0 (100%).
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplateGroup">
            <summary>
            Contains information about a group of form field templates.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplateGroup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplateGroup" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplateGroup.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplateGroup" /> class.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplateGroup.CompensateTemplateImageBackground(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Analyzes the template image and saves information required for compensation
            of background of template image during form field recognition.
            </summary>
            <param name="templateImage">The template image.</param>
            <remarks>
            Method clears information required for compensation
            of background of template image during form field recognition if
            <i>templateImage</i> is <b>null</b>.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplateGroup.Recognize(Vintasoft.Imaging.FormsProcessing.FormRecognition.FormRecognitionParams)">
            <summary>
            Recognizes a form field on the specified image.
            </summary>
            <param name="formRecognitionParams">Recognition parameters of a form field
            that specify a transform from <i>image</i> to the template image.</param>
            <returns>Recognized field.</returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <i>formRecognitionParams</i> is <b>null</b>.
            </exception>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplateGroup.Clone">
            <summary>
            Creates a new object that is a copy of the current
            <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplateGroup" /> instance.
            </summary>
            <returns>A new object that is a copy of this
            <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplateGroup" /> instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplateGroup.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplateGroup.OnItemPropertyChanged(Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplatePropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplate.PropertyChanged" /> event.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplatePropertyChangedEventArgs" /> that
            contains the event data.</param>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplateGroup.Items">
            <summary>
            Gets a collection of form field templates that belong
            to this <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplateGroup" />.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplateGroup.BoundingBox">
            <summary>
            Gets or sets the bounding rectangle, in the device-independent pixels (1/96th inch),
            of the form field template on the template image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplateGroup.ValueFormat">
            <summary>
            Gets or sets the format string that should be applied to the value of recognized field group.
            </summary>
            <value>
            <b>null</b> - default formatting is used;
            NOT <b>null</b> - property value is used as format string for the value of
            recognized field group.<br />
            Default value is <b>null</b>.
            </value>
            <remarks>
            As an example of format string can be used the following string:<br />
            "{0}/{1}/{2}"<br />
            - this format string can be used in a group that contains day,
            month and year to compose a date in certain format.
            </remarks>
        </member>
        <member name="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplateCollection">
            <summary>
            Represents the collection of form field templates.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplateCollection.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplateCollection" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplateCollection.AddRange(Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplate[])">
            <summary>
            Adds the elements of the specified array to the end of the collection.
            </summary>
            <param name="items">The array whose elements should be added to the end of
            <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplateCollection" />.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplateCollection.ToArray">
            <summary>
            Copies the elements of <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplateCollection" /> to a new array.
            </summary>
            <returns>An array containing elements
            of <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplateCollection" />.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplateCollection.ClearItems">
            <summary>
            Removes all elements from the collection.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplateCollection.InsertItem(System.Int32,Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplate)">
            <summary>
            Inserts an element into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplate" /> to insert.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplateCollection.RemoveItem(System.Int32)">
            <summary>
            Removes the element at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index at which item should be removed.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplateCollection.SetItem(System.Int32,Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplate)">
            <summary>
            Replaces the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to replace.</param>
            <param name="item">The new value for the element at the specified index.</param>
        </member>
        <member name="E:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplateCollection.Changing">
            <summary>
            Occurs when the collection is changing.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplateCollection.Changed">
            <summary>
            Occurs when the collection is changed.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplateCollection.ItemPropertyChanged">
            <summary>
            Occurs when property of <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplate" /> from the collection is changed.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldGroup">
            <summary>
            Contains information about a group of recognized form fields.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldGroup.#ctor(Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplateGroup)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldGroup" /> class.
            </summary>
            <param name="fieldGroupTemplate">Group of form field templates.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldGroup.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldGroup.Items">
            <summary>
            Gets a collection of form fields that belong
            to this <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldGroup" />.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldGroup.Value">
            <summary>
            Gets the value of the form field group in a text form.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldGroup.Confidence">
            <summary>
            Gets the confidence of the recognition result.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if
            form field group is empty.</exception>
        </member>
        <member name="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldCollection">
            <summary>
            Represents the collection of recognized form fields.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldCollection.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldCollection" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldCollection.AddRange(Vintasoft.Imaging.FormsProcessing.FormRecognition.FormField[])">
            <summary>
            Adds the elements of the specified array to the end of the collection.
            </summary>
            <param name="items">The array whose elements should be added to the end of
            <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldCollection" />.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldCollection.ClearItems">
            <summary>
            Removes all elements from the collection.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldCollection.InsertItem(System.Int32,Vintasoft.Imaging.FormsProcessing.FormRecognition.FormField)">
            <summary>
            Inserts an element into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormField" /> to insert.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldCollection.RemoveItem(System.Int32)">
            <summary>
            Removes the element at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index at which item should be removed.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldCollection.SetItem(System.Int32,Vintasoft.Imaging.FormsProcessing.FormRecognition.FormField)">
            <summary>
            Replaces the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to replace.</param>
            <param name="item">The new value for the element at the specified index.</param>
        </member>
        <member name="E:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldCollection.Changing">
            <summary>
            Occurs when the collection is changing.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldCollection.Changed">
            <summary>
            Occurs when the collection is changed.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.Formatters.FormFieldTemplateFormatter">
            <summary>
            Provides the base abstract class for serialization and deserialization of form field templates.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.Formatters.FormFieldTemplateFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.Formatters.FormFieldTemplateFormatter" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.Formatters.FormFieldTemplateFormatter.Deserialize(System.IO.Stream)">
            <summary>
            Deserializes the data on the provided stream and reconstitutes the graph of objects.
            </summary>
            <param name="serializationStream">The stream that contains the data to deserialize.</param>
            <returns>The top object of the deserialized graph.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.Formatters.FormFieldTemplateFormatter.Serialize(System.IO.Stream,System.Object)">
            <summary>
            Serializes a <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormDocumentTemplate" /> or
            <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormPageTemplate" /> object to the provided stream.
            </summary>
            <param name="serializationStream">The stream where the formatter puts
            the serialized data.</param>
            <param name="graph">The <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormDocumentTemplate" /> or
            <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormPageTemplate" /> object to serialize. All nested field templates
            are automatically serialized.</param>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.Formatters.FormFieldTemplateFormatter.Binder">
            <summary>
            Gets or sets the SerializationBinder that performs type lookups during deserialization.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.Formatters.FormFieldTemplateFormatter.Context">
            <summary>
            Gets or sets the StreamingContext used for serialization and deserialization.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.Formatters.FormFieldTemplateFormatter.SurrogateSelector">
            <summary>
            Gets or sets the SurrogateSelector used by the current formatter.
            </summary>
            <remarks>
            This formatter does not allow to use the SurrogateSelector.
            </remarks>
        </member>
        <member name="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.Formatters.FormFieldTemplateSerializationBinder">
            <summary>
            Allows user to control the form field template loading process
            and select the form field template to load.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.Formatters.FormFieldTemplateSerializationBinder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.Formatters.FormFieldTemplateSerializationBinder" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.Formatters.FormFieldTemplateSerializationBinder.BindToType(System.String,System.String)">
            <summary>
            Controls the binding of a serialized object to a type.
            </summary>
            <param name="assemblyName">Specifies the System.Reflection.Assembly name of
            the serialized object.</param>
            <param name="typeName">Specifies the System.Type name of the serialized object.</param>
            <returns>The type of the object the formatter creates a new instance of.</returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            Thrown if the type of the object is not found.
            </exception>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.Formatters.FormFieldTemplateSerializationBinder.Default">
            <summary>
            Gets the default <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.Formatters.FormFieldTemplateSerializationBinder" />.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.Formatters.FormFieldTemplateSerializationBinder.Current">
            <summary>
            Gets the current <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.Formatters.FormFieldTemplateSerializationBinder" />.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.Formatters.FormFieldTemplateXmlFormatter">
            <summary>
            Serializes form page and document templates to and from XML format.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.Formatters.FormFieldTemplateXmlFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.Formatters.FormFieldTemplateXmlFormatter" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.Formatters.FormFieldTemplateXmlFormatter.Serialize(System.IO.Stream,System.Object)">
            <summary>
            Serializes a <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormPageTemplate" /> or
            <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormDocumentTemplate" /> object to the provided stream.
            </summary>
            <param name="serializationStream">The stream where the formatter puts
            the serialized data.</param>
            <param name="graph">The <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormPageTemplate" /> or
            <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormDocumentTemplate" /> object to serialize. All form field templates of
            <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormPageTemplate" /> object are automatically serialized.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>serializationStream</i>
            or <i>graph</i> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if formatter does not support
            serialization of provided type.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.Formatters.FormFieldTemplateXmlFormatter.Deserialize(System.IO.Stream)">
            <summary>
            Deserializes the data on the provided stream and reconstitutes the graph of objects.
            </summary>
            <param name="serializationStream">The stream that contains the data to deserialize.</param>
            <returns>The top object of the deserialized graph.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>serializationStream</i>
            is <b>null</b>.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.Formatters.FormFieldTemplateXmlFormatter.Context">
            <summary>
            Gets or sets the StreamingContext used for serialization and deserialization.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplateTable`1">
            <summary>
            Provides the abstract base class for a regular table that
            consists of uniformly distributed identical form field templates.
            </summary>
            <typeparam name="T">Element type of the table cell.</typeparam>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplateTable`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplateTable" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplateTable`1.#ctor(`0,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplateTable" /> class.
            </summary>
            <param name="cellTemplate">Template for a table cell.</param>
            <param name="rowCount">Count of rows in the table.</param>
            <param name="columnCount">Count of columns in the table.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if
            <i>cellTemplate</i> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <i>rowCount</i> or <i>columnCount</i> less or equal 0.
            </exception>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplateTable`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplateTable" /> class.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplateTable`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplateTable`1.RebuildTable(Vintasoft.Imaging.ObjectPropertyChangedEventArgs)">
            <summary>
            Rebuilds the table when some property of the table or cell template is changed.
            </summary>
            <param name="cellTemplateChangedEventArgs">
            The <see cref="T:Vintasoft.Imaging.ObjectPropertyChangedEventArgs" /> instance
            containing the event data when property of cell is template changed.
            Can be <b>null</b> if cell template is not changed.
            </param>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplateTable`1.BoundingBox">
            <summary>
            Gets or sets the bounding rectangle, in the device-independent pixels (1/96th inch),
            of the form field template on the template image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplateTable`1.CellTemplate">
            <summary>
            Gets or sets a template for a table cell.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplateTable`1.RowCount">
            <summary>
            Gets or sets the count of rows in the table.
            </summary>
            <value>Any positive value is possible.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            value is less or equal 0.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplateTable`1.ColumnCount">
            <summary>
            Gets or sets the count of columns in the table.
            </summary>
            <value>Any positive value is possible.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            value is less or equal 0.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplateTable`1.DistanceBetweenRows">
            <summary>
            Gets or sets the ratio of distance between two cell rows to cell height.
            </summary>
            <value>
            Valid values are 0 and any positive value:<br />
            <ul>
            <li>0 - there is no distance between cell rows</li>
            <li>from 0 to 1 - distance between cell rows is less than cell height</li>
            <li>1 - distance between cell rows is equal to cell height</li>
            <li>greater than 1 - distance between cell rows is greater than cell height</li>
            </ul>
            <br />
            Default value is <b>0</b> (i.e., no distance between rows of cells).
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            value is less than 0.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplateTable`1.DistanceBetweenColumns">
            <summary>
            Gets or sets the ratio of distance between two cell columns to cell width.
            </summary>
            <value>
            Valid values are 0 and any positive value:<br />
            <ul>
            <li>0 - there is no distance between cell columns</li>
            <li>from 0 to 1 - distance between cell columns is less than cell width</li>
            <li>1 - distance between cell columns is equal to cell width</li>
            <li>greater than 1 - distance between cell columns is greater than cell width</li>
            </ul>
            <br />
            Default value is <b>0</b> (i.e., no distance between cell columns).
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            value is less than 0.</exception>
        </member>
        <member name="E:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplateTable`1.BuildingFinished">
            <summary>
            Occurs when elements of the table are rebuilded.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplateTable">
            <summary>
            Contains information about a regular table that
            consists of uniformly distributed identical form field templates.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplateTable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplateTable" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplateTable.#ctor(Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplate,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplateTable" /> class.
            </summary>
            <param name="cellTemplate">Template for a table cell.</param>
            <param name="rowCount">Count of rows in the table.</param>
            <param name="columnCount">Count of columns in the table.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplateTable.Clone">
            <summary>
            Creates a new object that is a copy of the current
            <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplateTable" /> instance.
            </summary>
            <returns>A new object that is a copy of this
            <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplateTable" /> instance.</returns>
        </member>
        <member name="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTable`2">
            <summary>
            Provides the abstract base class for a regular table that
            consists of uniformly distributed recognized form fields.
            </summary>
            <typeparam name="TCellTemplate" />
            <typeparam name="TRecognizedField" />
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTable`2.#ctor(Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplateTable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTable`2" /> class.
            </summary>
            <param name="template">Table of form field templates.</param>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTable`2.Item(System.Int32,System.Int32)">
            <summary>
            Gets the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormField" /> at the specified row and column indices.
            </summary>
            <param name="row">The zero-based row index of the recognized field.</param>
            <param name="column">The zero-based column index of the recognized field.</param>
            <returns>The <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormField" /> at the specified row and column indices.</returns>
        </member>
        <member name="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormPage">
            <summary>
            Contains information about recognized form page.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormPage.#ctor(Vintasoft.Imaging.FormsProcessing.FormRecognition.FormPageTemplate)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormPage" /> class.
            </summary>
            <param name="template">Template of the page.</param>
        </member>
        <member name="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormPageTemplate">
            <summary>
            Contains information about form page template that is
            a group of all form field templates on an image.
            </summary>
            <example>
            Here is an example that demonstrates how to scan a document with blank form and create a form template.
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Scans the template document and creates page templates.
            ''' &lt;/summary&gt;
            ''' &lt;returns&gt;
            ''' A &lt;see cref="FormTemplateManager"/&gt; instance that contains
            ''' images of template document and the templates of document pages.
            ''' &lt;/returns&gt;
            Public Shared Function ScanAndCreatePageTemplates() As FormTemplateManager
                Dim templateManager As New FormTemplateManager()
            
                Console.WriteLine("Create TWAIN device manager...")
                Using deviceManager As New DeviceManager()
                    Console.WriteLine("Open TWAIN device manager...")
                    deviceManager.Open()
            
                    Dim device As Device = deviceManager.DefaultDevice
            
                    Dim acquireState As AcquireModalState
                    Do
                        Console.WriteLine("Acquire image from scanner...")
                        acquireState = device.AcquireModal()
                        If acquireState = AcquireModalState.ImageAcquired Then
                            ' create VintasoftImage from acquired image
                            Dim image As New VintasoftImage(device.AcquiredImage.GetAsBitmap(), True)
                            ' if image is not black-white
                            If image.PixelFormat &lt;&gt; PixelFormat.BlackWhite Then
                                ' convert to black-white image (1-bpp pixel format)
                                image.ConvertToBlackWhite()
                            End If
            
                            ' add page to PDF document
                            Console.WriteLine("Add page to template manager...")
                            templateManager.AddPageTemplate(image, New FormPageTemplate())
            
                            ' dispose the acquired image
                            device.AcquiredImage.Dispose()
                        End If
                    Loop While acquireState &lt;&gt; AcquireModalState.None
            
                    Console.WriteLine("Scan finished.")
                    Return templateManager
                End Using
            End Function
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Scans the template document and creates page templates.
            /// &lt;/summary&gt;
            /// &lt;returns&gt;
            /// A &lt;see cref="FormTemplateManager"/&gt; instance that contains
            /// images of template document and the templates of document pages.
            /// &lt;/returns&gt;
            public static FormTemplateManager ScanAndCreatePageTemplates()
            {
                FormTemplateManager templateManager = new FormTemplateManager();
            
                Console.WriteLine("Create TWAIN device manager...");
                using (DeviceManager deviceManager = new DeviceManager())
                {
                    Console.WriteLine("Open TWAIN device manager...");
                    deviceManager.Open();
            
                    Device device = deviceManager.DefaultDevice;
            
                    AcquireModalState acquireState;
                    do
                    {
                        Console.WriteLine("Acquire image from scanner...");
                        acquireState = device.AcquireModal();
                        if (acquireState == AcquireModalState.ImageAcquired)
                        {
                            // create VintasoftImage from acquired image
                            VintasoftImage image = new VintasoftImage(device.AcquiredImage.GetAsBitmap(), true);
                            // if image is not black-white
                            if (image.PixelFormat != PixelFormat.BlackWhite)
                                // convert to black-white image (1-bpp pixel format)
                                image.ConvertToBlackWhite();
            
                            // add page to PDF document
                            Console.WriteLine("Add page to template manager...");
                            templateManager.AddPageTemplate(image, new FormPageTemplate());
            
                            // dispose the acquired image
                            device.AcquiredImage.Dispose();
                        }
                    }
                    while (acquireState != AcquireModalState.None);
            
                    Console.WriteLine("Scan finished.");
                    return templateManager;
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormPageTemplate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormPageTemplate" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormPageTemplate.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormPageTemplate" /> class.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormPageTemplate.CompensateTemplateImageBackground(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Analyzes the template image and saves information required for compensation
            of background of template image during form field recognition.
            </summary>
            <param name="templateImage">The template image.</param>
            <remarks>
            Method clears information required for compensation
            of background of template image during form field recognition if
            <i>templateImage</i> is <b>null</b>.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormPageTemplate.Recognize(Vintasoft.Imaging.FormsProcessing.FormRecognition.FormRecognitionParams)">
            <summary>
            Recognizes a form field on the specified image.
            </summary>
            <param name="formRecognitionParams">Recognition parameters of a form field
            that specify a transform from <i>image</i> to the template image.</param>
            <returns>Recognized field.</returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <i>formRecognitionParams</i> is <b>null</b>.
            </exception>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormPageTemplate.Clone">
            <summary>
            Creates a new object that is a copy of the current
            <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormPageTemplate" /> instance.
            </summary>
            <returns>A new object that is a copy of this
            <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormPageTemplate" /> instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormPageTemplate.Deserialize(System.IO.Stream)">
            <summary>
            Deserializes the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormPageTemplate" /> from the specified stream.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream" /> that contains
            serialized object in the XML format.</param>
            <returns>The deserialized object.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>stream</i> is <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormPageTemplate.Deserialize(System.String)">
            <summary>
            Deserializes the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormPageTemplate" /> from the specified file.
            </summary>
            <param name="filename">The name of file that contains
            serialized object in the XML format.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormPageTemplate.Serialize(System.IO.Stream,Vintasoft.Imaging.FormsProcessing.FormRecognition.FormPageTemplate)">
            <summary>
            Serializes the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormPageTemplate" /> to the specified stream.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream" /> where
            the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormPageTemplate" /> must be serialized.</param>
            <param name="pageTemplate">The <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormPageTemplate" /> to serialize.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <i>stream</i> or <i>document</i> is <b>null</b>.
            </exception>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormPageTemplate.Serialize(System.String,Vintasoft.Imaging.FormsProcessing.FormRecognition.FormPageTemplate)">
            <summary>
            Serializes the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormPageTemplate" /> to the specified file.
            </summary>
            <param name="filename">The name of file where
            the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormPageTemplate" /> must be serialized.</param>
            <param name="pageTemplate">The <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormPageTemplate" /> to serialize.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormPageTemplate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormPageTemplate.ImageFileName">
            <summary>
            Gets or sets the file name associated with the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormPageTemplate" />.
            </summary>
            <value>
            Default value is <b>string.Empty</b>.
            </value>
            <remarks>
            This property contains user-defined string information
            related to this <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormPageTemplate" />.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormPageTemplate.ImagePageIndex">
            <summary>
            Gets or sets the page index associated with the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormPageTemplate" />.
            </summary>
            <value>
            Default value is <b>0</b>.
            </value>
            <remarks>
            This property contains user-defined numeric information
            related to this <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormPageTemplate" />.
            </remarks>
        </member>
        <member name="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormDocumentTemplate">
            <summary>
            Contains information about form templates of document pages.
            </summary>
            <example>
            Here is an example that demonstrates how to save a form template to a file
            and load the form template from the file.
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Saves the page templates as a document template to the specified stream.
            ''' &lt;/summary&gt;
            ''' &lt;param name="pageTemplates"&gt;The page templates.&lt;/param&gt;
            ''' &lt;param name="stream"&gt;The stream to save the document to.&lt;/param&gt;
            ''' &lt;remarks&gt;
            ''' Use the &lt;see cref="FormTemplateManager"/&gt; class to preserve links to template images.
            ''' &lt;/remarks&gt;
            Public Sub SavePageTemplatesAsDocumentTemplate(pageTemplates As FormPageTemplate(), stream As Stream)
                ' create new template document
                Dim documentTemplate As New FormDocumentTemplate()
                ' set arbitrary name
                documentTemplate.Name = "Combined document template"
                ' for each template page
                For Each pageTemplate As FormPageTemplate In pageTemplates
                    ' add to the document
                    documentTemplate.Pages.Add(pageTemplate)
                Next
                ' save the document to the stream
                FormDocumentTemplate.Serialize(stream, documentTemplate)
            End Sub
            
            ''' &lt;summary&gt;
            ''' Opens the document template and saves every page to a separate file.
            ''' &lt;/summary&gt;
            ''' &lt;param name="filename"&gt;The path to the file that contains the document template.&lt;/param&gt;
            ''' &lt;returns&gt;&lt;b&gt;true&lt;/b&gt; if the document template contains pages; otherwise, &lt;b&gt;false&lt;/b&gt;.&lt;/returns&gt;
            Public Shared Function OpenDocumentTemplateAndSaveEveryPage(filename As String) As Boolean
                ' deserialize the document template
                Dim documentTemplate As FormDocumentTemplate = FormDocumentTemplate.Deserialize(filename)
            
                If documentTemplate.Pages.Count = 0 Then
                    Return False
                End If
                ' for each page of the document template
                For i As Integer = 0 To documentTemplate.Pages.Count - 1
                    ' compose a filename
                    Dim pageFilename As String = String.Format("{0}{1}_page{2}{3}", Path.GetDirectoryName(filename), Path.GetFileNameWithoutExtension(filename), i + 1, Path.GetExtension(filename))
                    ' save page template to a file
                    FormPageTemplate.Serialize(pageFilename, documentTemplate.Pages(i))
                Next
            
                Return True
            End Function
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Saves the page templates as a document template to the specified stream.
            /// &lt;/summary&gt;
            /// &lt;param name="pageTemplates"&gt;The page templates.&lt;/param&gt;
            /// &lt;param name="stream"&gt;The stream to save the document to.&lt;/param&gt;
            /// &lt;remarks&gt;
            /// Use the &lt;see cref="FormTemplateManager"/&gt; class to preserve links to template images.
            /// &lt;/remarks&gt;
            public void SavePageTemplatesAsDocumentTemplate(FormPageTemplate[] pageTemplates, Stream stream)
            {
                // create new template document
                FormDocumentTemplate documentTemplate = new FormDocumentTemplate();
                // set arbitrary name
                documentTemplate.Name = "Combined document template";
                // for each template page
                foreach (FormPageTemplate pageTemplate in pageTemplates)
                {
                    // add to the document
                    documentTemplate.Pages.Add(pageTemplate);
                }
                // save the document to the stream
                FormDocumentTemplate.Serialize(stream, documentTemplate);
            }
            
            /// &lt;summary&gt;
            /// Opens the document template and saves every page to a separate file.
            /// &lt;/summary&gt;
            /// &lt;param name="filename"&gt;The path to the file that contains the document template.&lt;/param&gt;
            /// &lt;returns&gt;&lt;b&gt;true&lt;/b&gt; if the document template contains pages; otherwise, &lt;b&gt;false&lt;/b&gt;.&lt;/returns&gt;
            public static bool OpenDocumentTemplateAndSaveEveryPage(string filename)
            {
                // deserialize the document template
                FormDocumentTemplate documentTemplate = FormDocumentTemplate.Deserialize(filename);
            
                if (documentTemplate.Pages.Count == 0)
                    return false;
                // for each page of the document template
                for (int i = 0; i &lt; documentTemplate.Pages.Count; i++)
                {
                    // compose a filename
                    string pageFilename = string.Format(
                        "{0}{1}_page{2}{3}",
                        Path.GetDirectoryName(filename),
                        Path.GetFileNameWithoutExtension(filename),
                        i + 1,
                        Path.GetExtension(filename));
                    // save page template to a file
                    FormPageTemplate.Serialize(pageFilename, documentTemplate.Pages[i]);
                }
            
                return true;
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormDocumentTemplate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormDocumentTemplate" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormDocumentTemplate.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormDocumentTemplate" /> class.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormDocumentTemplate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormDocumentTemplate.Deserialize(System.IO.Stream)">
            <summary>
            Deserializes the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormDocumentTemplate" /> from the specified stream.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream" /> that contains
            serialized object in the XML format.</param>
            <returns>The deserialized object.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>stream</i> is <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormDocumentTemplate.Deserialize(System.String)">
            <summary>
            Deserializes the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormDocumentTemplate" /> from the specified file.
            </summary>
            <param name="filename">The name of file that contains
            serialized object in the XML format.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormDocumentTemplate.Serialize(System.IO.Stream,Vintasoft.Imaging.FormsProcessing.FormRecognition.FormDocumentTemplate)">
            <summary>
            Serializes the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormDocumentTemplate" /> to the specified stream.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream" /> where
            the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormDocumentTemplate" /> must be serialized.</param>
            <param name="document">The <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormDocumentTemplate" /> to serialize.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <i>stream</i> or <i>document</i> is <b>null</b>.
            </exception>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormDocumentTemplate.Serialize(System.String,Vintasoft.Imaging.FormsProcessing.FormRecognition.FormDocumentTemplate)">
            <summary>
            Serializes the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormDocumentTemplate" /> to the specified file.
            </summary>
            <param name="filename">The name of file where
            the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormDocumentTemplate" /> must be serialized.</param>
            <param name="document">The <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormDocumentTemplate" /> to serialize.</param>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormDocumentTemplate.FileName">
            <summary>
            Gets or sets the filename of the document.
            </summary>
            <remarks>
            This property is not serialized.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormDocumentTemplate.Name">
            <summary>
            Gets or sets the name of template document.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormDocumentTemplate.Pages">
            <summary>
            Gets the list of page templates.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldRecognitionCommand">
            <summary>
            Recognizes form fields on a black-white image.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldRecognitionCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldRecognitionCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldRecognitionCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldRecognitionCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldRecognitionCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldRecognitionCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldRecognitionCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Processes the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            Always returns <b>false</b> because this command does not change the <i>image</i>.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldRecognitionCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldRecognitionCommand.CanModifyImage">
            <summary>
            Gets the value indicating whether this command modifies image.
            </summary>
            <value>
            Always returns <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldRecognitionCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
            <value>
            Supported formats: BlackWhite.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldRecognitionCommand.TemplateResolution">
            <summary>
            Gets or sets the resolution of the template image.
            </summary>
            <value>
            If the resolution is empty, template image is considered
            to have the same resolution as the filled form image;
            otherwise, the actual value is used.<br />
            Default value is <see cref="T:Vintasoft.Imaging.Resolution" />.Empty.
            </value>
            <remarks>
            The value of this property affects the positioning
            of the fields on the filled form image.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldRecognitionCommand.FieldTemplates">
            <summary>
            Gets or sets the collection of field templates.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldRecognitionCommand.ImageTransformMatrix">
            <summary>
            Gets or sets the matrix of affine transformation
            from the filled image to the template image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldRecognitionCommand.RecognizedFields">
            <summary>
            Gets the collection of form fields which are recognized on the filled image.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormRecognitionParams">
            <summary>
            Contains recognition parameters of a form field.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormRecognitionParams.#ctor(Vintasoft.Imaging.ImageSize,Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.Utils.AffineMatrix)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormRecognitionParams" /> class.
            </summary>
            <param name="templateSize">Size of the template image.</param>
            <param name="image">The image on which the form field shall be recognized.</param>
            <param name="imageTransformMatrix">The matrix of affine transformation
            from the filled image to the template image.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if any of
            <i>templateSize</i>, <i>image</i> or <i>imageTransformMatrix</i> is <b>null</b>.
            </exception>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormRecognitionParams.TemplateSize">
            <summary>
            Gets the size of the template image.
            </summary>
            <remarks>
            The dimensions and the resolution of the template image are necessary for correct mapping
            the region of the field from template image to the filled form image.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormRecognitionParams.Image">
            <summary>
            Gets the image (filled image) on which the form field shall be recognized.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormRecognitionParams.ImageTransformMatrix">
            <summary>
            Gets the matrix of affine transformation
            from the filled image to the template image.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormTemplateManager">
            <summary>
            Provides the synchronised link between images of pages templates and pages templates.
            </summary>
            <example>
            Here is an example that demonstrates how to load document template from a file,
            get number of template images, add new page template, remove first page template
            and save document template with new name.
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Opens a document template, writes count of template images, adds new page template,
            ''' removes first page template and saves document template with new name.
            ''' &lt;/summary&gt;
            Public Shared Sub FormTemplateManagerExample()
                ' create a form template manager
                Dim templateManager As New FormTemplateManager()
                ' load templates from a document
                templateManager.LoadFromDocument("C:\templateDocument.fdt")
                ' write template images count
                Console.WriteLine(String.Format("Count of template images: {0}", templateManager.TemplateImages.Count))
            
                ' create new page template
                Dim pageTemplate As New FormPageTemplate()
                ' set the name of the page template
                pageTemplate.Name = "Added page template"
                ' add new page template linked with template image
                templateManager.AddPageTemplate(New VintasoftImage("C:\formTemplate.tif"), pageTemplate)
            
                ' remove first page template
                templateManager.TemplateImages.RemoveAt(0)
                ' change name of the document
                templateManager.DocumentName = String.Format("{0} - revised", templateManager.DocumentName)
                ' save as a document template
                templateManager.SaveToDocument("C:\templateDocument_revised.fdt")
            End Sub
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Opens a document template, writes count of template images, adds new page template,
            /// removes first page template and saves document template with new name.
            /// &lt;/summary&gt;
            public static void FormTemplateManagerExample()
            {
                // create a form template manager
                FormTemplateManager templateManager = new FormTemplateManager();
                // load templates from a document
                templateManager.LoadFromDocument(@"C:\templateDocument.fdt");
                // write template images count
                Console.WriteLine(string.Format("Count of template images: {0}", templateManager.TemplateImages.Count));
            
                // create new page template
                FormPageTemplate pageTemplate = new FormPageTemplate();
                // set the name of the page template
                pageTemplate.Name = "Added page template";
                // add new page template linked with template image
                templateManager.AddPageTemplate(new VintasoftImage(@"C:\formTemplate.tif"), pageTemplate);
            
                // remove first page template
                templateManager.TemplateImages.RemoveAt(0);
                // change name of the document
                templateManager.DocumentName = string.Format("{0} - revised", templateManager.DocumentName);
                // save as a document template
                templateManager.SaveToDocument(@"C:\templateDocument_revised.fdt");
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormTemplateManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormTemplateManager" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormTemplateManager.ContainsPageTemplate(Vintasoft.Imaging.FormsProcessing.FormRecognition.FormPageTemplate)">
            <summary>
            Determines whether this <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormTemplateManager" /> contains
            the specified page template.
            </summary>
            <param name="page">The page template.</param>
            <returns>
            <b>true</b> if <i>page</i> is found in this <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormTemplateManager" />;
            otherwise, <b>false</b>.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if
            <i>page</i> is <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormTemplateManager.ContainsTemplateImage(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Determines whether the template manager contains the specified template image.
            </summary>
            <param name="image">The template image.</param>
            <returns>
            <b>true</b> if <i>image</i> is found in this <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormTemplateManager" />;
            otherwise, <b>false</b>.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if
            <i>image</i> is <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormTemplateManager.GetPageTemplate(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Returns a page template associated with specified image of page template.
            </summary>
            <param name="image">An image of page template.</param>
            <returns>
            The template page.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if
            <i>image</i> is <b>null</b>.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown if
            <i>image</i> is not found.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormTemplateManager.GetTemplateImage(Vintasoft.Imaging.FormsProcessing.FormRecognition.FormPageTemplate)">
            <summary>
            Returns an image associated with specified page template.
            </summary>
            <param name="page">A page template.</param>
            <returns>An image associated with specified page template.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if
            <i>page</i> is <b>null</b>.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown if
            <i>page</i> is not found.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormTemplateManager.AddPageTemplate(Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.FormsProcessing.FormRecognition.FormPageTemplate)">
            <summary>
            Adds an image and a page template, which is associated with image.
            </summary>
            <param name="image">Template image.</param>
            <param name="page">Page template associated with <i>image</i>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if
            <i>image</i> or <i>page</i> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if
            template manager already contains <i>image</i> OR
            template manager already contains <i>page</i>.
            </exception>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormTemplateManager.SetPageTemplate(Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.FormsProcessing.FormRecognition.FormPageTemplate)">
            <summary>
            Sets a page template associated with specified image.
            </summary>
            <param name="image">Template image.</param>
            <param name="page">Page template associated with <i>image</i>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if
            <i>image</i> or <i>page</i> is <b>null</b>.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown if
            <i>image</i> is not found.</exception>
            <exception cref="T:System.ArgumentException">Thrown if
            template manager already contains <i>page</i>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormTemplateManager.AddPageTemplate(Vintasoft.Imaging.FormsProcessing.FormRecognition.FormPageTemplate)">
            <summary>
            Adds the specified page template to the manager and
            loads image of page template.
            </summary>
            <param name="page">A page template to add.</param>
            <remarks>
            Page template stores information about location of template image.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormTemplateManager.AddPageTemplatesFromDocument(Vintasoft.Imaging.FormsProcessing.FormRecognition.FormDocumentTemplate)">
            <summary>
            Adds pages templates from specified document template to the manager and
            loads images of pages templates.
            </summary>
            <param name="document">The document.</param>
            <remarks>
            Document template stores information about location of template images.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormTemplateManager.AddPageTemplatesToDocument(Vintasoft.Imaging.FormsProcessing.FormRecognition.FormDocumentTemplate)">
            <summary>
            Adds all page templates of the manager to the specified document template.
            </summary>
            <param name="document">The document where
            all page templates of this manager must be added.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormTemplateManager.RemovePage(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Removes the specified image and page template, associated with image, from the manager.
            </summary>
            <param name="image">Image to remove.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormTemplateManager.SaveToDocument(Vintasoft.Imaging.FormsProcessing.FormRecognition.FormDocumentTemplate)">
            <summary>
            Saves the current state of the manager to the specified document template.
            </summary>
            <param name="document">The document, where
            the current state of the manager must be saved.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormTemplateManager.SaveToDocument(System.IO.Stream)">
            <summary>
            Saves the current state of the manager to the document template.
            </summary>
            <param name="stream">The stream, where
            the current state of the manager must be saved.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormTemplateManager.SaveToDocument(System.String)">
            <summary>
            Saves the current state of the manager to the document template.
            </summary>
            <param name="filename">The name of file, where
            the current state of the manager must be saved.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormTemplateManager.LoadFromDocument(Vintasoft.Imaging.FormsProcessing.FormRecognition.FormDocumentTemplate)">
            <summary>
            Loads page templates from the specified document template and
            adds loaded page templates to the manager.
            </summary>
            <param name="document">The document, which contains page templates.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormTemplateManager.LoadFromDocument(System.IO.Stream)">
            <summary>
            Loads page templates from the document template and
            adds loaded page templates to the manager.
            </summary>
            <param name="stream">The stream, which contains page templates.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormTemplateManager.LoadFromDocument(System.String)">
            <summary>
            Loads page templates from the document template and
            adds loaded page templates to the manager.
            </summary>
            <param name="filename">The name of file, which contains page templates.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormTemplateManager.CompensateTemplateImageBackground(Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplate)">
            <summary>
            Analyzes the template image and saves information required for compensation
            of background of template image during form field recognition.
            </summary>
            <param name="templateImage">The template image.</param>
            <param name="fieldTemplate">The field template.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if
            <i>fieldTemplate</i> is <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormTemplateManager.CreateImageFromPageTemplate(Vintasoft.Imaging.FormsProcessing.FormRecognition.FormDocumentTemplate,Vintasoft.Imaging.FormsProcessing.FormRecognition.FormPageTemplate)">
            <summary>
            Creates/loads an image associated with the page template.
            </summary>
            <param name="document">The document template.</param>
            <param name="page">The page template.</param>
            <returns>Image associated with page template.</returns>
            <exception cref="T:System.IO.InvalidDataException">Thrown if
            page template does not contain correct file name.</exception>
            <remarks>
            This method can be used if algorithm that creates/loads an image must be overridden,
            for example, image must be loaded from a database.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormTemplateManager.CreatePageTemplateFromImage(Vintasoft.Imaging.FormsProcessing.FormRecognition.FormDocumentTemplate,Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Creates an empty page template for specified template image.
            </summary>
            <param name="document">The document template.</param>
            <param name="image">The template image.</param>
            <returns>An empty page template for the template image.</returns>
            <exception cref="T:System.NotImplementedException">
            Thrown if <i>image</i>'s source type is not <see cref="T:Vintasoft.Imaging.ImageSourceType" />.File.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormTemplateManager.TemplateImages">
            <summary>
            Gets or sets an image collection of pages templates.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if value is <b>null</b>.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormTemplateManager.DocumentName">
            <summary>
            Gets or sets the name of the current document.
            </summary>
            <value>
            The name of the document.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldTemplate">
            <summary>
            Provides the abstract base class that contains information about OMR field template 
            that has an area that must be completely or partly filled.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldTemplate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldTemplate" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldTemplate.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldTemplate" /> class.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldTemplate.CompensateTemplateImageBackground(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Analyzes the template image and saves information required for compensation
            of background of template image during form field recognition.
            </summary>
            <param name="templateImage">The template image.</param>
            <remarks>
            Method clears information required for compensation
            of background of template image during form field recognition if
            <i>templateImage</i> is <b>null</b>.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldTemplate.Recognize(Vintasoft.Imaging.FormsProcessing.FormRecognition.FormRecognitionParams)">
            <summary>
            Recognizes a form field on the specified image.
            </summary>
            <param name="formRecognitionParams">Recognition parameters of a form field
            that specify a transform from <i>image</i> to the template image.</param>
            <returns>Recognized field.</returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <i>formRecognitionParams</i> is <b>null</b>.
            </exception>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldTemplate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldTemplate.GetFilledPixelsPercent(Vintasoft.Imaging.FormsProcessing.FormRecognition.FormRecognitionParams)">
            <summary>
            Returns the black pixel density of the field's area on specified image.
            </summary>
            <param name="formRecognitionParams">Recognition parameters of a form field.</param>
            <returns>Black pixel density of the field on specified image</returns>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldTemplate.CreateOmrField(Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldState,System.Single,System.Single)">
            <summary>
            Creates an <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrField" /> instance using specified
            filled state, black pixel density and confidence of recognition.
            </summary>
            <param name="state">Filled state of the recognized OMR field.</param>
            <param name="filledPercent">Black pixel density of the recognized OMR field.</param>
            <param name="confidence">Confidence of recognition of the recognized OMR field.</param>
            <returns>
            An instance of a class derived from the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrField" /> class.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldTemplate.Threshold">
            <summary>
            Gets or sets a threshold value of black pixel density of the field
            for determining filled state of the field.
            </summary>
            <value>
            Valid values are from 0 to 1.
            Default value is <b>0.1</b>.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            value is less than 0 or greater than 1.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldTemplate.UnfilledThreshold">
            <summary>
            Gets or sets a threshold value of black pixel density of the field
            for determining whether the field is unfilled.
            </summary>
            <value>
            Valid values are from 0 to 1.
            Default value is <b>0.1</b>.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            value is less than 0 or greater than 1.</exception>
            <remarks>
            The state of field is considered undefined if
            value of black pixel density is between <see cref="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldTemplate.FilledThreshold" /> and
            <see cref="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldTemplate.UnfilledThreshold" />.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldTemplate.FilledThreshold">
            <summary>
            Gets or sets a threshold value of black pixel density of the field
            for determining whether the field is filled.
            </summary>
            <value>
            Valid values are from 0 to 1.
            Default value is <b>0.1</b>.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            value is less than 0 or greater than 1.</exception>
            <remarks>
            The state of field is considered undefined if
            value of black pixel density is between <see cref="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldTemplate.FilledThreshold" /> and
            <see cref="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldTemplate.UnfilledThreshold" />.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldTemplate.FilledPercentOnTemplate">
            <summary>
            Gets or sets the black pixel density
            of the field on the template image.
            </summary>
            <value>
            Valid values are from 0 to 1.
            Default value is <b>0</b>.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            value is less than 0 or greater than 1.</exception>
            <remarks>
            The value of this property acts like a lower bound of the density range when applying
            thresholds (<see cref="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldTemplate.Threshold" />, <see cref="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldTemplate.UnfilledThreshold" /> and
            <see cref="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldTemplate.FilledThreshold" />).
            The <see cref="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldTemplate.CompensateTemplateImageBackground(Vintasoft.Imaging.VintasoftImage)" /> method must be called for
            calculating the actual value of the black pixel density on the template image.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldTemplate.UnfilledValue">
            <summary>
            Gets or sets a string, which will be used as value of recognized field,
            if the recognized field is considered unfilled.
            </summary>
            <value>
            Default value is "Unfilled".
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldTemplate.FilledValue">
            <summary>
            Gets or sets a string, which will be used as value of recognized field,
            if the recognized field is considered filled.
            </summary>
            <value>
            Default value is "Filled".
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldTemplate.UndefinedValue">
            <summary>
            Gets or sets a string, which will be used as value of recognized field,
            if the recognized field is considered undefined.
            </summary>
            <value>
            Default value is "Filled".
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrEllipticalFieldTemplate">
            <summary>
            Contains information about OMR field template that
            has elliptical area that must be completely or partly filled.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrEllipticalFieldTemplate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrEllipticalFieldTemplate" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrEllipticalFieldTemplate.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrEllipticalFieldTemplate" /> class.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrEllipticalFieldTemplate.Clone">
            <summary>
            Creates a new object that is a copy of the current
            <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrEllipticalFieldTemplate" /> instance.
            </summary>
            <returns>A new object that is a copy of this
            <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrEllipticalFieldTemplate" /> instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrEllipticalFieldTemplate.GetFilledPixelsPercent(Vintasoft.Imaging.FormsProcessing.FormRecognition.FormRecognitionParams)">
            <summary>
            Returns the black pixel density of the field's area on specified image.
            </summary>
            <param name="formRecognitionParams">Recognition parameters of a form field.</param>
            <returns>Black pixel density of the field on specified image</returns>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrEllipticalFieldTemplate.CreateOmrField(Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldState,System.Single,System.Single)">
            <summary>
            Creates an <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrField" /> instance using specified
            filled state, black pixel density and confidence of recognition.
            </summary>
            <param name="state">Filled state of the recognized OMR field.</param>
            <param name="filledPercent">Black pixel density of the recognized OMR field.</param>
            <param name="confidence">Confidence of recognition of the recognized OMR field.</param>
            <returns>
            An instance of a class derived from the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrField" /> class.
            </returns>
        </member>
        <member name="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrEllipticalField">
            <summary>
            Contains information about recognized <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrEllipticalFieldTemplate" />.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrField">
            <summary>
            Provides the abstract base class that contains information
            about recognized <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldTemplate" />.
            </summary>
            <example>
            Here is an example that demonstrates how to identify and recognize a form, that contains marks.
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Recognizes the form with OMR fields.
            ''' &lt;/summary&gt;
            ''' &lt;param name="formRecognitionManager"&gt;The form recognition manager.&lt;/param&gt;
            ''' &lt;param name="image"&gt;The image.&lt;/param&gt;
            Public Shared Sub RecognizeFormWithOmrFields(formRecognitionManager As FormRecognitionManager, image As VintasoftImage)
                ' recognize the image
                Dim recognitionResult As FormRecognitionResult = formRecognitionManager.Recognize(image)
            
                ' get the result of image comparison
                Dim imageCompareResult As ImageImprintCompareResult = recognitionResult.TemplateMatchingResult.ImageCompareResult
                ' if result is not reliable
                If Not imageCompareResult.IsReliable Then
                    ' matching template is not found
                    Console.WriteLine("Matching template is not found.")
                Else
                    ' get recognized page
                    Dim recognizedPage As FormPage = recognitionResult.RecognizedPage
                    ' get form field count
                    If recognizedPage.Items.Count = 0 Then
                        Console.WriteLine("No form fields were recognized.")
                    Else
                        Console.WriteLine(String.Format("Recognized form field count: {0}", recognizedPage.Items.Count))
                        ' for each recognized form field
                        For Each recognizedField As FormField In recognizedPage.Items
                            If TypeOf recognizedField Is OmrField Then
                                Dim omrField As OmrField = DirectCast(recognizedField, OmrField)
                                ' write field info
                                Console.WriteLine(String.Format("  OMR field: name: {0}; state: {1}; confidence: {2:F1}%", omrField.Name, omrField.State, omrField.Confidence * 100))
                            End If
                        Next
                    End If
                End If
            End Sub
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Recognizes the form with OMR fields.
            /// &lt;/summary&gt;
            /// &lt;param name="formRecognitionManager"&gt;The form recognition manager.&lt;/param&gt;
            /// &lt;param name="image"&gt;The image.&lt;/param&gt;
            public static void RecognizeFormWithOmrFields(
                FormRecognitionManager formRecognitionManager,
                VintasoftImage image)
            {
                // recognize the image
                FormRecognitionResult recognitionResult = formRecognitionManager.Recognize(image);
            
                // get the result of image comparison
                ImageImprintCompareResult imageCompareResult =
                    recognitionResult.TemplateMatchingResult.ImageCompareResult;
                // if result is not reliable
                if (!imageCompareResult.IsReliable)
                {
                    // matching template is not found
                    Console.WriteLine("Matching template is not found.");
                }
                else
                {
                    // get recognized page
                    FormPage recognizedPage = recognitionResult.RecognizedPage;
                    // get form field count
                    if (recognizedPage.Items.Count == 0)
                    {
                        Console.WriteLine("No form fields were recognized.");
                    }
                    else
                    {
                        Console.WriteLine(string.Format(
                            "Recognized form field count: {0}",
                            recognizedPage.Items.Count));
                        // for each recognized form field
                        foreach (FormField recognizedField in recognizedPage.Items)
                        {
                            if (recognizedField is OmrField)
                            {
                                OmrField omrField = (OmrField)recognizedField;
                                // write field info
                                Console.WriteLine(string.Format(
                                    "  OMR field: name: {0}; state: {1}; confidence: {2:F1}%",
                                    omrField.Name,
                                    omrField.State,
                                    omrField.Confidence * 100));
                            }
                        }
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrField.#ctor(Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldTemplate,Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldState,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrField" /> class.
            </summary>
            <param name="fieldTemplate">Template of the form field.</param>
            <param name="state">State of OMR field.</param>
            <param name="filledPercent">Percentage of fillable area
            of OMR field that is actually filled.</param>
            <param name="confidence">The recognition confidence.</param>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrField.State">
            <summary>
            Gets the state of OMR field.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrField.Value">
            <summary>
            Gets the value of the form field in a text form.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrField.Confidence">
            <summary>
            Gets the confidence of the recognition result.
            </summary>
            <value>
            Possible values are from 0.0 (0%) to 1.0 (100%).
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrField.FilledPercent">
            <summary>
            Gets the percentage of fillable area
            of OMR field that is actually filled.
            </summary>
            <value>
            Possible values are from 0.0 (0%) to 1.0 (100%).
            </value>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrEllipticalField.#ctor(Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrEllipticalFieldTemplate,Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldState,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrEllipticalField" /> class.
            </summary>
            <param name="fieldTemplate">Template of the form field.</param>
            <param name="state">State of OMR field.</param>
            <param name="filledPercent">Percentage of fillable area
            of OMR field that is actually filled.</param>
            <param name="confidence">The recognition confidence.</param>
        </member>
        <member name="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldState">
            <summary>
            Specifies possible states of OMR field.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldState.Filled">
            <summary>
            OMR field is filled.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldState.Unfilled">
            <summary>
            OMR field is unfilled.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldState.Undefined">
            <summary>
            OMR field state is undefined.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldTable">
            <summary>
            Contains information about an OMR field regular table that
            consists of uniformly distributed recognized OMR fields.
            </summary>
            <example>
            Here is an example that demonstrates how to identify and recognize a form
            that contains a group of marks (OMR bubbles).
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Recognizes the form with a group of marks (OMR bubbles).
            ''' &lt;/summary&gt;
            ''' &lt;param name="formRecognitionManager"&gt;The form recognition manager.&lt;/param&gt;
            ''' &lt;param name="image"&gt;The image.&lt;/param&gt;
            Public Shared Sub RecognizeFormWithOmrFieldTables(formRecognitionManager As FormRecognitionManager, image As VintasoftImage)
                ' recognize the image
                Dim recognitionResult As FormRecognitionResult = formRecognitionManager.Recognize(image)
            
                ' get the result of image comparison
                Dim imageCompareResult As ImageImprintCompareResult = recognitionResult.TemplateMatchingResult.ImageCompareResult
                ' if result is not reliable
                If Not imageCompareResult.IsReliable Then
                    ' matching template is not found
                    Console.WriteLine("Matching template is not found.")
                Else
                    ' get recognized page
                    Dim recognizedPage As FormPage = recognitionResult.RecognizedPage
                    ' get form field count
                    If recognizedPage.Items.Count = 0 Then
                        Console.WriteLine("No form fields were recognized.")
                    Else
                        Console.WriteLine(String.Format("Recognized form field count: {0}", recognizedPage.Items.Count))
                        ' for each recognized form field
                        For Each recognizedField As FormField In recognizedPage.Items
                            If TypeOf recognizedField Is OmrFieldTable Then
                                Dim omrFieldTable As OmrFieldTable = DirectCast(recognizedField, OmrFieldTable)
                                Dim omrTemplateTable As OmrFieldTemplateTable = TryCast(omrFieldTable.FieldTemplate, OmrFieldTemplateTable)
                                ' write field info
                                Console.WriteLine(String.Format("  OMR field table: name: {0}; value: {1}; confidence: {2:F1}%; row count: {3}; column count: {4}", omrFieldTable.Name, omrFieldTable.Value, omrFieldTable.Confidence * 100, omrTemplateTable.RowCount, omrTemplateTable.ColumnCount))
                            End If
                        Next
                    End If
                End If
            End Sub
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Recognizes the form with a group of marks (OMR bubbles).
            /// &lt;/summary&gt;
            /// &lt;param name="formRecognitionManager"&gt;The form recognition manager.&lt;/param&gt;
            /// &lt;param name="image"&gt;The image.&lt;/param&gt;
            public static void RecognizeFormWithOmrFieldTables(
                FormRecognitionManager formRecognitionManager,
                VintasoftImage image)
            {
                // recognize the image
                FormRecognitionResult recognitionResult = formRecognitionManager.Recognize(image);
            
                // get the result of image comparison
                ImageImprintCompareResult imageCompareResult =
                    recognitionResult.TemplateMatchingResult.ImageCompareResult;
                // if result is not reliable
                if (!imageCompareResult.IsReliable)
                {
                    // matching template is not found
                    Console.WriteLine("Matching template is not found.");
                }
                else
                {
                    // get recognized page
                    FormPage recognizedPage = recognitionResult.RecognizedPage;
                    // get form field count
                    if (recognizedPage.Items.Count == 0)
                    {
                        Console.WriteLine("No form fields were recognized.");
                    }
                    else
                    {
                        Console.WriteLine(string.Format(
                            "Recognized form field count: {0}",
                            recognizedPage.Items.Count));
                        // for each recognized form field
                        foreach (FormField recognizedField in recognizedPage.Items)
                        {
                            if (recognizedField is OmrFieldTable)
                            {
                                OmrFieldTable omrFieldTable = (OmrFieldTable)recognizedField;
                                OmrFieldTemplateTable omrTemplateTable =
                                    omrFieldTable.FieldTemplate as OmrFieldTemplateTable;
                                // write field info
                                Console.WriteLine(string.Format(
                                    "  OMR field table: name: {0}; value: {1}; confidence: {2:F1}%; row count: {3}; column count: {4}",
                                    omrFieldTable.Name,
                                    omrFieldTable.Value,
                                    omrFieldTable.Confidence * 100,
                                    omrTemplateTable.RowCount,
                                    omrTemplateTable.ColumnCount));
                            }
                        }
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldTable.#ctor(Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldTemplateTable)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldTable" /> class.
            </summary>
            <param name="template">Table of OMR field templates.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldTable.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldTable.Value">
            <summary>
            Gets the recognized value of the table.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrRectangularField">
            <summary>
            Contains information about recognized <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrRectangularFieldTemplate" />.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrRectangularField.#ctor(Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrRectangularFieldTemplate,Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldState,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrRectangularField" /> class.
            </summary>
            <param name="fieldTemplate">Template of the form field.</param>
            <param name="state">State of OMR field.</param>
            <param name="filledPercent">Percentage of fillable area
            of OMR field that is actually filled.</param>
            <param name="confidence">The recognition confidence.</param>
        </member>
        <member name="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrRectangularFieldTemplate">
            <summary>
            Contains information about OMR field template that
            has rectangular area that must be completely or partly filled.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrRectangularFieldTemplate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrRectangularFieldTemplate" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrRectangularFieldTemplate.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrRectangularFieldTemplate" /> class.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrRectangularFieldTemplate.Clone">
            <summary>
            Creates a new object that is a copy of the current
            <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrRectangularFieldTemplate" /> instance.
            </summary>
            <returns>A new object that is a copy of this
            <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrRectangularFieldTemplate" /> instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrRectangularFieldTemplate.GetFilledPixelsPercent(Vintasoft.Imaging.FormsProcessing.FormRecognition.FormRecognitionParams)">
            <summary>
            Returns the black pixel density of the field's area on specified image.
            </summary>
            <param name="formRecognitionParams">Recognition parameters of a form field.</param>
            <returns>Black pixel density of the field on specified image</returns>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrRectangularFieldTemplate.CreateOmrField(Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldState,System.Single,System.Single)">
            <summary>
            Creates an <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrField" /> instance using specified
            filled state, black pixel density and confidence of recognition.
            </summary>
            <param name="state">Filled state of the recognized OMR field.</param>
            <param name="filledPercent">Black pixel density of the recognized OMR field.</param>
            <param name="confidence">Confidence of recognition of the recognized OMR field.</param>
            <returns>
            An instance of a class derived from the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrField" /> class.
            </returns>
        </member>
        <member name="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrTableOrientation">
            <summary>
            Specifies possible orientations of OMR field table.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrTableOrientation.Horizontal">
            <summary>
            Table is oriented horizontally, i.e. each table row defines the single result
            (letter, number, one of possible answers to a question, etc).
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrTableOrientation.Vertical">
            <summary>
            Table is oriented vertically, i.e. each table column defines the single result
            (letter, number, one of possible answers to a question, etc).
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldTemplateTable">
            <summary>
            Contains information about an OMR field template regular table that
            consists of uniformly distributed identical OMR field templates.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldTemplateTable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldTemplateTable" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldTemplateTable.#ctor(Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldTemplate,System.Int32,System.Int32,Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrTableOrientation)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldTemplateTable" /> class.
            </summary>
            <param name="cellTemplate">Template for a table cell.</param>
            <param name="rowCount">Count of rows in the table.</param>
            <param name="columnCount">Count of columns in the table.</param>
            <param name="orientation">The orientation of the table.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldTemplateTable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldTemplateTable" /> class.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldTemplateTable.Recognize(Vintasoft.Imaging.FormsProcessing.FormRecognition.FormRecognitionParams)">
            <summary>
            Recognizes a form field on the specified image.
            </summary>
            <param name="formRecognitionParams">Recognition parameters of a form field
            that specify a transform from <i>image</i> to the template image.</param>
            <returns>Recognized field.</returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <i>formRecognitionParams</i> is <b>null</b>.
            </exception>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldTemplateTable.Clone">
            <summary>
            Creates a new object that is a copy of the current
            <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldTemplateTable" /> instance.
            </summary>
            <returns>A new object that is a copy of this
            <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldTemplateTable" /> instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldTemplateTable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldTemplateTable.OnPropertyChanged(Vintasoft.Imaging.ObjectPropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplate.PropertyChanged" /> event.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.ObjectPropertyChangedEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldTemplateTable.RebuildTable(Vintasoft.Imaging.ObjectPropertyChangedEventArgs)">
            <summary>
            Rebuilds the table when some property of the table or cell template is changed.
            </summary>
            <param name="cellTemplateChangedEventArgs">
            The <see cref="T:Vintasoft.Imaging.ObjectPropertyChangedEventArgs" /> instance
            containing the event data when property of cell is template changed.
            Can be <b>null</b> if cell template is not changed.
            </param>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldTemplateTable.Threshold">
            <summary>
            Gets or sets a threshold value of black pixel density, for each field in the table,
            for determining filled state of the field.
            </summary>
            <value>
            Valid values are from 0 to 1.
            Default value is <b>0.1</b>.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            value is less than 0 or greater than 1.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldTemplateTable.Orientation">
            <summary>
            Gets or sets the orientation of this <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldTemplateTable" />.
            </summary>
            <value>
            Default value is <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrTableOrientation" />.Horizontal.
            </value>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown if
            user tries to set invalid value.</exception>
            <seealso cref="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldTemplateTable.CellValues" />
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldTemplateTable.CellValues">
            <summary>
            Gets the two-dimensional array of string values
            that correspond to cells of the table.
            </summary>
            <remarks>
            The string values of the two-dimensional array correspond to the table cells.
            When recognized, values that correspond to marked cells will be concatenated
            using specified separators (<see cref="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldTemplateTable.CellSeparator" /> and <see cref="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldTemplateTable.SegmentSeparator" />)
            giving the value of the recognized table.<br />
            For example, consider multichoice questionnaire with 3 questions each having
            choise set from "A" to "E". Let's fill every row of the <see cref="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldTemplateTable.CellValues" />
            with letters from "A" to "E", set the <see cref="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldTemplateTable.CellSeparator" /> to "+" and
            the <see cref="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldTemplateTable.SegmentSeparator" /> to ";".
            Assume that first answer is "B", second is "A,C" and third is "B,C,E".
            Then the recognized value will be "B;A+C;B+C+E".
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldTemplateTable.Orientation" />
            <seealso cref="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldTemplateTable.CellSeparator" />
            <seealso cref="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldTemplateTable.SegmentSeparator" />
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldTemplateTable.CellSeparator">
            <summary>
            Gets or sets the separator of the cell values in the recognition result.
            </summary>
            <value>
            Default value is <b>string.Empty</b>.
            </value>
            <remarks>
            See remarks to <see cref="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldTemplateTable.CellValues" />.
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldTemplateTable.CellValues" />
            <seealso cref="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldTemplateTable.SegmentSeparator" />
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldTemplateTable.SegmentSeparator">
            <summary>
            Gets or sets the separator of the cell segment values in the recognition result.
            </summary>
            <value>
            Default value is <b>string.Empty</b>.
            </value>
            <remarks>
            Cell segment is defined as a row of cells if table has horizontal orientation,
            and as a column of cells if table has vertical orientation.
            See remarks to <see cref="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldTemplateTable.CellValues" />.
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldTemplateTable.CellValues" />
            <seealso cref="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldTemplateTable.CellSeparator" />
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldTemplateTable.ValueFormat">
            <summary>
            Gets or sets the format string that should be applied to the value of recognized field group.
            </summary>
            <value>
            This property always returns <b>null</b> which means default formatting
            that uses cell values (<see cref="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldTemplateTable.CellValues" />), cell separator (<see cref="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldTemplateTable.CellSeparator" />)
            and segment separator (<see cref="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldTemplateTable.SegmentSeparator" />).
            </value>
            <remarks>
            Set operation is not supported.
            </remarks>
        </member>
        <member name="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.UI.OmrEllipticalFieldTemplateView">
            <summary>
            Determines how to display an OMR field template that
            has elliptical area and how user can interact with it.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldTemplateView">
            <summary>
            Provides the abstract base class that determines how to display a form field template
            and how user can interact with it.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldTemplateView.#ctor(Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplate)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldTemplateView" /> class.
            </summary>
            <param name="fieldTemplate">Form field template.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldTemplateView.GetPointTransform(Vintasoft.Imaging.UI.ImageViewer)">
            <summary>
            Returns a point transformation of the form field template view
            for specified <see cref="T:Vintasoft.Imaging.UI.ImageViewer" />.
            </summary>
            <param name="viewer">An image viewer.</param>
            <returns>An instance of an <see cref="T:Vintasoft.Imaging.Utils.PointFTransform" /> class 
            for specified image viewer.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldTemplateView.GetBoundingBox">
            <summary>
            Returns a bounding box, in the image space, of form field template view.
            </summary>
            <returns>Bounding box, in the image space, of form field template view.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldTemplateView.Draw(Vintasoft.Imaging.UI.ImageViewer,System.Drawing.Graphics)">
            <summary>
            Draws the form field template view on the specified <see cref="T:System.Drawing.Graphics" />.
            </summary>
            <param name="viewer">An image viewer.</param>
            <param name="g">The <see cref="T:System.Drawing.Graphics" /> to draw on.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldTemplateView.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldTemplateView.Dispose">
            <summary>
            Releases all resources used by this <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldTemplateView" /> object.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldTemplateView.DrawInContentSpace(System.Drawing.Graphics)">
            <summary>
            Draws the form field template on the <see cref="T:System.Drawing.Graphics" />
            in the coordinate space of field template.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics" /> to draw on.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldTemplateView.OnStateChanged(System.EventArgs)">
            <summary>
            Raises the StateChanged event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldTemplateView.OnFieldTemplatePropertyChanged(Vintasoft.Imaging.ObjectPropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldTemplateView.StateChanged" /> event.
            Invoked when the property of form field template is changed.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.ObjectPropertyChangedEventArgs" />
            that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldTemplateView.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the form field template view and
            optionally releases the managed resources.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and
            unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldTemplateView.FieldTemplate">
            <summary>
            Gets the form field template.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldTemplateView.BoundingBox">
            <summary>
            Gets or sets the bounding rectangle, in the device-independent pixels (1/96th inch),
            of the form field template on the template image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldTemplateView.IsDisposed">
            <summary>
            Gets a value indicating whether this form field template view is disposed.
            </summary>
            <value>
            <b>true</b> if the form field template view is disposed;
            otherwise, <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldTemplateView.Brush">
            <summary>
            Gets or sets the background brush of the rectangle.
            </summary>
            <value>
            Default value is SolidBrush(Color.FromArgb(100, Color.LightGreen)).
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldTemplateView.Pen">
            <summary>
            Gets or sets the border pen of the rectangle.
            </summary>
            <value>
            Default value is Pen(Color.FromArgb(150, Color.Red), 1f).
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldTemplateView.Builder">
            <summary>
            Gets or sets a transformer used for building of the form field template view.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldTemplateView.Transformer">
            <summary>
            Gets or sets a transformer used for transforming (moving/resizing/...)
            of the form field template view.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldTemplateView.InteractionController">
            <summary>
            Gets or sets an interaction controller of form field template view.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldTemplateView.IsVisible">
            <summary>
            Gets or sets a value indicating whether the form field template is visible.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldTemplateView.StateChanged">
            <summary>
            Occurs when the object state is changed.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.UI.OmrEllipticalFieldTemplateView.#ctor(Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrEllipticalFieldTemplate)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.UI.OmrEllipticalFieldTemplateView" /> class.
            </summary>
            <param name="fieldTemplate">Form field template.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.UI.OmrEllipticalFieldTemplateView.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.UI.OmrEllipticalFieldTemplateView.DrawInContentSpace(System.Drawing.Graphics)">
            <summary>
            Draws the form field template on the <see cref="T:System.Drawing.Graphics" />
            in the coordinate space of field template.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics" /> to draw on.</param>
        </member>
        <member name="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.UI.OmrRectangularFieldTemplateView">
            <summary>
            Determines how to display an OMR field template that
            has rectangular area and how user can interact with it.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.UI.OmrRectangularFieldTemplateView.#ctor(Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrRectangularFieldTemplate)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.UI.OmrRectangularFieldTemplateView" /> class.
            </summary>
            <param name="fieldTemplate">Form field template.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.UI.OmrRectangularFieldTemplateView.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.UI.OmrFieldView">
            <summary>
            Determines how to display a recognized OMR field
            and how user can interact with it.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldView">
            <summary>
            Provides the abstract base class that determines how to display a recognized form field
            and how user can interact with it.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldView.#ctor(Vintasoft.Imaging.FormsProcessing.FormRecognition.FormField)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldView" /> class.
            </summary>
            <param name="field">Recognized field.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldView.GetPointTransform(Vintasoft.Imaging.UI.ImageViewer)">
            <summary>
            Returns a point transformation of the form field view for specified <see cref="T:Vintasoft.Imaging.UI.ImageViewer" />.
            </summary>
            <param name="viewer">An image viewer.</param>
            <returns>An instance of an <see cref="T:Vintasoft.Imaging.Utils.PointFTransform" /> class 
            for specified image viewer.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldView.GetBoundingBox">
            <summary>
            Returns a bounding box, in the image space, of form field view.
            </summary>
            <returns>Bounding box, in the image space, of form field view.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldView.Draw(Vintasoft.Imaging.UI.ImageViewer,System.Drawing.Graphics)">
            <summary>
            Draws the form field view on the specified <see cref="T:System.Drawing.Graphics" />.
            </summary>
            <param name="viewer">An image viewer.</param>
            <param name="g">The <see cref="T:System.Drawing.Graphics" /> to draw on.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldView.DrawInContentSpace(System.Drawing.Graphics)">
            <summary>
            Draws the form field on the <see cref="T:System.Drawing.Graphics" />
            in the coordinate space of form field.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics" /> to draw on.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldView.OnStateChanged(System.EventArgs)">
            <summary>
            Raises the StateChanged event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldView.Field">
            <summary>
            Gets the recognized field.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldView.FieldTemplate">
            <summary>
            Gets the template of the form field.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldView.Brush">
            <summary>
            Gets or sets the background brush of form field.
            </summary>
            <value>
            Default value is SolidBrush(Color.FromArgb(150, Color.LightGreen)).
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldView.Pen">
            <summary>
            Gets or sets the border pen of form field.
            </summary>
            <value>
            Default value is Pen(Color.FromArgb(100, Color.Red), 1f).
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldView.Builder">
            <summary>
            Gets or sets a transformer used for building
            of the form field.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldView.Transformer">
            <summary>
            Gets or sets a transformer used for transforming (moving/resizing/...)
            of the form field.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldView.InteractionController">
            <summary>
            Gets or sets an interaction controller of form field view.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldView.IsVisible">
            <summary>
            Gets or sets a value indicating whether the form field is visible.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldView.StateChanged">
            <summary>
            Occurs when the object state is changed.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.UI.OmrFieldView.#ctor(Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrField)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.UI.OmrFieldView" /> class.
            </summary>
            <param name="field">Recognized field.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.UI.OmrFieldView.DrawInContentSpace(System.Drawing.Graphics)">
            <summary>
            Draws the form field on the <see cref="T:System.Drawing.Graphics" />
            in the coordinate space of form field.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics" /> to draw on.</param>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.UI.OmrFieldView.UnfilledBrush">
            <summary>
            Gets or sets the background brush of OMR field view
            when the <see cref="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldView.Field" /> has a state
            <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldState" />.Unfilled.
            </summary>
            <value>
            Default value is <b>null</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.UI.OmrFieldView.FilledBrush">
            <summary>
            Gets or sets the background brush of OMR field view
            when the <see cref="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldView.Field" /> has a state
            <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldState" />.Filled.
            </summary>
            <value>
            Default value is SolidBrush(Color.FromArgb(100, Color.LightGreen)).
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.UI.OmrFieldView.UndefinedBrush">
            <summary>
            Gets or sets the background brush of OMR field view
            when the <see cref="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldView.Field" /> has a state
            <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrFieldState" />.Undefined.
            </summary>
            <value>
            Default value is SolidBrush(Color.FromArgb(100, Color.Red)).
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.UI.OmrEllipticalFieldView">
            <summary>
            Determines how to display a recognized OMR field that
            has elliptical area and how user can interact with it.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.UI.OmrEllipticalFieldView.#ctor(Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrEllipticalField)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.UI.OmrEllipticalFieldView" /> class.
            </summary>
            <param name="field">Recognized field.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.UI.OmrEllipticalFieldView.DrawInContentSpace(System.Drawing.Graphics)">
            <summary>
            Draws the form field on the <see cref="T:System.Drawing.Graphics" />
            in the coordinate space of form field.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics" /> to draw on.</param>
        </member>
        <member name="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.UI.OmrRectangularFieldView">
            <summary>
            Determines how to display a recognized OMR field that
            has rectangular area and how user can interact with it.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.UI.OmrRectangularFieldView.#ctor(Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.OmrRectangularField)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.Omr.UI.OmrRectangularFieldView" /> class.
            </summary>
            <param name="field">Recognized field.</param>
        </member>
        <member name="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldTemplateViewCollection">
            <summary>
            Represents the collection of form field template views.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldTemplateViewCollection.#ctor(Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplateCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldTemplateViewCollection" /> class.
            </summary>
            <param name="fieldTemplateCollection">The collection of form field templates.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldTemplateViewCollection.FindView(Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplate)">
            <summary>
            Finds a view for specified form field template.
            </summary>
            <param name="fieldTemplate">The form field template.</param>
            <returns>
            Form field template view for specified form field template if field exists;
            <b>null</b>, otherwise.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldTemplateViewCollection.InsertItem(System.Int32,Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldTemplateView)">
            <summary>
            Inserts an element into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert.</param>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldTemplateViewCollection.FieldTemplateCollection">
            <summary>
            Gets the form field template collection that is associated
            with this form field template view collection.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldTemplateGroupView">
            <summary>
            Determines how to display a group of form field templates
            and how user can interact with it.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldTemplateGroupView.#ctor(Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplateGroup)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldTemplateGroupView" /> class.
            </summary>
            <param name="fieldTemplateGroup">The field template group.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldTemplateGroupView.Draw(Vintasoft.Imaging.UI.ImageViewer,System.Drawing.Graphics)">
            <summary>
            Draws the form field template view on the specified <see cref="T:System.Drawing.Graphics" />.
            </summary>
            <param name="viewer">An image viewer.</param>
            <param name="g">The <see cref="T:System.Drawing.Graphics" /> to draw on.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldTemplateGroupView.FindView(Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplate)">
            <summary>
            Finds a <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldTemplateView" /> for specified <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplate" />.
            </summary>
            <param name="fieldTemplate">The <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplate" /> to search.</param>
            <returns><see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldTemplateView" /> for specified <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplate" />.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldTemplateGroupView.Clone">
            <summary>
            Creates a new object that is a copy of the current
            <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldTemplateGroupView" /> instance.
            </summary>
            <returns>A new object that is a copy of this
            <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldTemplateGroupView" /> instance.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldTemplateGroupView.ViewItems">
            <summary>
            Gets the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldTemplateViewCollection" /> associated
            with the form field template group.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldTemplateGroupView.BoundingBox">
            <summary>
            Gets or sets the bounding rectangle, in the device-independent pixels (1/96th inch),
            of the form field template on the template image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldTemplateGroupView.InteractionController">
            <summary>
            Gets or sets an interaction controller of form field template group view.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldTemplateGroupView.UseCompositeTransformer">
            <summary>
            Gets a value indicating whether the composite transformer must be used for
            transforming of the form field template group view.
            </summary>
            <value>
            <b>true</b> - rectangular transformer is used for transforming of
            the form field template group views,
            view transformer is used for transforming of single form field template view;<br />
            <b>false</b> - rectangular transformer is be used for transforming
            of form field template group view.<br />
            Default value is <b>true</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldTemplateGroupView.IsVisible">
            <summary>
            Gets or sets a value indicating whether the form field template is visible.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldTemplateTableView">
            <summary>
            Determines how to display a regular table of form field templates
            and how user can interact with it.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldTemplateTableView.#ctor(Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplateGroup)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldTemplateTableView" /> class.
            </summary>
            <param name="templateTable">The template table.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldTemplateTableView.Clone">
            <summary>
            Creates a new object that is a copy of the current
            <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldTemplateGroupView" /> instance.
            </summary>
            <returns>A new object that is a copy of this
            <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldTemplateGroupView" /> instance.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldTemplateTableView.InteractionController">
            <summary>
            Gets or sets an interaction controller of form field template table view.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldTemplateTableView.UseCompositeTransformer">
            <summary>
            Gets a value indicating whether the composite transformer must be used for
            transforming of the form field template group view.
            </summary>
            <value>
            <b>true</b> - rectangular transformer is used for transforming of
            the form field template group views,
            view transformer is used for transforming of single form field template view;<br />
            <b>false</b> - rectangular transformer is be used for transforming
            of form field template group view.<br />
            Default value is <b>true</b>.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldViewCollection">
            <summary>
            Represents the collection of recognized form field views.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldViewCollection.#ctor(Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldViewCollection" /> class.
            </summary>
            <param name="fieldCollection">The collection of recognized form fields.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldViewCollection.CreateParentTable">
            <summary>
            Returns a dictionary that maps every item in the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldViewCollection" />
            to the item that contains it.
            </summary>
            <returns>
            A dictionary that maps every item in the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldViewCollection" />
            to the item that contains it.
            </returns>
        </member>
        <member name="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldGroupView">
            <summary>
            Determines how to display a group of recognized form fields
            and how user can interact with it.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldGroupView.#ctor(Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldGroup)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldGroupView" /> class.
            </summary>
            <param name="fieldGroup">Group of recognized fields.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldGroupView.Draw(Vintasoft.Imaging.UI.ImageViewer,System.Drawing.Graphics)">
            <summary>
            Draws the form field view on the specified <see cref="T:System.Drawing.Graphics" />.
            </summary>
            <param name="viewer">An image viewer.</param>
            <param name="g">The <see cref="T:System.Drawing.Graphics" /> to draw on.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldGroupView.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through
            the current <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldGroupView" /> object.
            </summary>
            <returns>An enumerator object that can be used
            to iterate through the current <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldGroupView" /> object.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldGroupView.ViewItems">
            <summary>
            Gets the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldViewCollection" /> associated with the form field.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldTemplateViewCollectionChangedEventArgs">
            <summary>
            Provides data for an event when form field template view collection is changed.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldTemplateViewCollectionChangedEventArgs.#ctor(Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldTemplateViewCollection,Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldTemplateViewCollection)">
            <summary>
            Initializes a new instance of
            the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldTemplateViewCollectionChangedEventArgs" /> class.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>
        </member>
        <member name="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldTemplateViewFactory">
            <summary>
            Provides the ability to create the view (<see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldTemplateView" />) for
            form field template (<see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplate" />).
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldTemplateViewFactory.RegisterViewForFieldTemplate(System.Type,System.Type)">
            <summary>
            Registers view for form field template.
            </summary>
            <param name="fieldTemplateType">Type of form field template.</param>
            <param name="fieldTemplateViewType">Type of form field template view.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if
            <i>fieldTemplateType</i> <i>OR</i>
            <i>fieldTemplateViewType</i> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if
            <i>fieldTemplateType</i> is not derived from FormFieldTemplate <i>OR</i>
            <i>fieldTemplateViewType</i> is not derived from FormFieldTemplateView <i>OR</i>
            <i>fieldTemplateViewType</i> is abstract type <i>OR</i>
            <i>fieldTemplateViewType</i> does not contain a public constructor
            with a single parameter derived from <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplate" />.
            </exception>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldTemplateViewFactory.GetViewForFieldTemplate(System.Type)">
            <summary>
            Returns the view for the form field template.
            </summary>
            <param name="fieldTemplateType">Type of form field template.</param>
            <returns>
            Type of form field template view if view for the form field template is registered;
            otherwise, <b>null</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldTemplateViewFactory.CreateView(Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplate)">
            <summary>
            Creates a view for form field template.
            </summary>
            <param name="fieldTemplate">Form field template.</param>
            <returns>View for form field template.</returns>
        </member>
        <member name="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldViewFactory">
            <summary>
            Provides the ability to create the view (<see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldView" />) for
            form field (<see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormField" />).
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldViewFactory.RegisterViewForField(System.Type,System.Type)">
            <summary>
            Registers view for form field.
            </summary>
            <param name="fieldType">Type of form field.</param>
            <param name="fieldViewType">Type of form field view.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if
            <i>fieldType</i> <i>OR</i>
            <i>fieldViewType</i> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if
            <i>fieldType</i> is not derived from FormField <i>OR</i>
            <i>fieldViewType</i> is not derived from FormFieldView <i>OR</i>
            <i>fieldViewType</i> is abstract type <i>OR</i>
            <i>fieldViewType</i> does not contain a public constructor
            with a single parameter derived from <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.FormField" />.
            </exception>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldViewFactory.GetViewForField(System.Type)">
            <summary>
            Returns the view for the form field.
            </summary>
            <param name="fieldType">Type of form field.</param>
            <returns>
            Type of form field view if view for the form field is registered;
            otherwise, <b>null</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldViewFactory.CreateView(Vintasoft.Imaging.FormsProcessing.FormRecognition.FormField)">
            <summary>
            Creates a view for form field.
            </summary>
            <param name="field">Form field.</param>
            <returns>View for form field.</returns>
        </member>
        <member name="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.UndefinedFieldView">
            <summary>
            Determines how to display an undefined field
            and how user can interact with it.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.UndefinedFieldView.#ctor(Vintasoft.Imaging.FormsProcessing.FormRecognition.FormField)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.UndefinedFieldView" /> class.
            </summary>
            <param name="field">Recognized field.</param>
        </member>
        <member name="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.UndefinedFieldTemplateView">
            <summary>
            Determines how to display an undefined field template
            and how user can interact with it.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.UndefinedFieldTemplateView.#ctor(Vintasoft.Imaging.FormsProcessing.FormRecognition.FormFieldTemplate)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.UndefinedFieldTemplateView" /> class.
            </summary>
            <param name="fieldTemplate">Form field template.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.UndefinedFieldTemplateView.Clone">
            <summary>
            Creates a new object that is a copy of the current
            <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.UndefinedFieldTemplateView" /> instance.
            </summary>
            <returns>A new object that is a copy of this
            <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.UndefinedFieldTemplateView" /> instance.</returns>
        </member>
        <member name="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.VisualTools.FormFieldTemplateEditorTool">
            <summary>
            Visual tool that allows to display, edit and interact with form field templates on an image.
            </summary>
            <example>
            Here is an example that demonstrates how to create
            a form template and add some form field templates to it visually.
            <code lang="VB.NET">
            Class FormFieldTemplateEditorToolForm
                Inherits Form
                Private imageViewer1 As ImageViewer
                Private buildFieldTemplateButton As Button
            
                ' ...
            
                ''' &lt;summary&gt;
                ''' Form template manager.
                ''' &lt;/summary&gt;
                Private _templateManager As FormTemplateManager
            
                ''' &lt;summary&gt;
                ''' The template editor tool.
                ''' &lt;/summary&gt;
                Private _templateEditorTool As FormFieldTemplateEditorTool
            
                ' ...
            
                Public Sub New()
                    ' ...
            
                    _templateEditorTool = New FormFieldTemplateEditorTool()
                    imageViewer1.VisualTool = _templateEditorTool
            
                    AddHandler imageViewer1.FocusedIndexChanged, New EventHandler(Of FocusedIndexChangedEventArgs)(AddressOf imageViewer1_FocusedIndexChanged)
            
            
                        ' ...
                    AddHandler buildFieldTemplateButton.Click, New EventHandler(AddressOf buildFieldTemplateButton_Click)
                End Sub
            
                ''' &lt;summary&gt;
                ''' Handles the FocusedIndexChanged event of the imageViewer1
                ''' to change the collection of form field templates of the visual tool.
                ''' &lt;/summary&gt;
                ''' &lt;param name="sender"&gt;The source of the event.&lt;/param&gt;
                ''' &lt;param name="e"&gt;The &lt;see cref="FocusedIndexChangedEventArgs"/&gt; instance
                ''' containing the event data.&lt;/param&gt;
                Private Sub imageViewer1_FocusedIndexChanged(sender As Object, e As FocusedIndexChangedEventArgs)
                    If imageViewer1.Image Is Nothing Then
                        _templateEditorTool.FieldTemplateCollection = Nothing
                    Else
                        ' get the form page template
                        Dim pageTemplate As FormPageTemplate = _templateManager.GetPageTemplate(imageViewer1.Image)
                        ' set items of page template as current items of the visual tool
                        _templateEditorTool.FieldTemplateCollection = pageTemplate.Items
                    End If
                End Sub
            
                ' ...
            
                ''' &lt;summary&gt;
                ''' Handles the Click event of the buildFieldTemplateButton
                ''' to create a form field template and start building of it.
                ''' &lt;/summary&gt;
                ''' &lt;param name="sender"&gt;The source of the event.&lt;/param&gt;
                ''' &lt;param name="e"&gt;The &lt;see cref="EventArgs"/&gt; instance containing the event data.&lt;/param&gt;
                Private Sub buildFieldTemplateButton_Click(sender As Object, e As EventArgs)
                    ' create an OMR rectangular field template
                    Dim fieldTemplate As FormFieldTemplate = New OmrRectangularFieldTemplate()
                    ' create a view for the field template
                    Dim fieldTemplateView As FormFieldTemplateView = FormFieldTemplateViewFactory.CreateView(fieldTemplate)
            
                    ' add field template to the collection of visual tool and
                    ' start building of field template
                    _templateEditorTool.AddAndBuild(fieldTemplateView)
                End Sub
            
                ' ...
            
            End Class
            </code>
            <code lang="C#">
            class FormFieldTemplateEditorToolForm : Form
            {
                ImageViewer imageViewer1;
                Button buildFieldTemplateButton;
            
                // ...
            
                /// &lt;summary&gt;
                /// Form template manager.
                /// &lt;/summary&gt;
                FormTemplateManager _templateManager;
            
                /// &lt;summary&gt;
                /// The template editor tool.
                /// &lt;/summary&gt;
                FormFieldTemplateEditorTool _templateEditorTool;
            
                // ...
            
                public FormFieldTemplateEditorToolForm()
                {
                    // ...
            
                    _templateEditorTool = new FormFieldTemplateEditorTool();
                    imageViewer1.VisualTool = _templateEditorTool;
            
                    imageViewer1.FocusedIndexChanged += new EventHandler&lt;FocusedIndexChangedEventArgs&gt;(imageViewer1_FocusedIndexChanged);
            
                    buildFieldTemplateButton.Click += new EventHandler(buildFieldTemplateButton_Click);
            
                    // ...
                }
            
                /// &lt;summary&gt;
                /// Handles the FocusedIndexChanged event of the imageViewer1
                /// to change the collection of form field templates of the visual tool.
                /// &lt;/summary&gt;
                /// &lt;param name="sender"&gt;The source of the event.&lt;/param&gt;
                /// &lt;param name="e"&gt;The &lt;see cref="FocusedIndexChangedEventArgs"/&gt; instance
                /// containing the event data.&lt;/param&gt;
                private void imageViewer1_FocusedIndexChanged(object sender, FocusedIndexChangedEventArgs e)
                {
                    if (imageViewer1.Image == null)
                    {
                        _templateEditorTool.FieldTemplateCollection = null;
                    }
                    else
                    {
                        // get the form page template
                        FormPageTemplate pageTemplate = _templateManager.GetPageTemplate(imageViewer1.Image);
                        // set items of page template as current items of the visual tool
                        _templateEditorTool.FieldTemplateCollection = pageTemplate.Items;
                    }
                }
            
                // ...
            
                /// &lt;summary&gt;
                /// Handles the Click event of the buildFieldTemplateButton
                /// to create a form field template and start building of it.
                /// &lt;/summary&gt;
                /// &lt;param name="sender"&gt;The source of the event.&lt;/param&gt;
                /// &lt;param name="e"&gt;The &lt;see cref="EventArgs"/&gt; instance containing the event data.&lt;/param&gt;
                private void buildFieldTemplateButton_Click(object sender, EventArgs e)
                {
                    // create an OMR rectangular field template
                    FormFieldTemplate fieldTemplate = new OmrRectangularFieldTemplate();
                    // create a view for the field template
                    FormFieldTemplateView fieldTemplateView = FormFieldTemplateViewFactory.CreateView(fieldTemplate);
            
                    // add field template to the collection of visual tool and
                    // start building of field template
                    _templateEditorTool.AddAndBuild(fieldTemplateView);
                }
            
                // ...
            
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.VisualTools.FormFieldTemplateEditorTool.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.VisualTools.FormFieldTemplateEditorTool" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.VisualTools.FormFieldTemplateEditorTool.AddAndBuild(Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldTemplateView)">
            <summary>
            Adds form field template view to the collection and starts building of view.
            </summary>
            <param name="fieldTemplateView">Form field template view to build.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.VisualTools.FormFieldTemplateEditorTool.FindFieldTemplateView(System.Single,System.Single)">
            <summary>
            Finds a form field template view at specified point, in the image viewer space.
            </summary>
            <param name="x">The X coordinate of point, in the image viewer space.</param>
            <param name="y">The Y coordinate of point, in the image viewer space.</param>
            <returns>A form field template view at specified point.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.VisualTools.FormFieldTemplateEditorTool.OnInteraction(Vintasoft.Imaging.UI.VisualTools.UserInteraction.IInteractiveObject,Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionEventArgs)">
            <summary>
            Raises the interaction event for specified interactive object.
            </summary>
            <param name="item">The interactive object.</param>
            <param name="args">The interaction event args.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.VisualTools.FormFieldTemplateEditorTool.FinishInteraction(Vintasoft.Imaging.UI.VisualTools.UserInteraction.IInteractiveObject,System.Boolean)">
            <summary>
            Finishes an active interaction.
            </summary>
            <param name="item">Active item.</param>
            <param name="invalidateItem">Need invalidate active item.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.VisualTools.FormFieldTemplateEditorTool.OnFocusedItemChanged(Vintasoft.Imaging.PropertyChangedEventArgs{Vintasoft.Imaging.UI.VisualTools.UserInteraction.IInteractiveObject})">
            <summary>
            Occurs when focused item is changed.
            </summary>
            <param name="e">An event args that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.VisualTools.FormFieldTemplateEditorTool.OnFocusedFieldTemplateViewChanged">
            <summary>
            Raises the FocusedFieldTemplateViewChanged event.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.VisualTools.FormFieldTemplateEditorTool.OnFieldTemplateViewCollectionChanged(Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldTemplateViewCollectionChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.VisualTools.FormFieldTemplateEditorTool.FieldTemplateViewCollectionChanged" /> event.
            </summary>
            <param name="e">A <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.FormFieldTemplateViewCollectionChangedEventArgs" /> that contains the event data.</param>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.VisualTools.FormFieldTemplateEditorTool.FieldTemplateViewCollection">
            <summary>
            Gets or sets a form field template view collection that will be viewed and edited
            using the visual tool.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.VisualTools.FormFieldTemplateEditorTool.FieldTemplateCollection">
            <summary>
            Gets or sets a form field template collection that will be viewed and edited
            using the visual tool.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.VisualTools.FormFieldTemplateEditorTool.FocusedFieldTemplateView">
            <summary>
            Gets or sets the focused form field template view.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.VisualTools.FormFieldTemplateEditorTool.FieldTemplateViewCollectionChanged">
            <summary>
            Occurs when the <see cref="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.VisualTools.FormFieldTemplateEditorTool.FieldTemplateViewCollection" /> property is changed.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.VisualTools.FormFieldTemplateEditorTool.FocusedFieldTemplateViewChanged">
            <summary>
            Occurs when focused form field template view is changed.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.VisualTools.FormFieldViewerTool">
            <summary>
            Visual tool that allows to display and interact with recognized form fields on an image.
            </summary>
            <example>
            Here is an example that demonstrates how to recognize a form
            and display the results in WinForms image viewer.
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Recognizes the current image of specified viewer
            ''' and shows recognition results in viewer.
            ''' &lt;/summary&gt;
            ''' &lt;param name="viewer"&gt;The viewer.&lt;/param&gt;
            ''' &lt;param name="formRecognitionManager"&gt;The form recognition manager.&lt;/param&gt;
            Public Shared Function RecognizeAndShowInViewer(viewer As ImageViewer, formRecognitionManager As FormRecognitionManager) As Boolean
                ' recognize the image
                Dim recognitionResult As FormRecognitionResult = formRecognitionManager.Recognize(viewer.Image)
            
                ' get the result of image comparison
                Dim imageCompareResult As ImageImprintCompareResult = recognitionResult.TemplateMatchingResult.ImageCompareResult
                ' if image is recognized
                If imageCompareResult.IsReliable Then
                    ' create a visual tool
                    Dim formFieldViewerTool As New FormFieldViewerTool()
                    ' create a view for the recognized page
                    Dim pageView As FormFieldView = FormFieldViewFactory.CreateView(recognitionResult.RecognizedPage)
                    ' add the view to the collection of the visual tool
                    formFieldViewerTool.FieldViewCollection.Add(pageView)
                    ' set the visual tool as current tool of the viewer
                    viewer.VisualTool = formFieldViewerTool
                    Return True
                Else
                    Return False
                End If
            End Function
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Recognizes the current image of specified viewer
            /// and shows recognition results in viewer.
            /// &lt;/summary&gt;
            /// &lt;param name="viewer"&gt;The viewer.&lt;/param&gt;
            /// &lt;param name="formRecognitionManager"&gt;The form recognition manager.&lt;/param&gt;
            public static bool RecognizeAndShowInViewer(
                ImageViewer viewer,
                FormRecognitionManager formRecognitionManager)
            {
                // recognize the image
                FormRecognitionResult recognitionResult = formRecognitionManager.Recognize(viewer.Image);
            
                // get the result of image comparison
                ImageImprintCompareResult imageCompareResult =
                    recognitionResult.TemplateMatchingResult.ImageCompareResult;
                // if image is recognized
                if (imageCompareResult.IsReliable)
                {
                    // create a visual tool
                    FormFieldViewerTool formFieldViewerTool = new FormFieldViewerTool();
                    // create a view for the recognized page
                    FormFieldView pageView = FormFieldViewFactory.CreateView(recognitionResult.RecognizedPage);
                    // add the view to the collection of the visual tool
                    formFieldViewerTool.FieldViewCollection.Add(pageView);
                    // set the visual tool as current tool of the viewer
                    viewer.VisualTool = formFieldViewerTool;
                    return true;
                }
                else
                {
                    return false;
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.VisualTools.FormFieldViewerTool.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.VisualTools.FormFieldViewerTool" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.VisualTools.FormFieldViewerTool.SetTransform(Vintasoft.Imaging.Utils.AffineMatrix,Vintasoft.Imaging.Resolution)">
            <summary>
            Sets a transformation specified by a <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" />
            that should be applied to showed form fields.
            </summary>
            <param name="transform">A transformation to apply.</param>
            <param name="templateResolution">The resolution of the template image.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.VisualTools.FormFieldViewerTool.FindFieldView(System.Single,System.Single)">
            <summary>
            Finds a form field view at specified point, in the image viewer space.
            </summary>
            <param name="x">The X coordinate of point, in the image viewer space.</param>
            <param name="y">The Y coordinate of point, in the image viewer space.</param>
            <returns>A form field view at specified point.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.VisualTools.FormFieldViewerTool.GetItemDrawingBox(Vintasoft.Imaging.UI.ImageViewer,Vintasoft.Imaging.UI.VisualTools.UserInteraction.IInteractiveObject)">
            <summary>
            Returns the item drawing box.
            </summary>
            <param name="viewer">The image viewer.</param>
            <param name="item">The item.</param>
            <returns>The item drawing box.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.VisualTools.FormFieldViewerTool.OnMouseMove(Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.UI.VisualTools.VisualTool.MouseMove" /> event.
            </summary>
            <param name="e">A <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.VisualTools.FormFieldViewerTool.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints a content of this tool.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that
            contains the event data.</param>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.VisualTools.FormFieldViewerTool.FieldViewCollection">
            <summary>
            Gets a form field view collection that will be viewed
            using the visual tool.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.VisualTools.FormFieldViewerTool.FieldViewMouseEnter">
            <summary>
            Occurs when the mouse pointer enters a form field view.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.VisualTools.FormFieldViewerTool.FieldViewMouseLeave">
            <summary>
            Occurs when the mouse pointer leaves a form field view.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.VisualTools.FormFieldViewEventArgs">
            <summary>
            Provides data for the <see cref="E:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.VisualTools.FormFieldViewerTool.FieldViewMouseEnter" />
            and <see cref="E:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.VisualTools.FormFieldViewerTool.FieldViewMouseLeave" /> events.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.VisualTools.FormFieldViewEventArgs.FormFieldView">
            <summary>
            Gets the <see cref="P:Vintasoft.Imaging.FormsProcessing.FormRecognition.UI.VisualTools.FormFieldViewEventArgs.FormFieldView" /> that is entered or leaved.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.FormsProcessing.TemplateMatching.ImageImprint">
            <summary>
            Contains information about the imprint of an image.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.TemplateMatching.ImageImprint.#ctor(Vintasoft.Imaging.FormsProcessing.TemplateMatching.ImageImprint)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.FormsProcessing.TemplateMatching.ImageImprint" /> class.
            </summary>
            <param name="imageImprint">Source image imprint to copy.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.TemplateMatching.ImageImprint.#ctor(Vintasoft.Imaging.ImageSize,Vintasoft.Imaging.FormsProcessing.TemplateMatching.KeyZone[])">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.FormsProcessing.TemplateMatching.ImageImprint" /> class.
            </summary>
            <param name="imageSize">Size of source image.</param>
            <param name="keyZones">Key zones of new image imprint.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.TemplateMatching.ImageImprint.Transform(Vintasoft.Imaging.Utils.AffineMatrix)">
            <summary>
            Applies a transformation to the key zones of the <see cref="T:Vintasoft.Imaging.FormsProcessing.TemplateMatching.ImageImprint" />.
            </summary>
            <param name="m">
            The <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" />
            that specifies the transformation to apply.
            </param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.TemplateMatching.ImageImprint.GetKeyZoneLocations">
            <summary>
            Returns an array of locations of the key zones of the <see cref="T:Vintasoft.Imaging.FormsProcessing.TemplateMatching.ImageImprint" />.
            </summary>
            <returns>An array of locations of the key zones of the <see cref="T:Vintasoft.Imaging.FormsProcessing.TemplateMatching.ImageImprint" />.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.TemplateMatching.ImageImprint.KeyZones">
            <summary>
            Gets an array of the key zones.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.TemplateMatching.ImageImprint.ImageSize">
            <summary>
            Gets the size of the source image.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.FormsProcessing.TemplateMatching.ImageImprintComparer">
            <summary>
            Compares imprints of two images.
            </summary>
            <remarks>
            This class is thread safe.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.TemplateMatching.ImageImprintComparer.#ctor(Vintasoft.Imaging.FormsProcessing.TemplateMatching.ImageImprint)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.FormsProcessing.TemplateMatching.ImageImprintComparer" /> class.
            </summary>
            <param name="sourceImageImprint">A source image imprint.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.TemplateMatching.ImageImprintComparer.Compare(Vintasoft.Imaging.FormsProcessing.TemplateMatching.ImageImprint)">
            <summary>
            Compares specified <see cref="T:Vintasoft.Imaging.FormsProcessing.TemplateMatching.ImageImprint" /> with the source <see cref="T:Vintasoft.Imaging.FormsProcessing.TemplateMatching.ImageImprint" />
            of this <see cref="T:Vintasoft.Imaging.FormsProcessing.TemplateMatching.ImageImprintComparer" />.
            </summary>
            <param name="imageImprint">The <see cref="T:Vintasoft.Imaging.FormsProcessing.TemplateMatching.ImageImprint" /> to compare with.</param>
            <returns>An <see cref="T:Vintasoft.Imaging.FormsProcessing.TemplateMatching.ImageImprintCompareResult" /> instance.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.TemplateMatching.ImageImprintComparer.MinConfidence">
            <summary>
            Gets or sets the minimum confidence for equality of two image imprints.
            </summary>
            <value>
            Valid values are from 0 to 1.
            Default value is <b>0.35f</b>.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            value is less than 0 or greater than 1.</exception>
        </member>
        <member name="T:Vintasoft.Imaging.FormsProcessing.TemplateMatching.ImageImprintComparerCommand">
            <summary>
            Compares imprint of an image with the imprint of another image.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.TemplateMatching.ImageImprintComparerCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.FormsProcessing.TemplateMatching.ImageImprintComparerCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.TemplateMatching.ImageImprintComparerCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.TemplateMatching.ImageImprintComparerCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.FormsProcessing.TemplateMatching.ImageImprintComparerCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.FormsProcessing.TemplateMatching.ImageImprintComparerCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.TemplateMatching.ImageImprintComparerCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Processes the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            Always returns <b>false</b> because this command does not change the <i>image</i>.
            </returns>
            <exception cref="T:Vintasoft.Imaging.ImageProcessing.ImageProcessingException">Thrown if
            template image is not set OR
            template image is not black and white image OR
            image imprint generator is not set.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.TemplateMatching.ImageImprintComparerCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.TemplateMatching.ImageImprintComparerCommand.CanModifyImage">
            <summary>
            Gets the value indicating whether this command modifies image.
            </summary>
            <value>
            Always returns <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.TemplateMatching.ImageImprintComparerCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
            <value>
            Supported formats: BlackWhite.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.TemplateMatching.ImageImprintComparerCommand.TemplateImage">
            <summary>
            Gets or sets the black-white image that should be used as a template for all processing images.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            image is not a black-white image.</exception>
            <remarks>
            Property value must be reinitialized if template image is changed
            because this class does not monitor changes in template image.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.TemplateMatching.ImageImprintComparerCommand.ImageImprintGenerator">
            <summary>
            Gets or sets the generator of image imprints.
            </summary>
            <remarks>
            Property value must be reinitialized if properties of image imprint generator are changed
            because this class does not monitor changes in image imprint generator.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.TemplateMatching.ImageImprintComparerCommand.Result">
            <summary>
            Gets the result of command execution.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.FormsProcessing.TemplateMatching.ImageImprintComparerCommandResult">
            <summary>
            Stores an execution result of the <see cref="T:Vintasoft.Imaging.FormsProcessing.TemplateMatching.ImageImprintComparerCommand" />.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.TemplateMatching.ImageImprintComparerCommandResult.ImprintCompareResult">
            <summary>
            Gets the result of image imprint comparison.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.FormsProcessing.TemplateMatching.ImageImprintCompareResult">
            <summary>
            Contains information about the result of image imprint comparison.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.TemplateMatching.ImageImprintCompareResult.IsReliable">
            <summary>
            Gets a value that indicates whether the result is reliable.
            </summary>
            <value>
            <b>true</b> - result is reliable;
            <b>false</b> - result is NOT reliable.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.TemplateMatching.ImageImprintCompareResult.SourceImprint">
            <summary>
            Gets the source image imprint.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.TemplateMatching.ImageImprintCompareResult.DestImprint">
            <summary>
            Gets the destination image imprint.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.TemplateMatching.ImageImprintCompareResult.TransformMatrix">
            <summary>
            Gets the <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" /> that specifies a thansformation
            that shall be applied to the <see cref="P:Vintasoft.Imaging.FormsProcessing.TemplateMatching.ImageImprintCompareResult.DestImprint" /> in order to get
            the <see cref="P:Vintasoft.Imaging.FormsProcessing.TemplateMatching.ImageImprintCompareResult.SourceImprint" />.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.TemplateMatching.ImageImprintCompareResult.CoincidentZoneCount">
            <summary>
            Gets the count of coincident zones.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.TemplateMatching.ImageImprintCompareResult.NotCoincidentSourceZoneCount">
            <summary>
            Gets the count of source zones that do not have coincident destination zones.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.TemplateMatching.ImageImprintCompareResult.NotCoincidentDestZoneCount">
            <summary>
            Gets the count of destination zones that do not have coincident source zones.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.TemplateMatching.ImageImprintCompareResult.AvgSimilarity">
            <summary>
            Gets average similarity of coincident zones.
            </summary>
            <value>
            Possible values are from 0.0 (0%) to 1.0 (100%).<br />
            0 means that image imprints are absolutely NOT similar;
            1 means that image imprints are perfectly similar.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.TemplateMatching.ImageImprintCompareResult.AvgLocationDeviation">
            <summary>
            Gets average location deviation of coincident zones.
            </summary>
            <value>
            0 means that zones do not deviate;
            other values denotes the average deviation measured in the units of the key zone recognizers.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.TemplateMatching.ImageImprintCompareResult.AvgLocationDeviationX">
            <summary>
            Gets average location deviation of coincident zones along the X axis.
            </summary>
            <value>
            0 means that zones do not deviate;
            other values denotes the average deviation along the X axis
            measured in the units of the key zone recognizers.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.TemplateMatching.ImageImprintCompareResult.AvgLocationDeviationY">
            <summary>
            Gets average location deviation of coincident zones along the Y axis.
            </summary>
            <value>
            0 means that zones do not deviate;
            other values denotes the average deviation along the Y axis
            measured in the units of the key zone recognizers.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.TemplateMatching.ImageImprintCompareResult.Confidence">
            <summary>
            Gets the confidence of the result derived from other parameters.
            </summary>
            <value>
            Possible values are from 0.0 (0%) to 1.0 (100%).
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.FormsProcessing.TemplateMatching.ImageImprintGeneratorCommand">
            <summary>
            Generates an imprint of an image.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.TemplateMatching.ImageImprintGeneratorCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.FormsProcessing.TemplateMatching.ImageImprintGeneratorCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.TemplateMatching.ImageImprintGeneratorCommand.#ctor(Vintasoft.Imaging.FormsProcessing.TemplateMatching.KeyZoneRecognizerCommand[])">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.FormsProcessing.TemplateMatching.ImageImprintGeneratorCommand" /> class.
            </summary>
            <param name="keyZoneRecognizers">Key zone recognizers.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if
            <i>keyZoneRecognizers</i> is <b>null</b> OR
            <i>keyZoneRecognizers</i> length is 0.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.TemplateMatching.ImageImprintGeneratorCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.TemplateMatching.ImageImprintGeneratorCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.FormsProcessing.TemplateMatching.ImageImprintGeneratorCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.FormsProcessing.TemplateMatching.ImageImprintGeneratorCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.TemplateMatching.ImageImprintGeneratorCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Processes the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            Always returns <b>false</b> because this command does not change the <i>image</i>.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.TemplateMatching.ImageImprintGeneratorCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.TemplateMatching.ImageImprintGeneratorCommand.CanModifyImage">
            <summary>
            Gets the value indicating whether this command modifies image.
            </summary>
            <value>
            Always returns <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.TemplateMatching.ImageImprintGeneratorCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
            <value>
            Supported formats depend on the supported formats of every specified key zone recognizer.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.TemplateMatching.ImageImprintGeneratorCommand.ImageImprint">
            <summary>
            Gets the result of command execution.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.FormsProcessing.TemplateMatching.KeyZone">
            <summary>
            Provides an abstract base class for a key zone on an image.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.TemplateMatching.KeyZone.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.FormsProcessing.TemplateMatching.KeyZone" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.TemplateMatching.KeyZone.Transform(Vintasoft.Imaging.Utils.AffineMatrix)">
            <summary>
            Applies a transformation to the key zone.
            </summary>
            <param name="m">
            The <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" />
            that specifies the transformation to apply.
            </param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.TemplateMatching.KeyZone.CalculateSimilarity(Vintasoft.Imaging.FormsProcessing.TemplateMatching.KeyZone)">
            <summary>
            Returns the similarity of specified <see cref="T:Vintasoft.Imaging.FormsProcessing.TemplateMatching.KeyZone" /> and the current key zone.
            </summary>
            <param name="zone">The <see cref="T:Vintasoft.Imaging.FormsProcessing.TemplateMatching.KeyZone" /> to compare with.</param>
            <returns>
            The similarity of specified keyzone and the current key zone in range from 0 to 1.<br />
            0 means that zones are absolutely NOT similar;
            1 means that zones are perfectly similar.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.TemplateMatching.KeyZone.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.TemplateMatching.KeyZone.Location">
            <summary>
            Gets the location of the key zone on the image.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.FormsProcessing.TemplateMatching.KeyLineRecognizerCommand">
            <summary>
            Recognizes key zones, based on lines, on an image.
            </summary>
            <example>
            Here is an example that demonstrates how to identify a document image
            using algorithm that creates an image imprint based on lines.
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Identifies the image using key lines.
            ''' &lt;/summary&gt;
            ''' &lt;param name="templateImages"&gt;The template images.&lt;/param&gt;
            ''' &lt;param name="testImage"&gt;The test image.&lt;/param&gt;
            ''' &lt;returns&gt;Result of template matching.&lt;/returns&gt;
            Public Shared Function IdentifyUsingLines(templateImages As VintasoftImage(), testImage As VintasoftImage) As TemplateMatchingResult
                ' create a recognizer
                Dim lineRecognizerCommand As New KeyLineRecognizerCommand()
                ' set units of measure
                lineRecognizerCommand.UnitOfMeasure = UnitOfMeasure.Pixels
                ' set max length of line
                lineRecognizerCommand.MaxLength = 2000
                ' create a template matching command
                Dim templateMatchingCommand As New TemplateMatchingCommand()
                ' set imprint generator based on recognizer
                templateMatchingCommand.ImageImprintGenerator = New ImageImprintGeneratorCommand(lineRecognizerCommand)
                ' add template images
                templateMatchingCommand.TemplateImages.AddRange(templateImages)
                ' execute template matching
                templateMatchingCommand.ExecuteInPlace(testImage)
                ' return result
                Return templateMatchingCommand.Result
            End Function
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Identifies the image using key lines.
            /// &lt;/summary&gt;
            /// &lt;param name="templateImages"&gt;The template images.&lt;/param&gt;
            /// &lt;param name="testImage"&gt;The test image.&lt;/param&gt;
            /// &lt;returns&gt;Result of template matching.&lt;/returns&gt;
            public static TemplateMatchingResult IdentifyUsingLines(
                VintasoftImage[] templateImages, VintasoftImage testImage)
            {
                // create a recognizer
                KeyLineRecognizerCommand lineRecognizerCommand = new KeyLineRecognizerCommand();
                // set units of measure
                lineRecognizerCommand.UnitOfMeasure = UnitOfMeasure.Pixels;
                // set max length of line
                lineRecognizerCommand.MaxLength = 2000;
                // create a template matching command
                TemplateMatchingCommand templateMatchingCommand = new TemplateMatchingCommand();
                // set imprint generator based on recognizer
                templateMatchingCommand.ImageImprintGenerator =
                    new ImageImprintGeneratorCommand(lineRecognizerCommand);
                // add template images
                templateMatchingCommand.TemplateImages.AddRange(templateImages);
                // execute template matching
                templateMatchingCommand.ExecuteInPlace(testImage);
                // return result
                return templateMatchingCommand.Result;
            }
            </code>
            </example>
        </member>
        <member name="T:Vintasoft.Imaging.FormsProcessing.TemplateMatching.KeyZoneRecognizerCommand">
            <summary>
            Recognizes key zones on an image.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.TemplateMatching.KeyZoneRecognizerCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.FormsProcessing.TemplateMatching.KeyZoneRecognizerCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.TemplateMatching.KeyZoneRecognizerCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.TemplateMatching.KeyZoneRecognizerCommand.Recognize(Vintasoft.Imaging.VintasoftImage,System.Drawing.Rectangle)">
            <summary>
            Recognizes key zones in the specified rectangle of the specified image.
            </summary>
            <param name="image">The image where key zones must be searched.</param>
            <param name="rect">The region of interest on image.</param>
            <returns>An array of recognized key zones.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.TemplateMatching.KeyZoneRecognizerCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Processes the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            Always returns <b>false</b> because this command does not change the <i>image</i>.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.TemplateMatching.KeyZoneRecognizerCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.TemplateMatching.KeyZoneRecognizerCommand.CanModifyImage">
            <summary>
            Gets the value indicating whether this command modifies image.
            </summary>
            <value>
            Always returns <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.TemplateMatching.KeyZoneRecognizerCommand.UnitOfMeasure">
            <summary>
            Gets or sets unit of measure of properites.
            </summary>
            <value>
            Default value is <see cref="P:Vintasoft.Imaging.FormsProcessing.TemplateMatching.KeyZoneRecognizerCommand.UnitOfMeasure" />.DeviceIndependentPixels.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.TemplateMatching.KeyZoneRecognizerCommand.RecognizedKeyZones">
            <summary>
            Gets the list of recognized key zones.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.TemplateMatching.KeyLineRecognizerCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.FormsProcessing.TemplateMatching.KeyLineRecognizerCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.TemplateMatching.KeyLineRecognizerCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.FormsProcessing.TemplateMatching.KeyLineRecognizerCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.FormsProcessing.TemplateMatching.KeyLineRecognizerCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.TemplateMatching.KeyLineRecognizerCommand.Recognize(Vintasoft.Imaging.VintasoftImage,System.Drawing.Rectangle)">
            <summary>
            Recognizes key zones in the specified rectangle of the specified image.
            </summary>
            <param name="image">The image where key zones must be searched.</param>
            <param name="rect">The region of interest on image.</param>
            <returns>An array of recognized key zones.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.TemplateMatching.KeyLineRecognizerCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
            <value>
            Supported formats: BlackWhite.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.TemplateMatching.KeyLineRecognizerCommand.MinWidth">
            <summary>
            Gets or sets the minimum width of line.
            </summary>
            <value>
            0 - minimal width of line is calculated automatically,
            positive value - minimum width of line.<br />
            Default value is <b>0f</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.TemplateMatching.KeyLineRecognizerCommand.MaxWidth">
            <summary>
            Gets or sets the maximum width of line.
            </summary>
            <value>
            0 - maximum width of line is calculated automatically,
            positive value - maximum width of line.<br />
            Default value is <b>0f</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.TemplateMatching.KeyLineRecognizerCommand.MinLength">
            <summary>
            Gets or sets the minimum length of line.
            </summary>
            <value>
            0 - minimal length of line is calculated automatically,
            positive value - minimum length of line.<br />
            Default value is <b>0f</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.TemplateMatching.KeyLineRecognizerCommand.MaxLength">
            <summary>
            Gets or sets the maximum length of line.
            </summary>
            <value>
            0 - maximum length of line is calculated automatically,
            positive value - maximum length of line.<br />
            Default value is <b>0f</b>.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.FormsProcessing.TemplateMatching.KeyMarkRecognizerCommand">
            <summary>
            Searches the corner marks on an image.
            </summary>
            <remarks>
            Corner mark is a search pattern ("L" pattern), which consists of two lines, of equal length,
            outgoing from one point at a right angle.
            </remarks>
            <example>
            Here is an example that demonstrates how to identify a document image
            using algorithm that creates an image footprint based on L search patterns.
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Identifies the image using key marks.
            ''' &lt;/summary&gt;
            ''' &lt;param name="templateImages"&gt;The template images.&lt;/param&gt;
            ''' &lt;param name="testImage"&gt;The test image.&lt;/param&gt;
            ''' &lt;returns&gt;Result of template matching.&lt;/returns&gt;
            Public Shared Function IdentifyUsingMarks(templateImages As VintasoftImage(), testImage As VintasoftImage) As TemplateMatchingResult
                ' create a recognizer
                Dim markRecognizerCommand As New KeyMarkRecognizerCommand()
                ' set units of measure
                markRecognizerCommand.UnitOfMeasure = UnitOfMeasure.Pixels
                ' set max size of mark
                markRecognizerCommand.MaxMarkSize = 300
                ' set min size of mark
                markRecognizerCommand.MinMarkSize = 50
                ' create a template matching command
                Dim templateMatchingCommand As New TemplateMatchingCommand()
                ' set imprint generator based on recognizer
                templateMatchingCommand.ImageImprintGenerator = New ImageImprintGeneratorCommand(markRecognizerCommand)
                ' add template images
                templateMatchingCommand.TemplateImages.AddRange(templateImages)
                ' execute template matching
                templateMatchingCommand.ExecuteInPlace(testImage)
                ' return result
                Return templateMatchingCommand.Result
            End Function
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Identifies the image using key marks.
            /// &lt;/summary&gt;
            /// &lt;param name="templateImages"&gt;The template images.&lt;/param&gt;
            /// &lt;param name="testImage"&gt;The test image.&lt;/param&gt;
            /// &lt;returns&gt;Result of template matching.&lt;/returns&gt;
            public static TemplateMatchingResult IdentifyUsingMarks(
                VintasoftImage[] templateImages, VintasoftImage testImage)
            {
                // create a recognizer
                KeyMarkRecognizerCommand markRecognizerCommand = new KeyMarkRecognizerCommand();
                // set units of measure
                markRecognizerCommand.UnitOfMeasure = UnitOfMeasure.Pixels;
                // set max size of mark
                markRecognizerCommand.MaxMarkSize = 300;
                // set min size of mark
                markRecognizerCommand.MinMarkSize = 50;
                // create a template matching command
                TemplateMatchingCommand templateMatchingCommand = new TemplateMatchingCommand();
                // set imprint generator based on recognizer
                templateMatchingCommand.ImageImprintGenerator =
                    new ImageImprintGeneratorCommand(markRecognizerCommand);
                // add template images
                templateMatchingCommand.TemplateImages.AddRange(templateImages);
                // execute template matching
                templateMatchingCommand.ExecuteInPlace(testImage);
                // return result
                return templateMatchingCommand.Result;
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.TemplateMatching.KeyMarkRecognizerCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.FormsProcessing.TemplateMatching.KeyMarkRecognizerCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.TemplateMatching.KeyMarkRecognizerCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.FormsProcessing.TemplateMatching.KeyMarkRecognizerCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.FormsProcessing.TemplateMatching.KeyMarkRecognizerCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.TemplateMatching.KeyMarkRecognizerCommand.Recognize(Vintasoft.Imaging.VintasoftImage,System.Drawing.Rectangle)">
            <summary>
            Recognizes key zones in the specified rectangle of the specified image.
            </summary>
            <param name="image">The image where key zones must be searched.</param>
            <param name="rect">The region of interest on image.</param>
            <returns>An array of recognized key zones.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.TemplateMatching.KeyMarkRecognizerCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
            <value>
            Supported formats: BlackWhite.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.TemplateMatching.KeyMarkRecognizerCommand.MaxMarkSize">
            <summary>
            Gets or sets the maximum width/height of mark.
            </summary>
            <value>
            Possible value is any positive value.
            Default value is <b>100f</b>.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            value is 0 or less.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.TemplateMatching.KeyMarkRecognizerCommand.MinMarkSize">
            <summary>
            Gets or sets the minimum width/height of mark.
            </summary>
            <value>
            Possible value is any positive value.
            Default value is <b>20f</b>.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            value is 0 or less.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.TemplateMatching.KeyMarkRecognizerCommand.MaxMarkThickness">
            <summary>
            Gets or sets the maximum line thickness of mark.
            </summary>
            <value>
            Possible value is any positive value.
            Default value is <b>20f</b>.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            value is 0 or less.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.TemplateMatching.KeyMarkRecognizerCommand.MinMarkThickness">
            <summary>
            Gets or sets the minimum line thickness of mark.
            </summary>
            <value>
            Possible value is any positive value.
            Default value is <b>1f</b>.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            value is 0 or less.</exception>
        </member>
        <member name="T:Vintasoft.Imaging.FormsProcessing.TemplateMatching.KeyZoneRecognizerCommandResult">
            <summary>
            Stores an execution result of the <see cref="T:Vintasoft.Imaging.FormsProcessing.TemplateMatching.KeyZoneRecognizerCommand" />.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.TemplateMatching.KeyZoneRecognizerCommandResult.RecognizedKeyZones">
            <summary>
            Gets an array of recognized key zones.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.FormsProcessing.TemplateMatching.TemplateAligningCommand">
            <summary>
            Aligns an image using the comparison result of image and template image.
            </summary>
            <example>
            Here is an example that demonstrates how to identify a document image
            and align the document image to its template.
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Identifies and aligns the image.
            ''' &lt;/summary&gt;
            ''' &lt;param name="templateImages"&gt;The template images.&lt;/param&gt;
            ''' &lt;param name="testImage"&gt;The test image.&lt;/param&gt;
            Public Shared Sub IdentifyAndAlign(templateImages As VintasoftImage(), testImage As VintasoftImage)
                ' create template matching command
                Dim templateMatchingCommand As New TemplateMatchingCommand()
                ' add template images
                templateMatchingCommand.TemplateImages.AddRange(templateImages)
                ' execute template matching
                templateMatchingCommand.ExecuteInPlace(testImage)
                ' create template aligning command
                Dim templateAligningCommand As New TemplateAligningCommand()
                ' set matching result
                templateAligningCommand.CompareResult = templateMatchingCommand.Result.ImageCompareResult
                ' execute template aligning
                templateAligningCommand.ExecuteInPlace(testImage)
            End Sub
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Identifies and aligns the image.
            /// &lt;/summary&gt;
            /// &lt;param name="templateImages"&gt;The template images.&lt;/param&gt;
            /// &lt;param name="testImage"&gt;The test image.&lt;/param&gt;
            public static void IdentifyAndAlign(VintasoftImage[] templateImages, VintasoftImage testImage)
            {
                // create template matching command
                TemplateMatchingCommand templateMatchingCommand = new TemplateMatchingCommand();
                // add template images
                templateMatchingCommand.TemplateImages.AddRange(templateImages);
                // execute template matching
                templateMatchingCommand.ExecuteInPlace(testImage);
                // create template aligning command
                TemplateAligningCommand templateAligningCommand = new TemplateAligningCommand();
                // set matching result
                templateAligningCommand.CompareResult = templateMatchingCommand.Result.ImageCompareResult;
                // execute template aligning
                templateAligningCommand.ExecuteInPlace(testImage);
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.TemplateMatching.TemplateAligningCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.FormsProcessing.TemplateMatching.TemplateAligningCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.TemplateMatching.TemplateAligningCommand.#ctor(Vintasoft.Imaging.FormsProcessing.TemplateMatching.ImageImprintCompareResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.FormsProcessing.TemplateMatching.TemplateAligningCommand" /> class.
            </summary>
            <param name="compareResult">The image comparison result.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.TemplateMatching.TemplateAligningCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.TemplateMatching.TemplateAligningCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.FormsProcessing.TemplateMatching.TemplateAligningCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.FormsProcessing.TemplateMatching.TemplateAligningCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.TemplateMatching.TemplateAligningCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Processes the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
            <exception cref="T:Vintasoft.Imaging.ImageProcessing.ImageProcessingException">Thrown if
            the image comparison result is not found.</exception>
            <remarks>
            This method changes the <i>image</i>.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.TemplateMatching.TemplateAligningCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.TemplateMatching.TemplateAligningCommand.CompareResult">
            <summary>
            Gets or sets the result of comparison of image and template image.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.FormsProcessing.TemplateMatching.TemplateMatchingCommand">
            <summary>
            Compares an image with template images and
            determines the template image which is most closely matches the image.
            </summary>
            <example>
            Here is an example that demonstrates how to determine
            a type of document (invoice or tax return) on image.
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Identifies the type of document.
            ''' &lt;/summary&gt;
            ''' &lt;param name="invoiceTemplateFilename"&gt;The invoice template filename.&lt;/param&gt;
            ''' &lt;param name="taxReturnTemplateFilename"&gt;The tax return template filename.&lt;/param&gt;
            ''' &lt;param name="documentFilename"&gt;The document filename.&lt;/param&gt;
            Public Shared Sub IdentifyTypeOfDocument(invoiceTemplateFilename As String, taxReturnTemplateFilename As String, documentFilename As String)
                ' create new template matching command
                Dim templateMatchingCommand As New TemplateMatchingCommand()
                ' open invoice template
                Dim invoiceTemplateImage As New VintasoftImage(invoiceTemplateFilename)
                templateMatchingCommand.TemplateImages.Add(invoiceTemplateImage)
                ' open tax return template
                Dim taxReturnTemplateImage As New VintasoftImage(taxReturnTemplateFilename)
                templateMatchingCommand.TemplateImages.Add(taxReturnTemplateImage)
                ' open test image
                Using testImage As New VintasoftImage(documentFilename)
                    ' execute template matching
                    templateMatchingCommand.ExecuteInPlace(testImage)
                End Using
                ' if image is recognized
                If templateMatchingCommand.Result.ImageCompareResult.IsReliable Then
                    ' write matching template type
                    If templateMatchingCommand.Result.TemplateImage Is invoiceTemplateImage Then
                        Console.WriteLine("Document is an invoice.")
                    Else
                        Console.WriteLine("Document is a tax return.")
                    End If
                Else
                    Console.WriteLine("Document type is not recognized.")
                End If
                ' dispose template images
                templateMatchingCommand.TemplateImages.ClearAndDisposeItems()
            End Sub
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Identifies the type of document.
            /// &lt;/summary&gt;
            /// &lt;param name="invoiceTemplateFilename"&gt;The invoice template filename.&lt;/param&gt;
            /// &lt;param name="taxReturnTemplateFilename"&gt;The tax return template filename.&lt;/param&gt;
            /// &lt;param name="documentFilename"&gt;The document filename.&lt;/param&gt;
            public static void IdentifyTypeOfDocument(
                string invoiceTemplateFilename,
                string taxReturnTemplateFilename,
                string documentFilename)
            {
                // create new template matching command
                TemplateMatchingCommand templateMatchingCommand = new TemplateMatchingCommand();
                // open invoice template
                VintasoftImage invoiceTemplateImage = new VintasoftImage(invoiceTemplateFilename);
                templateMatchingCommand.TemplateImages.Add(invoiceTemplateImage);
                // open tax return template
                VintasoftImage taxReturnTemplateImage = new VintasoftImage(taxReturnTemplateFilename);
                templateMatchingCommand.TemplateImages.Add(taxReturnTemplateImage);
                // open test image
                using (VintasoftImage testImage = new VintasoftImage(documentFilename))
                {
                    // execute template matching
                    templateMatchingCommand.ExecuteInPlace(testImage);
                }
                // if image is recognized
                if (templateMatchingCommand.Result.ImageCompareResult.IsReliable)
                {
                    // write matching template type
                    if (templateMatchingCommand.Result.TemplateImage == invoiceTemplateImage)
                        Console.WriteLine("Document is an invoice.");
                    else
                        Console.WriteLine("Document is a tax return.");
                }
                else
                {
                    Console.WriteLine("Document type is not recognized.");
                }
                // dispose template images
                templateMatchingCommand.TemplateImages.ClearAndDisposeItems();
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.TemplateMatching.TemplateMatchingCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.FormsProcessing.TemplateMatching.TemplateMatchingCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.TemplateMatching.TemplateMatchingCommand.#ctor(Vintasoft.Imaging.ImageCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.FormsProcessing.TemplateMatching.TemplateMatchingCommand" /> class.
            </summary>
            <param name="templateImages">The collection of templates images.</param>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.TemplateMatching.TemplateMatchingCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.TemplateMatching.TemplateMatchingCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.FormsProcessing.TemplateMatching.TemplateMatchingCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.FormsProcessing.TemplateMatching.TemplateMatchingCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.FormsProcessing.TemplateMatching.TemplateMatchingCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Processes the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            Always returns <b>false</b> because this command does not change the <i>image</i>.
            </returns>
            <exception cref="T:Vintasoft.Imaging.ImageProcessing.ImageProcessingException">Thrown if
            template images are not set OR
            template image is not black white image.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.TemplateMatching.TemplateMatchingCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.TemplateMatching.TemplateMatchingCommand.CanModifyImage">
            <summary>
            Gets the value indicating whether this command can modify the image.
            </summary>
            <value>
            Always returns <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.TemplateMatching.TemplateMatchingCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
            <value>
            Supported formats are the same as of the <see cref="P:Vintasoft.Imaging.FormsProcessing.TemplateMatching.TemplateMatchingCommand.ImageImprintGenerator" />.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.TemplateMatching.TemplateMatchingCommand.TemplateImages">
            <summary>
            Gets or sets the collection of templates images.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.TemplateMatching.TemplateMatchingCommand.ImageImprintGenerator">
            <summary>
            Gets or sets the image imprint generator, which is used for generating imprints
            of template images and processed image.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if
            value is <b>null</b>.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.TemplateMatching.TemplateMatchingCommand.MinConfidence">
            <summary>
            Gets or sets the minimum confidence for equality of two image imprints.
            </summary>
            <value>
            Valid values are from 0 to 1.
            Default value is <b>0.35f</b>.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            value is less than 0 or greater than 1.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.TemplateMatching.TemplateMatchingCommand.Result">
            <summary>
            Gets the result of command execution.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.FormsProcessing.TemplateMatching.TemplateMatchingResult">
            <summary>
            Stores an execution result of the <see cref="T:Vintasoft.Imaging.FormsProcessing.TemplateMatching.TemplateMatchingCommand" />.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.TemplateMatching.TemplateMatchingResult.TemplateImage">
            <summary>
            Gets the template image that matches the processed image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.TemplateMatching.TemplateMatchingResult.Image">
            <summary>
            Gets the processed image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.FormsProcessing.TemplateMatching.TemplateMatchingResult.ImageCompareResult">
            <summary>
            Gets the result of comparison of the processed image with the matching template image.
            </summary>
        </member>
        </members>
</doc>
