<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Vintasoft.Imaging.Pdf</name>
    </assembly>
    <members>
        <member name="T:Vintasoft.Imaging.Codecs.Decoders.PdfDecoderException">
            <summary>
            Represents error that occurs during loading PDF page image.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.PdfDecoderException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Decoders.PdfDecoderException" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.PdfDecoderException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Decoders.PdfDecoderException" /> class
            with a specified error message. 
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.PdfDecoderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Decoders.PdfDecoderException" /> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that contains the serialized
            object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual
            information about the source or destination.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.PdfDecoderException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Decoders.PdfDecoderException" /> class
            with a specified error message
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the
            current exception, or a null reference (Nothing in Visual Basic) if
            no inner exception is specified.</param>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.Decoders.PdfDecoder">
            <summary>
            Defines an decoder for PDF documents.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.PdfDecoder.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Decoders.PdfDecoder" /> class.
            </summary>
            <param name="stream">Stream with PDF document.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.PdfDecoder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Decoders.PdfDecoder" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.PdfDecoder.IsValidFormat(System.IO.Stream)">
            <summary>
            Determines that stream contains PDF document.
            </summary>
            <param name="stream">Stream with binary data of the PDF document.</param>
            <returns>
            <b>true</b> if stream contains PDF document;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.PdfDecoder.GetImage(System.Int32,System.Drawing.RectangleF,System.Single,Vintasoft.Imaging.Codecs.Decoders.DecodingSettings,Vintasoft.Imaging.Codecs.Decoders.RenderingSettings,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs},System.EventHandler{Vintasoft.Imaging.ImageRendering.IntermediateImageRequestEventArgs})">
            <summary>
            Returns a scaled rectangle of PDF page.
            </summary>
            <param name="pageIndex">The zero based page index.</param>
            <param name="rect">Rectangle on source image.</param>
            <param name="scale">Scale factor.</param>
            <param name="decodingSettings">Decoding settings.</param>
            <param name="renderingSettings">Rendering settings.</param>
            <param name="imageLoadingProgress">Delegate of the image loading progress.
            Can be set to <b>null</b> (<b>Nothing</b> in Visual Basic).</param>
            <param name="intermediateImageRequest">Delegate for requesting intermediate image.
            Can be set to <b>null</b> (<b>Nothing</b> in Visual Basic)</param>
            <returns>Scaled rectangle of PDF page.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.PdfDecoder.GetImageInfo(System.Int32,Vintasoft.Imaging.Codecs.Decoders.RenderingSettings)">
            <summary>
            Returns information about PDF page image without loading the PDF page data into memory.
            </summary>
            <param name="pageIndex">The zero based page index.</param>
            <param name="renderingSettings">Rendering settings used for getting info about
            the image of page.</param>
            <returns>Information about the image associated with the
            page of the source image.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <i>pageIndex</i>
            is less than zero or greater than number of pages.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>renderingSettings</i> is
            <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.PdfDecoder.GetImage(System.Int32,Vintasoft.Imaging.Codecs.Decoders.DecodingSettings,Vintasoft.Imaging.Codecs.Decoders.RenderingSettings,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})">
            <summary>
            Returns an image associated with the selected page of the image source.
            </summary>
            <param name="pageIndex">The zero based page index.</param>
            <param name="decodingSettings">Decoding settings used for decode the image of page.</param>
            <param name="renderingSettings">Rendering settings used for rendering the image of page.</param>
            <param name="imageLoadingProgress">Delegate of the image loading progress.
            Can be set to <b>null</b> (<b>Nothing</b> in Visual Basic).</param>
            <returns>Scaled image associated with the selected page of the image source.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <i>pageIndex</i>
            is less than zero or greater than number of pages.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>renderingSettings</i> is
            <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.PdfDecoder.GetThumbnail(System.Int32,System.Drawing.Size,Vintasoft.Imaging.Codecs.Decoders.DecodingSettings,Vintasoft.Imaging.Codecs.Decoders.RenderingSettings,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})">
            <summary>
            Returns a thumbnail image of the specified page of the PDF document.
            </summary>
            <param name="pageIndex">The zero based page index.</param>
            <param name="size">Size of the thumbnail.</param>
            <param name="decodingSettings">Decoding settings used for decode the thumbnail of page.</param>
            <param name="renderingSettings">Rendering settings used for rendering the thumbnail of page.</param>
            <param name="thumbnailLoadingProgress">Delegate of the thumbnail loading progress.
            Can be set to <b>null</b> (<b>Nothing</b> in Visual Basic).</param>
            <returns>Thumbnail image of the specified page of the PDF document.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.PdfDecoder.GetPageMetadata(System.Int32)">
            <summary>
            Returns a metadata of specified page of file.
            </summary>
            <param name="pageIndex">The zero based page index.</param>
            <returns>Metadata of specified page of file.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.PdfDecoder.Close">
            <summary>
            Closes the source of the decoder.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Decoders.PdfDecoder.Name">
            <summary>
            Gets the name of the decoder.
            </summary>       
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Decoders.PdfDecoder.IsVectorDecoder">
            <summary>
            Gets a value indicating whether the decoder is a vector decoder.
            </summary>
            <value>
            Always return <b>true</b>.
            </value>
            <remarks>
            Rendering settings have effect in
            <see cref="M:Vintasoft.Imaging.Codecs.Decoders.PdfDecoder.GetImageInfo(System.Int32,Vintasoft.Imaging.Codecs.Decoders.RenderingSettings)" /><br />
            <see cref="M:Vintasoft.Imaging.Codecs.Decoders.PdfDecoder.GetImage(System.Int32,Vintasoft.Imaging.Codecs.Decoders.DecodingSettings,Vintasoft.Imaging.Codecs.Decoders.RenderingSettings,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})" />
            methods only for vector decoder.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Decoders.PdfDecoder.PageCount">
            <summary>
            Gets the number of pages in the source image.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.Encoders.PdfEncoder">
            <summary>
            Defines an encoder for PDF documents.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.PdfEncoder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Encoders.PdfEncoder" /> class.
            </summary>
            <remarks>
            The following initial parameters of encoder will be used:<br />
            - Settings.Compression = <see cref="T:Vintasoft.Imaging.Codecs.Encoders.PdfImageCompression" />.Auto<br />
            - Settings.JpegQuality = 70
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.PdfEncoder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Encoders.PdfEncoder" /> class.
            </summary>
            <param name="createNewFile">Determines if the new PDF file should be
            created.</param>
            <remarks>
            The following initial parameters of encoder will be used:<br />
            - Settings.Compression = <see cref="T:Vintasoft.Imaging.Codecs.Encoders.PdfImageCompression" />.Auto<br />
            - Settings.JpegQuality = 70
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.PdfEncoder.#ctor(System.Boolean,Vintasoft.Imaging.Codecs.Encoders.PdfImageCompression)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Encoders.PdfEncoder" /> class.
            </summary>
            <param name="createNewFile">Determines if the new PDF file should be
            created.</param>
            <param name="compression">Compression algorithm which will be used at
            saving image to the PDF file.</param>
            <remarks>
            The following initial parameters of encoder will be used:<br />
            - Settings.JpegQuality = 70
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.PdfEncoder.#ctor(System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Encoders.PdfEncoder" /> class.
            </summary>
            <param name="createNewFile">Determines if the new PDF file should be
            created.</param>
            <param name="jpegQuality">Compression algorithm which will be used at
            saving image to the PDF file.</param>
            <remarks>
            The following initial parameters of encoder will be used:<br />
            - Settings.Compression = <see cref="T:Vintasoft.Imaging.Codecs.Encoders.PdfImageCompression" />.Auto<br />
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.PdfEncoder.GetImageTileGrid(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Returns a tile grid for specified image.
            </summary>
            <param name="image">VintasoftImage.</param>
            <returns>Tile grid represented as array of <see cref="T:System.Drawing.Rectangle" />.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.PdfEncoder.EncodeAndDrawImage(Vintasoft.Imaging.Pdf.PdfDocument,Vintasoft.Imaging.Pdf.Drawing.PdfGraphics,Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Encodes an image using the current encoder settings and draws 
            image on specified <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" />.
            </summary>
            <param name="document">PDF document which will contain an image.</param>
            <param name="pageGraphics">PDF graphics.</param>
            <param name="image">Image to encode.</param>
            <param name="progressController">Progress controller.</param>
            <remarks>
            PDF graphics will draw image in rectangle (x:0; y:0; width:1; height:1).
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.PdfEncoder.EncodeImage(Vintasoft.Imaging.Pdf.PdfDocument,Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Encodes an image using the current encoder settings.
            </summary>
            <param name="document">Document which will contain an image.</param>
            <param name="image">Image to encode.</param>
            <param name="progressController">Progress controller.</param>
            <returns>Encoded image as <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfPage" /> object.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.PdfEncoder.NeedEncodePage(Vintasoft.Imaging.Pdf.Tree.PdfPage,Vintasoft.Imaging.Pdf.PdfCompression,Vintasoft.Imaging.Pdf.PdfCompressionSettings)">
            <summary>
            Determines which action (encode or copy) must be made
            for adding the page to a PDF document.
            </summary>
            <param name="page">PDF page which should be added to PDF document.</param>
            <param name="compression">Compression which should be used for encoding the page.</param>
            <param name="compressionSettings">Compression settings
            which should be used for encoding the page.</param>
            <returns>
            <b>true</b> - PDF page must be encoded with specified encoding settings and
            added to a PDF document;
            <b>false</b> - PDF page must be copied as is (not encoded) to a PDF document.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.PdfEncoder.CreatePageVirtualMetadata">
            <summary>
            Creates virtual metadata tree.
            </summary>
            <remarks>
            This method is used in <see cref="M:Vintasoft.Imaging.Codecs.Encoders.EncoderBase.SaveImage(Vintasoft.Imaging.VintasoftImage,System.IO.Stream)" /> method.<br />
            <br />
            This method returns an empty metadata tree and
            it must be overriden in derived class if necessary.
            </remarks>
            <seealso cref="M:Vintasoft.Imaging.Codecs.Encoders.EncoderBase.SaveImage(Vintasoft.Imaging.VintasoftImage,System.IO.Stream)" />
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.PdfEncoder.SaveImages(Vintasoft.Imaging.ImageCollection,System.IO.Stream,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves the image collection as PDF document to the stream.
            </summary>
            <param name="images"><see cref="T:Vintasoft.Imaging.ImageCollection" />
            object to save.</param>
            <param name="stream">Stream where the image from collection
            should be saved.</param>
            <param name="progressController">Progress controller.</param>
            <returns>
            <b>true</b> - image collection is successfully saved to the stream;
            <b>false</b> - image collection is not saved to the stream because collection is empty,
            saving is not necessary or canceled.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if
            <i>imageCollection</i> or <i>stream</i> are <b>null</b>.</exception>
            <exception cref="T:Vintasoft.Imaging.Codecs.Encoders.PdfEncoderException">Thrown if image is locked and cannot be saved <b>or</b>
            image is not saved to PDF document or saved with errors.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.PdfEncoder.Name">
            <summary>
            Gets the name of the encoder.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.PdfEncoder.Settings">
            <summary>
            Gets or sets settings for encoding of PDF document.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.PdfEncoder.SupportedAnnotationsFormat">
            <summary>
            Gets the annotations format supported by the encoder.
            </summary>
            <value>
            Always returns AnnotationsFormat.None | AnnotationsFormat.VintasoftBinary | AnnotationsFormat.VintasoftXmp.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.PdfEncoder.AnnotationsFormat">
            <summary>
            Gets or sets a format(s) in which annotations must be saved.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if annotations format is not supported.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.PdfEncoder.CanGeneratePdfAnnotationAppearance">
            <summary>
            Gets a value indicating whether the encoder can generate the annotation appearance
            in PDF document.
            </summary>
            <value>
            <b>true</b> - encoder can generate the annotation appearance in PDF document, i.e.
            Vintasoft.Imaging.Annotation.Pdf.dll assembly is found;
            <b>false</b> - encoder cannot generate the annotation appearance in PDF document, i.e.
            Vintasoft.Imaging.Annotation.Pdf.dll assembly is not found.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.Encoders.PdfEncoderException">
            <summary>
            Represents error that occurs during saving PDF document.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.PdfPageThumbnailMetadata">
            <summary>
            Metadata node that stores thumbnail image of PDF page.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.PdfPageThumbnailMetadata.#ctor(Vintasoft.Imaging.Pdf.Tree.PdfPage)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Metadata.PdfPageThumbnailMetadata" /> class.
            </summary>
            <param name="page">PDF page.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>page</i> is <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.PdfPageThumbnailMetadata.OnRemoved">
            <summary>
            Occurs when metadata node is removed from children collection of parent node.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.PdfPageThumbnailMetadata.ThumbnailImage">
            <summary>
            Gets or sets a copy of page thumbnail image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.PdfPageThumbnailMetadata.HasValue">
            <summary>
            Gets a value indicating whether the node has value.
            </summary>    
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.PdfVintasoftXmpAnnotationsMetadata">
            <summary>
            Metadata node that stores annotation packet in VintasoftXmp format for PDF page.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.PdfVintasoftXmpAnnotationsMetadata.#ctor(Vintasoft.Imaging.Pdf.Tree.PdfPage)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Metadata.PdfVintasoftXmpAnnotationsMetadata" /> class.
            </summary>
            <param name="page">PDF page.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>page</i> is <b>null</b>.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.PdfVintasoftXmpAnnotationsMetadata.ValueAsByteArray">
            <summary>
            Gets or sets a byte array as value of the node.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.PdfVintasoftBinaryAnnotationsMetadata">
            <summary>
            Metadata node that stores annotation packet in VintasoftBinary format for PDF page.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.PdfVintasoftBinaryAnnotationsMetadata.#ctor(Vintasoft.Imaging.Pdf.Tree.PdfPage)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Metadata.PdfVintasoftBinaryAnnotationsMetadata" /> class.
            </summary>
            <param name="page">PDF page.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>page</i> is <b>null</b>.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.PdfVintasoftBinaryAnnotationsMetadata.ValueAsByteArray">
            <summary>
            Gets or sets a byte array as value of the node.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.PdfPageVirtualMetadata">
            <summary>
            Root node of tree which stores metadata of PDF page.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.PdfPageVirtualMetadata.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Metadata.PdfPageVirtualMetadata" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.PdfPageVirtualMetadata.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Metadata.PdfPageVirtualMetadata" /> class.
            </summary>
            <param name="name">Node name.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.PdfPageVirtualMetadata.CreateThumbnail">
            <summary>
            Creates value of <see cref="P:Vintasoft.Imaging.Metadata.PdfPageVirtualMetadata.Thumbnail" /> property.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.PdfPageVirtualMetadata.CreateThumbnail(System.Drawing.Size)">
            <summary>
            Creates value of <see cref="P:Vintasoft.Imaging.Metadata.PdfPageVirtualMetadata.Thumbnail" /> property.
            </summary>
            <param name="size">Size of thumbnail.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.PdfPageVirtualMetadata.CreateVintasoftBinaryAnnotations">
            <summary>
            Creates value of <see cref="P:Vintasoft.Imaging.Metadata.PdfPageVirtualMetadata.VintasoftBinaryAnnotations" /> property.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.PdfPageVirtualMetadata.CreateVintasoftXmpAnnotations">
            <summary>
            Creates value of <see cref="P:Vintasoft.Imaging.Metadata.PdfPageVirtualMetadata.VintasoftXmpAnnotations" /> property.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.PdfPageVirtualMetadata.CopyTo(Vintasoft.Imaging.Metadata.MetadataNode)">
            <summary>
            Copies a data of the metadata tree node to specified metadata tree node.
            </summary>
            <param name="node">The destination metadata node.</param>
            <returns>
            <b>true</b> if all subnodes (children) of this node is copied; otherwise <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.PdfPageVirtualMetadata.OnSaving(Vintasoft.Imaging.VintasoftImageMetadataSavingEventArgs)">
            <summary>
            Performs necessary changes in structure of this tree node using information
            about source tree and encoder that used for saving of this tree.
            </summary>
            <param name="e">The class that contains information about source 
            tree and encoder that used for saving of tree.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.PdfPageVirtualMetadata.VintasoftBinaryAnnotations">
            <summary>
            Gets the annotations, in VintasoftBinary format, of PDF page.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.PdfPageVirtualMetadata.VintasoftXmpAnnotations">
            <summary>
            Gets the annotations, in VintasoftXmp format, of PDF page.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.PdfPageVirtualMetadata.Thumbnail">
            <summary>
            Gets a metadata node that stores thumbnail of PDF page.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.PdfPageMetadata">
            <summary>
            Root node of tree which stores metadata of PDF page.
            </summary>   
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.PdfPageMetadata.#ctor(Vintasoft.Imaging.Pdf.Tree.PdfPage)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Metadata.PdfPageMetadata" /> class.
            </summary>
            <param name="page">PDF page.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>page</i> is <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.PdfPageMetadata.CreateVintasoftBinaryAnnotations">
            <summary>
            Creates value of <see cref="P:Vintasoft.Imaging.Metadata.PdfPageVirtualMetadata.VintasoftBinaryAnnotations" /> property.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.PdfPageMetadata.CreateVintasoftXmpAnnotations">
            <summary>
            Creates value of <see cref="P:Vintasoft.Imaging.Metadata.PdfPageVirtualMetadata.VintasoftXmpAnnotations" /> property.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.PdfPageMetadata.CreateThumbnail(System.Drawing.Size)">
            <summary>
            Creates value of <see cref="P:Vintasoft.Imaging.Metadata.PdfPageVirtualMetadata.Thumbnail" /> property.
            </summary>
            <param name="size">Size of thumbnail.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.PdfPageMetadata.ImageWidth">
            <summary>
            Gets the width, in pixels, of image.
            </summary>        
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.PdfPageMetadata.ImageHeight">
            <summary>
            Gets the height, in pixels, of image.
            </summary>        
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.PdfPageMetadata.BitsPerPixel">
            <summary>
            Gets the number of bits per pixel for image.
            </summary>      
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.PdfPageMetadata.MediaBox">
            <summary>
            Gets or sets the media box of PDF page.
            </summary>
            <remarks>
            This property defines a rectangle, expressed in default user space units,
            defining the boundaries of the physical medium on which the page is
            intended to be displayed or printed.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.PdfPageMetadata.CropBox">
            <summary>
            Gets or sets the crop box for this page.
            </summary>
            <value>
            Default value is <see cref="P:Vintasoft.Imaging.Metadata.PdfPageMetadata.MediaBox" />.
            </value>
            <remarks>
            This property defines rectangle, expressed in default user space units,
            defining the visible region of default user space. When the page is
            displayed or printed, its contents are to be clipped (cropped) to
            this rectangle and then imposed on the output medium in some
            implementation-defined manner.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.PdfPageMetadata.Resolution">
            <summary>
            Gets or sets the resolution of page, in pixels per inch.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Content.ImageExtraction.ContentImage">
            <summary>
            Provides information about image located on PDF page.
            </summary>
            <remarks>
            See also <see cref="T:Vintasoft.Imaging.Pdf.Content.ImageExtraction.ImageExtractor" /> class.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Content.ImageExtraction.ContentImage.RenderImage(System.Single)">
            <summary>
            Renders the <see cref="P:Vintasoft.Imaging.Pdf.Content.ImageExtraction.ContentImage.ImageResource" />.
            </summary>
            <param name="zoom">Zoom for rendering. Default value: 1 (rendering resolution - 72 dpi).</param>
            <returns>Rendered <see cref="T:Vintasoft.Imaging.VintasoftImage" /> object.</returns>
            <example>
            <code lang="VB.NET">
            Public Function RenderImage(imageViewer As ImageViewer, imageExtractorTool As PdfImageExtractorTool) As VintasoftImage
                If imageExtractorTool.SelectedImage Is Nothing Then
                    Return Nothing
                End If
            
                ' calculate zoom
                Dim zoom As Single = (96F / 72F) * (imageViewer.Zoom / 100F)
                ' return a rendered image
                Return imageExtractorTool.SelectedImage.RenderImage(zoom)
            End Function
            </code>
            <code lang="C#">
            public VintasoftImage RenderImage(ImageViewer imageViewer, PdfImageExtractorTool imageExtractorTool)
            {
                if (imageExtractorTool.SelectedImage == null)
                    return null;
            
                // calculate zoom
                float zoom = (96f / 72f) * (imageViewer.Zoom / 100f);
                // return a rendered image
                return imageExtractorTool.SelectedImage.RenderImage(zoom);
            }
            </code>
            </example>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Content.ImageExtraction.ContentImage.Page">
            <summary>
            Gets the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfPage" /> that contains this <see cref="T:Vintasoft.Imaging.Pdf.Content.ImageExtraction.ContentImage" />.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Content.ImageExtraction.ContentImage.Region">
            <summary>
            Gets the <see cref="T:Vintasoft.Imaging.Pdf.RegionF" /> of this 
            <see cref="T:Vintasoft.Imaging.Pdf.Content.ImageExtraction.ContentImage" /> in coordinates of the <see cref="P:Vintasoft.Imaging.Pdf.Content.ImageExtraction.ContentImage.Page" />.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Content.ImageExtraction.ContentImage.ImageResource">
            <summary>
            Gets the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfImageResource" /> associated with this <see cref="T:Vintasoft.Imaging.Pdf.Content.ImageExtraction.ContentImage" />.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Content.ImageExtraction.ContentImage.Resolution">
            <summary>
            Gets a rendering resolution of content image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Content.ImageExtraction.ContentImage.CTM">
            <summary>
            Gets the Current Transformation Matrix (CTM) that should be applied to image resource
            when image is rendered on the page.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Content.ImageExtraction.ImageExtractor">
            <summary>
            Allows to extract image from <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfPage" />.
            </summary>
            <remarks>
            See also <see cref="P:Vintasoft.Imaging.Pdf.Tree.PdfPage.ImageExtractor" /> property.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Content.ImageExtraction.ImageExtractor.FindImage(System.Drawing.PointF)">
            <summary>
            Finds the image at specified point.
            </summary>
            <param name="point">The <see cref="T:System.Drawing.PointF" /> for image search.</param>
            <returns>
            <see cref="T:Vintasoft.Imaging.Pdf.Content.ImageExtraction.ContentImage" /> object if the page contains image at specified point;
            otherwise <b>null</b>.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Content.ImageExtraction.ImageExtractor.Images">
            <summary>
            Gets an images array of PDF page associated with this object.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextSearchEngine">
            <summary>
            Represents an <b>abstract</b> base class that defines a text search algorithm.
            </summary>
            <example>This example shows how to create the text search engine for searching digits on PDF page.
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Outputs the information about digits in content of PDF document.
            ''' &lt;/summary&gt;
            ''' &lt;param name="document"&gt;PDF document where digits should be searched.&lt;/param&gt;
            Public Sub SearchDigitsInTextOfPdfDocumentUsingTextSearchEngine(document As PdfDocument)
                Console.WriteLine("Searching the digits in text of PDF document.")
            
                For i As Integer = 0 To document.Pages.Count - 1
                    Dim textRegions As TextRegion() = AdvancedDigitsSearchOnPdfPage(document.Pages(i))
                    If textRegions IsNot Nothing Then
                        For j As Integer = 0 To textRegions.Length - 1
                            Console.WriteLine(String.Format("- Text={0}, Rectangle={1}", textRegions(j).TextContent, textRegions(j).Rectangle))
                        Next
                    End If
                Next
            
                Console.WriteLine("Searching the digits in text of PDF document is finished.")
            End Sub
            
            ''' &lt;summary&gt;
            ''' Searches digits on PDF page.
            ''' &lt;/summary&gt;
            ''' &lt;param name="page"&gt;PDF page where digits should be searched.&lt;/param&gt;
            ''' &lt;returns&gt;An array of text regions on PDF page where text was found.&lt;/returns&gt;
            Public Function AdvancedDigitsSearchOnPdfPage(page As PdfPage) As TextRegion()
                Dim textRegions As New List(Of TextRegion)()
                Dim digitsSearchEngine As New DigitsSearchEngine()
            
                Dim textRegion As TextRegion = Nothing
                Dim startIndex As Integer = 0
                Do
                    ' search text
                    textRegion = page.TextRegion.FindText(digitsSearchEngine, startIndex, False)
                    If textRegion IsNot Nothing Then
                        ' add result
                        textRegions.Add(textRegion)
                        ' shitf start index
                        startIndex += textRegion.TextContent.Length
            
                    End If
                Loop While textRegion IsNot Nothing
            
                Return textRegions.ToArray()
            End Function
            
            ''' &lt;summary&gt;
            ''' Class for searching the digits in text of PDF page.
            ''' &lt;/summary&gt;
            Private Class DigitsSearchEngine
                Inherits TextSearchEngine
            
                ''' &lt;summary&gt;
                ''' Searches the first text matching in the string of PDF page.
                ''' &lt;/summary&gt;
                ''' &lt;param name="sourceString"&gt;Source string (string of PDF page) where text must be searched.&lt;/param&gt;
                ''' &lt;param name="startIndex"&gt;The zero-based index, in the sourceString, from which text must be searched.&lt;/param&gt;
                ''' &lt;param name="length"&gt;The number of characters, in the sourceString, to analyze.&lt;/param&gt;
                ''' &lt;param name="rightToLeft"&gt;Indicates that text should be searched from right to left.&lt;/param&gt;
                ''' &lt;returns&gt;
                ''' Vintasoft.Imaging.Pdf.Content.TextExtraction.TextSearchResult object that 
                ''' contains information about searched text if text is found; otherwise, null.
                ''' &lt;/returns&gt; 
                Public Overrides Function Find(sourceString As String, startIndex As Integer, length As Integer, rightToLeft As Boolean) As TextSearchResult
                    Dim startDigitIndex As Integer = -1
                    Dim endDigitIndex As Integer = -1
                    Dim start As Integer = 0
                    Dim [end] As Integer = 0
            
                    ' if searching text from the right to the left
                    If rightToLeft Then
                        start = startIndex + length
                        [end] = 0
                        For index As Integer = start - 1 To [end] Step -1
                            If Char.IsDigit(sourceString(index)) AndAlso endDigitIndex = -1 Then
                                endDigitIndex = index + 1
                            ElseIf Not Char.IsDigit(sourceString(index)) AndAlso endDigitIndex &lt;&gt; -1 Then
                                startDigitIndex = index + 1
                                Exit For
                            End If
                        Next
                        If endDigitIndex &lt;&gt; -1 AndAlso startDigitIndex = -1 Then
                            startDigitIndex = 0
                        End If
                    Else
                        ' if searching text from the left to the right
                        start = startIndex
                        [end] = startIndex + length
                        For index As Integer = start To [end] - 1
                            If Char.IsDigit(sourceString(index)) AndAlso startDigitIndex = -1 Then
                                startDigitIndex = index
                            ElseIf Not Char.IsDigit(sourceString(index)) AndAlso startDigitIndex &lt;&gt; -1 Then
                                endDigitIndex = index
                                Exit For
                            End If
                        Next
                        If startDigitIndex &lt;&gt; -1 AndAlso endDigitIndex = -1 Then
                            endDigitIndex = [end]
                        End If
                    End If
            
                    ' if digit is not found
                    If startDigitIndex = -1 Then
                        Return Nothing
                    End If
            
                    ' return the text search result
                    Return New TextSearchResult(startDigitIndex, endDigitIndex - startDigitIndex)
                End Function
            End Class
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Outputs the information about digits in content of PDF document.
            /// &lt;/summary&gt;
            /// &lt;param name="document"&gt;PDF document where digits should be searched.&lt;/param&gt;
            public void SearchDigitsInTextOfPdfDocumentUsingTextSearchEngine(PdfDocument document)
            {
                Console.WriteLine("Searching the digits in text of PDF document.");
            
                for (int i = 0; i &lt; document.Pages.Count; i++)
                {
                    TextRegion[] textRegions = AdvancedDigitsSearchOnPdfPage(document.Pages[i]);
                    if (textRegions != null)
                    {
                        for (int j = 0; j &lt; textRegions.Length; j++)
                        {
                            Console.WriteLine(string.Format("- Text={0}, Rectangle={1}",
                                textRegions[j].TextContent,
                                textRegions[j].Rectangle));
                        }
                    }
                }
            
                Console.WriteLine("Searching the digits in text of PDF document is finished.");
            }
            
            /// &lt;summary&gt;
            /// Searches digits on PDF page.
            /// &lt;/summary&gt;
            /// &lt;param name="page"&gt;PDF page where digits should be searched.&lt;/param&gt;
            /// &lt;returns&gt;An array of text regions on PDF page where text was found.&lt;/returns&gt;
            public TextRegion[] AdvancedDigitsSearchOnPdfPage(PdfPage page)
            {
                List&lt;TextRegion&gt; textRegions = new List&lt;TextRegion&gt;();
                DigitsSearchEngine digitsSearchEngine = new DigitsSearchEngine();
            
                TextRegion textRegion = null;
                int startIndex = 0;
                do
                {
                    // search text
                    textRegion = page.TextRegion.FindText(digitsSearchEngine, ref startIndex, false);
                    if (textRegion != null)
                    {
                        // add result
                        textRegions.Add(textRegion);
                        // shitf start index
                        startIndex += textRegion.TextContent.Length;
                    }
            
                } while (textRegion != null);
            
                return textRegions.ToArray();
            }
            
            /// &lt;summary&gt;
            /// Class for searching the digits in text of PDF page.
            /// &lt;/summary&gt;
            class DigitsSearchEngine : TextSearchEngine
            {
            
                /// &lt;summary&gt;
                /// Searches the first text matching in the string of PDF page.
                /// &lt;/summary&gt;
                /// &lt;param name="sourceString"&gt;Source string (string of PDF page) where text must be searched.&lt;/param&gt;
                /// &lt;param name="startIndex"&gt;The zero-based index, in the sourceString, from which text must be searched.&lt;/param&gt;
                /// &lt;param name="length"&gt;The number of characters, in the sourceString, to analyze.&lt;/param&gt;
                /// &lt;param name="rightToLeft"&gt;Indicates that text should be searched from right to left.&lt;/param&gt;
                /// &lt;returns&gt;
                /// Vintasoft.Imaging.Pdf.Content.TextExtraction.TextSearchResult object that 
                /// contains information about searched text if text is found; otherwise, null.
                /// &lt;/returns&gt; 
                public override TextSearchResult Find(string sourceString, int startIndex, int length, bool rightToLeft)
                {
                    int startDigitIndex = -1;
                    int endDigitIndex = -1;
                    int start = 0;
                    int end = 0;
            
                    // if searching text from the right to the left
                    if (rightToLeft)
                    {
                        start = startIndex + length;
                        end = 0;
                        for (int index = start - 1; index &gt;= end; index--)
                        {
                            if (char.IsDigit(sourceString[index]) &amp;&amp; endDigitIndex == -1)
                                endDigitIndex = index + 1;
                            else if (!char.IsDigit(sourceString[index]) &amp;&amp; endDigitIndex != -1)
                            {
                                startDigitIndex = index + 1;
                                break;
                            }
                        }
                        if (endDigitIndex != -1 &amp;&amp; startDigitIndex == -1)
                            startDigitIndex = 0;
                    }
                    // if searching text from the left to the right
                    else
                    {
                        start = startIndex;
                        end = startIndex + length;
                        for (int index = start; index &lt; end; index++)
                        {
                            if (char.IsDigit(sourceString[index]) &amp;&amp; startDigitIndex == -1)
                                startDigitIndex = index;
                            else if (!char.IsDigit(sourceString[index]) &amp;&amp; startDigitIndex != -1)
                            {
                                endDigitIndex = index;
                                break;
                            }
                        }
                        if (startDigitIndex != -1 &amp;&amp; endDigitIndex == -1)
                            endDigitIndex = end;
                    }
            
                    // if digit is not found
                    if (startDigitIndex == -1)
                        return null;
            
                    // return the text search result
                    return new TextSearchResult(startDigitIndex, endDigitIndex - startDigitIndex);
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextSearchEngine.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextSearchEngine" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextSearchEngine.Create(System.String)">
            <summary>
            Creates a new instance of <see cref="T:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextSearchEngine" />
            which can be used for searching text string in PDF page.
            </summary>
            <param name="value">Text to search.</param>
            <returns>A new text search engine.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextSearchEngine.Create(System.String,System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextSearchEngine" />
            which can be used for searching text string in PDF page.
            </summary>
            <param name="value">Text to search.</param>
            <param name="ignoreCase">Indicates that the case sensitivity should be ignored.</param>
            <returns>A new text search engine.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextSearchEngine.Create(System.Text.RegularExpressions.Regex)">
            <summary>
            Creates a new instance of <see cref="T:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextSearchEngine" />
            which can be used for searching text string in PDF page using regular expression.
            </summary>
            <param name="expression">Regular expression for searching the text.</param>
            <returns>A new text search engine.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextSearchEngine.Find(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Searches the first text matching in the string of PDF page.
            </summary>
            <param name="sourceString">Source string (string of PDF page)
            where text must be searched.</param>
            <param name="startIndex">The zero-based index, in the <i>sourceString</i>,
            from which text must be searched.</param>
            <param name="length">The number of characters, in the <i>sourceString</i>,
            to analyze.</param>
            <param name="rightToLeft">Indicates that text should be searched from right to left.</param>
            <returns>
            <see cref="T:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextSearchResult" /> object that contains information about searched text
            if text is found; otherwise, <b>null</b>.
            </returns>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextSearchResult">
            <summary>
            Stores results of text search.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextSearchResult.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextSearchResult" /> class.
            </summary>
            <param name="index">The zero-based index of the found text.</param>
            <param name="length">The length of the found text.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextSearchResult.Index">
            <summary>
            Gets the zero-based index of the found text.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextSearchResult.Length">
            <summary>
            Gets the length of the found text.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextSelectionMode">
            <summary>
            Specifies available text selection modes.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextSelectionMode.Rectangle">
            <summary> 
            The rectangle selection. Selects text in 
            specified rectangle.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextSelectionMode.UseFullLines">
            <summary> 
            The standard selection. Selects all lines from 
            first line to the last line in specified rectangle.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextRegionLine">
            <summary>
            Provides information about line of <see cref="T:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextRegionSymbol" />.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextRegionLine.ToString">
            <summary> 
            Returns the string representation of this <see cref="T:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextRegionLine" />.
            </summary>
            <returns>String representation of this <see cref="T:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextRegionLine" />.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextRegionLine.Symbols">
            <summary> 
            Gets an array of symbols of this line.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextRegionLine.SelectionRegion">
            <summary>
            Gets a selection <see cref="T:Vintasoft.Imaging.Pdf.RegionF">region</see> of this line.
            </summary>
            <remarks>
            The <see cref="P:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextRegionLine.SelectionRegion" /> property returns one region.<br />
            <br />
            The <see cref="P:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextRegionLine.SelectionRegions" /> property returns several regions.
            Each region presents a group of symbols.
            Symbols are grouped if they have the same size and they are standing very close.
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextRegionLine.SelectionRegions" />
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextRegionLine.SelectionRegions">
            <summary>
            Gets a selection regions of this line.
            </summary>
            <remarks>
            The <see cref="P:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextRegionLine.SelectionRegion" /> property returns one region.<br />
            <br />
            The <see cref="P:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextRegionLine.SelectionRegions" /> property returns several regions.
            Each region presents a group of symbols.
            Symbols are grouped if they have the same size and they are standing very close.
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextRegionLine.SelectionRegion" />
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextRegionLine.TextContent">
            <summary>
            Gets a text content of this line.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.PdfDocumentRevision">
            <summary>
            Contains information about PDF document revision.
            </summary>
            <remarks>
            PDF document revision is a state of PDF document at the moment when
            PDF document was signed using digital certificate.
            </remarks>
            <example>
            Here is an example that shows how to save all revisions of PDF document to the separate files:
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Saves the revisions of PDF document to the separate files.
            ''' &lt;/summary&gt;
            ''' &lt;param name="filename"&gt;The filename of PDF document.&lt;/param&gt;
            Public Shared Sub SaveRevisions(filename As String)
                ' open PDF document
                Using document As New PdfDocument(filename)
                    Dim revisionFilename As String = String.Format("{0}\{1}_rev{{0}}.pdf", Path.GetDirectoryName(filename), Path.GetFileNameWithoutExtension(filename))
            
                    ' if PDF document has revisions
                    If document.Revisions IsNot Nothing Then
                        ' for each revision
                        For Each revision As PdfDocumentRevision In document.Revisions
                            ' save revision to a file
                            revision.CopyRevisionTo(String.Format(revisionFilename, revision.RevisionNumber))
                        Next
                    End If
                End Using
            End Sub
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Saves the revisions of PDF document to the separate files.
            /// &lt;/summary&gt;
            /// &lt;param name="filename"&gt;The filename of PDF document.&lt;/param&gt;
            public static void SaveRevisions(string filename)
            {
                // open PDF document
                using (PdfDocument document = new PdfDocument(filename))
                {
                    string revisionFilename = string.Format(@"{0}\{1}_rev{{0}}.pdf",
                        Path.GetDirectoryName(filename),
                        Path.GetFileNameWithoutExtension(filename));
            
                    // if PDF document has revisions
                    if (document.Revisions != null)
                    {
                        // for each revision
                        foreach (PdfDocumentRevision revision in document.Revisions)
                            // save revision to a file
                            revision.CopyRevisionTo(string.Format(revisionFilename, revision.RevisionNumber));
                    }
                }
            }
            </code>
            </example>
            <seealso cref="M:Vintasoft.Imaging.Pdf.PdfDocumentRevision.CopyRevisionTo(System.IO.Stream)" />
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfDocumentRevision.CopyRevisionTo(System.IO.Stream)">
            <summary>
            Copies the document revision to specified stream.
            </summary>
            <param name="output">The output stream.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfDocumentRevision.CopyRevisionTo(System.String)">
            <summary>
            Copies the document revision to specified file.
            </summary>
            <param name="filename">The output PDF filename.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfDocumentRevision.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.PdfDocumentRevision.RevisionNumber">
            <summary>
            Gets the revision number.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.PdfFontManager">
            <summary>
            Represents font manager of PDF document.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfFontManager.GetSystemTrueTypeFontNames">
            <summary>
            Returns an array of strings that contains names of the system TrueType fonts.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfFontManager.GetSystemTrueTypeFontFileName(System.String)">
            <summary>
            Returns a filename of the TrueType font by font name.
            </summary>
            <param name="trueTypeFontName">A name of the TrueType font.</param>
            <returns>Filename of the TrueType font.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfFontManager.GetStandardFont(Vintasoft.Imaging.Pdf.Tree.Fonts.StandardFontType)">
            <summary>
            Returns the standard font of specified type.
            </summary>
            <param name="standardFontType">Standard font type.</param>
            <returns><see cref="T:Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFont" /> of specified <see cref="T:Vintasoft.Imaging.Pdf.Tree.Fonts.StandardFontType" />.</returns>
            <example>
            Here is an example that demonstrates how to create a font based on standard Times-Roman font:
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Creates font of PDF document based on "Times-Roman".
            ''' &lt;/summary&gt;
            ''' &lt;param name="pdfFilename"&gt;The filename of PDF document.&lt;/param&gt;
            Public Shared Sub CreateStandartFont(pdfFilename As String)
                ' open PDF document
                Using document As New PdfDocument(pdfFilename)
                    ' create font based on "Times-Roman" font
                        '...
                    Dim timesRomanFont As PdfFont = document.FontManager.GetStandardFont(StandardFontType.TimesRoman)
                End Using
            End Sub
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Creates font of PDF document based on "Times-Roman".
            /// &lt;/summary&gt;
            /// &lt;param name="pdfFilename"&gt;The filename of PDF document.&lt;/param&gt;
            public static void CreateStandartFont(string pdfFilename)
            {
                // open PDF document
                using (PdfDocument document = new PdfDocument(pdfFilename))
                {
                    // create font based on "Times-Roman" font
                    PdfFont timesRomanFont = document.FontManager.GetStandardFont(StandardFontType.TimesRoman);
                    //...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfFontManager.CreateSimpleFontFromTrueTypeFont(System.String)">
            <summary>
            Creates a simple font based on TrueType font file.
            </summary>
            <param name="filename">Filename of the TrueType font.</param>
            <returns>Simple <see cref="T:Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFont" />.</returns>
            <seealso cref="M:Vintasoft.Imaging.Pdf.PdfFontManager.CreateSimpleFontFromTrueTypeFont(System.IO.Stream)" />
            <seealso cref="M:Vintasoft.Imaging.Pdf.PdfFontManager.CreateSimpleFontFromTrueTypeFont(System.IO.Stream,Vintasoft.Imaging.Pdf.PdfCompression)" />
            <example>
            Here is an example that demonstrates how to create a simple font based on TrueType font:
            <code lang="VB.NET">
            /// &lt;summary&gt;
            /// Create font of PDF document based on TrueType font.
            /// &lt;/summary&gt;
            /// &lt;param name="pdfFilename"&gt;The filename of PDF document.&lt;/param&gt;
            /// &lt;param name="trueTypeFontFilename"&gt;The filename of TrueType font.&lt;/param&gt;
            public static void CreateSimpleFont(string pdfFilename, string trueTypeFontFilename)
            {
                // open PDF document
                using (PdfDocument document = new PdfDocument(pdfFilename))
                {
                    // create font of PDF document based on TrueType font
                    PdfFont newFont = document.FontManager.CreateSimpleFontFromTrueTypeFont(trueTypeFontFilename);
                    //...
                }
            }
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Create font of PDF document based on TrueType font.
            /// &lt;/summary&gt;
            /// &lt;param name="pdfFilename"&gt;The filename of PDF document.&lt;/param&gt;
            /// &lt;param name="trueTypeFontFilename"&gt;The filename of TrueType font.&lt;/param&gt;
            public static void CreateSimpleFont(string pdfFilename, string trueTypeFontFilename)
            {
                // open PDF document
                using (PdfDocument document = new PdfDocument(pdfFilename))
                {
                    // create font of PDF document based on TrueType font
                    PdfFont newFont = document.FontManager.CreateSimpleFontFromTrueTypeFont(trueTypeFontFilename);
                    //...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfFontManager.CreateSimpleFontFromTrueTypeFont(System.IO.Stream)">
            <summary>
            Creates a simple font based on a file of TrueType font.
            </summary>
            <param name="stream">Stream that contains a file of TrueType font.</param>
            <returns>Simple <see cref="T:Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFont" />.</returns>
            <remarks>
            This method compress a font program using the <see cref="T:Vintasoft.Imaging.Pdf.PdfCompression" />.Zip
            compression.
            </remarks>
            <seealso cref="M:Vintasoft.Imaging.Pdf.PdfFontManager.CreateSimpleFontFromTrueTypeFont(System.IO.Stream,Vintasoft.Imaging.Pdf.PdfCompression)" />
            <seealso cref="M:Vintasoft.Imaging.Pdf.PdfFontManager.CreateSimpleFontFromTrueTypeFont(System.String)" />
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfFontManager.CreateSimpleFontFromTrueTypeFont(System.IO.Stream,Vintasoft.Imaging.Pdf.PdfCompression)">
            <summary>
            Creates a simple font based on a file of TrueType font.
            </summary>
            <param name="stream">Stream that contains a file of TrueType font.</param>
            <param name="fontProgramCompression">Compression that should be used for
            compressing font program in PDF document.</param>
            <returns>Simple <see cref="T:Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFont" />.</returns>
            <seealso cref="M:Vintasoft.Imaging.Pdf.PdfFontManager.CreateSimpleFontFromTrueTypeFont(System.IO.Stream)" />
            <seealso cref="M:Vintasoft.Imaging.Pdf.PdfFontManager.CreateSimpleFontFromTrueTypeFont(System.String)" />
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfFontManager.CreateCIDFontFromTrueTypeFont(System.String)">
            <summary>
            Creates a CID font based on a file of TrueType font.
            </summary>
            <param name="filename">Filename of TrueType font.</param>
            <returns>CID <see cref="T:Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFont" />.</returns>
            <seealso cref="M:Vintasoft.Imaging.Pdf.PdfFontManager.CreateCIDFontFromTrueTypeFont(System.IO.Stream)" />
            <seealso cref="M:Vintasoft.Imaging.Pdf.PdfFontManager.CreateCIDFontFromTrueTypeFont(System.IO.Stream,Vintasoft.Imaging.Pdf.PdfCompression)" />
            <example>
            Here is an example that demonstrates how to create a CID font based on TrueType font:
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Creates CID font of PDF document based on TrueType font.
            ''' &lt;/summary&gt;
            ''' &lt;param name="pdfFilename"&gt;The filename of PDF document.&lt;/param&gt;
            ''' &lt;param name="trueTypeFontFilename"&gt;The filename of TrueType font.&lt;/param&gt;
            Public Shared Sub CreateCIDFont(pdfFilename As String, trueTypeFontFilename As String)
                ' open PDF document
                Using document As New PdfDocument(pdfFilename)
                    ' create CID font of PDF document based on TrueType font
                        '...
                    Dim newFont As PdfFont = document.FontManager.CreateCIDFontFromTrueTypeFont(trueTypeFontFilename)
                End Using
            End Sub
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Creates CID font of PDF document based on TrueType font.
            /// &lt;/summary&gt;
            /// &lt;param name="pdfFilename"&gt;The filename of PDF document.&lt;/param&gt;
            /// &lt;param name="trueTypeFontFilename"&gt;The filename of TrueType font.&lt;/param&gt;
            public static void CreateCIDFont(string pdfFilename, string trueTypeFontFilename)
            {
                // open PDF document
                using (PdfDocument document = new PdfDocument(pdfFilename))
                {
                    // create CID font of PDF document based on TrueType font
                    PdfFont newFont = document.FontManager.CreateCIDFontFromTrueTypeFont(trueTypeFontFilename);
                    //...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfFontManager.CreateCIDFontFromTrueTypeFont(System.IO.Stream)">
            <summary>
            Creates a CID font based on a file of TrueType font.
            </summary>
            <param name="stream">Stream that contains a file of TrueType font.</param>
            <returns>CID <see cref="T:Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFont" />.</returns>
            <seealso cref="M:Vintasoft.Imaging.Pdf.PdfFontManager.CreateCIDFontFromTrueTypeFont(System.IO.Stream,Vintasoft.Imaging.Pdf.PdfCompression)" />
            <seealso cref="M:Vintasoft.Imaging.Pdf.PdfFontManager.CreateCIDFontFromTrueTypeFont(System.String)" />
            <example>
            Here is an example that demonstrates how to add a text in English,
            Russian and Chinese languages onto a PDF page:
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Creates page of PDF document with English, Russian and Chinese text.
            ''' &lt;/summary&gt;
            ''' &lt;param name="pdfFilename"&gt;The filename of PDF document.&lt;/param&gt;
            Public Shared Sub CreatePdfPageWithEnRuCh(pdfFilename As String)
                ' open PDF document
                Using document As New PdfDocument(pdfFilename)
                    ' create empty PDF page
                    Dim page As New PdfPage(document, PaperSizeKind.A4)
                    ' add page to PDF document
                    document.Pages.Add(page)
            
                    ' text size
                    Dim fontSize As Single = 24F
                    ' text brush
                    Dim brush As New PdfBrush(Color.Black)
            
                    ' get names of font
                    Dim fontNames As String() = PdfFontManager.GetSystemTrueTypeFontNames()
            
                    ' create fornt for English text
                    Dim englishFont As PdfFont = Nothing
                    ' if "Microsoft Himalaya" font exists
                    If Array.IndexOf(fontNames, "Microsoft Himalaya") &gt;= 0 Then
                        ' create PDF font based on "Microsoft Himalaya" font
                        englishFont = document.FontManager.CreateSimpleFontFromTrueTypeFont(PdfFontManager.GetSystemTrueTypeFontFileName("Microsoft Himalaya"))
                    Else
                        ' if "Microsoft Himalaya" font does NOT exist
                        Throw New Exception("'Microsoft Himalaya' font is not found in the system.")
                    End If
            
                    ' create font for Russian text
                    Dim russianFont As PdfFont = Nothing
                    ' if "Times New Roman" font exists
                    If Array.IndexOf(fontNames, "Times New Roman") &gt;= 0 Then
                        ' create PDF font based on "Times New Roman" font
                        russianFont = document.FontManager.CreateCIDFontFromTrueTypeFont(PdfFontManager.GetSystemTrueTypeFontFileName("Times New Roman"))
                    Else
                        ' if "Times New Roman" font does NOT exist
                        Throw New Exception("'Times New Roman' font is not found in the system.")
                    End If
            
                    ' create font for Chinese text
                    Dim chineseFont As PdfFont = Nothing
                    ' if "SimSun-ExtB" font exists
                    If Array.IndexOf(fontNames, "SimSun-ExtB") &gt;= 0 Then
                        ' create PDF font based on "SimSun-ExtB" font
                        chineseFont = document.FontManager.CreateCIDFontFromTrueTypeFont(PdfFontManager.GetSystemTrueTypeFontFileName("SimSun-ExtB"))
                    Else
                        ' if "SimSun-ExtB" font does NOT exist
                        Throw New Exception("'SimSun-ExtB' font is not found in the system.")
                    End If
            
                    ' get PDF graphics of page
                    Using graphics As PdfGraphics = page.GetGraphics()
                        ' location of English text
                        Dim location As New PointF(50, page.Size.Height - 50)
                        ' draw English text
                        graphics.DrawString("Hello", englishFont, fontSize, brush, location)
            
                        ' location of Russian text
                        location.Y -= 50
                        ' draw Russian text
                        graphics.DrawString("Привет", russianFont, fontSize, brush, location)
            
                        ' location of Chinese text
                        location.Y -= 50
                        ' draw Chinese text
                        graphics.DrawString("您好", chineseFont, fontSize, brush, location)
                    End Using
            
                    ' save changes to a file
                    document.SaveChanges()
                End Using
            End Sub
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Creates page of PDF document with English, Russian and Chinese text.
            /// &lt;/summary&gt;
            /// &lt;param name="pdfFilename"&gt;The filename of PDF document.&lt;/param&gt;
            public static void CreatePdfPageWithEnRuCh(string pdfFilename)
            {
                // open PDF document
                using (PdfDocument document = new PdfDocument(pdfFilename))
                {
                    // create empty PDF page
                    PdfPage page = new PdfPage(document, PaperSizeKind.A4);
                    // add page to PDF document
                    document.Pages.Add(page);
            
                    // text size
                    float fontSize = 24f;
                    // text brush
                    PdfBrush brush = new PdfBrush(Color.Black);
            
                    // get names of font
                    string[] fontNames = PdfFontManager.GetSystemTrueTypeFontNames();
            
                    // create fornt for English text
                    PdfFont englishFont = null;
                    // if "Microsoft Himalaya" font exists
                    if (Array.IndexOf(fontNames, "Microsoft Himalaya") &gt;= 0)
                        // create PDF font based on "Microsoft Himalaya" font
                        englishFont = document.FontManager.CreateSimpleFontFromTrueTypeFont(PdfFontManager.GetSystemTrueTypeFontFileName("Microsoft Himalaya"));
                    // if "Microsoft Himalaya" font does NOT exist
                    else
                        throw new Exception("'Microsoft Himalaya' font is not found in the system.");
            
                    // create font for Russian text
                    PdfFont russianFont = null;
                    // if "Times New Roman" font exists
                    if (Array.IndexOf(fontNames, "Times New Roman") &gt;= 0)
                        // create PDF font based on "Times New Roman" font
                        russianFont = document.FontManager.CreateCIDFontFromTrueTypeFont(PdfFontManager.GetSystemTrueTypeFontFileName("Times New Roman"));
                    // if "Times New Roman" font does NOT exist
                    else
                        throw new Exception("'Times New Roman' font is not found in the system.");
            
                    // create font for Chinese text
                    PdfFont chineseFont = null;
                    // if "SimSun-ExtB" font exists
                    if (Array.IndexOf(fontNames, "SimSun-ExtB") &gt;= 0)
                        // create PDF font based on "SimSun-ExtB" font
                        chineseFont = document.FontManager.CreateCIDFontFromTrueTypeFont(PdfFontManager.GetSystemTrueTypeFontFileName("SimSun-ExtB"));
                    // if "SimSun-ExtB" font does NOT exist
                    else
                        throw new Exception("'SimSun-ExtB' font is not found in the system.");
            
                    // get PDF graphics of page
                    using (PdfGraphics graphics = page.GetGraphics())
                    {
                        // location of English text
                        PointF location = new PointF(50, page.Size.Height - 50);
                        // draw English text
                        graphics.DrawString("Hello", englishFont, fontSize, brush, location);
            
                        // location of Russian text
                        location.Y -= 50;
                        // draw Russian text
                        graphics.DrawString("Привет", russianFont, fontSize, brush, location);
            
                        // location of Chinese text
                        location.Y -= 50;
                        // draw Chinese text
                        graphics.DrawString("您好", chineseFont, fontSize, brush, location);
                    }
            
                    // save changes to a file
                    document.SaveChanges();
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfFontManager.CreateCIDFontFromTrueTypeFont(System.IO.Stream,Vintasoft.Imaging.Pdf.PdfCompression)">
            <summary>
            Creates a CID font based on a file of TrueType font.
            </summary>
            <param name="stream">Stream that contains a file of TrueType font.</param>
            <param name="fontProgramCompression">Compression that should be used for
            compressing font program in PDF document.</param>
            <returns>CID <see cref="T:Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFont" />.</returns>
            <seealso cref="M:Vintasoft.Imaging.Pdf.PdfFontManager.CreateCIDFontFromTrueTypeFont(System.IO.Stream)" />
            <seealso cref="M:Vintasoft.Imaging.Pdf.PdfFontManager.CreateCIDFontFromTrueTypeFont(System.String)" />
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfFontManager.CreateFontCopy(Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFont)">
            <summary>
            Creates copy of specified font.
            </summary>
            <param name="sourceFont">Source font.</param>
            <returns>Source font copy.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfFontManager.PackFont(Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFont,Vintasoft.Imaging.Pdf.Content.TextExtraction.TextSymbol[])">
            <summary>
            Packs the specified PDF font.
            </summary>
            <param name="font">The PDF font that should be packed.</param>
            <param name="symbols">The symbols that the font must contain.
            All other symbols will be removed from font.</param>
            <exception cref="T:System.NotSupportedException">Thrown if
            there is no mapping from Unicode to symbol codes.</exception>
            <remarks>
            Fonts are packed using several methods, including font subsetting,
            i.e., removal of all symbols from font that are not used in PDF document.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfFontManager.PackFont(Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFont,System.UInt64[])">
            <summary>
            Packs the specified PDF font.
            </summary>
            <param name="font">The PDF font that should be packed.</param>
            <param name="symbolCodes">The Unicode codes of symbols that the font must contain.
            All other symbols will be removed from font.</param>
            <exception cref="T:System.NotSupportedException">Thrown if
            there is no mapping from Unicode to symbol codes.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfFontManager.PackFont(Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFont)">
            <summary>
            Packs the specified PDF font.
            </summary>
            <param name="font">The PDF font that should be packed.</param>
            <returns>
            <b>true</b> - font program was packed successfully,
            <b>false</b> - font program was NOT packed.
            </returns>
            <exception cref="T:System.InvalidOperationException">Thrown if
            the font and font manager does not belong to the same PDF document.
            </exception>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfFontManager.PackAllFonts">
            <summary>
            Packs all fonts of the PDF document.
            </summary>
            <example>
            Here is an example that shows how to pack all fonts of PDF document:
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Removes all unused characters from fonts of PDF document.
            ''' &lt;/summary&gt;
            ''' &lt;param name="pdfFilename"&gt;The filename of PDF document.&lt;/param&gt;
            ''' &lt;param name="resultFilename"&gt;The filename of resulting PDF document.&lt;/param&gt;
            Public Shared Sub PackAllFontsOfDocument(pdfFilename As String, resultFilename As String)
                Using document As New PdfDocument(pdfFilename)
                    ' pack all fonts
                    document.FontManager.PackAllFonts()
                    ' pack and save document to new location
                    document.Pack(resultFilename)
                End Using
            End Sub
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Removes all unused characters from fonts of PDF document.
            /// &lt;/summary&gt;
            /// &lt;param name="pdfFilename"&gt;The filename of PDF document.&lt;/param&gt;
            /// &lt;param name="resultFilename"&gt;The filename of resulting PDF document.&lt;/param&gt;
            public static void PackAllFontsOfDocument(string pdfFilename, string resultFilename)
            {
                using (PdfDocument document = new PdfDocument(pdfFilename))
                {
                    // pack all fonts
                    document.FontManager.PackAllFonts();
                    // pack and save document to new location
                    document.Pack(resultFilename);
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfFontManager.EmbedFont(Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFont)">
            <summary>
            Embeds the specified PDF font.
            </summary>
            <param name="font">The PDF font that should be embedded.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if
            the font and font manager does not belong to the same PDF document.
            </exception>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfFontManager.EmbedAllFonts">
            <summary>
            Embeds all external fonts of the PDF document.
            </summary>
            <example>
            Here is an example that shows how to embed all external and standard fonts into PDF document:
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Embeds all fonts into PDF document.
            ''' &lt;/summary&gt;
            ''' &lt;param name="pdfFilename"&gt;The filename of PDF document.&lt;/param&gt;
            ''' &lt;param name="pathToFonts"&gt;The path to available fonts.&lt;/param&gt;
            ''' &lt;param name="resultFilename"&gt;The filename of resulting PDF document.&lt;/param&gt;
            Public Shared Sub EmbedAllFontsIntoDocument(pdfFilename As String, pathToFonts As String, resultFilename As String)
                Using document As New PdfDocument(pdfFilename)
                    ' set a font programs controller
                    document.FontProgramsController = New UserAndSystemFontProgramsController(pathToFonts)
                    ' embed all fonts
                    document.FontManager.EmbedAllFonts()
                    ' pack and save document to new location
                    document.Pack(resultFilename)
                End Using
            End Sub
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Embeds all fonts into PDF document.
            /// &lt;/summary&gt;
            /// &lt;param name="pdfFilename"&gt;The filename of PDF document.&lt;/param&gt;
            /// &lt;param name="pathToFonts"&gt;The path to available fonts.&lt;/param&gt;
            /// &lt;param name="resultFilename"&gt;The filename of resulting PDF document.&lt;/param&gt;
            public static void EmbedAllFontsIntoDocument(string pdfFilename, string pathToFonts, string resultFilename)
            {
                using (PdfDocument document = new PdfDocument(pdfFilename))
                {
                    // set a font programs controller
                    document.FontProgramsController = new UserAndSystemFontProgramsController(pathToFonts);
                    // embed all fonts
                    document.FontManager.EmbedAllFonts();
                    // pack and save document to new location
                    document.Pack(resultFilename);
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfFontManager.ReplaceTextSymbols(System.Collections.Generic.Dictionary{Vintasoft.Imaging.Pdf.Content.TextExtraction.TextSymbol,Vintasoft.Imaging.Pdf.Content.TextExtraction.TextSymbol[]},Vintasoft.Imaging.Pdf.Tree.PdfTreeNodeBase[])">
            <summary>
            Replaces the text symbols using specified map.
            </summary>
            <param name="replaceMap">The map that should be used for replacing symbol.</param>
            <param name="nodes">The nodes (instances of PdfPage or PdfFormXObjectResource object)
            where symbol codes must be replaced.</param>
            <exception cref="T:System.ArgumentException">Thrown if
            source symbol has the replacing symbols from different fonts.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfFontManager.CreateFontSubset(Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFont,Vintasoft.Imaging.Pdf.Content.TextExtraction.TextSymbol[],System.Int32,System.Boolean,Vintasoft.Imaging.Pdf.Content.TextExtraction.TextSymbol[]@)">
            <summary>
            Creates new PDF font, which contains the specified set of text symbols.
            </summary>
            <param name="sourceFont">Source PDF font.</param>
            <param name="symbols">
            A set of text symbols from source PDF font.
            Text symbols are ordered as they should be stored in new PDF font.
            </param>
            <param name="symbolCodeSize">Size, in bytes, of code symbol of new PDF font.</param>
            <param name="addEncoding">
            Determines that information about Unicode codes of symbols must be added to new PDF font.
            </param>
            <param name="newSymbols">
            An array of text symbols of newly created PDF font.
            Each symbol in array <i>newSymbols</i> corresponds to the symbol, with the same index,
            in array <i>symbols</i>.
            </param>
            <returns>New PDF font.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if
            <i>sourceFont</i> or <i>symbols</i> is <b>null</b>.
            </exception>
            <exception cref="T:System.InvalidOperationException">Thrown if
            array of <i>symbols</i> is empty
            <b>-or-</b>
            original font is not fully defined.
            </exception>
            <exception cref="T:System.ArgumentException">Thrown if
            array of <i>symbols</i> contains symbols from another font.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <i>symbolCodeSize</i> is 0 or exceeds 2
            <b>-or-</b>
            number of <i>symbols</i> exceeds maximum number that can be encoded by <i>symbolCodeSize</i>.
            </exception>
            <exception cref="T:System.NotSupportedException">Thrown if
            subsetting of <i>sourceFont</i> is not supported.
            </exception>
            <remarks>
            Currently only TrueType fonts (simple and CID-keyed) are supported for subsetting.
            </remarks>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.PdfDocumentOpenedEventArgs">
            <summary>
            Provides data for the <see cref="E:Vintasoft.Imaging.Pdf.PdfDocumentController.AuthenticateRequest" /> and 
            <see cref="E:Vintasoft.Imaging.Pdf.PdfDocumentController.DocumentOpened" /> event.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.PdfDocumentOpenedEventArgs.Document">
            <summary>
            Gets the <see cref="T:Vintasoft.Imaging.Pdf.PdfDocument" /> that was opened.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.PdfTextEncodingObfuscator">
            <summary>
            Obfuscates text encodings in fonts of PDF document.
            </summary>
            <remarks>
            Obfuscation of text encoding consists from 2 steps:
            <ul>
            <li>Unicode codes of symbols are removed from font</li>
            <li>Font program is changed randomly (glyphs are rearranged; not used glyphs are removed;
            duplicate glyphs are added; etc).</li>
            </ul>
            <br />
            Text search and text extraction will be not possible after the text encoding obfuscation -
            extracted text will contain "garbage".
            PDF page view will not be changed after obfuscation, i.e. PDF page view before and
            after obfuscation are the same.<br />
            <br />
            Current version supports obfuscation of TrueType fonts (simple and CID-keyed) only.<br />
            A <see cref="T:System.NotSupportedException" /> will be thrown
            whenever an unsupported font is encountered during obfuscation.<br />
            A <see cref="T:System.InvalidOperationException" /> will be thrown
            whenever an external font is encountered during obfuscation.<br />
            <br />
            <b>Important!</b> - PDF document must be packed (<see cref="M:Vintasoft.Imaging.Pdf.PdfDocument.Pack" />)
            after text encoding obfuscation otherwise the original encodings can be restored.
            </remarks>
            <example>
            Here is an example that shows how to obfuscate encoding of embedded fonts in PDF document:
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Obfuscates encoding of all fonts of PDF document.
            ''' &lt;/summary&gt;
            ''' &lt;param name="pdfFilename"&gt;The filename of PDF document.&lt;/param&gt;
            ''' &lt;param name="resultFilename"&gt;The filename of resulting PDF document.&lt;/param&gt;
            Public Shared Sub ObfuscateEncodingOfAllFonts(pdfFilename As String, resultFilename As String)
                Using document As New PdfDocument(pdfFilename)
                    ' create obfuscator
                    Dim textEncodingObfuscator As New PdfTextEncodingObfuscator()
                    Try
                        ' obfuscate all fonts
                        textEncodingObfuscator.Obfuscate(document)
                        ' pack and save document to new location
                        document.Pack(resultFilename)
                    Catch ex As Exception
                        Console.WriteLine(ex.Message)
                    End Try
                End Using
            End Sub
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Obfuscates encoding of all fonts of PDF document.
            /// &lt;/summary&gt;
            /// &lt;param name="pdfFilename"&gt;The filename of PDF document.&lt;/param&gt;
            /// &lt;param name="resultFilename"&gt;The filename of resulting PDF document.&lt;/param&gt;
            public static void ObfuscateEncodingOfAllFonts(string pdfFilename, string resultFilename)
            {
                using (PdfDocument document = new PdfDocument(pdfFilename))
                {
                    // create obfuscator
                    PdfTextEncodingObfuscator textEncodingObfuscator = new PdfTextEncodingObfuscator();
                    try
                    {
                        // obfuscate all fonts
                        textEncodingObfuscator.Obfuscate(document);
                        // pack and save document to new location
                        document.Pack(resultFilename);
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine(ex.Message);
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfTextEncodingObfuscator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.PdfTextEncodingObfuscator" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfTextEncodingObfuscator.Obfuscate(Vintasoft.Imaging.Pdf.PdfDocument)">
            <summary>
            Obfuscates encodings of all fonts containing within the specified PDF document.
            </summary>
            <param name="document">The PDF document.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <i>document</i> is <b>null</b>.
            </exception>
            <exception cref="T:System.InvalidOperationException">Thrown if
            <i>document</i> contains external fonts.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if
            <i>document</i> contains fonts that are not supported for obfuscating.
            </exception>
            <remarks>
            Currently only TrueType fonts (simple and CID-keyed) are supported for obfuscating.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfTextEncodingObfuscator.Obfuscate(Vintasoft.Imaging.Pdf.Tree.PdfPage[])">
            <summary>
            Obfuscates encodings of all fonts containing within the specified PDF pages.
            </summary>
            <param name="pages">The PDF pages.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <i>pages</i> is <b>null</b>.
            </exception>
            <exception cref="T:System.ArgumentException">Thrown if
            <i>pages</i> belong to different PDF documents.
            </exception>
            <exception cref="T:System.InvalidOperationException">Thrown if
            <i>pages</i> contain external fonts.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if
            <i>pages</i> contain fonts that are not supported for obfuscating.
            </exception>
            <remarks>
            Currently only TrueType fonts (simple and CID-keyed) are supported for obfuscating.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.PdfTextEncodingObfuscator.DuplicateFonts">
            <summary>
            Gets or sets a value indicating whether SDK must duplicate font on each page,
            where font is used, if font is used more than on 1 page.
            </summary>
            <value>
            <b>true</b> - duplicate font on each page, where font is used, if font is used more
            than on 1 page;
            <b>false</b> - do not create font duplicates.<br />
            Default value is <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.PdfTextEncodingObfuscator.MinSymbolDuplicateCount">
            <summary>
            Gets or sets the minimum duplicate count of symbol.
            </summary>
            <value>
            Valid values are greater than or equal to 1.<br />
            Default value is <b>1</b>.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <i>new value</i> is less than 1.
            </exception>
            <remarks>
            Every symbol of original font will have number of duplicates equal to
            <see cref="P:Vintasoft.Imaging.Pdf.PdfTextEncodingObfuscator.MinSymbolDuplicateCount" />
            if the value of <see cref="P:Vintasoft.Imaging.Pdf.PdfTextEncodingObfuscator.MinSymbolDuplicateCount" /> is greater than or equal to
            the value of <see cref="P:Vintasoft.Imaging.Pdf.PdfTextEncodingObfuscator.MaxSymbolDuplicateCount" />.
            Also, number of symbols in each font cannot exceed the maximum value that can be encoded
            using the size of the symbol codes of that font,
            for example, font can contain max 256 symbols if symbol code size is equal to 1.
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.Pdf.PdfTextEncodingObfuscator.MaxSymbolDuplicateCount" />
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.PdfTextEncodingObfuscator.MaxSymbolDuplicateCount">
            <summary>
            Gets or sets the maximum duplicate count of symbol.
            </summary>
            <value>
            Valid values are greater than or equal to 1.<br />
            Default value is <b>1</b>.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <i>new value</i> is less than 1.
            </exception>
            <remarks>
            Every symbol of original font will have number of duplicates equal to
            <see cref="P:Vintasoft.Imaging.Pdf.PdfTextEncodingObfuscator.MinSymbolDuplicateCount" />
            if the value of <see cref="P:Vintasoft.Imaging.Pdf.PdfTextEncodingObfuscator.MinSymbolDuplicateCount" /> is greater than or equal to
            the value of <see cref="P:Vintasoft.Imaging.Pdf.PdfTextEncodingObfuscator.MaxSymbolDuplicateCount" />.
            Also, number of symbols in each font cannot exceed the maximum value that can be encoded
            using the size of the symbol codes of that font,
            for example, font can contain max 256 symbols if symbol code size is equal to 1.
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.Pdf.PdfTextEncodingObfuscator.MinSymbolDuplicateCount" />
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.PointBasedGraphicsFigure">
            <summary>
            Represents a point-based graphics figure.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigure">
            <summary>
            Provides an abstract base class for graphics figure.
            Graphics figure is a set of commands for drawing figure on <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" />.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigure.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigure" /> class.
            </summary>
            <param name="minReferencePointCount">Minimal count of points in a figure.</param>
            <param name="isReferencePointCountFixed">Determines that <i>minReferencePointCount</i>
            cannot be changed.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigure.GetDrawingBox">
            <summary>
            Returns a drawing box, in the page space, of figure.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigure.DrawFigure(Vintasoft.Imaging.Pdf.Drawing.PdfGraphics)">
            <summary>
            Draws the graphics figure on specified <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" />.
            </summary>
            <param name="graphics">The <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" />.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigure.Draw(Vintasoft.Imaging.Pdf.Drawing.PdfGraphics)">
            <summary>
            Automatically calculates the size of graphics figure and
            draws the graphics figure on specified <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" />.
            </summary>
            <param name="graphics">The <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" />.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigure.RefreshProperties(Vintasoft.Imaging.Pdf.Drawing.PdfGraphics)">
            <summary>
            Refresh the properties (Size, Location, ...) of the graphics figure.
            </summary>
            <param name="graphics">The <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" />.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigure.GetRegion">
            <summary>
            Returns a region of this graphics figure.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigure.SetRegion(Vintasoft.Imaging.Pdf.RegionF)">
            <summary>
            Sets the region of figure.
            </summary>
            <param name="region">The region.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigure.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigure.OnChanged">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigure.Changed" /> event. Called when the figure is changed.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigure.OnChanged(System.Drawing.RectangleF)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigure.Changed" /> event. Called when the figure is changed.
            </summary>
            <param name="invalidateRectangle">An invalidate rectangle.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigure.CopyTo(Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigure)">
            <summary>
            Copies the state of the current object to the target object.
            </summary>
            <param name="target">Object to copy the state of the current object to.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigure.OnReferencePointChanged(System.Drawing.PointF,System.Int32)">
            <summary>
            Occurs when the reference point is changed.
            </summary>
            <param name="prevValue">Previous point value.</param>
            <param name="index">Index of changed point.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigure.ReferencePoints">
            <summary>
            Gets a <see cref="T:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigurePoints">reference points</see> of this figure.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigure.IsVisible">
            <summary>
            Gets a value indicating whether the figure is visible.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigure.Changed">
            <summary>
            Occurs when the graphics figure is changed.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.PointBasedGraphicsFigure.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.PointBasedGraphicsFigure" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.PointBasedGraphicsFigure.#ctor(Vintasoft.Imaging.Pdf.Drawing.PdfPen)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.PointBasedGraphicsFigure" /> class.
            </summary>
            <param name="pen">The pen.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.PointBasedGraphicsFigure.GetDrawingBox">
            <summary>
            Returns a drawing box, in the page space, of figure.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.PointBasedGraphicsFigure.GetRegion">
            <summary>
            Returns a region of this graphics figure.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.PointBasedGraphicsFigure.CopyTo(Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigure)">
            <summary>
            Copies the state of the current object to the target object.
            </summary>
            <param name="target">Object to copy the state of the current object to.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.PointBasedGraphicsFigure.Pen">
            <summary>
            Gets or sets a pen of this figure.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.CurvesFigure">
            <summary>
            Represents a Bézier curve figure.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.CurvesFigure.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.CurvesFigure" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.CurvesFigure.#ctor(Vintasoft.Imaging.Pdf.Drawing.PdfPen,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.CurvesFigure" /> class.
            </summary>
            <param name="closed">Curve is closed.</param>
            <param name="pen">The pen.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.CurvesFigure.#ctor(Vintasoft.Imaging.Pdf.Drawing.PdfPen,Vintasoft.Imaging.Pdf.Drawing.PdfBrush)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.CurvesFigure" /> class.
            </summary>
            <param name="brush">The brush.</param>
            <param name="pen">The pen.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.CurvesFigure.DrawFigure(Vintasoft.Imaging.Pdf.Drawing.PdfGraphics)">
            <summary>
            Draws the graphics figure on specified <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" />.
            </summary>
            <param name="graphics">The <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" />.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.CurvesFigure.GetRegion">
            <summary>
            Returns a region of this graphics figure.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.CurvesFigure.OnReferencePointChanged(System.Drawing.PointF,System.Int32)">
            <summary>
            Occurs when the reference point is changed.
            </summary>
            <param name="prevValue">Previous point value.</param>
            <param name="index">Index of changed point.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.CurvesFigure.CopyTo(Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigure)">
            <summary>
            Copies the state of the current object to the target object.
            </summary>
            <param name="target">Object to copy the state of the current object to.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.CurvesFigure.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.CurvesFigure.IsClosed">
            <summary>
            Gets or sets a value indicating whether figure is closed.
            </summary>
            <value>Default value is <b>true</b>.</value>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.CurvesFigure.Brush">
            <summary>
            Gets or sets a brush of this figure.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.LinesFigure">
            <summary>
            Represents a polyline figure.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.LinesFigure.#ctor(Vintasoft.Imaging.Pdf.Drawing.PdfPen)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.LinesFigure" /> class.
            </summary>
            <param name="pen">The pen.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.LinesFigure.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.LinesFigure" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.LinesFigure.DrawFigure(Vintasoft.Imaging.Pdf.Drawing.PdfGraphics)">
            <summary>
            Draws the graphics figure on specified <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" />.
            </summary>
            <param name="graphics">The <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" />.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.LinesFigure.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.LinesFigure.OnReferencePointChanged(System.Drawing.PointF,System.Int32)">
            <summary>
            Occurs when the reference point is changed.
            </summary>
            <param name="prevValue">Previous point value.</param>
            <param name="index">Index of changed point.</param>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.PolygonFigure">
            <summary>
            Represents a polygon figure.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.PolygonFigure.#ctor(Vintasoft.Imaging.Pdf.Drawing.PdfPen,Vintasoft.Imaging.Pdf.Drawing.PdfBrush)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.PolygonFigure" /> class.
            </summary>
            <param name="pen">The pen.</param>
            <param name="brush">The brush.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.PolygonFigure.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.PolygonFigure" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.PolygonFigure.DrawFigure(Vintasoft.Imaging.Pdf.Drawing.PdfGraphics)">
            <summary>
            Draws the graphics figure on specified <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" />.
            </summary>
            <param name="graphics">The <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" />.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.PolygonFigure.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.PolygonFigure.OnReferencePointChanged(System.Drawing.PointF,System.Int32)">
            <summary>
            Occurs when the reference point is changed.
            </summary>
            <param name="prevValue">Previous point value.</param>
            <param name="index">Index of changed point.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.PolygonFigure.CopyTo(Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigure)">
            <summary>
            Copies the state of the current object to the target object.
            </summary>
            <param name="target">Object to copy the state of the current object to.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.PolygonFigure.Brush">
            <summary>
            Gets or sets a brush of this polygon.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.AlignmentPanel">
            <summary>
            Represents a panel with elements alignment.
            </summary>
            <example>
            Here is an example that shows how to draw image figure on PDF page:
            <code lang="VB.NET">
            Public Shared Sub CreatePdfDocument(pdfFilename As String, imageFilename As String)
                ' create PDF document
                Using document As New PdfDocument(pdfFilename, PdfFormat.Pdf_14)
                    ' open image
                    Using image As New VintasoftImage(imageFilename)
                        ' add new page to PDF document
                        Dim page As PdfPage = document.Pages.Add(PaperSizeKind.A4)
                        ' add image resource to PDF document
                        Dim imageResource As New PdfImageResource(document, image, PdfCompression.Auto)
            
                        ' create layout panel
                        Dim rootLayout As New AlignmentPanel()
                        rootLayout.Location = page.MediaBox.Location
                        rootLayout.Size = page.MediaBox.Size
                        ' set layout panel margin (5 mm)
                        Dim margin As Double = UnitOfMeasureConverter.ConvertToPdfUserUnits(5, UnitOfMeasure.Millimeters)
                        rootLayout.Margin = New PdfContentPadding(margin)
            
                        ' create image figure
                        Dim imageFigure As New ImageFigure(imageResource)
                        ' maintain aspect ratio of image
                        imageFigure.MaintainAspectRatio = True
                        ' add image figure to layout panel
                        rootLayout.Add(imageFigure)
            
                        ' draw figures on graphics of PDF page
                        Using g As PdfGraphics = page.GetGraphics()
                            rootLayout.Draw(g)
                        End Using
            
                        ' save document changes
                        document.SaveChanges()
                    End Using
                End Using
            End Sub
            </code>
            <code lang="C#">
            public static void CreatePdfDocument(string pdfFilename, string imageFilename)
            {
                // create PDF document
                using (PdfDocument document = new PdfDocument(pdfFilename, PdfFormat.Pdf_14))
                {// open image
                    using (VintasoftImage image = new VintasoftImage(imageFilename))
                    {
                        // add new page to PDF document
                        PdfPage page = document.Pages.Add(PaperSizeKind.A4);
                        // add image resource to PDF document
                        PdfImageResource imageResource = new PdfImageResource(document, image, PdfCompression.Auto);
            
                        // create layout panel
                        AlignmentPanel rootLayout = new AlignmentPanel();
                        rootLayout.Location = page.MediaBox.Location;
                        rootLayout.Size = page.MediaBox.Size;
                        // set layout panel margin (5 mm)
                        double margin = UnitOfMeasureConverter.ConvertToPdfUserUnits(5, UnitOfMeasure.Millimeters);
                        rootLayout.Margin = new PdfContentPadding(margin);
            
                        // create image figure
                        ImageFigure imageFigure = new ImageFigure(imageResource);
                        // maintain aspect ratio of image
                        imageFigure.MaintainAspectRatio = true;
                        // add image figure to layout panel
                        rootLayout.Add(imageFigure);
            
                        // draw figures on graphics of PDF page
                        using (PdfGraphics g = page.GetGraphics())
                            rootLayout.Draw(g);
            
                        // save document changes
                        document.SaveChanges();
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.AlignmentPanelElement">
            <summary>
            Represents an alignment panel element.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.RectangleFigure">
            <summary>
            Represents a rectangle figure,
            i.e. a set of commands for drawing rectangle on <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" />.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.RectangleFigure.#ctor(Vintasoft.Imaging.Pdf.Drawing.PdfPen,Vintasoft.Imaging.Pdf.Drawing.PdfBrush)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.RectangleFigure" /> class.
            </summary>        
            <param name="pen">The pen.</param>
            <param name="brush">The brush.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.RectangleFigure.#ctor(Vintasoft.Imaging.Pdf.Drawing.PdfBrush)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.RectangleFigure" /> class.
            </summary>        
            <param name="brush">The brush.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.RectangleFigure.#ctor(Vintasoft.Imaging.Pdf.Drawing.PdfPen)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.RectangleFigure" /> class.
            </summary>        
            <param name="pen">The pen.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.RectangleFigure.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.RectangleFigure" /> class.
            </summary>        
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.RectangleFigure.DrawFigure(Vintasoft.Imaging.Pdf.Drawing.PdfGraphics)">
            <summary>
            Draws the graphics figure on specified <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" />.
            </summary>
            <param name="graphics">The <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" />.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.RectangleFigure.GetDrawingBox">
            <summary>
            Returns a drawing box, in the page space, of figure.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.RectangleFigure.GetRegion">
            <summary>
            Returns a region of this graphics figure.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.RectangleFigure.SetRegion(Vintasoft.Imaging.Pdf.RegionF)">
            <summary>
            Sets the region of figure.
            </summary>
            <param name="region">The region.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.RectangleFigure.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.RectangleFigure.GetDrawRectangle">
            <summary>
            Returns a rectangle in which draws the figure.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.RectangleFigure.CopyTo(Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigure)">
            <summary>
            Copies the state of the current object to the target object.
            </summary>
            <param name="target">Object to copy the state of the current object to.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.RectangleFigure.Pen">
            <summary>
            Gets or sets a pen of this figure.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.RectangleFigure.Brush">
            <summary>
            Gets or sets a brush of this figure.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.RectangleFigure.Location">
            <summary>
            Gets or sets a location of this rectangle figure.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.RectangleFigure.Size">
            <summary>
            Gets or sets a size of this rectangle figure.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.RectangleFigure.Margin">
            <summary>
            Gets or sets a margin of this figure.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.IAutoSizeGraphicsFigure">
            <summary>
            Represents an interface of graphics figure that supports autosizing.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.IAutoSizeGraphicsFigure.AutoWidth">
            <summary>
            Gets or sets a value indicating whether the figure can calculate width automatically.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.IAutoSizeGraphicsFigure.AutoHeight">
            <summary>
            Gets or sets a value indicating whether the figure can calculate height automatically.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.AlignmentPanelElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.AlignmentPanelElement" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.AlignmentPanelElement.#ctor(Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.PdfContentSizeMode,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.AlignmentPanelElement" /> class.
            </summary>
            <param name="elementSizeMode">The element size mode.</param>
            <param name="elementSize">The element size.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.AlignmentPanelElement.#ctor(Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.PdfContentSizeMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.AlignmentPanelElement" /> class.
            </summary>
            <param name="elementSizeMode">The element size mode.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.AlignmentPanelElement.#ctor(Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.RectangleFigure)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.AlignmentPanelElement" /> class.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.AlignmentPanelElement.DrawFigure(Vintasoft.Imaging.Pdf.Drawing.PdfGraphics)">
            <summary>
            Draws the graphics figure on specified <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" />.
            </summary>
            <param name="graphics">The <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" />.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.AlignmentPanelElement.RefreshProperties(Vintasoft.Imaging.Pdf.Drawing.PdfGraphics)">
            <summary>
            Refresh the Graphics Figure properties (Size, Location, ...).
            </summary>
            <param name="graphics">The <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" />.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.AlignmentPanelElement.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.AlignmentPanelElement.CopyTo(Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigure)">
            <summary>
            Copies the state of the current object to the target object.
            </summary>
            <param name="target">Object to copy the state of the current object to.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.AlignmentPanelElement.AutoWidth">
            <summary>
            Gets or sets a value indicating whether the 
            figure supports width automatically calculation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.AlignmentPanelElement.AutoHeight">
            <summary>
            Gets or sets a value indicating whether the 
            figure supports height automatically calculation.
            </summary>
            <value>
            Default value is <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.AlignmentPanelElement.Content">
            <summary>
            Gets or sets a content of this element.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.AlignmentPanelElement.ContentAlignment">
            <summary>
            Gets or sets a content alignment.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.AlignmentPanelElement.ElementSizeMode">
            <summary>
            Gets or sets an element size mode.
            </summary>
            <seealso cref="P:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.AlignmentPanelElement.ElementSize" />
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.AlignmentPanelElement.ElementSize">
            <summary>
            Gets or sets a element size.
            </summary>
            <seealso cref="P:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.AlignmentPanelElement.ElementSizeMode" />
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.AlignmentPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.AlignmentPanel" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.AlignmentPanel.#ctor(Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.PdfContentSizeMode,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.AlignmentPanel" /> class.
            </summary>
            <param name="elementSizeMode">The element size mode.</param>
            <param name="elementSize">The element size.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.AlignmentPanel.#ctor(Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.PdfContentSizeMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.AlignmentPanel" /> class.
            </summary>
            <param name="elementSizeMode">The element size mode.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.AlignmentPanel.DrawFigure(Vintasoft.Imaging.Pdf.Drawing.PdfGraphics)">
            <summary>
            Draws the graphics figure on specified <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" />.
            </summary>
            <param name="graphics">The <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" />.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.AlignmentPanel.RefreshProperties(Vintasoft.Imaging.Pdf.Drawing.PdfGraphics)">
            <summary>
            Refresh the properties (Size, Location, ...) of the graphics figure.
            </summary>
            <param name="graphics">The <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" />.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.AlignmentPanel.IndexOf(Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.RectangleFigure)">
            <summary>
            Determines the index of a specific element in the panel.
            </summary>
            <param name="item">The element to locate in the panel.</param>
            <returns>The index of element if element is found in the panel; otherwise, -1.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.AlignmentPanel.Insert(System.Int32,Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.RectangleFigure)">
            <summary>
            Inserts an element to the panel at the specified index.
            </summary>
            <param name="index">The zero-based index at which figure should be inserted.</param>
            <param name="item">The figure to insert into the group.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.AlignmentPanel.RemoveAt(System.Int32)">
            <summary>
            Removes element at the specified index.
            </summary>
            <param name="index">The zero-based index of element to remove.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.AlignmentPanel.Add(Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.RectangleFigure)">
            <summary>
            Adds a element to the panel.
            </summary>
            <param name="item">The element to add to the panel.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.AlignmentPanel.Clear">
            <summary>
            Removes all elements from the panel.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.AlignmentPanel.Contains(Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.RectangleFigure)">
            <summary>
            Determines whether the panel contains a specific element. 
            </summary>
            <param name="item">The element to locate in the panel.</param>
            <returns><b>true</b> if the element is found in the panel; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.AlignmentPanel.CopyTo(Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.RectangleFigure[],System.Int32)">
            <summary>
            Copies the elements of the panel to an Array,
            starting at a particular Array index. 
            </summary>
            <param name="array">The one-dimensional Array
            that is the destination of the figures copied
            from group. The Array must have zero-based
            indexing.</param>
            <param name="arrayIndex">The zero-based index
            in array at which copying begins.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.AlignmentPanel.Remove(Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.RectangleFigure)">
            <summary>
            Removes the first occurrence of a specific element
            from the panel. 
            </summary>
            <param name="item">The element to remove from
            the panel.</param>
            <returns><b>true</b> if element is removed
            successfully; <b>false</b> otherwise.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.AlignmentPanel.GetEnumerator">
            <summary>
            Returns an enumerator that iterates a panel elements.
            </summary>
            <returns>An IEnumerator object that can be used
            to iterate through the panel.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.AlignmentPanel.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.AlignmentPanel.CopyTo(Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigure)">
            <summary>
            Copies the state of the current object to the target object.
            </summary>
            <param name="target">Object to copy the state of the current object to.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.AlignmentPanel.Orientation">
            <summary>
            Gets or sets a panel orientation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.AlignmentPanel.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.AlignmentPanel.Count">
            <summary>
            Gets the number of elements contained in the panel.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.AlignmentPanel.IsReadOnly">
            <summary>
            Gets a value indicating whether the elements collection is read-only.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.VintasoftImageFigure">
            <summary>
            Represents a VintasoftImage graphics figure,
            i.e. a set of graphical commands for drawing image on <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" />.
            </summary>
            <remarks>
            Figure does the following steps:
            <ul>
            <li>Creates PDF image resource, based on figure image,
            if figure image represented by image file (BMP, GIF, JPEG, PNG, TIFF, etc).</li>
            <li>Creates PDF form resource, based on figure image,
            if figure image represented by PDF page.</li>
            <li>Draws created PDF image resource on PdfGraphics object.</li>
            </ul>
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.VintasoftImageFigure.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.VintasoftImageFigure" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.VintasoftImageFigure.DrawFigure(Vintasoft.Imaging.Pdf.Drawing.PdfGraphics)">
            <summary>
            Draws the graphics figure on specified <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" />.
            </summary>
            <param name="graphics">The <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" />.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.VintasoftImageFigure.BackgroundColor">
            <summary>
            Gets or sets the background color.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.VintasoftImageFigure.Image">
            <summary>
            Gets or sets the image to draw.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.VintasoftImageFigure.InlineImage">
            <summary>
            Gets or sets a value indicating whether an image must be inlined in PDF content.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.VintasoftImageFigure.ImageCompression">
            <summary>
            Gets or sets an image compression.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.VintasoftImageFigure.ImageCompressionSettings">
            <summary>
            Gets or sets the image compression settings.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.VintasoftImageFigure.MaintainAspectRatio">
            <summary>
            Gets or sets a value indicating whether graphics figure must maintain the aspect ratio of image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.VintasoftImageFigure.IsVisible">
            <summary>
            Gets a value indicating whether the figure is visible.
            </summary>
            <value>
            <b>true</b> if the figure is visible; otherwise, <b>false</b>.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.PdfContentSizeMode">
            <summary>
            Specifies available size modes of PDF content.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.PdfContentSizeMode.Fixed">
            <summary>
            Fixed size.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.PdfContentSizeMode.Percent">
            <summary>
            Fixed size specified in percents.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.PdfContentSizeMode.Fill">
            <summary>
            Fill all free space.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.PdfContentSizeMode.Auto">
            <summary>
            Autosize.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.TextBoxFigure">
            <summary>
            Represents a text box figure.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.TextBoxFigure.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.TextBoxFigure" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.TextBoxFigure.#ctor(Vintasoft.Imaging.Pdf.Drawing.PdfBrush,System.String,Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFont,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.TextBoxFigure" /> class.
            </summary>
            <param name="textBrush">Text brush.</param>
            <param name="text">Text.</param>
            <param name="font">Text font.</param>
            <param name="fontSize">Font size.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.TextBoxFigure.#ctor(Vintasoft.Imaging.Pdf.Drawing.PdfBrush,System.String,Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFont,System.Single,Vintasoft.Imaging.Pdf.Drawing.PdfContentAlignment)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.TextBoxFigure" /> class.
            </summary>
            <param name="textBrush">Text brush.</param>
            <param name="text">Text.</param>
            <param name="font">Text font.</param>
            <param name="fontSize">Font size.</param>
            <param name="textAligment">Text aligment.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.TextBoxFigure.RefreshProperties(Vintasoft.Imaging.Pdf.Drawing.PdfGraphics)">
            <summary>
            Refresh the Graphics Figure properties (Size, Location, ...).
            </summary>
            <param name="graphics">The <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" />.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.TextBoxFigure.DrawFigure(Vintasoft.Imaging.Pdf.Drawing.PdfGraphics)">
            <summary>
            Draws the figure on specified <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" />.
            </summary>
            <param name="graphics">PDF Graphics.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.TextBoxFigure.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.TextBoxFigure.CopyTo(Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigure)">
            <summary>
            Copies the state of the current object to the target object.
            </summary>
            <param name="target">Object to copy the state of the current object to.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.TextBoxFigure.CalculateFontSize(Vintasoft.Imaging.Pdf.Drawing.PdfGraphics)">
            <summary>
            Calculates the font size.
            </summary>
            <param name="graphics">The graphics.</param>
            <returns>Font size.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.TextBoxFigure.TextAlignment">
            <summary>
            Gets or sets a text alignment.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.TextBoxFigure.TextPadding">
            <summary>
            Gets or sets a text padding.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.TextBoxFigure.Text">
            <summary>
            Gets or sets a text.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.TextBoxFigure.Font">
            <summary>
            Gets or sets a text font.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.TextBoxFigure.FontSize">
            <summary>
            Gets or sets a font size.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.TextBoxFigure.TextBrush">
            <summary>
            Gets or sets a text brush.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.TextBoxFigure.WordWrap">
            <summary>
            Gets or sets a value indicating whether this text box figure automatically wraps words 
            to the beginning of the next line when necessary.
            </summary>
            <value>Default value is <b>true</b>.</value>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.TextBoxFigure.AutoWidth">
            <summary>
            Gets or sets a value indicating whether the figure can calculate width automatically.
            </summary>
            <value>Default valus is <b>false</b>.</value>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.TextBoxFigure.AutoHeight">
            <summary>
            Gets or sets a value indicating whether the figure can calculate height automatically.
            </summary>
            <value>Default valus is <b>false</b>.</value>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.TextBoxFigure.AutoFontSize">
            <summary>
            Gets or sets a value indicating whether the figure can calculate font size automatically.
            </summary>
            <value>Default valus is <b>false</b>.</value>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.TextBoxFigure.CharacterSpacing">
            <summary>
            Gets or sets the character spacing.
            </summary>
            <value>Default valus is <b>0</b>.</value>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.TextBoxFigure.WordSpacing">
            <summary>
            Gets or sets the word spacing.
            </summary>
            <value>Default valus is <b>0</b>.</value>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.TextBoxFigure.LineSpacing">
            <summary>
            Gets or sets the line spacing.
            </summary>
            <value>Default valus is <b>0</b>.</value>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.TextBoxFigure.HorizontalTextScaling">
            <summary>
            Gets or sets the text horizontal scaling, specifying the percentage of the normal width.
            </summary>
            <value>Default value is <b>100</b>.</value>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.TextBoxFigure.IsVisible">
            <summary>
            Gets a value indicating whether this figure is visible.
            </summary>
            <value>
            <c>true</c> if this figure is visible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Drawing.PdfContentAlignment">
            <summary>
            Specifies available alignment modes of PDF content.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Drawing.PdfContentAlignment.Left">
            <summary>
            The content is aligned in the the left edge of the layout rectangle.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Drawing.PdfContentAlignment.Right">
            <summary>
            The content is aligned in the the right edge of the layout rectangle.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Drawing.PdfContentAlignment.Top">
            <summary>
            The content is aligned in the the top edge of the layout rectangle.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Drawing.PdfContentAlignment.Bottom">
            <summary>
            The content is aligned in the the bottom edge of the layout rectangle.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Drawing.PdfContentAlignment.Center">
            <summary>
            The content is aligned in the center of the layout rectangle.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Drawing.PdfContentAlignment.FillHorizontal">
            <summary>
            The content is filled in the horizontal of the layout rectangle.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Drawing.PdfContentAlignment.FillVertical">
            <summary>
            The content is filled in the vertical of the layout rectangle.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Drawing.PdfContentAlignment.Fill">
            <summary>
            The content is filled in the layout rectangle.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Drawing.PdfContentOrientation">
            <summary>
            Specifies available orientation modes of PDF content.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Drawing.PdfContentOrientation.Horizontal">
            <summary>
            Horizontal orientation.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Drawing.PdfContentOrientation.Vertical">
            <summary>
            Vertical orientation.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Drawing.PdfContentPadding">
            <summary>
            Represents padding or margin information associated with a PDF content.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Drawing.PdfContentPadding.Empty">
            <summary>
            Provides a <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfContentPadding" /> object with no padding.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfContentPadding.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfContentPadding" /> class using
            the supplied padding size for all edges.
            </summary>
            <param name="all">The value to be used for padding for all edges.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfContentPadding.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfContentPadding" /> class using
            a separate padding size for each edge.
            </summary>
            <param name="left">The padding size for the left edge.</param>
            <param name="top">The padding size for the top edge.</param>
            <param name="right">The padding size for the right edge.</param>
            <param name="bottom">The padding size for the bottom edge.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfContentPadding.#ctor(Vintasoft.Imaging.Pdf.Drawing.PdfContentPadding)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfContentPadding" /> class using source
            content padding.
            </summary>
            <param name="source">Source padding.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfContentPadding.Equals(System.Object)">
            <summary>
            Determines whether the value of the specified object is equivalent to the
            current <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfContentPadding" />.
            </summary>
            <param name="other">The object to compare to the current <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfContentPadding" />.</param>
            <returns><b>true</b> if the <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfContentPadding" /> objects are equivalent;
            otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfContentPadding.op_Addition(Vintasoft.Imaging.Pdf.Drawing.PdfContentPadding,Vintasoft.Imaging.Pdf.Drawing.PdfContentPadding)">
            <summary>
            Performs vector addition on the two specified <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfContentPadding" />
            objects, resulting in a new <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfContentPadding" />.
            </summary>
            <param name="p1">The first <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfContentPadding" /> to add.</param>
            <param name="p2">The second <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfContentPadding" /> to add.</param>
            <returns>A new <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfContentPadding" /> that results from adding p1 and p2.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfContentPadding.op_Subtraction(Vintasoft.Imaging.Pdf.Drawing.PdfContentPadding,Vintasoft.Imaging.Pdf.Drawing.PdfContentPadding)">
            <summary>
            Performs vector subtraction on the two specified <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfContentPadding" />
            objects, resulting in a new <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfContentPadding" />.
            </summary>
            <param name="p1">The first <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfContentPadding" /> to subtract from (the minuend).</param>
            <param name="p2">The second <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfContentPadding" /> to subtract from (the subtrahend).</param>
            <returns>A <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfContentPadding" /> result of subtracting p2 from p1.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfContentPadding.op_Equality(Vintasoft.Imaging.Pdf.Drawing.PdfContentPadding,Vintasoft.Imaging.Pdf.Drawing.PdfContentPadding)">
            <summary>
            Tests whether two specified <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfContentPadding" /> objects are equivalent.
            </summary>
            <param name="p1">A <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfContentPadding" /> to test.</param>
            <param name="p2">A <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfContentPadding" /> to test.</param>
            <returns><b>true</b> if the two <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfContentPadding" /> objects are equal; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfContentPadding.op_Inequality(Vintasoft.Imaging.Pdf.Drawing.PdfContentPadding,Vintasoft.Imaging.Pdf.Drawing.PdfContentPadding)">
            <summary>
            Tests whether two specified <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfContentPadding" /> objects are not equivalent.
            </summary>
            <param name="p1">A <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfContentPadding" /> to test.</param>
            <param name="p2">A <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfContentPadding" /> to test.</param>
            <returns><b>true</b> if the two <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfContentPadding" /> objects are different; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfContentPadding.GetHashCode">
            <summary>
            Generates a hash code for the current <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfContentPadding" />.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfContentPadding.ToString">
            <summary>
            Returns a string that represents the current <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfContentPadding" />.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.PdfContentPadding.All">
            <summary>
            Gets or sets the padding value for all the edges.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.PdfContentPadding.Bottom">
            <summary>
            Gets or sets the padding value for the bottom edge.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.PdfContentPadding.Left">
            <summary>
            Gets or sets the padding value for the left edge.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.PdfContentPadding.Right">
            <summary>
            Gets or sets the padding value for the right edge.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.PdfContentPadding.Top">
            <summary>
            Gets or sets the padding value for the top edge.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.PdfContentRenderingContext">
            <summary>
            Contains information about PDF content rendering process.
            </summary>
            <remarks>
            Properties and methods of this class can be used for getting information
            about PDF content rendering process and changing current state of
            PDF content rendering process.
            </remarks>
            <example>Please see example here: <see cref="T:Vintasoft.Imaging.Pdf.PdfContentRenderer" /></example>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfContentRenderingContext.SaveGraphicsState">
            <summary>
            Saves the current graphics state.
            </summary>
            <seealso cref="M:Vintasoft.Imaging.Pdf.PdfContentRenderingContext.RestoreGraphicsState" />
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfContentRenderingContext.RestoreGraphicsState">
            <summary>
            Restores the current graphics state.
            </summary>
            <seealso cref="M:Vintasoft.Imaging.Pdf.PdfContentRenderingContext.SaveGraphicsState" />
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.PdfContentRenderingContext.Page">
            <summary>
            Gets the PDF page that is rendering.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.PdfContentRenderingContext.CanvasGraphics">
            <summary>
            Gets the graphics object associated with current canvas image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.PdfContentRenderingContext.SourceRect">
            <summary>
            Gets the source rectangle, in default user space units (1/72 inch), on PDF content.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.PdfContentRenderingContext.DestRect">
            <summary>
            Gets the destination rectangle, in pixels, on canvas.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.PdfContentRenderingContext.RenderingResoulution">
            <summary>
            Gets the rendering resolution.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.PdfContentRenderingContext.GraphicsState">
            <summary>
            Gets the current graphics state.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.PdfContentRenderer">
            <summary>
            Provides functionality for overriding algorithms of PDF content rendering.
            </summary>
            <remarks>
            This class can be used for the following tasks:
            <ul>
            <li>Hide some content (text, images, lines, shading or tiling patterns, etc).</li>
            <li>Override PDF content rendering algorithms (e.g. increase/descrease weight of lines,
            change image drawing or processing, etc).</li>
            <li>Change graphics state during rendering (line width, font size, colors, CTM,
            text-space parameters, etc).</li>
            </ul>
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.Pdf.PdfRenderingSettings.ContentRenderer" />
            <seealso cref="T:Vintasoft.Imaging.Pdf.PdfContentRenderingContext" />
            <seealso cref="P:Vintasoft.Imaging.Pdf.PdfContentRenderingContext.GraphicsState" />
            <seealso cref="P:Vintasoft.Imaging.Pdf.PdfContentRenderingContext.CanvasGraphics" />
            <example>
            Here is an example that shows how to override rendering algorithm
            and render PDF with different setting:
            <code lang="VB.NET">
            Imports System.Drawing
            Imports System.Drawing.Drawing2D
            Imports System.IO
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.Codecs.Encoders
            Imports Vintasoft.Imaging.ImageProcessing
            Imports Vintasoft.Imaging.ImageProcessing.Color
            Imports Vintasoft.Imaging.Pdf
            Imports Vintasoft.Imaging.Pdf.Content
            Imports Vintasoft.Imaging.Pdf.Tree
            Imports Vintasoft.Imaging.Pdf.Tree.Patterns
            Imports Vintasoft.Imaging.Pdf.Tree.ShadingPatterns
            
            Class PdfContentRendererExample
                ''' &lt;summary&gt;
                ''' Shows how manage rendering of PDF page, i.e. render PDF page without images,
                ''' render PDF page without text, etc
                ''' &lt;/summary&gt;
                ''' &lt;param name="pdfFilename"&gt;The filename of PDF document.&lt;/param&gt;
                Public Shared Sub TestCustomContentRenderer(pdfFilename As String)
                    ' output TIFF file name format string
                    Dim outputFileName As String = Path.Combine(Path.GetDirectoryName(pdfFilename), Path.GetFileNameWithoutExtension(pdfFilename))
                    outputFileName = outputFileName &amp; "_{0}.tif"
            
                    ' custom renderer
                    Dim renderer As CustomContentRenderer
            
                    ' create image collection
                    Using images As New ImageCollection()
                        ' open source PDF file
                        images.Add(pdfFilename)
            
                        ' render PDF pages without images
                        renderer = New CustomContentRenderer()
                        renderer.DrawImages = False
                        RenderPdfUseContentRenderer(images, String.Format(outputFileName, "withoutImages"), renderer)
            
                        ' render PDF pages and invert rendered images
                        renderer = New CustomContentRenderer()
                        renderer.ImageProcessing = New InvertCommand()
                        RenderPdfUseContentRenderer(images, String.Format(outputFileName, "invertImages"), renderer)
            
                        ' render PDF pages without path filling
                        renderer = New CustomContentRenderer()
                        renderer.FillAreaUseShadingPatterns = False
                        renderer.FillPaths = False
                        renderer.FillPathsUseShadingPatterns = False
                        renderer.FillPathsUseTilingPatterns = False
                        RenderPdfUseContentRenderer(images, String.Format(outputFileName, "withoutFillPath"), renderer)
            
                        ' render PDF pages without path drawing
                        renderer = New CustomContentRenderer()
                        renderer.DrawPaths = False
                        RenderPdfUseContentRenderer(images, String.Format(outputFileName, "withoutDrawPath"), renderer)
            
                        ' render PDF pages without text
                        renderer = New CustomContentRenderer()
                        renderer.DrawText = False
                        RenderPdfUseContentRenderer(images, String.Format(outputFileName, "withoutText"), renderer)
            
                        ' clear image collection and dispose images
                        images.ClearAndDisposeItems()
                    End Using
                End Sub
            
                ''' &lt;summary&gt;
                ''' Renders the PDF file using specified content renderer.
                ''' &lt;/summary&gt;
                ''' &lt;param name="images"&gt;The images to render.&lt;/param&gt;
                ''' &lt;param name="outputTiffFileName"&gt;Name of the output tiff file.&lt;/param&gt;
                ''' &lt;param name="renderer"&gt;The renderer.&lt;/param&gt;
                Public Shared Sub RenderPdfUseContentRenderer(images As ImageCollection, outputTiffFileName As String, renderer As PdfContentRenderer)
                    ' create PDF rendering settings
                    Dim settings As New PdfRenderingSettings()
                    ' specify the custom PDF content renderer
                    settings.ContentRenderer = renderer
                    ' specify PDF rendering settings for images (PDF pages)
                    images.SetRenderingSettings(settings)
            
                    ' create TIFF encoder
                    Using encoder As New TiffEncoder()
                        ' save PDF pages to a TIFF file
                        images.SaveSync(outputTiffFileName, encoder)
                    End Using
                End Sub
            
            
                ''' &lt;summary&gt;
                ''' Provides functionality for overriding algorithms of PDF content rendering.
                ''' &lt;/summary&gt;
                Public Class CustomContentRenderer
                    Inherits PdfContentRenderer
            
                    #Region "Fields"
            
                    ''' &lt;summary&gt;
                    ''' Determines that string is drawing.
                    ''' &lt;/summary&gt;
                    Private _stringDrawing As Boolean = False
            
                    #End Region
            
            
            
                    #Region "Properties"
            
                    Private _drawForms As Boolean = True
                    ''' &lt;summary&gt;
                    ''' Gets or sets a value indicating whether the renderer must draw form XObjects on PDF page.
                    ''' &lt;/summary&gt;
                    Public Property DrawForms() As Boolean
                        Get
                            Return _drawForms
                        End Get
                        Set
                            _drawForms = value
                        End Set
                    End Property
            
                    Private _drawImages As Boolean = True
                    ''' &lt;summary&gt;
                    ''' Gets or sets a value indicating whether the renderer must draw images on PDF page.
                    ''' &lt;/summary&gt;
                    Public Property DrawImages() As Boolean
                        Get
                            Return _drawImages
                        End Get
                        Set
                            _drawImages = value
                        End Set
                    End Property
            
                    Private _drawInlineImages As Boolean = True
                    ''' &lt;summary&gt;
                    ''' Gets or sets a value indicating whether the renderer must draw inline images on PDF page.
                    ''' &lt;/summary&gt;
                    Public Property DrawInlineImages() As Boolean
                        Get
                            Return _drawInlineImages
                        End Get
                        Set
                            _drawInlineImages = value
                        End Set
                    End Property
            
                    Private _drawPaths As Boolean = True
                    ''' &lt;summary&gt;
                    ''' Gets or sets a value indicating whether the renderer must draw graphics paths on PDF page.
                    ''' &lt;/summary&gt;
                    ''' &lt;/value&gt;
                    Public Property DrawPaths() As Boolean
                        Get
                            Return _drawPaths
                        End Get
                        Set
                            _drawPaths = value
                        End Set
                    End Property
            
                    Private _fillPaths As Boolean = True
                    ''' &lt;summary&gt;
                    ''' Gets or sets a value indicating whether the renderer must fill graphics paths on PDF page.
                    ''' &lt;/summary&gt;
                    Public Property FillPaths() As Boolean
                        Get
                            Return _fillPaths
                        End Get
                        Set
                            _fillPaths = value
                        End Set
                    End Property
            
                    Private _fillPathsUseTilingPatterns As Boolean = True
                    ''' &lt;summary&gt;
                    ''' Gets or sets a value indicating whether the renderer must fill
                    ''' graphics paths using tiling patterns on PDF page.
                    ''' &lt;/summary&gt;
                    Public Property FillPathsUseTilingPatterns() As Boolean
                        Get
                            Return _fillPathsUseTilingPatterns
                        End Get
                        Set
                            _fillPathsUseTilingPatterns = value
                        End Set
                    End Property
            
                    Private _fillPathsUseShadingPatterns As Boolean = True
                    ''' &lt;summary&gt;
                    ''' Gets or sets a value indicating whether the renderer must fill
                    ''' graphics paths using shading patterns on PDF page.
                    ''' &lt;/summary&gt;
                    Public Property FillPathsUseShadingPatterns() As Boolean
                        Get
                            Return _fillPathsUseShadingPatterns
                        End Get
                        Set
                            _fillPathsUseShadingPatterns = value
                        End Set
                    End Property
            
                    Private _fillAreaUseShadingPatterns As Boolean = True
                    ''' &lt;summary&gt;
                    ''' Gets or sets a value indicating whether the renderer must fill
                    ''' all visible areas using tiling patterns on PDF page.
                    ''' &lt;/summary&gt;
                    Public Property FillAreaUseShadingPatterns() As Boolean
                        Get
                            Return _fillAreaUseShadingPatterns
                        End Get
                        Set
                            _fillAreaUseShadingPatterns = value
                        End Set
                    End Property
            
                    Private _drawText As Boolean = True
                    ''' &lt;summary&gt;
                    ''' Gets or sets a value indicating whether the renderer must draw 
                    ''' text on PDF page.
                    ''' &lt;/summary&gt;
                    Public Property DrawText() As Boolean
                        Get
                            Return _drawText
                        End Get
                        Set
                            _drawText = value
                        End Set
                    End Property
            
                    Private _drawInvisibleText As Boolean = False
                    ''' &lt;summary&gt;
                    ''' Gets or sets a value indicating whether the renderer must draw 
                    ''' invisible text on PDF page.
                    ''' &lt;/summary&gt;
                    Public Property DrawInvisibleText() As Boolean
                        Get
                            Return _drawInvisibleText
                        End Get
                        Set
                            _drawInvisibleText = value
                        End Set
                    End Property
            
                    Private _linesWeigth As Single = 1
                    ''' &lt;summary&gt;
                    ''' Gets or sets the lines weigth, in percents.
                    ''' &lt;/summary&gt;
                    Public Property LinesWeigth() As Single
                        Get
                            Return _linesWeigth
                        End Get
                        Set
                            _linesWeigth = value
                        End Set
                    End Property
            
                    Private _imageProcessing As ProcessingCommandBase = Nothing
                    ''' &lt;summary&gt;
                    ''' Gets or sets the image processing command that should be applied to an image
                    ''' before image will be drawn on PDF page.
                    ''' &lt;/summary&gt;
                    Public Property ImageProcessing() As ProcessingCommandBase
                        Get
                            Return _imageProcessing
                        End Get
                        Set
                            _imageProcessing = value
                        End Set
                    End Property
            
                    #End Region
            
            
            
                    #Region "Methods"
            
                    ''' &lt;summary&gt;
                    ''' Draws a text string.
                    ''' &lt;/summary&gt;
                    ''' &lt;param name="context"&gt;The rendering context.&lt;/param&gt;
                    ''' &lt;param name="charCodes"&gt;The codes, in font encoding, of text characters.&lt;/param&gt;
                    Public Overrides Sub DrawString(context As PdfContentRenderingContext, charCodes As ULong())
                        ' if text must be drawn AND text is visible
                        If _drawText AndAlso context.GraphicsState.TextRenderingMode &lt;&gt; TextRenderingMode.Invisible Then
                            _stringDrawing = True
                            MyBase.DrawString(context, charCodes)
                            _stringDrawing = False
                        ' if invisible text must be drawn AND text is invisible
                        ElseIf _drawInvisibleText AndAlso context.GraphicsState.TextRenderingMode = TextRenderingMode.Invisible Then
                            context.GraphicsState.TextRenderingMode = TextRenderingMode.Fill
                            MyBase.DrawString(context, charCodes)
                            context.GraphicsState.TextRenderingMode = TextRenderingMode.Invisible
                        End If
                    End Sub
            
                    ''' &lt;summary&gt;
                    ''' Draws path using specified pen.
                    ''' &lt;/summary&gt;
                    ''' &lt;param name="context"&gt;The rendering context.&lt;/param&gt;
                    ''' &lt;param name="path"&gt;The path to draw.&lt;/param&gt;
                    ''' &lt;param name="pen"&gt;The pen that should be used for drawing a path.&lt;/param&gt;
                    Public Overrides Sub DrawPath(context As PdfContentRenderingContext, path As GraphicsPath, pen As Pen)
                        ' if path must be drawn
                        If (_drawPaths AndAlso Not _stringDrawing) OrElse (_drawText AndAlso _stringDrawing) Then
                            ' if drawing path is not a drawing path of text symbol
                            If _linesWeigth &lt;&gt; 1 AndAlso Not _stringDrawing Then
                                Dim oldWidth As Single = pen.Width
                                pen.Width *= _linesWeigth
                                MyBase.DrawPath(context, path, pen)
                                pen.Width = oldWidth
                            Else
                                MyBase.DrawPath(context, path, pen)
                            End If
                        End If
                    End Sub
            
                    ''' &lt;summary&gt;
                    ''' Fills path using specified brush.
                    ''' &lt;/summary&gt;
                    ''' &lt;param name="context"&gt;The rendering context.&lt;/param&gt;
                    ''' &lt;param name="path"&gt;The path to fill.&lt;/param&gt;
                    ''' &lt;param name="brush"&gt;The brush that should be used for filling a path.&lt;/param&gt;
                    Public Overrides Sub FillPath(context As PdfContentRenderingContext, path As GraphicsPath, brush As Brush)
                        ' if path must be filled
                        If (_fillPaths AndAlso Not _stringDrawing) OrElse (_drawText AndAlso _stringDrawing) Then
                            MyBase.FillPath(context, path, brush)
                        End If
                    End Sub
            
                    ''' &lt;summary&gt;
                    ''' Fills path using specified pattern.
                    ''' &lt;/summary&gt;
                    ''' &lt;param name="context"&gt;The rendering context.&lt;/param&gt;
                    ''' &lt;param name="path"&gt;The path to fill.&lt;/param&gt;
                    ''' &lt;param name="pattern"&gt;The pattern that should be used for filling a path.&lt;/param&gt;
                    Public Overrides Sub FillPath(context As PdfContentRenderingContext, path As GraphicsPath, pattern As PatternBase)
                        If Not _fillPathsUseShadingPatterns AndAlso TypeOf pattern Is ShadingPattern Then
                            Return
                        End If
                        If Not _fillPathsUseTilingPatterns AndAlso TypeOf pattern Is TilingPattern Then
                            Return
                        End If
                        MyBase.FillPath(context, path, pattern)
                    End Sub
            
                    ''' &lt;summary&gt;
                    ''' Fills all visible areas using specified shading pattern.
                    ''' &lt;/summary&gt;
                    ''' &lt;param name="context"&gt;The rendering context.&lt;/param&gt;
                    ''' &lt;param name="shadingPattern"&gt;The shading pattern.&lt;/param&gt;
                    Public Overrides Sub FillArea(context As PdfContentRenderingContext, shadingPattern As ShadingPatternBase)
                        If _fillAreaUseShadingPatterns Then
                            MyBase.FillArea(context, shadingPattern)
                        End If
                    End Sub
            
                    ''' &lt;summary&gt;
                    ''' Draws a form XObject.
                    ''' &lt;/summary&gt;
                    ''' &lt;param name="context"&gt;The rendering context.&lt;/param&gt;
                    ''' &lt;param name="formResource"&gt;The form XObject to draw.&lt;/param&gt;
                    Public Overrides Sub DrawFormXObject(context As PdfContentRenderingContext, formResource As PdfFormXObjectResource)
                        If _drawForms Then
                            MyBase.DrawFormXObject(context, formResource)
                        End If
                    End Sub
            
                    ''' &lt;summary&gt;
                    ''' Draws an image resource.
                    ''' &lt;/summary&gt;
                    ''' &lt;param name="context"&gt;The rendering context.&lt;/param&gt;
                    ''' &lt;param name="imageResource"&gt;The image XObject resource to draw.&lt;/param&gt;
                    Public Overrides Sub DrawImageResource(context As PdfContentRenderingContext, imageResource As PdfImageResource)
                        If Not _drawImages AndAlso Not imageResource.IsInline Then
                            Return
                        End If
                        If Not _drawInlineImages AndAlso imageResource.IsInline Then
                            Return
                        End If
                        MyBase.DrawImageResource(context, imageResource)
                    End Sub
            
                    ''' &lt;summary&gt;
                    ''' Draws an image.
                    ''' &lt;/summary&gt;
                    ''' &lt;param name="context"&gt;The rendering context.&lt;/param&gt;
                    ''' &lt;param name="image"&gt;The image to draw.&lt;/param&gt;
                    ''' &lt;param name="points"&gt;Array of three System.Drawing.PointF structures that
                    ''' define a parallelogram on rendering content where image must be drawn.&lt;/param&gt;
                    Public Overrides Sub DrawImage(context As PdfContentRenderingContext, image As VintasoftImage, points As PointF())
                        ' if image processing muse be applied to an image
                        If ImageProcessing IsNot Nothing AndAlso ImageProcessing.IsPixelFormatSupported(image.PixelFormat) Then
                            SyncLock image
                                Using tempImage As VintasoftImage = ImageProcessing.Execute(image)
                                    MyBase.DrawImage(context, tempImage, points)
                                End Using
                            End SyncLock
                        Else
                            MyBase.DrawImage(context, image, points)
                        End If
                    End Sub
            
                    #End Region
            
                End Class
            End Class
            </code>
            <code lang="C#">
            using System.Drawing;
            using System.Drawing.Drawing2D;
            using System.IO;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.Codecs.Encoders;
            using Vintasoft.Imaging.ImageProcessing;
            using Vintasoft.Imaging.ImageProcessing.Color;
            using Vintasoft.Imaging.Pdf;
            using Vintasoft.Imaging.Pdf.Content;
            using Vintasoft.Imaging.Pdf.Tree;
            using Vintasoft.Imaging.Pdf.Tree.Patterns;
            using Vintasoft.Imaging.Pdf.Tree.ShadingPatterns;
            
            class PdfContentRendererExample
            {
                /// &lt;summary&gt;
                /// Shows how manage rendering of PDF page, i.e. render PDF page without images,
                /// render PDF page without text, etc
                /// &lt;/summary&gt;
                /// &lt;param name="pdfFilename"&gt;The filename of PDF document.&lt;/param&gt;
                public static void TestCustomContentRenderer(string pdfFilename)
                {
                    // output TIFF file name format string
                    string outputFileName = Path.Combine(Path.GetDirectoryName(pdfFilename), Path.GetFileNameWithoutExtension(pdfFilename));
                    outputFileName = outputFileName + "_{0}.tif";
            
                    // custom renderer
                    CustomContentRenderer renderer;
            
                    // create image collection
                    using (ImageCollection images = new ImageCollection())
                    {
                        // open source PDF file
                        images.Add(pdfFilename);
            
                        // render PDF pages without images
                        renderer = new CustomContentRenderer();
                        renderer.DrawImages = false;
                        RenderPdfUseContentRenderer(images, string.Format(outputFileName, "withoutImages"), renderer);
            
                        // render PDF pages and invert rendered images
                        renderer = new CustomContentRenderer();
                        renderer.ImageProcessing = new InvertCommand();
                        RenderPdfUseContentRenderer(images, string.Format(outputFileName, "invertImages"), renderer);
            
                        // render PDF pages without path filling
                        renderer = new CustomContentRenderer();
                        renderer.FillAreaUseShadingPatterns = false;
                        renderer.FillPaths = false;
                        renderer.FillPathsUseShadingPatterns = false;
                        renderer.FillPathsUseTilingPatterns = false;
                        RenderPdfUseContentRenderer(images, string.Format(outputFileName, "withoutFillPath"), renderer);
            
                        // render PDF pages without path drawing
                        renderer = new CustomContentRenderer();
                        renderer.DrawPaths = false;
                        RenderPdfUseContentRenderer(images, string.Format(outputFileName, "withoutDrawPath"), renderer);
            
                        // render PDF pages without text
                        renderer = new CustomContentRenderer();
                        renderer.DrawText = false;
                        RenderPdfUseContentRenderer(images, string.Format(outputFileName, "withoutText"), renderer);
            
                        // clear image collection and dispose images
                        images.ClearAndDisposeItems();
                    }
                }
            
                /// &lt;summary&gt;
                /// Renders the PDF file using specified content renderer.
                /// &lt;/summary&gt;
                /// &lt;param name="images"&gt;The images to render.&lt;/param&gt;
                /// &lt;param name="outputTiffFileName"&gt;Name of the output tiff file.&lt;/param&gt;
                /// &lt;param name="renderer"&gt;The renderer.&lt;/param&gt;
                public static void RenderPdfUseContentRenderer(
                    ImageCollection images,
                    string outputTiffFileName,
                    PdfContentRenderer renderer)
                {
                    // create PDF rendering settings
                    PdfRenderingSettings settings = new PdfRenderingSettings();
                    // specify the custom PDF content renderer
                    settings.ContentRenderer = renderer;
                    // specify PDF rendering settings for images (PDF pages)
                    images.SetRenderingSettings(settings);
            
                    // create TIFF encoder
                    using (TiffEncoder encoder = new TiffEncoder())
                        // save PDF pages to a TIFF file
                        images.SaveSync(outputTiffFileName, encoder);
                }
            
            
                /// &lt;summary&gt;
                /// Provides functionality for overriding algorithms of PDF content rendering.
                /// &lt;/summary&gt;
                public class CustomContentRenderer : PdfContentRenderer
                {
            
                    #region Fields
            
                    /// &lt;summary&gt;
                    /// Determines that string is drawing.
                    /// &lt;/summary&gt;
                    bool _stringDrawing = false;
            
                    #endregion
            
            
            
                    #region Properties
            
                    bool _drawForms = true;
                    /// &lt;summary&gt;
                    /// Gets or sets a value indicating whether the renderer must draw form XObjects on PDF page.
                    /// &lt;/summary&gt;
                    public bool DrawForms
                    {
                        get
                        {
                            return _drawForms;
                        }
                        set
                        {
                            _drawForms = value;
                        }
                    }
            
                    bool _drawImages = true;
                    /// &lt;summary&gt;
                    /// Gets or sets a value indicating whether the renderer must draw images on PDF page.
                    /// &lt;/summary&gt;
                    public bool DrawImages
                    {
                        get
                        {
                            return _drawImages;
                        }
                        set
                        {
                            _drawImages = value;
                        }
                    }
            
                    bool _drawInlineImages = true;
                    /// &lt;summary&gt;
                    /// Gets or sets a value indicating whether the renderer must draw inline images on PDF page.
                    /// &lt;/summary&gt;
                    public bool DrawInlineImages
                    {
                        get
                        {
                            return _drawInlineImages;
                        }
                        set
                        {
                            _drawInlineImages = value;
                        }
                    }
            
                    bool _drawPaths = true;
                    /// &lt;summary&gt;
                    /// Gets or sets a value indicating whether the renderer must draw graphics paths on PDF page.
                    /// &lt;/summary&gt;
                    /// &lt;/value&gt;
                    public bool DrawPaths
                    {
                        get
                        {
                            return _drawPaths;
                        }
                        set
                        {
                            _drawPaths = value;
                        }
                    }
            
                    bool _fillPaths = true;
                    /// &lt;summary&gt;
                    /// Gets or sets a value indicating whether the renderer must fill graphics paths on PDF page.
                    /// &lt;/summary&gt;
                    public bool FillPaths
                    {
                        get
                        {
                            return _fillPaths;
                        }
                        set
                        {
                            _fillPaths = value;
                        }
                    }
            
                    bool _fillPathsUseTilingPatterns = true;
                    /// &lt;summary&gt;
                    /// Gets or sets a value indicating whether the renderer must fill
                    /// graphics paths using tiling patterns on PDF page.
                    /// &lt;/summary&gt;
                    public bool FillPathsUseTilingPatterns
                    {
                        get
                        {
                            return _fillPathsUseTilingPatterns;
                        }
                        set
                        {
                            _fillPathsUseTilingPatterns = value;
                        }
                    }
            
                    bool _fillPathsUseShadingPatterns = true;
                    /// &lt;summary&gt;
                    /// Gets or sets a value indicating whether the renderer must fill
                    /// graphics paths using shading patterns on PDF page.
                    /// &lt;/summary&gt;
                    public bool FillPathsUseShadingPatterns
                    {
                        get
                        {
                            return _fillPathsUseShadingPatterns;
                        }
                        set
                        {
                            _fillPathsUseShadingPatterns = value;
                        }
                    }
            
                    bool _fillAreaUseShadingPatterns = true;
                    /// &lt;summary&gt;
                    /// Gets or sets a value indicating whether the renderer must fill
                    /// all visible areas using tiling patterns on PDF page.
                    /// &lt;/summary&gt;
                    public bool FillAreaUseShadingPatterns
                    {
                        get
                        {
                            return _fillAreaUseShadingPatterns;
                        }
                        set
                        {
                            _fillAreaUseShadingPatterns = value;
                        }
                    }
            
                    bool _drawText = true;
                    /// &lt;summary&gt;
                    /// Gets or sets a value indicating whether the renderer must draw 
                    /// text on PDF page.
                    /// &lt;/summary&gt;
                    public bool DrawText
                    {
                        get
                        {
                            return _drawText;
                        }
                        set
                        {
                            _drawText = value;
                        }
                    }
            
                    bool _drawInvisibleText = false;
                    /// &lt;summary&gt;
                    /// Gets or sets a value indicating whether the renderer must draw 
                    /// invisible text on PDF page.
                    /// &lt;/summary&gt;
                    public bool DrawInvisibleText
                    {
                        get
                        {
                            return _drawInvisibleText;
                        }
                        set
                        {
                            _drawInvisibleText = value;
                        }
                    }
            
                    float _linesWeigth = 1;
                    /// &lt;summary&gt;
                    /// Gets or sets the lines weigth, in percents.
                    /// &lt;/summary&gt;
                    public float LinesWeigth
                    {
                        get
                        {
                            return _linesWeigth;
                        }
                        set
                        {
                            _linesWeigth = value;
                        }
                    }
            
                    ProcessingCommandBase _imageProcessing = null;
                    /// &lt;summary&gt;
                    /// Gets or sets the image processing command that should be applied to an image
                    /// before image will be drawn on PDF page.
                    /// &lt;/summary&gt;
                    public ProcessingCommandBase ImageProcessing
                    {
                        get
                        {
                            return _imageProcessing;
                        }
                        set
                        {
                            _imageProcessing = value;
                        }
                    }
            
                    #endregion
            
            
            
                    #region Methods
            
                    /// &lt;summary&gt;
                    /// Draws a text string.
                    /// &lt;/summary&gt;
                    /// &lt;param name="context"&gt;The rendering context.&lt;/param&gt;
                    /// &lt;param name="charCodes"&gt;The codes, in font encoding, of text characters.&lt;/param&gt;
                    public override void DrawString(PdfContentRenderingContext context, ulong[] charCodes)
                    {
                        // if text must be drawn AND text is visible
                        if (_drawText &amp;&amp; context.GraphicsState.TextRenderingMode != TextRenderingMode.Invisible)
                        {
                            _stringDrawing = true;
                            base.DrawString(context, charCodes);
                            _stringDrawing = false;
                        }
                        // if invisible text must be drawn AND text is invisible
                        else if (_drawInvisibleText &amp;&amp; context.GraphicsState.TextRenderingMode == TextRenderingMode.Invisible)
                        {
                            context.GraphicsState.TextRenderingMode = TextRenderingMode.Fill;
                            base.DrawString(context, charCodes);
                            context.GraphicsState.TextRenderingMode = TextRenderingMode.Invisible;
                        }
                    }
            
                    /// &lt;summary&gt;
                    /// Draws path using specified pen.
                    /// &lt;/summary&gt;
                    /// &lt;param name="context"&gt;The rendering context.&lt;/param&gt;
                    /// &lt;param name="path"&gt;The path to draw.&lt;/param&gt;
                    /// &lt;param name="pen"&gt;The pen that should be used for drawing a path.&lt;/param&gt;
                    public override void DrawPath(PdfContentRenderingContext context, GraphicsPath path, Pen pen)
                    {
                        // if path must be drawn
                        if ((_drawPaths &amp;&amp; !_stringDrawing) || (_drawText &amp;&amp; _stringDrawing))
                        {
                            // if drawing path is not a drawing path of text symbol
                            if (_linesWeigth != 1 &amp;&amp; !_stringDrawing)
                            {
                                float oldWidth = pen.Width;
                                pen.Width *= _linesWeigth;
                                base.DrawPath(context, path, pen);
                                pen.Width = oldWidth;
                            }
                            else
                            {
                                base.DrawPath(context, path, pen);
                            }
                        }
                    }
            
                    /// &lt;summary&gt;
                    /// Fills path using specified brush.
                    /// &lt;/summary&gt;
                    /// &lt;param name="context"&gt;The rendering context.&lt;/param&gt;
                    /// &lt;param name="path"&gt;The path to fill.&lt;/param&gt;
                    /// &lt;param name="brush"&gt;The brush that should be used for filling a path.&lt;/param&gt;
                    public override void FillPath(PdfContentRenderingContext context, GraphicsPath path, Brush brush)
                    {
                        // if path must be filled
                        if ((_fillPaths &amp;&amp; !_stringDrawing) || (_drawText &amp;&amp; _stringDrawing))
                            base.FillPath(context, path, brush);
                    }
            
                    /// &lt;summary&gt;
                    /// Fills path using specified pattern.
                    /// &lt;/summary&gt;
                    /// &lt;param name="context"&gt;The rendering context.&lt;/param&gt;
                    /// &lt;param name="path"&gt;The path to fill.&lt;/param&gt;
                    /// &lt;param name="pattern"&gt;The pattern that should be used for filling a path.&lt;/param&gt;
                    public override void FillPath(
                        PdfContentRenderingContext context,
                        GraphicsPath path,
                        PatternBase pattern)
                    {
                        if (!_fillPathsUseShadingPatterns &amp;&amp; pattern is ShadingPattern)
                            return;
                        if (!_fillPathsUseTilingPatterns &amp;&amp; pattern is TilingPattern)
                            return;
                        base.FillPath(context, path, pattern);
                    }
            
                    /// &lt;summary&gt;
                    /// Fills all visible areas using specified shading pattern.
                    /// &lt;/summary&gt;
                    /// &lt;param name="context"&gt;The rendering context.&lt;/param&gt;
                    /// &lt;param name="shadingPattern"&gt;The shading pattern.&lt;/param&gt;
                    public override void FillArea(
                        PdfContentRenderingContext context,
                        ShadingPatternBase shadingPattern)
                    {
                        if (_fillAreaUseShadingPatterns)
                            base.FillArea(context, shadingPattern);
                    }
            
                    /// &lt;summary&gt;
                    /// Draws a form XObject.
                    /// &lt;/summary&gt;
                    /// &lt;param name="context"&gt;The rendering context.&lt;/param&gt;
                    /// &lt;param name="formResource"&gt;The form XObject to draw.&lt;/param&gt;
                    public override void DrawFormXObject(
                        PdfContentRenderingContext context,
                        PdfFormXObjectResource formResource)
                    {
                        if (_drawForms)
                            base.DrawFormXObject(context, formResource);
                    }
            
                    /// &lt;summary&gt;
                    /// Draws an image resource.
                    /// &lt;/summary&gt;
                    /// &lt;param name="context"&gt;The rendering context.&lt;/param&gt;
                    /// &lt;param name="imageResource"&gt;The image XObject resource to draw.&lt;/param&gt;
                    public override void DrawImageResource(
                        PdfContentRenderingContext context,
                        PdfImageResource imageResource)
                    {
                        if (!_drawImages &amp;&amp; !imageResource.IsInline)
                            return;
                        if (!_drawInlineImages &amp;&amp; imageResource.IsInline)
                            return;
                        base.DrawImageResource(context, imageResource);
                    }
            
                    /// &lt;summary&gt;
                    /// Draws an image.
                    /// &lt;/summary&gt;
                    /// &lt;param name="context"&gt;The rendering context.&lt;/param&gt;
                    /// &lt;param name="image"&gt;The image to draw.&lt;/param&gt;
                    /// &lt;param name="points"&gt;Array of three System.Drawing.PointF structures that
                    /// define a parallelogram on rendering content where image must be drawn.&lt;/param&gt;
                    public override void DrawImage(
                        PdfContentRenderingContext context,
                        VintasoftImage image,
                        PointF[] points)
                    {
                        // if image processing muse be applied to an image
                        if (ImageProcessing != null &amp;&amp;
                            ImageProcessing.IsPixelFormatSupported(image.PixelFormat))
                        {
                            lock (image)
                            {
                                using (VintasoftImage tempImage = ImageProcessing.Execute(image))
                                    base.DrawImage(context, tempImage, points);
                            }
                        }
                        else
                        {
                            base.DrawImage(context, image, points);
                        }
                    }
            
                    #endregion
            
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfContentRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.PdfContentRenderer" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfContentRenderer.OnRenderingStarted(Vintasoft.Imaging.Pdf.PdfContentRenderingContext)">
            <summary>
            Called when rendering is started.
            </summary>
            <param name="context">The rendering context.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfContentRenderer.OnRenderingFinished(Vintasoft.Imaging.Pdf.PdfContentRenderingContext)">
            <summary>
            Called when rendering is finished.
            </summary>
            <param name="context">The rendering context.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfContentRenderer.OnGraphicsStateSaved(Vintasoft.Imaging.Pdf.PdfContentRenderingContext)">
            <summary>
            Called when graphics state is saved.
            </summary>
            <param name="context">The rendering context.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfContentRenderer.OnGraphicsStateRestored(Vintasoft.Imaging.Pdf.PdfContentRenderingContext)">
            <summary>
            Called when graphics state is restored.
            </summary>
            <param name="context">The rendering context.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfContentRenderer.SetFont(Vintasoft.Imaging.Pdf.PdfContentRenderingContext,Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFont@,System.Single@)">
            <summary>
            Sets the font that must be used for drawing text.
            </summary>
            <param name="context">The rendering context.</param>
            <param name="font">The font.</param>
            <param name="fontSize">Font size.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfContentRenderer.DrawPath(Vintasoft.Imaging.Pdf.PdfContentRenderingContext,System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Pen)">
            <summary>
            Draws path using specified pen.
            </summary>
            <param name="context">The rendering context.</param>
            <param name="path">The path to draw.</param>
            <param name="pen">The pen to use for drawing path.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfContentRenderer.FillPath(Vintasoft.Imaging.Pdf.PdfContentRenderingContext,System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Brush)">
            <summary>
            Fills path using specified brush.
            </summary>
            <param name="context">The rendering context.</param>
            <param name="path">The path to fill.</param>
            <param name="brush">The brush to use for filling path.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfContentRenderer.FillPath(Vintasoft.Imaging.Pdf.PdfContentRenderingContext,System.Drawing.Drawing2D.GraphicsPath,Vintasoft.Imaging.Pdf.Tree.Patterns.PatternBase)">
            <summary>
            Fills path using specified pattern.
            </summary>
            <param name="context">The rendering context.</param>
            <param name="path">The path to fill.</param>
            <param name="pattern">The pattern to use for filling path.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfContentRenderer.FillArea(Vintasoft.Imaging.Pdf.PdfContentRenderingContext,Vintasoft.Imaging.Pdf.Tree.ShadingPatterns.ShadingPatternBase)">
            <summary>
            Fills all visible areas using specified shading pattern.
            </summary>
            <param name="context">The rendering context.</param>
            <param name="shadingPattern">The shading pattern.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfContentRenderer.IntersectClip(Vintasoft.Imaging.Pdf.PdfContentRenderingContext,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Intersects current clip region with specified clip path.
            </summary>
            <param name="context">The rendering context.</param>
            <param name="clipPath">The clip path.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfContentRenderer.DrawString(Vintasoft.Imaging.Pdf.PdfContentRenderingContext,System.UInt64[])">
            <summary>
            Draws a text string.
            </summary>
            <param name="context">The rendering context.</param>
            <param name="charCodes">The codes, in font encoding, of text characters.</param>
            <remarks>
            The <see cref="M:Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFont.ConvertFontEncodingToUnicode(System.UInt64[])" /> method
            should be used for converting character codes to a string.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfContentRenderer.DrawImageResource(Vintasoft.Imaging.Pdf.PdfContentRenderingContext,Vintasoft.Imaging.Pdf.Tree.PdfImageResource)">
            <summary>
            Draws an image resource.
            </summary>
            <param name="context">The rendering context.</param>
            <param name="imageResource">The image XObject resource to draw.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfContentRenderer.DrawImage(Vintasoft.Imaging.Pdf.PdfContentRenderingContext,Vintasoft.Imaging.VintasoftImage,System.Drawing.PointF[])">
            <summary>
            Draws an image.
            </summary>
            <param name="context">The rendering context.</param>
            <param name="image">The image to draw.</param>
            <param name="points">Array of three System.Drawing.PointF structures that
            define a parallelogram on rendering content where image must be drawn.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfContentRenderer.DrawFormXObject(Vintasoft.Imaging.Pdf.PdfContentRenderingContext,Vintasoft.Imaging.Pdf.Tree.PdfFormXObjectResource)">
            <summary>
            Draws a form XObject.
            </summary>
            <param name="context">The rendering context.</param>
            <param name="formResource">The form XObject to draw.</param>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Security.EncryptionAlgorithm">
            <summary>
            Specifies available encryption algorithms.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Security.EncryptionAlgorithm.Unsupported">
            <summary>
            Unsupported algorithm.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Security.EncryptionAlgorithm.None">
            <summary>
            Does not encrypt/decrypt data.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Security.EncryptionAlgorithm.RC4">
            <summary>
            RC4 symmetric stream cipher.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Security.EncryptionAlgorithm.AES">
            <summary>
            The AES (Advanced Encryption Standard) symmetric block cipher.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Security.EncryptionSystem">
            <summary>
            Provides information about encryption system of PDF document.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Security.EncryptionSystem.#ctor(Vintasoft.Imaging.Pdf.Security.EncryptionAlgorithm,System.Int32,System.String,System.String,Vintasoft.Imaging.Pdf.Security.UserAccessPermissions)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Security.EncryptionSystem" /> class.
            </summary>
            <param name="algorithm">The Encryption Algorithm.</param>
            <param name="userPassword">User password string.</param>
            <param name="ownerPassword">Owner password string.</param>
            <param name="keyLength">The Encryption Key length (in bits). When RC4 algorithm used, 
            the value must be a multiple of 8, in the range 40 to 128. 
            When AES algorithm used, the value must be 128.</param>
            <param name="userPermissions">The <see cref="T:Vintasoft.Imaging.Pdf.Security.UserAccessPermissions" /> that specifying 
            which access permissions should be granted when the 
            document is opened with user access.</param>
            <seealso cref="M:Vintasoft.Imaging.Pdf.PdfDocument.#ctor(Vintasoft.Imaging.Pdf.PdfFormat,Vintasoft.Imaging.Pdf.Security.EncryptionSystem)" />
            <seealso cref="M:Vintasoft.Imaging.Pdf.PdfDocument.Pack(Vintasoft.Imaging.Pdf.PdfFormat,Vintasoft.Imaging.Pdf.Security.EncryptionSystem)" />
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Security.EncryptionSystem.ToString">
            <summary>
            Returns a string that represents this <see cref="T:Vintasoft.Imaging.Pdf.Security.EncryptionSystem" />.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Security.EncryptionSystem.Dispose">
            <summary>
            Releases all resources used by this <see cref="T:Vintasoft.Imaging.Pdf.Security.EncryptionSystem" />.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Security.EncryptionSystem.Algorithm">
            <summary>
            Gets an encryption algorithm.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Security.EncryptionSystem.KeyLength">
            <summary>
            Gets the length of the encryption key, in bits.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Security.EncryptionSystem.ContainsUserPassword">
            <summary>
            Gets a flag that determines whether the encryption system contains a user password.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Security.EncryptionSystem.ContainsOwnerPassword">
            <summary>
            Gets a flag that determines whether the encryption system contains an owner password.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Security.EncryptionSystem.UserPermissions">
            <summary>
            Gets the access permissions should be granted when the document
            is opened with user access.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Security.IncorrectAuthorizationException">
            <summary>
            Represents error that occurs when the document is encrypted and required authentication but
            authorization is failed.
            </summary>
            <seealso cref="M:Vintasoft.Imaging.Pdf.PdfDocument.Authenticate(System.String)" />
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Security.UserAccessPermissions">
            <summary>
            Specifies available access permissions when document is opened with the user access.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Security.UserAccessPermissions.None">
            <summary>
            No permissions.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Security.UserAccessPermissions.AllowAll">
            <summary>
            Allow all actions.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Security.UserAccessPermissions.PrintDocumentInLowResolution">
            <summary>
            Print the document in low resolution.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Security.UserAccessPermissions.PrintDocumentInHighResolution">
            <summary>
            Allows of print the document in high resolution.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Security.UserAccessPermissions.ExtractTextAndGraphics">
            <summary>
            Copy or otherwise extract text and graphics from the document.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Security.UserAccessPermissions.ModifyContents">
            <summary>
            Modify the contents of the document by operations other than those controlled by
            <b>AssembleDocument</b>, <b>ModifyAnnotations</b> and <b>FillInteractiveFormFields</b>.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Security.UserAccessPermissions.ModifyAnnotations">
            <summary>
            Add or modify text annotations, fill in interactive form fields, create or 
            modify interactive form fields (including signature fields).
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Security.UserAccessPermissions.FillInteractiveFormFields">
            <summary>
            Fill in existing interactive form fields (including signature fields).
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Security.UserAccessPermissions.AssembleDocument">
            <summary>
            Assemble the document (insert, rotate, or delete pages and create bookmarks or thumbnail images).
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigurePoints">
            <summary>
            Defines the point collection of graphics figure.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigurePoints.IndexOf(System.Drawing.PointF)">
            <summary>
            Searches for the specified point and returns the zero-based index of the
            first occurrence within the entire collection.
            </summary>
            <param name="item">The <see cref="T:System.Drawing.PointF" /> to locate in the collection.</param>
            <returns>
            The zero-based index of the first occurrence of item within 
            the entire collection, if found; otherwise, –1.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigurePoints.Insert(System.Int32,System.Drawing.PointF)">
            <summary>
            Inserts a point into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The <see cref="T:System.Drawing.PointF" /> to insert.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigurePoints.RemoveAt(System.Int32)">
            <summary>
            Removes the point at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the point to remove.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigurePoints.Add(System.Drawing.PointF)">
            <summary>
            Adds an object to the end of the collection.
            </summary>
            <param name="item">The object to be added to the end of the collection.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigurePoints.Clear">
            <summary>
            Removes all points from the collection.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigurePoints.Contains(System.Drawing.PointF)">
            <summary>
            Determines whether a point is in the collection.
            </summary>
            <param name="item">The object to locate in the collection.</param>
            <returns><b>true</b> if item is found in the collection; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigurePoints.CopyTo(System.Drawing.PointF[],System.Int32)">
            <summary>
            Copies the entire collection to a one-dimensional array, starting 
            at the specified index of the target array.
            </summary>
            <param name="array">
            The one-dimensional System.Array that is the destination of the points
            copied from collection. The System.Array must have zero-based indexing.
            </param>
            <param name="arrayIndex">
            The zero-based index in array at which copying begins.
            </param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigurePoints.Remove(System.Drawing.PointF)">
            <summary>
            Removes the first occurrence of a specific point from the collection.
            </summary>
            <param name="item">The point to remove from the collection.</param>
            <returns>
            <b>true</b> if item is successfully removed; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigurePoints.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigurePoints.ToArray">
            <summary>
            Copies the points of the collection to a new array.
            </summary>
            <returns>An array containing copies of the points of the collection.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigurePoints.AddRange(System.Collections.Generic.IEnumerable{System.Drawing.PointF})">
            <summary>
            Adds the points of the specified collection to
            the end of the <see cref="T:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigurePoints" />.
            </summary>
            <param name="points">The collection whose points should be added to
            the end of the <see cref="T:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigurePoints" />.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigurePoints.ClearAndAddRange(System.Drawing.PointF[])">
            <summary>
            Clears the <see cref="T:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigurePoints" /> and
            adds the points of the specified array to
            the end of the <see cref="T:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigurePoints" />.
            </summary>
            <param name="points">Array of points.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigurePoints.Item(System.Int32)">
            <summary>
            Gets or sets the point at the specified index.
            </summary>
            <param name="index">The zero-based index of the point to get or set.</param>
            <returns>The point at the specified index.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigurePoints.Count">
            <summary>
            Gets the number of points actually contained in this collection.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigurePoints.IsReadOnly">
            <summary>
            Gets a value indicating whether this collection is read-only.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigurePoints.IsFixedLength">
            <summary>
            Gets a value indicating whether the collection has a fixed size.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigurePoints.MinCount">
            <summary>
            Gets a minimal count of point in this collection.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigureGroup">
            <summary>
            Represents a group of graphics figures.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigureGroup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigureGroup" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigureGroup.DrawFigure(Vintasoft.Imaging.Pdf.Drawing.PdfGraphics)">
            <summary>
            Draws the graphics figure on specified <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" />.
            </summary>
            <param name="graphics">The <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" />.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigureGroup.RefreshProperties(Vintasoft.Imaging.Pdf.Drawing.PdfGraphics)">
            <summary>
            Refresh the properties (Size, Location, ...) of the graphics figure.
            </summary>
            <param name="graphics">The <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" />.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigureGroup.GetRegion">
            <summary>
            Returns a region of this graphics figure.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigureGroup.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigureGroup.CopyTo(Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigure)">
            <summary>
            Copies the state of the current object to the target object.
            </summary>
            <param name="target">Object to copy the state of the current object to.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigureGroup.IndexOf(Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigure)">
            <summary>
            Determines the index of a specific figure in the collection.
            </summary>
            <param name="item">The figure to locate in the group.</param>
            <returns>The index of figure if figure is found in the group; otherwise, -1.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigureGroup.Insert(System.Int32,Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigure)">
            <summary>
            Inserts a figure to the group at the specified index.
            </summary>
            <param name="index">The zero-based index at which figure should be inserted.</param>
            <param name="item">The figure to insert into the group.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigureGroup.RemoveAt(System.Int32)">
            <summary>
            Removes figure at the specified index.
            </summary>
            <param name="index">The zero-based index of figure to remove.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigureGroup.Add(Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigure)">
            <summary>
            Adds a figure to the collection.
            </summary>
            <param name="item">The figure to add to the collection.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigureGroup.Clear">
            <summary>
            Removes all figures from the group.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigureGroup.Contains(Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigure)">
            <summary>
            Determines whether the group contains a specific figure. 
            </summary>
            <param name="item">The figure to locate in the group. </param>
            <returns><b>true</b> if the figure is found in the group; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigureGroup.CopyTo(Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigure[],System.Int32)">
            <summary>
            Copies the figures of the group to an Array,
            starting at a particular Array index. 
            </summary>
            <param name="array">The one-dimensional Array
            that is the destination of the figures copied
            from group. The Array must have zero-based
            indexing.</param>
            <param name="arrayIndex">The zero-based index
            in array at which copying begins.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigureGroup.Remove(Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigure)">
            <summary>
            Removes the first occurrence of a specific figure
            from the collection. 
            </summary>
            <param name="item">The figure to remove from
            the group.</param>
            <returns><b>true</b> if figure is removed
            successfully; <b>false</b> otherwise.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigureGroup.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a group.
            </summary>
            <returns>An IEnumerator object that can be used
            to iterate through the group.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigureGroup.SetRegion(Vintasoft.Imaging.Pdf.RegionF)">
            <summary>
            Sets the region of figure.
            </summary>
            <param name="region">The region.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigureGroup.Transform">
            <summary>
            Gets or sets a transformation that used in this graphics figure group.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigureGroup.Item(System.Int32)">
            <summary>
            Gets or sets the figure at the specified index.
            </summary>
            <param name="index">The zero-based index of the figure to get or set.</param>
            <returns>The figure at the specified index.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigureGroup.Count">
            <summary>
            Gets the number of figures contained in the group.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigureGroup.IsReadOnly">
            <summary>
            Gets a value indicating whether the group is read-only.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigureGroup.IsVisible">
            <summary>
            Gets a value indicating whether this figure is visible.
            </summary>
            <value>
            <c>true</c> if this figure is visible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigureChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigure.Changed" /> event.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigureChangedEventArgs.InvalidateRectangle">
            <summary>
            Gets an invalidate rectangle.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.ImageFigure">
            <summary>
            Represents an image.
            </summary>
            <example>
            Here is an example that shows how to draw image figure on PDF page:
            <code lang="VB.NET">
            Public Shared Sub CreatePdfDocument(pdfFilename As String, imageFilename As String)
                ' create PDF document
                Using document As New PdfDocument(pdfFilename, PdfFormat.Pdf_14)
                    ' open image
                    Using image As New VintasoftImage(imageFilename)
                        ' add new page to PDF document
                        Dim page As PdfPage = document.Pages.Add(PaperSizeKind.A4)
                        ' add image resource to PDF document
                        Dim imageResource As New PdfImageResource(document, image, PdfCompression.Auto)
            
                        ' create layout panel
                        Dim rootLayout As New AlignmentPanel()
                        rootLayout.Location = page.MediaBox.Location
                        rootLayout.Size = page.MediaBox.Size
                        ' set layout panel margin (5 mm)
                        Dim margin As Double = UnitOfMeasureConverter.ConvertToPdfUserUnits(5, UnitOfMeasure.Millimeters)
                        rootLayout.Margin = New PdfContentPadding(margin)
            
                        ' create image figure
                        Dim imageFigure As New ImageFigure(imageResource)
                        ' maintain aspect ratio of image
                        imageFigure.MaintainAspectRatio = True
                        ' add image figure to layout panel
                        rootLayout.Add(imageFigure)
            
                        ' draw figures on graphics of PDF page
                        Using g As PdfGraphics = page.GetGraphics()
                            rootLayout.Draw(g)
                        End Using
            
                        ' save document changes
                        document.SaveChanges()
                    End Using
                End Using
            End Sub
            </code>
            <code lang="C#">
            public static void CreatePdfDocument(string pdfFilename, string imageFilename)
            {
                // create PDF document
                using (PdfDocument document = new PdfDocument(pdfFilename, PdfFormat.Pdf_14))
                {// open image
                    using (VintasoftImage image = new VintasoftImage(imageFilename))
                    {
                        // add new page to PDF document
                        PdfPage page = document.Pages.Add(PaperSizeKind.A4);
                        // add image resource to PDF document
                        PdfImageResource imageResource = new PdfImageResource(document, image, PdfCompression.Auto);
            
                        // create layout panel
                        AlignmentPanel rootLayout = new AlignmentPanel();
                        rootLayout.Location = page.MediaBox.Location;
                        rootLayout.Size = page.MediaBox.Size;
                        // set layout panel margin (5 mm)
                        double margin = UnitOfMeasureConverter.ConvertToPdfUserUnits(5, UnitOfMeasure.Millimeters);
                        rootLayout.Margin = new PdfContentPadding(margin);
            
                        // create image figure
                        ImageFigure imageFigure = new ImageFigure(imageResource);
                        // maintain aspect ratio of image
                        imageFigure.MaintainAspectRatio = true;
                        // add image figure to layout panel
                        rootLayout.Add(imageFigure);
            
                        // draw figures on graphics of PDF page
                        using (PdfGraphics g = page.GetGraphics())
                            rootLayout.Draw(g);
            
                        // save document changes
                        document.SaveChanges();
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.ImageFigure.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.ImageFigure" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.ImageFigure.#ctor(Vintasoft.Imaging.Pdf.Tree.PdfImageResource)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.ImageFigure" /> class.
            </summary>
            <param name="imageResource">The image resource.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.ImageFigure.RefreshProperties(Vintasoft.Imaging.Pdf.Drawing.PdfGraphics)">
            <summary>
            Refresh the properties (Size, Location, ...) of the graphics figure.
            </summary>
            <param name="graphics">The <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" />.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.ImageFigure.DrawFigure(Vintasoft.Imaging.Pdf.Drawing.PdfGraphics)">
            <summary>
            Draws the graphics figure on specified <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" />.
            </summary>
            <param name="graphics">The <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" />.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.ImageFigure.GetRegion">
            <summary>
            Returns a region of this graphics figure.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.ImageFigure.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.ImageFigure.CopyTo(Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigure)">
            <summary>
            Copies the state of the current object to the target object.
            </summary>
            <param name="target">Object to copy the state of the current object to.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.ImageFigure.AutoWidth">
            <summary>
            Gets or sets a value indicating whether the figure can calculate width automatically.
            </summary>
            <value>Default value is <b>false</b>.</value>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.ImageFigure.AutoHeight">
            <summary>
            Gets or sets a value indicating whether the figure can calculate height automatically.
            </summary>
            <value>Default value is <b>false</b>.</value>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.ImageFigure.ImageResource">
            <summary>
            Gets or sets an image resource of this image figure.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.ImageFigure.MaintainAspectRatio">
            <summary>
            Gets or sets a value indicating whether the figure saves the aspect ratio of its image.
            </summary>
            <value>Default value is <b>false</b>.</value>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.TextLineFigure">
            <summary>
            Represents a text line figure,
            i.e. a set of commands for drawing text line on <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" />.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.TextLineFigure.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.TextLineFigure" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.TextLineFigure.#ctor(Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFont,System.Single,System.String,Vintasoft.Imaging.Pdf.Drawing.PdfBrush)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.TextLineFigure" /> class.
            </summary>
            <param name="brush">Text brush.</param>
            <param name="text">Text.</param>
            <param name="font">Text font.</param>
            <param name="size">Font size.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.TextLineFigure.DrawFigure(Vintasoft.Imaging.Pdf.Drawing.PdfGraphics)">
            <summary>
            Draws the graphics figure on specified <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" />.
            </summary>
            <param name="graphics">The <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" />.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.TextLineFigure.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.TextLineFigure.GetRegion">
            <summary>
            Returns the region of the figure.
            </summary>
            <returns>The region of the figure.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.TextLineFigure.CopyTo(Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigure)">
            <summary>
            Copies the state of the current object to the target object.
            </summary>
            <param name="target">Object to copy the state of the current object to.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.TextLineFigure.Text">
            <summary>
            Gets or sets a text.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.TextLineFigure.Font">
            <summary>
            Gets or sets a text font.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.TextLineFigure.FontSize">
            <summary>
            Gets or sets a font size.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.TextLineFigure.TextBrush">
            <summary>
            Gets or sets a text brush.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.TextLineFigure.CharacterSpacing">
            <summary>
            Gets or sets the character spacing.
            </summary>
            <value>Default value is <b>0</b>.</value>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.TextLineFigure.WordSpacing">
            <summary>
            Gets or sets the word spacing.
            </summary>
            <value>Default value is <b>0</b>.</value>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.TextLineFigure.HorizontalTextScaling">
            <summary>
            Gets or sets the text horizontal scaling specifying the percentage of the normal width.
            </summary>
            <value>Default value is <b>100</b>.</value>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.EllipseFigure">
            <summary>
            Represents an ellipse figure.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.EllipseFigure.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.EllipseFigure" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.EllipseFigure.#ctor(Vintasoft.Imaging.Pdf.Drawing.PdfPen,Vintasoft.Imaging.Pdf.Drawing.PdfBrush)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.EllipseFigure" /> class.
            </summary>
            <param name="pen">The pen.</param>
            <param name="brush">The brush.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.EllipseFigure.DrawFigure(Vintasoft.Imaging.Pdf.Drawing.PdfGraphics)">
            <summary>
            Draws the graphics figure on specified <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" />.
            </summary>
            <param name="graphics">The <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" />.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.EllipseFigure.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfHighlightAnnotation">
            <summary>
            Represents a PDF annotation that highlights region of PDF page.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfTextMarkupAnnotation">
            <summary>
            Represents a PDF annotation that can appears as as highlight,
            underline, strikeout, or jagged ("squiggly") underline in the text of a document. 
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfSimpleAnnotation">
            <summary>
            Provides the base class that represents a PDF annotation with interior color.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotation">
            <summary>
            Provides the base class that contains information about PDF annotation.
            </summary>
            <example>
            Here is an example that demonstrates how to create an annotation, 
            which consists from red rectangle:
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Creates an annotation, which consists from red rectangle.
            ''' &lt;/summary&gt;
            ''' &lt;param name="page"&gt;The page.&lt;/param&gt;
            ''' &lt;returns&gt;The created annotation.&lt;/returns&gt;
            Public Shared Function CreatePdfAnnotation(page As PdfPage) As PdfAnnotation
                ' create a rectangular annotation
                Dim annotation As New PdfRectangleAnnotation(page)
                ' set interior color
                annotation.InteriorColor = Color.Red
                ' set rectangle
                annotation.Rectangle = New RectangleF(40, 40, 160, 80)
                ' create graphics for normal appearance
                Using pdfGraphics As PdfGraphics = annotation.CreateNormalAppearanceGraphics()
                    ' draw an appearance of the annotation
                    pdfGraphics.FillRectangle(New PdfBrush(Color.Red), 0, 0, annotation.Rectangle.Width, annotation.Rectangle.Height)
                End Using
            
                ' return created annotation
                Return annotation
            End Function
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Creates an annotation, which consists from red rectangle.
            /// &lt;/summary&gt;
            /// &lt;param name="page"&gt;The page.&lt;/param&gt;
            /// &lt;returns&gt;The created annotation.&lt;/returns&gt;
            public static PdfAnnotation CreatePdfAnnotation(PdfPage page)
            {
                // create a rectangular annotation
                PdfRectangleAnnotation annotation = new PdfRectangleAnnotation(page);
                // set interior color
                annotation.InteriorColor = Color.Red;
                // set rectangle
                annotation.Rectangle = new RectangleF(40, 40, 160, 80);
                // create graphics for normal appearance
                using (PdfGraphics pdfGraphics = annotation.CreateNormalAppearanceGraphics())
                {
                    // draw an appearance of the annotation
                    pdfGraphics.FillRectangle(
                        new PdfBrush(Color.Red), 0, 0, annotation.Rectangle.Width, annotation.Rectangle.Height);
                }
            
                // return created annotation
                return annotation;
            }
            </code>
            </example>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.PdfTreeNodeBase">
            <summary>
            Represents base class for all objects in the Tree of PDF document.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfTreeNodeBase.Document">
            <summary>
            Gets the parent document of this tree node.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfTreeNodeBase.ObjectNumber">
            <summary>
            Gets unique tree node number.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfTreeNodeBase.IsChanged">
            <summary>
            Gets the object's changed status.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotation.MultiplyTransform(Vintasoft.Imaging.Utils.AffineMatrix)">
            <summary>
            Multiplies a current transformation matrix of annotation appearances 
            to specified transformation matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <remarks>
            This method changes <see cref="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotation.Rectangle" /> and <see cref="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotation.AppearanceMatrix" /> properties.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotation.CreateNormalAppearanceGraphics">
            <summary>
            Creates a <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" /> on 
            <see cref="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotation.Appearances" />.<see cref="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationAppearances.Normal">Normal</see>
            annotation appearance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" /> instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotation.CreateNormalAppearanceGraphics(System.String)">
            <summary>
            Creates a <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" /> on 
            <see cref="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotation.Appearances" />.<see cref="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationAppearances.NormalStates">NormalStates</see>
            annotation appearance with specified name.
            </summary>
            <param name="name">An appearance name.</param>
            <returns>A new <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" /> instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotation.CreateRolloverAppearanceGraphics">
            <summary>
            Creates a <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" /> on 
            <see cref="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotation.Appearances" />.<see cref="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationAppearances.Rollover">Rollover</see>
            annotation appearance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" /> instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotation.CreateRolloverAppearanceGraphics(System.String)">
            <summary>
            Creates a <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" /> on 
            <see cref="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotation.Appearances" />.<see cref="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationAppearances.RolloverStates">RolloverStates</see> 
            annotation appearance with specified name.
            </summary>
            <param name="name">An appearance name.</param>
            <returns>A new <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" /> instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotation.CreateDownAppearanceGraphics">
            <summary>
            Creates a <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" /> on 
            <see cref="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotation.Appearances" />.<see cref="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationAppearances.Down">Down</see>
            annotation appearance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" /> instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotation.CreateDownAppearanceGraphics(System.String)">
            <summary>
            Creates a <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" /> on 
            <see cref="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotation.Appearances" />.<see cref="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationAppearances.DownStates">DownStates</see>
            annotation appearance with specified name.
            </summary>
            <param name="name">An appearance name.</param>
            <returns>A new <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" /> instance.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotation.OptionalContentGroup">
            <summary>
            Gets or sets the optional content group,
            which specifies the optional content properties of the annotation.
            </summary>
            <remarks>
            Before the annotation is drawn, annotation visibility is determined based on this property
            as well as the annotation flags specified in the <see cref="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotation.Flags" /> property. 
            If annotation is determined to be invisible, the annotation is skipped,
            as if it were not in the document.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotation.Page">
            <summary>
            Gets or sets a PDF page that associated with annotation.
            </summary>
            <remarks>
            Value of this property can be used for information purposes only.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotation.Rectangle">
            <summary>
            Gets or sets the annotation rectangle, defining the location of annotation on 
            the page in default user space units.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotation.Contents">
            <summary>
            Gets or sets a text to be displayed for the annotation or, if this type 
            of annotation does not display text, an alternate description of the 
            annotation's contents in human-readable form. 
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotation.Modified">
            <summary>
            Gets or sets the date and time when the annotation was most recently modified.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotation.BorderStyle">
            <summary>
            Gets or sets a border style of annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotation.Color">
            <summary>
            Gets or sets a color of annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotation.Author">
            <summary>
            Gets or sets an author of annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotation.Subject">
            <summary>
            Gets or sets a subject of annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotation.AppearanceMatrix">
            <summary>
            Gets or sets a transformation matrix of annotation appearances.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotation.ActivateAction">
            <summary>
            Gets or sets an action to be performed when the annotation is activated.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotation.Flags">
            <summary>
            Gets or sets a set of flags specifying various characteristics of the annotation.
            </summary>
            <value>
            Default value is <see cref="T:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationFlags" />.None.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotation.Appearances">
            <summary>
            Gets or sets annotation appearances specifying how the annotation is 
            presented visually on the page.
            </summary>
            <seealso cref="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotation.AppearanceState" />
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotation.AppearanceState">
            <summary>
            Gets or sets name of appearance state.
            </summary>
            <remarks>
            This property is required if annotation has an appearance subdictionary,
            i.e. <see cref="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationAppearances.NormalStates" />,
            <see cref="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationAppearances.RolloverStates" /> or
            <see cref="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationAppearances.DownStates" />) is specified.
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotation.Appearances" />
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotation.Name">
            <summary>
            Gets or sets the annotation name, a text string uniquely 
            identifying it among all the annotations on its page.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotation.AdditionalActions">
            <summary>
            Gets or sets an additional-actions defining the annotation's 
            behavior in response to various trigger events.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if
            user tries to set NOT <b>null</b> value when
            property is already set to NOT <b>null</b> value.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfSimpleAnnotation.InteriorColor">
            <summary>
            Gets or sets a color specifying the interior color with which to fill the annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfTextMarkupAnnotation.QuadPoints">
            <summary>
            Gets or sets an array of 4 x n points specifying the coordinates 
            of n quadrilaterals in default user space. 
            </summary>
            <remarks>
            Each quadrilateral encompasses a word or group of contiguous words in the text
            underlying the annotation. 
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfHighlightAnnotation.#ctor(Vintasoft.Imaging.Pdf.Tree.PdfPage)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfHighlightAnnotation" /> class.
            </summary>        
            <param name="page">The parent page of new annotation.</param>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationAppearanceCharacteristics">
            <summary>
            Stores appearance characteristics to
            be used in constructing a dynamic appearance stream specifying 
            the annotation visual presentation on the page.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationAppearanceCharacteristics.#ctor(Vintasoft.Imaging.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationAppearanceCharacteristics" /> class.
            </summary>
            <param name="document">PDF document.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationAppearanceCharacteristics.BorderColor">
            <summary>
            Gets or sets a color of the widget annotation's border.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationAppearanceCharacteristics.BackgroundColor">
            <summary>
            Gets or sets a color of the widget annotation's background.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationAppearanceCharacteristics.NormalCaption">
            <summary>
            Gets or sets a widget annotation's normal caption,
            displayed when it is not interacting with the user.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationAppearanceCharacteristics.RolloverCaption">
            <summary>
            Gets or sets a widget annotation's rollover caption, displayed 
            when the user rolls the cursor into its active area without
            pressing the mouse button.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationAppearanceCharacteristics.DownCaption">
            <summary>
            Gets or sets a widget annotation's alternate (down) caption, 
            displayed when the mouse button is pressed within its active area.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfPaperMetaDataGenerationParameters">
            <summary>
            Contains information about PaperMetaData generation parameters,
            which contains instructions to a barcode encoding module of a conforming reader
            on how to generate the barcode image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfPaperMetaDataGenerationParameters.Resolution">
            <summary>
            Gets or sets the resolution, in dots-per-inch (dpi), at which
            the barcode object shall be rendered.
            </summary>
            <value>
            Default value is <b>300</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfPaperMetaDataGenerationParameters.Caption">
            <summary>
            Gets or sets the caption of the barcode object.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfPaperMetaDataGenerationParameters.Symbology">
            <summary>
            Gets or sets the barcode or glyph technology is to be used on this annotation.
            </summary>
            <value>
            Supported values are PDF417, QRCode, and DataMatrix.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfPaperMetaDataGenerationParameters.Width">
            <summary>
            Gets or sets the width, measured in inches, of the barcode object.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfPaperMetaDataGenerationParameters.Height">
            <summary>
            Gets or sets the height, measured in inches, of the barcode object.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfPaperMetaDataGenerationParameters.ErrorCorrectionCoefficient">
            <summary>
            Gets or sets an integer value representing the error correction coefficient.
            </summary>
            <value>
            For PDF417, shall be from 0 to 8.<br />
            For QRCode, shall be from 0 to 3 (0 for 'L', 1 for 'M', 2 for 'Q', and 3 for 'H').
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfPaperMetaDataGenerationParameters.ModuleWidth">
            <summary>
            Gets or sets the horizontal distance, in rendered pixels, 
            between two barcode modules (XSymWidth).
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfPaperMetaDataGenerationParameters.ModuleHeight">
            <summary>
            Gets or sets the vertical distance between two barcode modules,
            measured in rendered pixels (XSymHeight). 
            </summary>
            <value>
            The ratio ModuleHeight/ModuleWidth shall be an integer value.<br />
            Only needed for PDF417.<br />
            For PDF417, the acceptable ratio range shall be from 1 to 4.<br />
            For QRCode and DataMatrix, this ratio shall always be 1.<br />
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfWidgetAnnotation">
            <summary>
            Represents a Widget annotation that displays interactive element.
            </summary>
            <remarks>
            Interactive forms use widget annotations (PDF 1.2) to represent 
            the appearance of fields and to manage user interactions.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfWidgetAnnotation.#ctor(Vintasoft.Imaging.Pdf.Tree.PdfPage)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfWidgetAnnotation" /> class.
            </summary>        
            <param name="page">The parent page of new annotation.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfWidgetAnnotation.HighlightingMode">
            <summary>
            Gets or sets the annotation's highlighting mode, the visual effect to be used
            when the mouse button is pressed or held down inside its active area.
            </summary>
            <value>
            Default value is <see cref="T:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationHighlightingMode" />.Invert.
            </value>
            <remarks>
            A highlighting mode other than <see cref="T:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationHighlightingMode" />.Push
            overrides any down appearance defined for the annotation.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfWidgetAnnotation.AppearanceCharacteristics">
            <summary>
            Gets or sets an appearance characteristics to be used 
            in constructing a dynamic appearance stream specifying 
            the annotation visual presentation on the page.
            </summary>
            <remarks>
            If this property is set in the widget annotation, viewers 
            regenerate the entire appearance stream. If this property is not present, 
            the contents of the stream outside /Tx BMC ... EMC are preserved.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfWidgetAnnotation.PaperMetaData">
            <summary>
            Gets or sets the the PaperMetaData generation parameters.
            </summary>
            <remarks>
            Contains instructions to a barcode encoding module of a
            conforming reader on how to generate the barcode image.
            </remarks>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationAdditionalActions">
            <summary>
            Stores additional-actions defining the annotation's behavior 
            in response to various trigger events.
            </summary>
            <seealso cref="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotation.AdditionalActions" />
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationAdditionalActions.#ctor(Vintasoft.Imaging.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationAdditionalActions" /> class.
            </summary>
            <param name="document">Parent PDF document.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationAdditionalActions.CursorEnter">
            <summary>
            Gets or sets an action to be performed when 
            the cursor enters the annotation's active area.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationAdditionalActions.CursorExit">
            <summary>
            Gets or sets an action to be performed
            when the cursor exits the annotation's active area.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationAdditionalActions.MouseButtonDown">
            <summary>
            Gets or sets an action to be performed when the 
            mouse button is pressed inside the annotation's active area.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationAdditionalActions.MouseButtonUp">
            <summary>
            Gets or sets an action to be performed when the 
            mouse button is released inside the annotation's active area.
            </summary>
            <remarks>
            For backward compatibility, the <see cref="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotation.ActivateAction" /> property 
            if set, takes precedence over this property.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationAdditionalActions.ReceiveInputFocus">
            <summary>
            Gets or sets an action to be performed when the widget 
            annotation receives the input focus.
            </summary>
            <remarks>
            This property actually for widget annotations only.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationAdditionalActions.LostInputFocus">
            <summary>
            Gets or sets an action to be performed when the
            annotation loses the input focus.
            </summary>
            <remarks>
            This property actually for widget annotations only.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationAdditionalActions.PageOpen">
            <summary>
            Gets or sets an action to be performed when the 
            page containing the annotation is opened.
            </summary>
            <remarks>
            (PDF 1.5) The action is executed after the
            <see cref="P:Vintasoft.Imaging.Pdf.Tree.PdfPageAdditionalActions.PageOpen" />
            action in the page's additional-actions and the 
            <see cref="P:Vintasoft.Imaging.Pdf.PdfDocument.OpenAction" /> action, if such actions are present.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationAdditionalActions.PageClose">
            <summary>
            Gets or sets an action to be performed when the page 
            containing the annotation is closed.
            </summary>
            <remarks>
            (PDF 1.5) The action is executed before the 
            <see cref="P:Vintasoft.Imaging.Pdf.Tree.PdfPageAdditionalActions.PageClose" />
            action in the page's additional-actions, if such actions are present.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationAdditionalActions.PageVisible">
            <summary>
            Gets or sets an action to be performed when the page containing 
            the annotation becomes visible in the viewer application's user interface.
            </summary>
            <remarks>(PDF 1.5)</remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationAdditionalActions.PageInvisible">
            <summary>
            Gets or sets an action to be performed when the page containing 
            the annotation is no longer visible in the viewer application's 
            user interface.
            </summary>
            <remarks>(PDF 1.5)</remarks>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationBorderStyleType">
            <summary>
            Specifies available types of annotation border style.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationBorderStyleType.Default">
            <summary>
            Default border style.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationBorderStyleType.Solid">
            <summary>
            A solid rectangle surrounding the annotation.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationBorderStyleType.Dashed">
            <summary>
            A dashed rectangle surrounding the annotation.
            The dash pattern is specified by the <see cref="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationBorderStyle.DashArray" /> property.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationBorderStyleType.Beveled">
            <summary>
            A simulated embossed rectangle that appears to be raised above the surface of the page.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationBorderStyleType.Inset">
            <summary>
            A simulated engraved rectangle that appears to be recessed below the surface of the page.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationBorderStyleType.Underline">
            <summary>
            A single line along the bottom of the annotation rectangle.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.PdfDeveloperExtension">
            <summary>
            Provides information about developer extension version.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfDeveloperExtension.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfDeveloperExtension" /> class. 
            </summary>
            <param name="document">Parent PDF document.</param>
            <param name="baseVersion">The name that designates a version of the PDF 
            specification.</param>
            <param name="extensionLevel">The extension level.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfDeveloperExtension.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfDeveloperExtension.BaseVersion">
            <summary>
            Gets the name that designates a version of the PDF 
            specification and that is syntactically consistent with the 
            <see cref="P:Vintasoft.Imaging.Pdf.PdfDocument.SpecificationVersion" /> property.
            </summary>
            <remarks>
            Note: The version in a PDF file can be specified in two places. The
            initial line in the file (<see cref="P:Vintasoft.Imaging.Pdf.PdfDocument.Format" />) or in the 
            <see cref="P:Vintasoft.Imaging.Pdf.PdfDocument.SpecificationVersion" /> property. 
            The BaseVersion value may differ from the version number on the header
            line, or as supplied by the <see cref="P:Vintasoft.Imaging.Pdf.PdfDocument.SpecificationVersion" /> property.
            This is because it reflects the version of the standard that is
            extended and not the version of this particular file.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfDeveloperExtension.ExtensionLevel">
            <summary>
            Gets an integer that is used in conjunction with the associated <see cref="P:Vintasoft.Imaging.Pdf.Tree.PdfDeveloperExtension.BaseVersion" />.
            </summary>
            <remarks>
            The interpretation of this value is
            defined by the developer. The value of ExtensionLevel for a
            particular BaseVersion value shall increase over subsequent
            extensions.<br />
            Note: Developers can designate lower-order digits to represent
            sub-levels. For example, the value 100 could represent 1.0,
            or the value 101 could represent 1.1.
            </remarks>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.PdfDeveloperExtensionDictionary">
            <summary>
            Represents a collection of developer extensions.
            </summary>
            <remarks>
            Beginning with PDF BaseVersion 1.7, the extensions dictionary lets developers designate
            that a given document contains extensions to PDF. The presence of the extension dictionary
            in a document indicates that it may contain developer-specific PDF properties
            that extend a particular base version of the PDF specification.
            </remarks>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.PdfNamedDictionary`1">
            <summary>
            Represents named dictionary of name-value pairs.
            </summary>
            <typeparam name="T">Type derived from <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfTreeNodeBase" />.</typeparam>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.PdfNamedDictionaryBase`1">
            <summary>
            Provides the <b>abstract</b> base class for named dictionary of name-value pairs.
            </summary>
            <typeparam name="T">Type derived from <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfTreeNodeBase" />.</typeparam>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfNamedDictionaryBase`1.Add(`0)">
            <summary>
            Adds an item and generates unique name for the item. 
            </summary>
            <param name="value">The item to add.</param>
            <returns>Unique name of added item.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfNamedDictionaryBase`1.Add(System.String,`0)">
            <summary>
            Adds an element with the provided name and value to this dictionary.
            </summary>
            <param name="name">The element name.</param>
            <param name="value">The element value.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfNamedDictionaryBase`1.ContainsKey(System.String)">
            <summary>
            Determines whether the dictionary contains an element with the specified name.
            </summary>
            <param name="name">The name to locate in the dictionary.</param>
            <returns><b>true</b> if the dictionary contains an element with the name; 
            otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfNamedDictionaryBase`1.Remove(System.String)">
            <summary>
            Removes the element with the specified name from the dictionary.
            </summary>
            <param name="name">The name of the element to remove.</param>
            <returns><b>true</b> if the element is successfully removed; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfNamedDictionaryBase`1.TryGetValue(System.String,`0@)">
            <summary>
            Gets the value associated with the specified name.
            </summary>
            <param name="name">The name whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified name, if
            the key is found; otherwise, the default value for the type of the value
            parameter. This parameter is passed uninitialized.</param>
            <returns><b>true</b> if the object contains an element with the specified name;
            otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfNamedDictionaryBase`1.Add(System.Collections.Generic.KeyValuePair{System.String,`0})">
            <summary>
            Adds a key/value pair to the dictionary.
            </summary>
            <param name="item">The key/value pair to add to the dictionary.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfNamedDictionaryBase`1.Clear">
            <summary>
            Removes all elements from the dictionary.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfNamedDictionaryBase`1.Contains(System.Collections.Generic.KeyValuePair{System.String,`0})">
            <summary>
            Determines whether the dictionary contains a specific key/value pair.
            </summary>
            <param name="item">The key/value pair to locate in the dictionary.</param>
            <returns><b>true</b> if key/value pair is found in the dictionary; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfNamedDictionaryBase`1.CopyTo(System.Collections.Generic.KeyValuePair{System.String,`0}[],System.Int32)">
            <summary>
            Copies the key/value pairs of the dictionary to an <see cref="T:System.Array" />, 
            starting at a particular <see cref="T:System.Array" /> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> that is 
            the destination of the key/value pairs copied from dictionary. 
            The <see cref="T:System.Array" /> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfNamedDictionaryBase`1.Remove(System.Collections.Generic.KeyValuePair{System.String,`0})">
            <summary>
            Removes a specific key/value pair from the dictionary.
            </summary>
            <param name="item">The key/value pair to remove from the dictionary.</param>
            <returns><b>true</b> if the key/value pair is successfully removed; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfNamedDictionaryBase`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns> An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfNamedDictionaryBase`1.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection" /> object containing 
            the keys of the named dictionary.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfNamedDictionaryBase`1.Values">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection" /> object containing 
            the values of the named dictionary.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfNamedDictionaryBase`1.Item(System.String)">
            <summary>
            Gets or sets the element with the specified name.
            </summary>
            <param name="name">The name of the element to get or set.</param>
            <returns>The element with the specified name.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfNamedDictionaryBase`1.Count">
            <summary>
            Gets the number of items contained in this
            <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfNamedDictionaryBase`1" />.        
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfNamedDictionaryBase`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfNamedDictionaryBase`1" /> object is read-only.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfNamedDictionary`1.Count">
            <summary>
            Gets the number of items contained in this
            <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfNamedDictionary`1" />.        
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfDeveloperExtensionDictionary.#ctor(Vintasoft.Imaging.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfDeveloperExtensionDictionary" /> class. 
            </summary>
            <param name="document">Parent PDF document.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfDeveloperExtensionDictionary.AdobeDeveloperExtension">
            <summary>
            Gets or sets the ADBE (Adobe-specific) developer extension.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.FileAttachments.AttachmentCollectionViewMode">
            <summary>
            Defines available view modes of file attachment collection.
            </summary>
            <seealso cref="P:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentCollection.View" />
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.FileAttachments.AttachmentCollectionViewMode.DetailsMode">
            <summary>
            The collection view is presented in details mode, with
            all information in the Schema dictionary presented in 
            a multi-column format.
            This mode provides the most information to the user.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.FileAttachments.AttachmentCollectionViewMode.TileMode">
            <summary>
            The collection view is presented in tile mode, with each
            file in the collection denoted by a small icon and a subset 
            of information from the <see cref="P:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentCollection.Schema" /> property.
            This mode provides top-level information about the file attachments to the user.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.FileAttachments.AttachmentCollectionViewMode.Hidden">
            <summary>
            The collection view is initially hidden, without preventing the user 
            from obtaining a file list via explicit action.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.FileAttachments.AttachmentCollectionViewMode.Custom">
            <summary>
            (PDF 1.7 ExtensionLevel 3) The collection view is presented by a custom navigator.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentCollection">
            <summary>
            Represents a collections of file attachments,
            where the attachments are related in structure or content.
            </summary>
            <remarks>
            Beginning with PDF 1.7, PDF documents can specify how a viewer
            application's user interface presents collections of file attachments (Portfolio),
            where the attachments are related in structure or content. Such a 
            presentation is called a portable collection. The intent of portable
            collections is to present, sort, and search collections of related 
            documents, such as email archives, photo collections, and etc.
            If attachment is present in a PDF document, the user interface presents 
            the document as an attachment collection. <br />
            Beginning with PDF 1.7 ExtensionLevel 3, an attachment collection can contain a 
            folders for the purpose of organizing files into a hierarchical structure. 
            The structure is represented by a tree with a single root folder (<see cref="P:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentCollection.RootFolder" />) 
            acting as the common ancestor for all other folders and files in the collection.
            </remarks>
            <example>
            Here is an example that shows how to get information about attachments of PDF document:
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Prints the portfolio structure.
            ''' &lt;/summary&gt;
            ''' &lt;param name="pdfFilename"&gt;The PDF filename.&lt;/param&gt;
            Public Shared Sub PrintPortfolioStructure(pdfFilename As String)
                ' open PDF document in read-only mode
                Using document As New PdfDocument(pdfFilename, True)
                    ' if PDF document does not contain portfolio
                    If document.Attachments Is Nothing Then
                        Console.WriteLine("Document does not have attachments (portfolio).")
                        Return
                    End If
            
                    ' print inital view mode
                    Console.WriteLine(String.Format("Inital View Mode = {0}", document.Attachments.View))
            
                    ' print colors information
                    If document.Attachments.Colors IsNot Nothing Then
                        PrintPortfolioColors(document.Attachments.Colors)
                    End If
            
                    ' print portfolio schema
                    If document.Attachments.Schema IsNot Nothing Then
                        PrintPortfolioSchema(document.Attachments.Schema)
                    End If
            
                    ' print portfolio sort settings
                    If document.Attachments.Sort IsNot Nothing Then
                        PrintPortfolioSort(document.Attachments.Sort)
                    End If
            
                    ' print portfolio splitter bar settings
                    If document.Attachments.SplitterBar IsNot Nothing Then
                        PrintPortfolioSplitterBar(document.Attachments.SplitterBar)
                    End If
            
                    ' print portfolio folders and files
                    If document.Attachments.RootFolder IsNot Nothing Then
                        Console.WriteLine("Folder structure:")
                        PrintFolderStructure(document.Attachments.RootFolder, "  ")
                    Else
                        Console.WriteLine("Files:")
                        PrintFileInfo(document.Attachments.GetFiles(""), "  ")
                    End If
                End Using
            End Sub
            
            ''' &lt;summary&gt;
            ''' Prints the folder structure.
            ''' &lt;/summary&gt;
            ''' &lt;param name="pdfAttachmentFolder"&gt;The PDF attachment folder.&lt;/param&gt;
            Private Shared Sub PrintFolderStructure(folder As PdfAttachmentFolder, padding As String)
                Console.WriteLine(String.Format("{0}Folder: {1}", padding, folder.Name))
                padding += "  "
                PrintFileInfo(folder.Files, padding)
                Dim subFolders As PdfAttachmentFolder() = folder.Folders
                If subFolders IsNot Nothing Then
                    For Each subFolder As PdfAttachmentFolder In subFolders
                        PrintFolderStructure(subFolder, padding)
                    Next
                End If
            End Sub
            
            ''' &lt;summary&gt;
            ''' Prints the portfolio splitter bar information.
            ''' &lt;/summary&gt;
            ''' &lt;param name="splitterBar"&gt;The splitter bar.&lt;/param&gt;
            Private Shared Sub PrintPortfolioSplitterBar(splitterBar As PdfAttachmentCollectionSplitterBar)
                Console.WriteLine("Splitter Bar:")
                Console.WriteLine(String.Format("  Direction = {0}", splitterBar.Direction))
                Console.WriteLine(String.Format("  Position  = {0}", splitterBar.Position))
            End Sub
            
            ''' &lt;summary&gt;
            ''' Prints an information for specified files.
            ''' &lt;/summary&gt;
            ''' &lt;param name="pdfEmbeddedFileSpecification"&gt;The PDF embedded file specifications.&lt;/param&gt;
            Private Shared Sub PrintFileInfo(fileSpecs As PdfEmbeddedFileSpecification(), padding As String)
                For Each fileSpec As PdfEmbeddedFileSpecification In fileSpecs
                    Console.WriteLine(String.Format("{0}File: {1}", padding, fileSpec.Filename))
                    Console.WriteLine(String.Format("{0}  CompressedSize   = {1}", padding, fileSpec.CompressedSize))
                    Console.WriteLine(String.Format("{0}  UncompressedSize = {1}", padding, fileSpec.UncompressedSize))
                    Console.WriteLine(String.Format("{0}  Compression      = {1}", padding, fileSpec.Compression))
                    Console.WriteLine(String.Format("{0}  CreationDate     = {1}", padding, fileSpec.CreationDate))
                    Console.WriteLine(String.Format("{0}  ModificationDate = {1}", padding, fileSpec.ModificationDate))
                    Console.WriteLine(String.Format("{0}  Description      = {1}", padding, fileSpec.Description))
                    Console.WriteLine(String.Format("{0}  HasThumbnail     = {1}", padding, fileSpec.Thumbnail IsNot Nothing))
                    If fileSpec.DataFields IsNot Nothing Then
                        Console.WriteLine("    DataFields:")
                        For Each name As String In fileSpec.DataFields.Keys
                            Console.WriteLine(String.Format("      {0}={1}", name, fileSpec.DataFields(name).DataAsString))
                        Next
                    End If
                Next
            End Sub
            
            ''' &lt;summary&gt;
            ''' Prints the portfolio sort properties.
            ''' &lt;/summary&gt;
            ''' &lt;param name="pdfAttachmentCollectionSchema"&gt;The PDF attachment collection sort properties.&lt;/param&gt;
            Private Shared Sub PrintPortfolioSort(sort As PdfAttachmentCollectionSort)
                Console.WriteLine("Sort:")
                Console.WriteLine("  Field names:")
                Dim fieldNames As String() = sort.FieldNames
                For i As Integer = 0 To fieldNames.Length - 1
                    Console.WriteLine("    {0}: {1}", i, fieldNames(i))
                Next
            
                Console.WriteLine("  Ascending orders:")
                Dim ascendingOrders As Boolean() = sort.AscendingOrders
                For i As Integer = 0 To ascendingOrders.Length - 1
                    Console.WriteLine("    {0}: {1}", i, ascendingOrders(i))
                Next
            End Sub
            
            ''' &lt;summary&gt;
            ''' Prints the portfolio schema.
            ''' &lt;/summary&gt;
            ''' &lt;param name="pdfAttachmentCollectionSchema"&gt;The PDF attachment collection schema.&lt;/param&gt;
            Private Shared Sub PrintPortfolioSchema(schema As PdfAttachmentCollectionSchema)
                Console.WriteLine("Schema:")
                For Each key As String In schema.Keys
                    Console.WriteLine(String.Format("  {0}:", key))
                    Dim field As PdfAttachmentCollectionSchemaField = schema(key)
                    Console.WriteLine("    DataType          = {0}", field.DataType)
                    Console.WriteLine("    DisplayedName     = {0}", field.DisplayedName)
                    Console.WriteLine("    IsSupportsEditing = {0}", field.IsSupportsEditing)
                    Console.WriteLine("    IsVisible         = {0}", field.IsVisible)
                    Console.WriteLine("    Order             = {0}", field.Order)
                Next
            End Sub
            
            ''' &lt;summary&gt;
            ''' Prints the portfolio colors information.
            ''' &lt;/summary&gt;
            ''' &lt;param name="presentationColors"&gt;The presentation colors.&lt;/param&gt;
            Private Shared Sub PrintPortfolioColors(presentationColors As PdfPresentationColors)
                Console.WriteLine("Colors:")
                Console.WriteLine(String.Format("  Background     = {0}", presentationColors.Background))
                Console.WriteLine(String.Format("  CardBackground = {0}", presentationColors.CardBackground))
                Console.WriteLine(String.Format("  CardBorder     = {0}", presentationColors.CardBorder))
                Console.WriteLine(String.Format("  PrimaryText    = {0}", presentationColors.PrimaryText))
                Console.WriteLine(String.Format("  SecondaryText  = {0}", presentationColors.SecondaryText))
            End Sub
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Prints the portfolio structure.
            /// &lt;/summary&gt;
            /// &lt;param name="pdfFilename"&gt;The PDF filename.&lt;/param&gt;
            public static void PrintPortfolioStructure(string pdfFilename)
            {
                // open PDF document in read-only mode
                using (PdfDocument document = new PdfDocument(pdfFilename, true))
                {
                    // if PDF document does not contain portfolio
                    if (document.Attachments == null)
                    {
                        Console.WriteLine("Document does not have attachments (portfolio).");
                        return;
                    }
            
                    // print inital view mode
                    Console.WriteLine(string.Format("Inital View Mode = {0}", document.Attachments.View));
            
                    // print colors information
                    if (document.Attachments.Colors != null)
                        PrintPortfolioColors(document.Attachments.Colors);
            
                    // print portfolio schema
                    if (document.Attachments.Schema != null)
                        PrintPortfolioSchema(document.Attachments.Schema);
            
                    // print portfolio sort settings
                    if (document.Attachments.Sort != null)
                        PrintPortfolioSort(document.Attachments.Sort);
            
                    // print portfolio splitter bar settings
                    if (document.Attachments.SplitterBar != null)
                        PrintPortfolioSplitterBar(document.Attachments.SplitterBar);
            
                    // print portfolio folders and files
                    if (document.Attachments.RootFolder != null)
                    {
                        Console.WriteLine("Folder structure:");
                        PrintFolderStructure(document.Attachments.RootFolder, "  ");
                    }
                    else
                    {
                        Console.WriteLine("Files:");
                        PrintFileInfo(document.Attachments.GetFiles(""), "  ");
                    }
                }
            }
            
            /// &lt;summary&gt;
            /// Prints the folder structure.
            /// &lt;/summary&gt;
            /// &lt;param name="pdfAttachmentFolder"&gt;The PDF attachment folder.&lt;/param&gt;
            private static void PrintFolderStructure(PdfAttachmentFolder folder, string padding)
            {
                Console.WriteLine(string.Format("{0}Folder: {1}", padding, folder.Name));
                padding += "  ";
                PrintFileInfo(folder.Files, padding);
                PdfAttachmentFolder[] subFolders = folder.Folders;
                if (subFolders != null)
                {
                    foreach (PdfAttachmentFolder subFolder in subFolders)
                        PrintFolderStructure(subFolder, padding);
                }
            }
            
            /// &lt;summary&gt;
            /// Prints the portfolio splitter bar information.
            /// &lt;/summary&gt;
            /// &lt;param name="splitterBar"&gt;The splitter bar.&lt;/param&gt;
            private static void PrintPortfolioSplitterBar(PdfAttachmentCollectionSplitterBar splitterBar)
            {
                Console.WriteLine("Splitter Bar:");
                Console.WriteLine(string.Format("  Direction = {0}", splitterBar.Direction));
                Console.WriteLine(string.Format("  Position  = {0}", splitterBar.Position));
            }
            
            /// &lt;summary&gt;
            /// Prints an information for specified files.
            /// &lt;/summary&gt;
            /// &lt;param name="pdfEmbeddedFileSpecification"&gt;The PDF embedded file specifications.&lt;/param&gt;
            private static void PrintFileInfo(PdfEmbeddedFileSpecification[] fileSpecs, string padding)
            {
                foreach (PdfEmbeddedFileSpecification fileSpec in fileSpecs)
                {
                    Console.WriteLine(string.Format("{0}File: {1}", padding, fileSpec.Filename));
                    Console.WriteLine(string.Format("{0}  CompressedSize   = {1}", padding, fileSpec.CompressedSize));
                    Console.WriteLine(string.Format("{0}  UncompressedSize = {1}", padding, fileSpec.UncompressedSize));
                    Console.WriteLine(string.Format("{0}  Compression      = {1}", padding, fileSpec.Compression));
                    Console.WriteLine(string.Format("{0}  CreationDate     = {1}", padding, fileSpec.CreationDate));
                    Console.WriteLine(string.Format("{0}  ModificationDate = {1}", padding, fileSpec.ModificationDate));
                    Console.WriteLine(string.Format("{0}  Description      = {1}", padding, fileSpec.Description));
                    Console.WriteLine(string.Format("{0}  HasThumbnail     = {1}", padding, fileSpec.Thumbnail != null));
                    if (fileSpec.DataFields != null)
                    {
                        Console.WriteLine("    DataFields:");
                        foreach (string name in fileSpec.DataFields.Keys)
                        {
                            Console.WriteLine(string.Format("      {0}={1}", name,
                                fileSpec.DataFields[name].DataAsString));
                        }
                    }
                }
            }
            
            /// &lt;summary&gt;
            /// Prints the portfolio sort properties.
            /// &lt;/summary&gt;
            /// &lt;param name="pdfAttachmentCollectionSchema"&gt;The PDF attachment collection sort properties.&lt;/param&gt;
            private static void PrintPortfolioSort(PdfAttachmentCollectionSort sort)
            {
                Console.WriteLine("Sort:");
                Console.WriteLine("  Field names:");
                string[] fieldNames = sort.FieldNames;
                for (int i = 0; i &lt; fieldNames.Length; i++)
                    Console.WriteLine("    {0}: {1}", i, fieldNames[i]);
            
                Console.WriteLine("  Ascending orders:");
                bool[] ascendingOrders = sort.AscendingOrders;
                for (int i = 0; i &lt; ascendingOrders.Length; i++)
                    Console.WriteLine("    {0}: {1}", i, ascendingOrders[i]);
            }
            
            /// &lt;summary&gt;
            /// Prints the portfolio schema.
            /// &lt;/summary&gt;
            /// &lt;param name="pdfAttachmentCollectionSchema"&gt;The PDF attachment collection schema.&lt;/param&gt;
            private static void PrintPortfolioSchema(PdfAttachmentCollectionSchema schema)
            {
                Console.WriteLine("Schema:");
                foreach (string key in schema.Keys)
                {
                    Console.WriteLine(string.Format("  {0}:", key));
                    PdfAttachmentCollectionSchemaField field = schema[key];
                    Console.WriteLine("    DataType          = {0}", field.DataType);
                    Console.WriteLine("    DisplayedName     = {0}", field.DisplayedName);
                    Console.WriteLine("    IsSupportsEditing = {0}", field.IsSupportsEditing);
                    Console.WriteLine("    IsVisible         = {0}", field.IsVisible);
                    Console.WriteLine("    Order             = {0}", field.Order);
                }
            }
            
            /// &lt;summary&gt;
            /// Prints the portfolio colors information.
            /// &lt;/summary&gt;
            /// &lt;param name="presentationColors"&gt;The presentation colors.&lt;/param&gt;
            private static void PrintPortfolioColors(PdfPresentationColors presentationColors)
            {
                Console.WriteLine("Colors:");
                Console.WriteLine(string.Format("  Background     = {0}", presentationColors.Background));
                Console.WriteLine(string.Format("  CardBackground = {0}", presentationColors.CardBackground));
                Console.WriteLine(string.Format("  CardBorder     = {0}", presentationColors.CardBorder));
                Console.WriteLine(string.Format("  PrimaryText    = {0}", presentationColors.PrimaryText));
                Console.WriteLine(string.Format("  SecondaryText  = {0}", presentationColors.SecondaryText));
            }
            </code>
            </example>
            <seealso cref="P:Vintasoft.Imaging.Pdf.PdfDocument.Extensions" />
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentCollection.GetFolderFullNames">
            <summary>
            Gets the full names of all folders.
            </summary>
            <returns>Array that contains full names of all folders.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentCollection.GetFolderFullName(Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentFolder)">
            <summary>
            Gets the full name of specified folder.
            </summary>
            <param name="folder">The PDF attachment folder.</param>
            <returns>Full name of the folder.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentCollection.GetSubFolderFullNames(System.String,System.Boolean)">
            <summary>
            Gets the sub folder full names from specified folder.
            </summary>
            <param name="folderFullName">Full name of the folder.</param>
            <param name="topLevelOnly">Determines that method must extract only information
            about top level folders.</param>
            <returns>Array that contains sub folder fill names if folder is found;
            otherwise, <b>null</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentCollection.GetFolder(System.String)">
            <summary>
            Gets the folder with specified full name.
            </summary>
            <param name="folderFullName">Full name of the folder.</param>
            <returns>PDF attachment folder if folder is found; otherwise, <b>null</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentCollection.GetFolders(System.String)">
            <summary>
            Gets the sub folders from specified folder.
            </summary>
            <param name="folderFullName">Full name of the folder.</param>
            <returns>Array that contains sub folders if folder is found; otherwise, <b>null</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentCollection.GetFile(System.String)">
            <summary>
            Gets the file with specified full name.
            </summary>
            <param name="fileFullName">Full name of the file.</param>
            <returns>PDF file specification if file is found; otherwise, <b>null</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentCollection.GetFiles(System.String)">
            <summary>
            Gets the files from folder with specified name.
            </summary>
            <param name="folderFullName">Full name of the folder.</param>
            <returns>Array that contains files if folder is found; otherwise, <b>null</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentCollection.CreateFolder(System.String,System.String)">
            <summary>
            Creates new folder an adds it in specified folder.
            </summary>
            <param name="parentFolderFullName">Full name of parent folder of new folder.</param>
            <param name="newFolderName">Name of new folder.</param>
            <returns>
            <see cref="T:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentFolder" /> instance if folder is created;
            otherwise, <b>null</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentCollection.CreateFolder(System.String)">
            <summary>
            Creates new folder with specified full path.
            </summary>
            <param name="newFolderFullName">Full name of new folder.</param>
            <returns><see cref="T:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentFolder" /> object instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentCollection.AddFolder(System.String,Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentFolder)">
            <summary>
            Adds the folder to specified folder.
            </summary>
            <param name="parentFolderFullName">Full name of parent folder.</param>
            <param name="folder">The folder to add.</param>
            <returns><b>true</b> if folder is added; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentCollection.AddFile(System.String,Vintasoft.Imaging.Pdf.Tree.PdfEmbeddedFile,System.String)">
            <summary>
            Adds the file in folder with specified name.
            </summary>
            <param name="folderFullName">Full name of the folder.</param>
            <param name="embeddedFile">The embedded file.</param>
            <param name="filename">The embedded filename.</param>
            <returns>Embedded file specification for added embedded file if folder is found;
            otherwise, <b>null</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentCollection.RemoveFolder(System.String)">
            <summary>
            Removes the folder.
            </summary>
            <param name="folderFullName">Full name of the folder.</param>
            <returns>Folder that was removed.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentCollection.MoveFolder(System.String,System.String)">
            <summary>
            Moves the folder to specified folder.
            </summary>
            <param name="folderFullName">Full name of moving folder.</param>
            <param name="destFolderFullName">Full name of new parent folder of moving folder.</param>
            <returns><b>true</b> if folder is moved; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentCollection.MoveFile(System.String,System.String)">
            <summary>
            Moves the file to specified folder.
            </summary>
            <param name="fileFullName">Full name of moving file.</param>
            <param name="destFolderFullName">Full name of folder to file moves.</param>
            <returns><b>true</b> if file is moved; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentCollection.DeleteFolder(System.String)">
            <summary>
            Deletes a folder with specified name and all files and sub folders from specified folder.
            </summary>
            <param name="folderFullName">Full name of the folder.</param>
            <returns><b>true</b> if folder is deleted; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentCollection.DeleteFile(System.String,System.String)">
            <summary>
            Removes the file from folder with specified full name.
            </summary>
            <param name="folderFullName">Full name of the folder.</param>
            <param name="filename">The filename.</param>
            <returns><b>true</b> if file is removed; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentCollection.DeleteFile(System.String)">
            <summary>
            Deletes the file with specified full name.
            </summary>
            <param name="fileFullName">Full name of the file.</param>
            <returns><b>true</b> if file is removed; otherwise, <b>false</b>.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentCollection.Sort">
            <summary>
            Gets or sets the sort parameters, which specifies the order in 
            which items in the attachment collection should be sorted in the user interface.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentCollection.Colors">
            <summary>
            Gets or sets a collection colors specifying a suggested set of colors 
            for use by a collection navigator.
            </summary>
            <remarks>
            Available in viewers compatible with PDF 1.7 ExtensionLevel 3.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentCollection.View">
            <summary>
            Gets or sets the initial view of a collections of file attachments.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentCollection.RootFolder">
            <summary>
            Gets or sets a folder that is the single common ancestor of all 
            other folders in a attachment collection.
            </summary>
            <remarks>
            Available since PDF 1.7, ExtensionLevel 3.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentCollection.Schema">
            <summary>
            Gets or sets a presentation schema of this file attachment collection.
            </summary>
            <remarks>
            If this property is absent, the PDF viewer application 
            may choose useful defaults that are known to exist in a 
            file specification dictionary, such as the file name, 
            file size, and modified date.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentCollection.SplitterBar">
            <summary>
            Gets or sets the splitter bar parameters.
            </summary>
            <remarks>
            Available since PDF 1.7, ExtensionLevel 3.
            </remarks>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentCollectionSort">
            <summary>
            Provides sort parameters, which specifies the order in which items in the 
            attachment collection should be sorted in the user interface.
            </summary>
            <seealso cref="P:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentCollection.Schema" />
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentCollectionSort.#ctor(Vintasoft.Imaging.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentCollectionSort" /> class. 
            </summary>
            <param name="document">Parent document.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentCollectionSort.FieldNames">
            <summary>
            Gets or sets the names of fields that the PDF viewer application uses to 
            sort the items in the collection.
            </summary>
            <remarks>
            Each element of the array is a name that identifies a field described in 
            the attachment schema. If array contains multiple elements it is used to 
            allow additional fields to contribute to the sort, where each additional 
            field is used to break ties. More specifically, if multiple data fields
            have the same value for the first field named in the array, the values 
            for successive fields named in the array are used for sorting, until a 
            unique order is determined or until the named fields are exhausted.
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentCollection.Schema" />
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentCollectionSort.AscendingOrders">
            <summary>
            Gets or sets an array that contains values indicating whether the items in the 
            attachment collection are sorted in ascending order.
            </summary>
            <remarks>
            Each element of the array is a boolean value that specifies 
            whether the entry at the same index in the <see cref="P:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentCollectionSort.FieldNames" /> array is 
            sorted in ascending order.
            </remarks>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.FileAttachments.AttachmentCollectionSplitterBarDirection">
            <summary>
            Specifies available types of splitter bar directions.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.FileAttachments.AttachmentCollectionSplitterBarDirection.Undefinded">
            <summary>
            Direction is undefined.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.FileAttachments.AttachmentCollectionSplitterBarDirection.None">
            <summary>
            Indicates that the window is not split. 
            The entire window region is dedicated to the file navigation view.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.FileAttachments.AttachmentCollectionSplitterBarDirection.Horizontally">
            <summary>
            Indicates that the window is split horizontally.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.FileAttachments.AttachmentCollectionSplitterBarDirection.Vertically">
            <summary>
            Indicates that the window is split vertically.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentCollectionSplitterBar">
            <summary>
            Represents split bar parameters that specifies the orientation of the splitter bar.
            </summary>
            <remarks>
            An attachments can be displayed in a split view, showing a navigator (or file list) 
            in one sub-view and a preview of the currently selected document in the other. 
            A splitter bar holds information that specifies the initial orientation 
            (horizontal, vertical, or no split) of the splitter control and its position.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentCollectionSplitterBar.#ctor(Vintasoft.Imaging.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentCollectionSplitterBar" /> class.
            </summary>
            <param name="document">Parent PDF document.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentCollectionSplitterBar.Position">
            <summary>
            Gets or sets the initial position of the splitter bar, specified as a 
            percentage of the available window area.
            </summary>
            <value>
            Value can be from 0 to 100.
            </value>
            <remarks>
            The entry is ignored if <see cref="P:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentCollectionSplitterBar.Direction" /> is set to None.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentCollectionSplitterBar.Direction">
            <summary>
            Gets or sets orientation of the splitter bar.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.FileAttachments.AttachmentCollectionSchemaFieldDataType">
            <summary>
            Specifies available field data types of file attachment collection schema.
            </summary>
            <seealso cref="P:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentCollectionSchemaField.DataType" />
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.FileAttachments.AttachmentCollectionSchemaFieldDataType.Undefined">
            <summary>
            The field data type is undefined.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.FileAttachments.AttachmentCollectionSchemaFieldDataType.String">
            <summary>
            The field data is stored as a text string.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.FileAttachments.AttachmentCollectionSchemaFieldDataType.Date">
            <summary>
            The field data is stored as a date.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.FileAttachments.AttachmentCollectionSchemaFieldDataType.Number">
            <summary>
            The field data is stored as a number.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.FileAttachments.AttachmentCollectionSchemaFieldDataType.Filename">
            <summary>
            The field data is the file name of the embedded file stream, 
            as identified by the <see cref="P:Vintasoft.Imaging.Pdf.Tree.PdfFileReferenceSpecification.Filename" /> property 
            of the file specification.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.FileAttachments.AttachmentCollectionSchemaFieldDataType.FileDescription">
            <summary>
            The field data is the description of the embedded file stream, 
            as identified by the <see cref="P:Vintasoft.Imaging.Pdf.Tree.PdfFileReferenceSpecification.Description" /> property 
            in the file specification.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.FileAttachments.AttachmentCollectionSchemaFieldDataType.ModificationDate">
            <summary>
            The field data is the modification date of the embedded file stream,
            as identified by the <see cref="P:Vintasoft.Imaging.Pdf.Tree.PdfEmbeddedFile.ModifyDate" /> property
            in the embedded filestream.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.FileAttachments.AttachmentCollectionSchemaFieldDataType.CreationDate">
            <summary>
            The field data is the creation date of the embedded file stream, 
            as identified by the <see cref="P:Vintasoft.Imaging.Pdf.Tree.PdfEmbeddedFile.CreationDate" /> property
            in the embedded filestream.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.FileAttachments.AttachmentCollectionSchemaFieldDataType.UncompressedSize">
            <summary>
            The field data is the size of the embedded file, 
            as identified by the <see cref="P:Vintasoft.Imaging.Pdf.Tree.PdfEmbeddedFile.UncompressedLength" /> property
            in the embedded filestream.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.FileAttachments.AttachmentCollectionSchemaFieldDataType.CompressedSize">
            <summary>
            (PDF 1.7 Extension Level 3) The field data is the length of the embedded filestream, 
            as identified by the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfEmbeddedFile" />.Length
            property in the embedded filestream.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfPresentationColors">
            <summary>
            Represents a collection colors that a navigator should use in its presentation
            of a file attachments collection.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfPresentationColors.#ctor(Vintasoft.Imaging.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfPresentationColors" /> class. 
            </summary>
            <param name="document">Parent PDF document.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfPresentationColors.Background">
            <summary>
            Gets or sets the color used for the navigator background.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfPresentationColors.CardBackground">
            <summary>
            Gets or sets the color used for the navigator card background.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfPresentationColors.CardBorder">
            <summary>
            Gets or sets the color used for the navigator card border.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfPresentationColors.PrimaryText">
            <summary>
            Gets or sets the color used 
            for the primary text in a navigator, such as file names and links.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfPresentationColors.SecondaryText">
            <summary>
            Gets or sets the color used for other text in a navigator.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentFolder">
            <summary>
            Represents the attachment folder.
            </summary>
            <remarks>
            Beginning with PDF 1.7 ExtensionLevel 3, an attachment collection can contain a 
            folders for the purpose of organizing files into a hierarchical structure. 
            The structure is represented by a tree with a single root folder (<see cref="P:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentFolder.RootFolder" />) 
            acting as the common ancestor for all other folders and files in the collection.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentFolder.#ctor(Vintasoft.Imaging.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentFolder" /> class. 
            </summary>
            <param name="document">Parent PDF document.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentFolder.#ctor(Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentFolder,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentFolder" /> class. 
            </summary>
            <param name="parent">Parent PDF attachment folder.</param>
            <param name="name">The folder name.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if
            <i>name</i> is <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentFolder.GetFilenames">
            <summary>
            Returns the names of all files from this folder.
            </summary>
            <returns>Array that contains filenames.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentFolder.GetFolderNames">
            <summary>
            Returns the names of all sub folders from this folder.
            </summary>
            <returns>Array that contains folder names.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentFolder.GetFolder(System.String)">
            <summary>
            Gets the folder by name.
            </summary>
            <param name="name">The name.</param>
            <returns>Folder instance if folder is found; otherwise, <b>null</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentFolder.GetFile(System.String)">
            <summary>
            Gets the file specification by filename.
            </summary>
            <param name="filename">The filename.</param>
            <returns>File specification instance if file is found; otherwise, <b>null</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentFolder.AddFile(System.String)">
            <summary>
            Adds the file, located on disk, to this folder.
            File will be compressed using Zip(Flate) compression.
            </summary>
            <returns>Embedded file specification for created embedded file.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentFolder.AddFile(System.String,Vintasoft.Imaging.Pdf.PdfCompression)">
            <summary>
            Adds the file, located on disk, to this folder.
            </summary>
            <param name="filename">The filename.</param>
            <param name="compression">The compression that should be applied to the file.</param>
            <returns>Embedded file specification for created embedded file.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentFolder.AddFile(System.String,Vintasoft.Imaging.Pdf.PdfCompression,Vintasoft.Imaging.Pdf.PdfCompressionSettings)">
            <summary>
            Adds the file, located on disk, to this folder.
            </summary>
            <param name="filename">The filename.</param>
            <param name="compression">The compression that should be applied to the file.</param>
            <param name="compressionSettings">The compression settings.</param>
            <returns>Embedded file specification for created embedded file.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentFolder.AddFile(System.IO.Stream,System.String,Vintasoft.Imaging.Pdf.PdfCompression,Vintasoft.Imaging.Pdf.PdfCompressionSettings)">
            <summary>
            Adds the file, stored in stream, to this folder.
            </summary>
            <param name="stream">The stream with file data.</param>
            <param name="filename">The filename.</param>
            <param name="compression">The compression that should be applied to the file.</param>
            <param name="compressionSettings">The compression settings.</param>
            <returns>Embedded file specification for created embedded file.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentFolder.AddFile(Vintasoft.Imaging.Pdf.Tree.PdfEmbeddedFile,System.String)">
            <summary>
            Adds the file, represented by the PDF embedded file, to this folder.
            </summary>
            <param name="embeddeFile">The PDF embedded file.</param>
            <param name="filename">The filename.</param>
            <returns>Embedded file specification for embedded file.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentFolder.AddFile(Vintasoft.Imaging.Pdf.Tree.PdfEmbeddedFileSpecification)">
            <summary>
            Adds the file, represents by the PDF embedded file specification, to this folder.
            </summary>
            <param name="fileSpecification">The PDF embedded file specification.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentFolder.DeleteFile(System.String)">
            <summary>
            Deletes the file with specified name from this folder.
            </summary>
            <param name="filename">The filename.</param>
            <returns><b>true</b> if file is removed; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentFolder.DeleteFile(Vintasoft.Imaging.Pdf.Tree.PdfEmbeddedFileSpecification)">
            <summary>
            Deletes the file from this folder.
            </summary>
            <param name="fileSpecification">The file specification.</param>
            <returns><b>true</b> if file is removed; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentFolder.RenameFile(System.String,System.String)">
            <summary>
            Renames the file with specified name.
            </summary>
            <param name="oldFilename">The old filename.</param>
            <param name="newFilename">The new filename.</param>
            <returns><b>true</b> if file is found and renamed; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentFolder.AddFolder(System.String)">
            <summary>
            Adds new sub folder with specified name to this folder.
            </summary>
            <param name="name">The folder name.</param>
            <returns>New folder.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentFolder.AddFolder(Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentFolder)">
            <summary>
            Adds the sub folder to this folder.
            </summary>
            <param name="folder">The folder.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentFolder.DeleteFolder(System.String)">
            <summary>
            Removes the sub folder with specified name and all files and 
            folders that contain in specified folder.
            </summary>
            <param name="name">The folder name.</param>
            <returns><b>true</b> if folder is removed; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentFolder.DeleteFolder(Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentFolder)">
            <summary>
            Removes the sub folder and all files and folders that contain in specified folder.
            </summary>
            <param name="folder">The folder.</param>
            <returns><b>true</b> if folder is removed; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentFolder.RemoveFolder(Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentFolder)">
            <summary>
            Removes the sub folder from this folder.
            </summary>
            <param name="folder">The folder.</param>
            <returns><b>true</b> if folder is removed; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentFolder.MoveFolder(Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentFolder)">
            <summary>
            Moves this folder to specified folder.
            </summary>
            <param name="destFolder">The destination folder.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentFolder.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
            <returns>String representation of this object.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentFolder.ID">
            <summary>
            Gets a non-negative integer value representing the 
            unique folder identification number. 
            </summary>
            <remarks>
            Two folders, in the same PDF document, shall not share the same ID value.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentFolder.Name">
            <summary>
            Gets or sets the name representing the name of the folder. 
            </summary>
            <remarks>
            Two sibling folders shall not share the same name following case normalization.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentFolder.RootFolder">
            <summary>
            Gets a root folder (<see cref="P:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentCollection.RootFolder" />).
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentFolder.IsRoot">
            <summary>
            Gets a value indicating whether this folder is root folder.
            </summary>
            <seealso cref="P:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentCollection.RootFolder" />
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentFolder.Parent">
            <summary>
            Gets the parent folder of this folder.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentFolder.IsContainsFolders">
            <summary>
            Gets a value indicating whether this folder contains sub folders.
            </summary>
            <value>
            <b>true</b> if this folder contains sub folders; otherwise, <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentFolder.Folders">
            <summary>
            Gets or sets an array that contains sub folders of this folder.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentFolder.IsContainsFiles">
            <summary>
            Gets a value indicating whether this folder contains files.
            </summary>
            <value>
            <b>true</b> if this folder contains files; otherwise, <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentFolder.Files">
            <summary>
            Gets or sets the files that contains within this folder.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentFolder.Description">
            <summary>
            Gets or sets the description associated with this folder.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentFolder.CreationDate">
            <summary>
            Gets or sets the date the folder was first created.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentFolder.ModificationDate">
            <summary>
            Gets or sets the date of the most recent change to immediate 
            child files or folders of this folder.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentFolder.Thumbnail">
            <summary>
            Gets or sets thumbnail associated with this folder.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentFolder.DataFields">
            <summary>
            Gets or sets the data field collection, which is used to create the user
            interface for file attachments.
            </summary>
            <seealso cref="P:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentCollection.Schema" />
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentCollectionSchema">
            <summary>
            Represents the dictionary that represents schema of PDF attachment collection.
            </summary>
            <remarks>
            Each key name is chosen at the discretion of the producer.
            The key name of each field is used to identify a corresponding 
            data fields (<see cref="P:Vintasoft.Imaging.Pdf.Tree.PdfEmbeddedFileSpecification.DataFields" />)
            in a file specification.
            </remarks>
            <example>
            Here is an example that shows how to create schema of attachment collection:
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Creates new PDF document with portfolio and portfolio schema:
            ''' &lt;/summary&gt;
            ''' &lt;param name="outputPdfFilename"&gt;The output PDF filename.&lt;/param&gt;
            Public Shared Sub TestPdfAttachmentCollectionSchema(outputPdfFilename As String)
                ' create PDF document (version 1.7)
                Using document As New PdfDocument(outputPdfFilename, PdfFormat.Pdf_17)
                    ' add page to PDF document
                    Dim page As PdfPage = document.Pages.Add(PaperSizeKind.A4)
            
                    ' draw text on first page
                    Using g As PdfGraphics = page.GetGraphics()
                        Dim textBox As New TextBoxFigure()
                        textBox.Font = document.FontManager.GetStandardFont(StandardFontType.TimesRoman)
                        textBox.FontSize = 30
                        textBox.Location = New PointF(0, 0)
                        textBox.Size = page.MediaBox.Size
                        textBox.TextAlignment = PdfContentAlignment.Top Or PdfContentAlignment.Left Or PdfContentAlignment.Right
                        textBox.TextBrush = New PdfBrush(Color.Black)
                        textBox.Text = "This document is Portfolio" &amp; vbLf &amp; "(Attachment Collection)" &amp; vbLf &amp; "To view Portfolio you should use PDF viewer compatible with PDF 1.7 ExtensionLevel 3."
                        textBox.Draw(g)
                    End Using
            
                    ' create attachements
                    document.CreateAttachments(True)
            
                    ' set viewer settings
                    document.Attachments.View = AttachmentCollectionViewMode.DetailsMode
                    document.Attachments.SplitterBar = New PdfAttachmentCollectionSplitterBar(document)
                    document.Attachments.SplitterBar.Direction = AttachmentCollectionSplitterBarDirection.None
                    document.DocumentViewMode = PdfDocumentViewMode.UseAttachments
            
                    ' create folder and files
                    Dim folder1 As PdfAttachmentFolder = document.Attachments.RootFolder.AddFolder("Folder1")
                    folder1.CreationDate = DateTime.Now
                    Dim file1 As PdfEmbeddedFileSpecification = AddFile(document.Attachments.RootFolder, "File1.txt", "Test File1")
                    file1.CreationDate = DateTime.Now
                    Dim file2 As PdfEmbeddedFileSpecification = AddFile(document.Attachments.RootFolder, "File2.txt", "Test File2")
                    file2.CreationDate = DateTime.Now
            
            
                    ' create portfolio schema
                    document.Attachments.Schema = New PdfAttachmentCollectionSchema(document)
            
                    ' "File Name" column
                    document.Attachments.Schema.Add("Filename", New PdfAttachmentCollectionSchemaField(document, "File Name", AttachmentCollectionSchemaFieldDataType.Filename))
                    document.Attachments.Schema("Filename").Order = 0
            
                    ' "Uncompressed Size" column
                    document.Attachments.Schema.Add("UncompressedSize", New PdfAttachmentCollectionSchemaField(document, "Uncompressed Size", AttachmentCollectionSchemaFieldDataType.UncompressedSize))
                    document.Attachments.Schema("UncompressedSize").Order = 1
            
                    ' "Creation Date" column
                    document.Attachments.Schema.Add("CreationDate", New PdfAttachmentCollectionSchemaField(document, "Creation Date", AttachmentCollectionSchemaFieldDataType.CreationDate))
                    document.Attachments.Schema("CreationDate").Order = 2
            
                    ' "Description" column
                    document.Attachments.Schema.Add("Description", New PdfAttachmentCollectionSchemaField(document, "Description", AttachmentCollectionSchemaFieldDataType.FileDescription))
                    document.Attachments.Schema("Description").Order = 3
                    ' set Description field as editable
                    document.Attachments.Schema("Description").IsSupportsEditing = True
            
                    ' "UserName" custom column (string data)
                    Dim userNameFieldName As String = "adobe:UserName"
                    document.Attachments.Schema.Add(userNameFieldName, New PdfAttachmentCollectionSchemaField(document, "User Name", AttachmentCollectionSchemaFieldDataType.[String]))
                    document.Attachments.Schema(userNameFieldName).Order = 4
                    ' disable editing of UserName field
                    document.Attachments.Schema(userNameFieldName).IsSupportsEditing = False
            
                    ' invisible schema field that is used for sorting attachment collection items
                    Dim orderFieldName As String = "Order"
                    document.Attachments.Schema.Add(orderFieldName, New PdfAttachmentCollectionSchemaField(document, "Order", AttachmentCollectionSchemaFieldDataType.Number))
                    document.Attachments.Schema(orderFieldName).Order = 5
                    document.Attachments.Schema(orderFieldName).IsVisible = False
            
                    ' specify the sorting order: first sort by "Order" field, second sort by "Filename" field
                    document.Attachments.Sort = New PdfAttachmentCollectionSort(document)
                    document.Attachments.Sort.FieldNames = New String() {orderFieldName, "Filename"}
            
            
                    ' create data fields of Folder1
                    folder1.DataFields = New PdfAttachmentDataFieldCollection(document)
                    folder1.DataFields.Add(userNameFieldName, "User of Folder1")
                    folder1.DataFields.Add(orderFieldName, 0)
            
                    ' create data fields of File1
                    file1.DataFields = New PdfAttachmentDataFieldCollection(document)
                    file1.DataFields.Add(userNameFieldName, "User of File1")
                    file1.DataFields.Add(orderFieldName, 1)
            
                    ' create data fields of File2
                    file2.DataFields = New PdfAttachmentDataFieldCollection(document)
                    file2.DataFields.Add(userNameFieldName, "User of File2")
                    file2.DataFields.Add(orderFieldName, 2)
            
                    ' set descriptions
                    folder1.Description = "Is empty folder."
                    file1.Description = "Description of File1"
                    file2.Description = "Description of File2"
            
            
                    ' save changes in PDF document
                    document.SaveChanges()
                End Using
            End Sub
            
            ''' &lt;summary&gt;
            ''' Adds the file to specified portfolio folder.
            ''' &lt;/summary&gt;
            ''' &lt;param name="folder"&gt;The portfolio folder.&lt;/param&gt;
            ''' &lt;param name="filename"&gt;The filename.&lt;/param&gt;
            ''' &lt;param name="fileContent"&gt;Content of the file.&lt;/param&gt;
            ''' &lt;returns&gt;Embedded file specification that contains added file.&lt;/returns&gt;
            Private Shared Function AddFile(folder As PdfAttachmentFolder, filename As String, fileContent As String) As PdfEmbeddedFileSpecification
                Using stream As New MemoryStream()
                    Using writer As TextWriter = New StreamWriter(stream)
                        writer.Write(fileContent)
                        writer.Flush()
                        stream.Position = 0
                        Dim embeddedFile As New PdfEmbeddedFile(folder.Document, stream)
                        Return folder.AddFile(embeddedFile, filename)
                    End Using
                End Using
            End Function
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Creates new PDF document with portfolio and portfolio schema:
            /// &lt;/summary&gt;
            /// &lt;param name="outputPdfFilename"&gt;The output PDF filename.&lt;/param&gt;
            public static void TestPdfAttachmentCollectionSchema(string outputPdfFilename)
            {
                // create PDF document (version 1.7)
                using (PdfDocument document = new PdfDocument(outputPdfFilename, PdfFormat.Pdf_17))
                {
                    // add page to PDF document
                    PdfPage page = document.Pages.Add(PaperSizeKind.A4);
            
                    // draw text on first page
                    using (PdfGraphics g = page.GetGraphics())
                    {
                        TextBoxFigure textBox = new TextBoxFigure();
                        textBox.Font = document.FontManager.GetStandardFont(StandardFontType.TimesRoman);
                        textBox.FontSize = 30;
                        textBox.Location = new PointF(0, 0);
                        textBox.Size = page.MediaBox.Size;
                        textBox.TextAlignment = PdfContentAlignment.Top | PdfContentAlignment.Left | PdfContentAlignment.Right;
                        textBox.TextBrush = new PdfBrush(Color.Black);
                        textBox.Text = "This document is Portfolio\n(Attachment Collection)\nTo view Portfolio you should use PDF viewer compatible with PDF 1.7 ExtensionLevel 3.";
                        textBox.Draw(g);
                    }
            
                    // create attachements
                    document.CreateAttachments(true);
            
                    // set viewer settings
                    document.Attachments.View = AttachmentCollectionViewMode.DetailsMode;
                    document.Attachments.SplitterBar = new PdfAttachmentCollectionSplitterBar(document);
                    document.Attachments.SplitterBar.Direction = AttachmentCollectionSplitterBarDirection.None;
                    document.DocumentViewMode = PdfDocumentViewMode.UseAttachments;
            
                    // create folder and files
                    PdfAttachmentFolder folder1 = document.Attachments.RootFolder.AddFolder("Folder1");
                    folder1.CreationDate = DateTime.Now;
                    PdfEmbeddedFileSpecification file1 = AddFile(document.Attachments.RootFolder, "File1.txt", "Test File1");
                    file1.CreationDate = DateTime.Now;
                    PdfEmbeddedFileSpecification file2 = AddFile(document.Attachments.RootFolder, "File2.txt", "Test File2");
                    file2.CreationDate = DateTime.Now;
            
            
                    // create portfolio schema
                    document.Attachments.Schema = new PdfAttachmentCollectionSchema(document);
            
                    // "File Name" column
                    document.Attachments.Schema.Add("Filename",
                        new PdfAttachmentCollectionSchemaField(document, "File Name", AttachmentCollectionSchemaFieldDataType.Filename));
                    document.Attachments.Schema["Filename"].Order = 0;
            
                    // "Uncompressed Size" column
                    document.Attachments.Schema.Add("UncompressedSize",
                        new PdfAttachmentCollectionSchemaField(document, "Uncompressed Size", AttachmentCollectionSchemaFieldDataType.UncompressedSize));
                    document.Attachments.Schema["UncompressedSize"].Order = 1;
            
                    // "Creation Date" column
                    document.Attachments.Schema.Add("CreationDate",
                        new PdfAttachmentCollectionSchemaField(document, "Creation Date", AttachmentCollectionSchemaFieldDataType.CreationDate));
                    document.Attachments.Schema["CreationDate"].Order = 2;
            
                    // "Description" column
                    document.Attachments.Schema.Add("Description",
                        new PdfAttachmentCollectionSchemaField(document, "Description", AttachmentCollectionSchemaFieldDataType.FileDescription));
                    document.Attachments.Schema["Description"].Order = 3;
                    // set Description field as editable
                    document.Attachments.Schema["Description"].IsSupportsEditing = true;
            
                    // "UserName" custom column (string data)
                    string userNameFieldName = "adobe:UserName";
                    document.Attachments.Schema.Add(userNameFieldName,
                        new PdfAttachmentCollectionSchemaField(document, "User Name", AttachmentCollectionSchemaFieldDataType.String));
                    document.Attachments.Schema[userNameFieldName].Order = 4;
                    // disable editing of UserName field
                    document.Attachments.Schema[userNameFieldName].IsSupportsEditing = false;
            
                    // invisible schema field that is used for sorting attachment collection items
                    string orderFieldName = "Order";
                    document.Attachments.Schema.Add(orderFieldName,
                        new PdfAttachmentCollectionSchemaField(document, "Order", AttachmentCollectionSchemaFieldDataType.Number));
                    document.Attachments.Schema[orderFieldName].Order = 5;
                    document.Attachments.Schema[orderFieldName].IsVisible = false;
                    
                    // specify the sorting order: first sort by "Order" field, second sort by "Filename" field
                    document.Attachments.Sort = new PdfAttachmentCollectionSort(document);
                    document.Attachments.Sort.FieldNames = new string[] { orderFieldName, "Filename" };
            
            
                    // create data fields of Folder1
                    folder1.DataFields = new PdfAttachmentDataFieldCollection(document);
                    folder1.DataFields.Add(userNameFieldName, "User of Folder1");
                    folder1.DataFields.Add(orderFieldName, 0);
            
                    // create data fields of File1
                    file1.DataFields = new PdfAttachmentDataFieldCollection(document);
                    file1.DataFields.Add(userNameFieldName, "User of File1");
                    file1.DataFields.Add(orderFieldName, 1);
            
                    // create data fields of File2
                    file2.DataFields = new PdfAttachmentDataFieldCollection(document);
                    file2.DataFields.Add(userNameFieldName, "User of File2");
                    file2.DataFields.Add(orderFieldName, 2);
            
                    // set descriptions
                    folder1.Description = "Is empty folder.";
                    file1.Description = "Description of File1";
                    file2.Description = "Description of File2";
            
            
                    // save changes in PDF document
                    document.SaveChanges();
                }
            }
            
            /// &lt;summary&gt;
            /// Adds the file to specified portfolio folder.
            /// &lt;/summary&gt;
            /// &lt;param name="folder"&gt;The portfolio folder.&lt;/param&gt;
            /// &lt;param name="filename"&gt;The filename.&lt;/param&gt;
            /// &lt;param name="fileContent"&gt;Content of the file.&lt;/param&gt;
            /// &lt;returns&gt;Embedded file specification that contains added file.&lt;/returns&gt;
            private static PdfEmbeddedFileSpecification AddFile(
                PdfAttachmentFolder folder,
                string filename,
                string fileContent)
            {
                using (MemoryStream stream = new MemoryStream())
                {
                    using (TextWriter writer = new StreamWriter(stream))
                    {
                        writer.Write(fileContent);
                        writer.Flush();
                        stream.Position = 0;
                        PdfEmbeddedFile embeddedFile = new PdfEmbeddedFile(folder.Document, stream);
                        return folder.AddFile(embeddedFile, filename);
                    }
                }
            }
            </code>
            </example>
            <seealso cref="T:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentCollection" />
            <seealso cref="P:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentCollection.Schema" />
            <seealso cref="T:Vintasoft.Imaging.Pdf.Tree.FileAttachments.AttachmentCollectionViewMode" />
            <seealso cref="T:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentDataFieldCollection" />
            <seealso cref="P:Vintasoft.Imaging.Pdf.Tree.PdfEmbeddedFileSpecification.DataFields" />
            <seealso cref="P:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentFolder.DataFields" />
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentCollectionSchema.#ctor(Vintasoft.Imaging.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentCollectionSchema" /> class. 
            </summary>
            <param name="document">Parent PDF document.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentCollectionSchema.GetDataAsString(System.String,Vintasoft.Imaging.Pdf.Tree.PdfEmbeddedFileSpecification)">
            <summary>
            Gets the data, as string, for schema field with specified name.
            </summary>
            <param name="fieldName">Name of the field (key of this dictionary).</param>
            <param name="embeddedFileSpecification">The embedded file specification.</param>
            <returns>Data, as string, that is associated with this schema field.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentCollectionSchema.GetDataAsString(System.String,Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentFolder)">
            <summary>
            Gets the data, as string, for schema field with specified name.
            </summary>
            <param name="fieldName">Name of the field (key of this dictionary).</param>
            <param name="folder">The attachment folder.</param>
            <returns>Data, as string, that is associated with this schema field.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentCollectionSchema.SetDataAsString(System.String,Vintasoft.Imaging.Pdf.Tree.PdfEmbeddedFileSpecification,System.String)">
            <summary>
            Sets the data, as string, for schema field with specified name.
            </summary>
            <param name="fieldName">Name of the field (key of this dictionary).</param>
            <param name="embeddedFileSpecification">The embedded file specification.</param>
            <param name="value">Data field value.</param>
            <returns>Data, as string, that is associated with this schema field.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentCollectionSchema.SetDataAsString(System.String,Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentFolder,System.String)">
            <summary>
            Sets the data, as string, for schema field with specified name.
            </summary>
            <param name="fieldName">Name of the field (key of this dictionary).</param>
            <param name="folder">The attachment folder.</param>
            <param name="value">Data field value.</param>
            <returns>Data, as string, that is associated with this schema field.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentCollectionSchema.GetDataAsNumber(System.String,Vintasoft.Imaging.Pdf.Tree.PdfEmbeddedFileSpecification)">
            <summary>
            Gets the data, as number, for schema field with specified name.
            </summary>
            <param name="fieldName">Name of the field (key of this dictionary).</param>
            <param name="embeddedFileSpecification">The embedded file specification.</param>
            <returns>Data, as number, that is associated with this schema field.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentCollectionSchema.GetDataAsNumber(System.String,Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentFolder)">
            <summary>
            Gets the data, as number, for schema field with specified name.
            </summary>
            <param name="fieldName">Name of the field (key of this dictionary).</param>
            <param name="folder">The attachment folder.</param>
            <returns>Data, as number, that is associated with this schema field.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentCollectionSchema.SetDataAsNumber(System.String,Vintasoft.Imaging.Pdf.Tree.PdfEmbeddedFileSpecification,System.Single)">
            <summary>
            Sets the data, as number, for schema field with specified name.
            </summary>
            <param name="fieldName">Name of the field (key of this dictionary).</param>
            <param name="value">Data field value.</param>
            <param name="embeddedFileSpecification">The embedded file specification.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentCollectionSchema.SetDataAsNumber(System.String,Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentFolder,System.Single)">
            <summary>
            Sets the data, as number, for schema field with specified name.
            </summary>
            <param name="fieldName">Name of the field (key of this dictionary).</param>
            <param name="value">Data field value.</param>
            <param name="folder">The attachment folder.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentCollectionSchema.GetDataAsDate(System.String,Vintasoft.Imaging.Pdf.Tree.PdfEmbeddedFileSpecification)">
            <summary>
            Gets the data, as <see cref="T:System.DateTime" />, for schema field with specified name.
            </summary>
            <param name="fieldName">Name of the field (key of this dictionary).</param>
            <param name="embeddedFileSpecification">The embedded file specification.</param>
            <returns>Data, as <see cref="T:System.DateTime" />, that is associated with this schema field.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentCollectionSchema.GetDataAsDate(System.String,Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentFolder)">
            <summary>
            Gets the data, as <see cref="T:System.DateTime" />, for schema field with specified name.
            </summary>
            <param name="fieldName">Name of the field (key of this dictionary).</param>
            <param name="folder">The attachment folder.</param>
            <returns>Data, as <see cref="T:System.DateTime" />, that is associated with this schema field.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentCollectionSchema.SetDataAsDate(System.String,Vintasoft.Imaging.Pdf.Tree.PdfEmbeddedFileSpecification,System.DateTime)">
            <summary>
            Sets the data, as <see cref="T:System.DateTime" />, for schema field with specified name.
            </summary>
            <param name="fieldName">Name of the field (key of this dictionary).</param>
            <param name="embeddedFileSpecification">The embedded file specification.</param>
            <param name="value">Data field value.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentCollectionSchema.SetDataAsDate(System.String,Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentFolder,System.DateTime)">
            <summary>
            Sets the data, as <see cref="T:System.DateTime" />, for schema field with specified name.
            </summary>
            <param name="fieldName">Name of the field (key of this dictionary).</param>
            <param name="folder">The attachment folder.</param>
            <param name="value">Data field value.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentCollectionSchema.GetDataField(System.String,Vintasoft.Imaging.Pdf.Tree.PdfEmbeddedFileSpecification)">
            <summary>
            Gets the data field for schema field with specified name.
            </summary>
            <param name="fieldName">Name of the field (key of this dictionary).</param>
            <param name="embeddedFileSpecification">The embedded file specification.</param>
            <returns>Data field that associated with this schema filed.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentCollectionSchema.GetDataField(System.String,Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentFolder)">
            <summary>
            Gets the data field for schema field with specified name.
            </summary>
            <param name="fieldName">Name of the field (key of this dictionary).</param>
            <param name="folder">The folder.</param>
            <returns>Data field that associated with this schema filed.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentCollectionSchema.SetDataField(System.String,Vintasoft.Imaging.Pdf.Tree.PdfEmbeddedFileSpecification,Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentDataField)">
            <summary>
            Sets the data field for schema field with specified name.
            </summary>
            <param name="fieldName">Name of the field (key of this dictionary).</param>
            <param name="embeddedFileSpecification">The embedded file specification.</param>
            <param name="value">Data field value.</param>
            <exception cref="T:System.ArgumentException">Thrown if
            field data type is not: Date or String or Number.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentCollectionSchema.SetDataField(System.String,Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentFolder,Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentDataField)">
            <summary>
            Sets the data field for schema field with specified name.
            </summary>
            <param name="fieldName">Name of the field (key of this dictionary).</param>
            <param name="folder">The attachment folder.</param>
            <param name="value">Data field value.</param>
            <exception cref="T:System.ArgumentException">Thrown if
            field data type is not: Date or String or Number.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentCollectionSchema.GetMaxOrder">
            <summary>
            Returns the maximum value of <see cref="P:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentCollectionSchemaField.Order" /> property
            in this schema.
            </summary>
            <returns>Max order value in this schema.</returns>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentCollectionSchemaField">
            <summary>
            Stores the attributes of a particular field in an attachment collection,
            including the type of data stored in the field and the lookup key 
            used to locate the field data in the file specification.
            </summary>
            <seealso cref="P:Vintasoft.Imaging.Pdf.Tree.PdfEmbeddedFileSpecification.DataFields" />
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentCollectionSchemaField.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,System.String,Vintasoft.Imaging.Pdf.Tree.FileAttachments.AttachmentCollectionSchemaFieldDataType)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentCollectionSchemaField" /> class. 
            </summary>
            <param name="document">Parent PDF document.</param>
            <param name="displayedName">The textual field name that is displayed to 
            the user by the PDF viewer application.</param>
            <param name="dataType">The type of data that is stored in the field.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentCollectionSchemaField.DataType">
            <summary>
            Gets the type of data that is stored in the field.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentCollectionSchemaField.DisplayedName">
            <summary>
            Gets or sets the textual field name that is displayed to 
            the user by the PDF viewer application.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentCollectionSchemaField.Order">
            <summary>
            Gets or sets the relative order of the field name in the user interface.
            </summary>
            <remarks>
            Fields are sorted by the PDF viewer application in ascending order.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentCollectionSchemaField.IsVisible">
            <summary>
            Gets or sets the initial visibility of the field in the user interface.
            </summary>
            <value>
            Default value is <b>true</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentCollectionSchemaField.IsSupportsEditing">
            <summary>
            Gets or sets a value indicating whether the PDF viewer 
            application should provide support for editing the field value.
            </summary>
            <value>
            Default value is <b>false</b>.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentDataFieldCollection">
            <summary>
            Represents a collection of data fields that contains the data described
            by the file attachment schema for a particular file or folder in attachment collection.
            </summary>
            <seealso cref="P:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentCollection.Schema" />
            <seealso cref="P:Vintasoft.Imaging.Pdf.Tree.PdfEmbeddedFileSpecification.DataFields" />
            <seealso cref="P:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentFolder.DataFields" />
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentDataFieldCollection.#ctor(Vintasoft.Imaging.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentDataFieldCollection" /> class. 
            </summary>
            <param name="document">Parent PDF document.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentDataFieldCollection.Add(System.String,System.String)">
            <summary>
            Adds a data field with the provided name and value to the data field collection.
            </summary>
            <param name="name">The data field name.</param>
            <param name="value">The data field value.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentDataFieldCollection.Add(System.String,System.Single)">
            <summary>
            Adds a data field with the provided name and value to the data field collection.
            </summary>
            <param name="name">The data field name.</param>
            <param name="value">The data field value.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentDataFieldCollection.Add(System.String,System.DateTime)">
            <summary>
            Adds a data field with the provided name and value to the data field collection.
            </summary>
            <param name="name">The data field name.</param>
            <param name="value">The data field value.</param>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.PdfFileReferenceSpecification">
            <summary>
            Provides information about file reference in PDF document.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfFileReferenceSpecification.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfFileReferenceSpecification" /> class. 
            </summary>
            <param name="document">Parent PDF document.</param>
            <param name="filename">The file name.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfFileReferenceSpecification.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
            <returns>String representation of this object.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfFileReferenceSpecification.FileSystem">
            <summary>
            Gets the name of the file system to be used to
            interpret this file specification.
            </summary>
            <remarks>
            If this entry is present, all other entries in the dictionary 
            are interpreted by the designated file system. PDF defines 
            only one standard file system name, URL; 
            an application or plug-in extension can register other names.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfFileReferenceSpecification.Filename">
            <summary>
            Gets or sets a file name.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfFileReferenceSpecification.Description">
            <summary>
            Gets or sets a text that describes the file specification.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.PdfEmbeddedFileSpecificationDictionary">
            <summary>
            The dictionary that contains name - <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfEmbeddedFileSpecification" /> pairs.
            </summary>
            <example>
            Here is an example that demonstrates how to remove embedded file from PDF document:
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Removes the embedded file from PDF document by the name of embedded file specification.
            ''' &lt;/summary&gt;
            ''' &lt;param name="pdfFilename"&gt;The filename of PDF document.&lt;/param&gt;
            ''' &lt;param name="embeddedFileName"&gt;Name of the embedded file specification.&lt;/param&gt;
            ''' &lt;returns&gt;&lt;b&gt;true&lt;/b&gt; if the file is found and successfully removed; otherwise, &lt;b&gt;false&lt;/b&gt;.&lt;/returns&gt;
            Public Shared Function RemoveEmbeddedFileFromPdfDocument(pdfFilename As String, embeddedFileName As String) As Boolean
                ' open PDF document
                Using document As New PdfDocument(pdfFilename)
                    ' if embedded files are absent
                    If document.EmbeddedFiles Is Nothing OrElse document.EmbeddedFiles.Count = 0 Then
                        Return False
                    End If
                    ' try to remove embedded file specification
                    If Not document.EmbeddedFiles.Remove(embeddedFileName) Then
                        Return False
                    End If
                    ' save changes to the source
                    document.SaveChanges()
                    Return True
                End Using
            End Function
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Removes the embedded file from PDF document by the name of embedded file specification.
            /// &lt;/summary&gt;
            /// &lt;param name="pdfFilename"&gt;The filename of PDF document.&lt;/param&gt;
            /// &lt;param name="embeddedFileName"&gt;Name of the embedded file specification.&lt;/param&gt;
            /// &lt;returns&gt;&lt;b&gt;true&lt;/b&gt; if the file is found and successfully removed; otherwise, &lt;b&gt;false&lt;/b&gt;.&lt;/returns&gt;
            public static bool RemoveEmbeddedFileFromPdfDocument(string pdfFilename, string embeddedFileName)
            {
                // open PDF document
                using (PdfDocument document = new PdfDocument(pdfFilename))
                {
                    // if embedded files are absent
                    if (document.EmbeddedFiles == null || document.EmbeddedFiles.Count == 0)
                        return false;
                    // try to remove embedded file specification
                    if (!document.EmbeddedFiles.Remove(embeddedFileName))
                        return false;
                    // save changes to the source
                    document.SaveChanges();
                    return true;
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfEmbeddedFileSpecificationDictionary.#ctor(Vintasoft.Imaging.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfEmbeddedFileSpecificationDictionary" /> class.
            </summary>
            <param name="document">Parent document of this <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfEmbeddedFileSpecificationDictionary" />.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfEmbeddedFileSpecificationDictionary.Count">
            <summary>
            Gets a number of items contained in this
            <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfEmbeddedFileSpecificationDictionary" />.        
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.PdfEmbeddedFileSpecification">
            <summary>
            Provides information about file embedded in PDF document.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfEmbeddedFileSpecification.#ctor(System.String,Vintasoft.Imaging.Pdf.Tree.PdfEmbeddedFile)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfEmbeddedFileSpecification" /> class. 
            </summary>
            <param name="filename">The name of embedded file.</param>
            <param name="embeddedFile">The embedded file.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfEmbeddedFileSpecification.Thumbnail">
            <summary>
            (PDF 1.7 ExtensionLevel 3) Gets or sets thumbnail associated with embedded file.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfEmbeddedFileSpecification.Compression">
            <summary>
            Gets or sets compression of <see cref="P:Vintasoft.Imaging.Pdf.Tree.PdfEmbeddedFileSpecification.EmbeddedFile" />.
            </summary>
            <seealso cref="P:Vintasoft.Imaging.Pdf.Tree.PdfResource.Compression" />
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfEmbeddedFileSpecification.CompressedSize">
            <summary>
            Gets the compressed size of the embedded file, in bytes.
            </summary>
            <seealso cref="P:Vintasoft.Imaging.Pdf.Tree.PdfResource.Length" />
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfEmbeddedFileSpecification.UncompressedSize">
            <summary>
            Gets the uncompressed size of the embedded file, in bytes.
            </summary>
            <seealso cref="P:Vintasoft.Imaging.Pdf.Tree.PdfEmbeddedFile.UncompressedLength" />
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfEmbeddedFileSpecification.CreationDate">
            <summary>
            Gets or sets the date the embedded file was first created.
            </summary>
            <seealso cref="P:Vintasoft.Imaging.Pdf.Tree.PdfEmbeddedFile.CreationDate" />
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfEmbeddedFileSpecification.ModificationDate">
            <summary>
            Gets or sets the date and time when the embedded file was last modified.
            </summary>
            <seealso cref="P:Vintasoft.Imaging.Pdf.Tree.PdfEmbeddedFile.ModifyDate" />
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfEmbeddedFileSpecification.EmbeddedFile">
            <summary>
            Gets or sets a <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfEmbeddedFile" /> associated with this file specification.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfEmbeddedFileSpecification.DataFields">
            <summary>
            Gets or sets the data field collection, which is used to create the user
            interface for file attachments.
            </summary>
            <seealso cref="P:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentCollection.Schema" />
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.PdfUrlSpecification">
            <summary>
            Provides information about a uniform resource locator 
            (URL) of the form defined in Internet RFC 1738, Uniform Resource Locators.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfUrlSpecification.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfFileReferenceSpecification" /> class. 
            </summary>
            <param name="document">Parent PDF document.</param>
            <param name="url">A Uniform Resource Locator.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfUrlSpecification.Url">
            <summary>
            Gets or sets an URL (Uniform Resource Locator).
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentDataField">
            <summary>
            Provides the data corresponding to the related fields in the data fields collection.
            </summary>
            <example>Please see example <see cref="T:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentCollectionSchema">here</see>.</example>
            <seealso cref="P:Vintasoft.Imaging.Pdf.Tree.PdfEmbeddedFileSpecification.DataFields" />
            <seealso cref="P:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentFolder.DataFields" />
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentDataField.#ctor(Vintasoft.Imaging.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentDataField" /> class. 
            </summary>
            <param name="document">Parent document.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentDataField.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentDataField" /> class. 
            </summary>
            <param name="document">Parent document.</param>
            <param name="dataValue">The data value of the field.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentDataField.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentDataField" /> class. 
            </summary>
            <param name="document">Parent document.</param>
            <param name="dataValue">The data of the field.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentDataField.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentDataField" /> class. 
            </summary>
            <param name="document">Parent document.</param>
            <param name="dataValue">The data value of the field.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentDataField.DataAsString">
            <summary>
            Gets or sets the data of string type corresponding to the related entry 
            in the file attachment collection schema field.
            </summary>
            <value>
            String value if field contains string value, i.e. schema field, associated with data field,
            has the data type <see cref="T:Vintasoft.Imaging.Pdf.Tree.FileAttachments.AttachmentCollectionSchemaFieldDataType" />.String;<br />
            otherwise, <b>null</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentDataField.DataAsDate">
            <summary>
            Gets or sets the data of date type corresponding to the related entry 
            in the file attachment collection schema field.
            </summary>
            <value>
            DateTime value if field contains DateTime value, i.e. schema field, associated with data field,
            has the data type <see cref="T:Vintasoft.Imaging.Pdf.Tree.FileAttachments.AttachmentCollectionSchemaFieldDataType" />.Date;<br />
            otherwise, <b>DateTime.MinValue</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentDataField.DataAsNumber">
            <summary>
            Gets or sets the data of number type corresponding to the related entry 
            in the file attachment collection schema field.
            </summary>
            <value>
            Numeric value if field contains numeric value, i.e. schema field, associated with data field,
            has the data type <see cref="T:Vintasoft.Imaging.Pdf.Tree.FileAttachments.AttachmentCollectionSchemaFieldDataType" />.Number;<br />
            otherwise, <b>0</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.FileAttachments.PdfAttachmentDataField.Prefix">
            <summary>
            Gets or sets a prefix string that is concatenated with the text string presented to the user. 
            </summary>
            <remarks>
            This property is ignored when a PDF viewer application sorts the items in the collection.
            </remarks>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentConfiguration">
            <summary>
            Provides information about optional content configuration of PDF document.
            </summary>
            <remarks>
            For getting the group visibility
            use the <see cref="M:Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentConfiguration.GetGroupVisibility(Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentGroup)" />
            method.<br />
            For setting the group visibility
            use the <see cref="M:Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentConfiguration.SetGroupVisibility(Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentGroup,System.Boolean)" />
            method.
            </remarks>
            <seealso cref="T:Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentGroup" />
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentConfiguration.#ctor(Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentConfiguration,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentConfiguration" /> class.
            </summary>
            <param name="baseConfiguration">A base configuration.</param>
            <param name="name">The name of new optional content configuration.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentConfiguration.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentConfiguration" /> class.
            </summary>
            <param name="document">The PDF document.</param>
            <param name="name">The name of new optional content configuration.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentConfiguration.GetGroupVisibility(Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentGroup)">
            <summary>
            Returns the visibility of specified optional content group.
            </summary>
            <param name="group">The optional content group.</param>
            <returns>The visibility of specified optional content group.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentConfiguration.SetGroupVisibility(Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentGroup,System.Boolean)">
            <summary>
            Sets the visibility of specified optional content group.
            </summary>
            <param name="group">The optional content group.</param>
            <param name="isVisible">Determines that the optional content group is visible.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentConfiguration.Name">
            <summary>
            Gets or sets the name for the configuration.
            </summary>
            <value>
            String suitable for presentation in a user interface.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentConfiguration.Creator">
            <summary>
            Gets or sets the name of application or feature that created
            this configuration dictionary.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentConfiguration.Intent">
            <summary>
            Gets or sets the intent which determines which optional content groups states
            to consider and ignore in calculating the visibility of content.
            </summary>
            <value>
            Default value is <b><see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentIntent" />.View</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentConfiguration.BaseState">
            <summary>
            Gets or sets a base state which is used to initialize the states of all
            the optional content groups in a document when this configuration is applied.
            </summary>
            <value>
            Default value is <b><see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentConfigurationBaseState" />.On</b>.
            </value>
            <remarks>
            Note: If BaseState is present in the document's default configuration 
            dictionary, its value must be <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentConfigurationBaseState" />.On.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentConfiguration.OnGroups">
            <summary>
            Gets or sets a list of optional content groups whose state should
            be set to ON when this configuration is applied.
            </summary>
            <seealso cref="M:Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentConfiguration.GetGroupVisibility(Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentGroup)" />
            <seealso cref="M:Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentConfiguration.SetGroupVisibility(Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentGroup,System.Boolean)" />
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentConfiguration.OffGroups">
            <summary>
            Gets or sets a list of optional content groups whose state should
            be set to OFF when this configuration is applied.
            </summary>
            <seealso cref="M:Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentConfiguration.GetGroupVisibility(Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentGroup)" />
            <seealso cref="M:Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentConfiguration.SetGroupVisibility(Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentGroup,System.Boolean)" />
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentConfiguration.PresentationOrder">
            <summary>
            Gets or sets the recommended order for presentation of optional 
            content groups in a user interface.
            </summary>
            <remarks>
            Note: Any group not listed in this array should not be presented
            in any user interface that uses the configuration.
            </remarks>
            <example>
            Here is an example that shows how to create document with optional content:
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Creates PDF document with the optional content.
            ''' &lt;/summary&gt;
            ''' &lt;param name="pdfFilename"&gt;The PDF filename.&lt;/param&gt;
            Public Shared Sub CreateDocumentWithOptionalContent(pdfFilename As String)
                ' create new PDF document
                Using document As New PdfDocument(pdfFilename, PdfFormat.Pdf_16)
                    ' add empty page (A4 size)
                    Dim page As PdfPage = document.Pages.Add(PaperSizeKind.A4)
            
                    ' crete two optional content groups
                    Dim layer1 As New PdfOptionalContentGroup(document, "Layer1")
                    Dim layer2 As New PdfOptionalContentGroup(document, "Layer2")
            
                    ' add optional content groups to OptionalContentProperties
                    document.OptionalContentProperties = New PdfOptionalContentProperties(document)
                    document.OptionalContentProperties.OptionalContentGroups.Add(layer1)
                    document.OptionalContentProperties.OptionalContentGroups.Add(layer2)
            
                    ' get PdfGraphics for PDF page
                    Using g As PdfGraphics = page.GetGraphics()
                        Dim font As PdfFont = document.FontManager.GetStandardFont(StandardFontType.TimesRoman)
                        Dim brush As New PdfBrush(Color.Black)
                        Dim brush1 As New PdfBrush(Color.Green)
                        Dim brush2 As New PdfBrush(Color.Red)
            
                        ' draw not optional content 
                        g.DrawString("Not optional content", font, 20, brush, New PointF(50, 650))
            
                        ' draw optional content "Layer1"
                        g.BeginOptionalContent(layer1)
                        g.DrawString(String.Format("Optional content '{0}'", layer1.Name), font, 25, brush1, New PointF(50, 550))
                        g.EndOptionalContent()
            
                        ' draw not optional content
                        g.DrawString("Not optional content", font, 30, brush, New PointF(50, 450))
            
                        ' draw optional content "Layer2"
                        g.BeginOptionalContent(layer2)
                        g.DrawString(String.Format("Optional content '{0}'", layer2.Name), font, 35, brush2, New PointF(50, 350))
                        g.EndOptionalContent()
            
                        ' draw not optional content
                        g.DrawString("Not optional content", font, 40, brush, New PointF(50, 250))
                    End Using
            
                    ' create optional content configurations
                    Dim configuration1 As New PdfOptionalContentConfiguration(document, "Layer1 and Layer2")
                    configuration1.SetGroupVisibility(layer1, True)
                    configuration1.SetGroupVisibility(layer2, True)
                    Dim configuration2 As New PdfOptionalContentConfiguration(document, "Layer1")
                    configuration2.SetGroupVisibility(layer1, True)
                    configuration2.SetGroupVisibility(layer2, False)
                    Dim configuration3 As New PdfOptionalContentConfiguration(document, "Layer2")
                    configuration3.SetGroupVisibility(layer1, False)
                    configuration3.SetGroupVisibility(layer2, True)
                    Dim configuration4 As New PdfOptionalContentConfiguration(document, "No Layers")
                    configuration4.SetGroupVisibility(layer1, False)
                    configuration4.SetGroupVisibility(layer2, False)
            
                    ' create list of optional content configuration 
                    document.OptionalContentProperties.Configurations = New PdfOptionalContentConfigurationList(document)
            
                    ' add configurations to list
                    document.OptionalContentProperties.Configurations.Add(configuration1)
                    document.OptionalContentProperties.Configurations.Add(configuration2)
                    document.OptionalContentProperties.Configurations.Add(configuration3)
                    document.OptionalContentProperties.Configurations.Add(configuration4)
            
                    ' set default configuration
                    document.OptionalContentProperties.DefaultConfiguration = configuration1
            
                    ' set presentation order
                    configuration1.PresentationOrder = New PdfOptionalContentPresentationOrder(document, layer1, layer2)
            
                    ' optional content panel is visible
                    document.DocumentViewMode = PdfDocumentViewMode.UseOC
            
                    ' save changes in PDF document
                    document.SaveChanges()
                End Using
            End Sub
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Creates PDF document with the optional content.
            /// &lt;/summary&gt;
            /// &lt;param name="pdfFilename"&gt;The PDF filename.&lt;/param&gt;
            public static void CreateDocumentWithOptionalContent(string pdfFilename)
            {
                // create new PDF document
                using (PdfDocument document = new PdfDocument(pdfFilename, PdfFormat.Pdf_16))
                {
                    // add empty page (A4 size)
                    PdfPage page = document.Pages.Add(PaperSizeKind.A4);
            
                    // crete two optional content groups
                    PdfOptionalContentGroup layer1 = new PdfOptionalContentGroup(document, "Layer1");
                    PdfOptionalContentGroup layer2 = new PdfOptionalContentGroup(document, "Layer2");
            
                    // add optional content groups to OptionalContentProperties
                    document.OptionalContentProperties = new PdfOptionalContentProperties(document);
                    document.OptionalContentProperties.OptionalContentGroups.Add(layer1);
                    document.OptionalContentProperties.OptionalContentGroups.Add(layer2);
            
                    // get PdfGraphics for PDF page
                    using (PdfGraphics g = page.GetGraphics())
                    {
                        PdfFont font = document.FontManager.GetStandardFont(StandardFontType.TimesRoman);
                        PdfBrush brush = new PdfBrush(Color.Black);
                        PdfBrush brush1 = new PdfBrush(Color.Green);
                        PdfBrush brush2 = new PdfBrush(Color.Red);
            
                        // draw not optional content 
                        g.DrawString("Not optional content", font, 20, brush, new PointF(50, 650));
            
                        // draw optional content "Layer1"
                        g.BeginOptionalContent(layer1);
                        g.DrawString(string.Format("Optional content '{0}'", layer1.Name),
                            font, 25, brush1, new PointF(50, 550));
                        g.EndOptionalContent();
            
                        // draw not optional content
                        g.DrawString("Not optional content", font, 30, brush, new PointF(50, 450));
            
                        // draw optional content "Layer2"
                        g.BeginOptionalContent(layer2);
                        g.DrawString(string.Format("Optional content '{0}'", layer2.Name),
                            font, 35, brush2, new PointF(50, 350));
                        g.EndOptionalContent();
            
                        // draw not optional content
                        g.DrawString("Not optional content", font, 40, brush, new PointF(50, 250));
                    }
            
                    // create optional content configurations
                    PdfOptionalContentConfiguration configuration1 =
                        new PdfOptionalContentConfiguration(document, "Layer1 and Layer2");
                    configuration1.SetGroupVisibility(layer1, true);
                    configuration1.SetGroupVisibility(layer2, true);
                    PdfOptionalContentConfiguration configuration2 =
                        new PdfOptionalContentConfiguration(document, "Layer1");
                    configuration2.SetGroupVisibility(layer1, true);
                    configuration2.SetGroupVisibility(layer2, false);
                    PdfOptionalContentConfiguration configuration3 =
                        new PdfOptionalContentConfiguration(document, "Layer2");
                    configuration3.SetGroupVisibility(layer1, false);
                    configuration3.SetGroupVisibility(layer2, true);
                    PdfOptionalContentConfiguration configuration4 =
                        new PdfOptionalContentConfiguration(document, "No Layers");
                    configuration4.SetGroupVisibility(layer1, false);
                    configuration4.SetGroupVisibility(layer2, false);
            
                    // create list of optional content configuration 
                    document.OptionalContentProperties.Configurations =
                        new PdfOptionalContentConfigurationList(document);
            
                    // add configurations to list
                    document.OptionalContentProperties.Configurations.Add(configuration1);
                    document.OptionalContentProperties.Configurations.Add(configuration2);
                    document.OptionalContentProperties.Configurations.Add(configuration3);
                    document.OptionalContentProperties.Configurations.Add(configuration4);
            
                    // set default configuration
                    document.OptionalContentProperties.DefaultConfiguration = configuration1;
            
                    // set presentation order
                    configuration1.PresentationOrder =
                        new PdfOptionalContentPresentationOrder(document, layer1, layer2);
            
                    // optional content panel is visible
                    document.DocumentViewMode = PdfDocumentViewMode.UseOC;
            
                    // save changes in PDF document
                    document.SaveChanges();
                }
            }
            </code>
            </example>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentConfigurationBaseState">
            <summary>
            Specifies available base states of optional content configuration.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentConfigurationBaseState.On">
            <summary>
            The states of all groups are turned ON. 
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentConfigurationBaseState.Off">
            <summary>
            The states of all groups are turned OFF.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentConfigurationBaseState.Unchanged">
            <summary>
            The states of all groups are left unchanged.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentConfigurationList">
            <summary>
            Represents the list of <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentConfiguration" />.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.PdfTreeNodeList`1">
            <summary>
            Generic list of elements derived from <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfTreeNodeBase" /> class.
            </summary>
            <typeparam name="T">Derived from <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfTreeNodeBase" /> class.</typeparam>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfTreeNodeList`1.IndexOf(`0)">
            <summary>
            Searches for the specified object and returns the zero-based 
            index of the first occurrence within the entire 
            <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfTreeNodeList`1" />.
            </summary>
            <param name="item">The object to locate in the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfTreeNodeList`1" />.</param>
            <returns>The zero-based index of the first occurrence of <paramref name="item" /> 
            within the entire <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfTreeNodeList`1" />, if found; otherwise, –1.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfTreeNodeList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an element into the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfTreeNodeList`1" />
            at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item" />
            should be inserted.</param>
            <param name="item">The object to insert.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index" /> is less than 0.-or-<paramref name="index" /> 
            is greater than <see cref="P:Vintasoft.Imaging.Pdf.Tree.PdfTreeNodeList`1.Count" />.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="item" /> is null.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfTreeNodeList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index
            of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfTreeNodeList`1" />.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index" /> is less than 0.-or-<paramref name="index" /> 
            is greater than <see cref="P:Vintasoft.Imaging.Pdf.Tree.PdfTreeNodeList`1.Count" />.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfTreeNodeList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the elements of the specified collection to
            the end of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfTreeNodeList`1" />.
            </summary>
            <param name="collection">The collection whose elements should be added to the end 
            of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfTreeNodeList`1" />. The collection itself cannot be null,
            and it not contain elements that are null.</param>
            <exception cref="T:System.ArgumentNullException">collection or collection element is null.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfTreeNodeList`1.Add(`0)">
            <summary>
            Adds an object to the end of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfTreeNodeList`1" />.
            </summary>
            <param name="item">The object to be added to the end of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfTreeNodeList`1" />.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item" /> is null.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfTreeNodeList`1.Clear">
            <summary>
            Removes all elements from the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfTreeNodeList`1" />.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfTreeNodeList`1.ToArray">
            <summary>
            Copies the elements of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfTreeNodeList`1" /> to a new array.
            </summary>
            <returns>An array containing copies of the elements of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfTreeNodeList`1" />.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfTreeNodeList`1.Contains(`0)">
            <summary>
            Determines whether an element is in the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfTreeNodeList`1" />.
            </summary>
            <param name="item">The object to locate in the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfTreeNodeList`1" />.
            The value can not be null.</param>
            <returns><b>true</b> if <paramref name="item" /> is found in the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfTreeNodeList`1" />; otherwise, <b>false</b>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="item" /> is null.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfTreeNodeList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the entire <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfTreeNodeList`1" /> to a compatible 
            one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> that is
            the destination of the elements copied from <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfTreeNodeList`1" />. 
            The <see cref="T:System.Array" /> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array" /> 
            at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array" /> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex" /> is less than 0.</exception>
            <exception cref="T:System.ArgumentException">The number of elements in the source 
            <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfTreeNodeList`1" /> is greater than the available 
            space from <paramref name="arrayIndex" /> to the end of the destination 
            <paramref name="array" />.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfTreeNodeList`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfTreeNodeList`1" />.
            </summary>
            <param name="item">The object to remove from the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfTreeNodeList`1" />. 
            The value can be null for reference types.</param>
            <returns>true if <paramref name="item" /> is successfully removed; otherwise, false.  
            This method also returns false if <paramref name="item" /> was not found in the 
            <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfTreeNodeList`1" />.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfTreeNodeList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfTreeNodeList`1" />.
            </summary>
            <returns>An enumerator for the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfTreeNodeList`1" />.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfTreeNodeList`1.Count">
            <summary>
            Gets the number of elements actually contained
            in the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfTreeNodeList`1" />.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfTreeNodeList`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index" /> is not a valid index
            in the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfTreeNodeList`1" />.
            </exception>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfTreeNodeList`1.IsReadOnly">
            <summary>
            Returns a read-only <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfTreeNodeList`1" />
            wrapper for the current collection.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentConfigurationList.#ctor(Vintasoft.Imaging.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentConfigurationList" /> class.
            </summary>
            <param name="document">Parent PDF document.</param>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentPresentationOrder">
            <summary>
            Represents the recommended order for presentation of optional 
            content groups in a user interface.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentPresentationOrder.#ctor(Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentGroup)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentPresentationOrder" /> class.
            </summary>
            <param name="group">The optional content group.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentPresentationOrder.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentGroup[])">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentPresentationOrder" /> class.
            </summary>
            <param name="document">The parent document.</param>
            <param name="groups">The optional content groups.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentPresentationOrder.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentPresentationOrder[])">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentPresentationOrder" /> class.
            </summary>
            <param name="document">The document.</param>
            <param name="items">The optional content presentation order items.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentPresentationOrder.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,System.String,Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentPresentationOrder[])">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentPresentationOrder" /> class.
            </summary>
            <param name="document">The document.</param>
            <param name="name">The presentation order item name.</param>
            <param name="items">The optional content presentation order items.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentPresentationOrder.Name">
            <summary>
            Gets or sets the name to be used as a
            non-selectable label in the user interface.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentPresentationOrder.OptionalContentGroup">
            <summary>
            Gets the optional content group associated with this presentation order item.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentPresentationOrder.Items">
            <summary>
            Gets or sets the array of optional content group presentation orders to allow nesting as 
            in a tree or outline structure. 
            </summary>
            <remarks>
            Each nested element may optionally have as its <see cref="P:Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentPresentationOrder.Name" /> to be
            used as a non-selectable label in the user interface.
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if
            somebody tries to set value of this property when
            <see cref="P:Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentPresentationOrder.OptionalContentGroup" /> is not <b>null</b>.</exception>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentGroupList">
            <summary>
            Represents the list of <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentGroup" />.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentGroupList.#ctor(Vintasoft.Imaging.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentGroupList" /> class.
            </summary>
            <param name="document">The document.</param>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentProperties">
            <summary>
            Provides information about optional content properties of PDF document.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentProperties.#ctor(Vintasoft.Imaging.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentProperties" /> class.
            </summary>
            <param name="document">Parent PDF document.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentProperties.OptionalContentGroups">
            <summary>
            Gets or sets a list of all optional content groups of PDF document.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentProperties.DefaultConfiguration">
            <summary>
            Gets or sets the default optional content configuration.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentProperties.Configurations">
            <summary>
            Gets or sets a list of alternate optional content configurations.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.PdfDocumentAdditionalActions">
            <summary>
            Stores additional-actions defining the interactive form field's 
            behavior in response to various trigger events.
            </summary>
            <seealso cref="P:Vintasoft.Imaging.Pdf.PdfDocument.AdditionalActions" />
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfDocumentAdditionalActions.#ctor(Vintasoft.Imaging.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfDocumentAdditionalActions" /> class.
            </summary>
            <param name="document">Parent PDF document.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfDocumentAdditionalActions.Closed">
            <summary>
            Gets or sets a JavaScript action to be performed before closing a document.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfDocumentAdditionalActions.Saving">
            <summary>
            Gets or sets a JavaScript action to be performed before saving a document.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfDocumentAdditionalActions.Saved">
            <summary>
            Gets or sets a JavaScript action to be performed after saving a document.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfDocumentAdditionalActions.Printing">
            <summary>
            Gets or sets a JavaScript action to be performed before printing a document.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfDocumentAdditionalActions.Printed">
            <summary>
            Gets or sets a JavaScript action to be performed after printing a document.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.PdfJavaScriptActionDictionary">
            <summary>
            The dictionary that constains "name - <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfJavaScriptAction" />" pairs.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfJavaScriptActionDictionary.#ctor(Vintasoft.Imaging.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfJavaScriptActionDictionary" /> class.
            </summary>
            <param name="document">Parent document of this <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfJavaScriptActionDictionary" />.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfJavaScriptActionDictionary.Count">
            <summary>
            Gets a number of items contained in this
            <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfJavaScriptActionDictionary" />.        
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.PdfDocumentViewerPreferences">
            <summary>
            Represents a viewer preferences specifying the way the 
            document is to be displayed on the screen.
            </summary>
            <remarks>
            The <see cref="P:Vintasoft.Imaging.Pdf.PdfDocument.ViewerPreferences" /> property controlling 
            the way the document is to be presented on the screen or in print. 
            If no such dictionary is specified, viewing and printing applications 
            should behave in accordance with their own current user preference settings.
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.Pdf.PdfDocument.ViewerPreferences" />
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfDocumentViewerPreferences.#ctor(Vintasoft.Imaging.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfDocumentViewerPreferences" /> class.
            </summary>
            <param name="document">Parent PDF document.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfDocumentViewerPreferences.HideToolbar">
            <summary>
            Gets or sets a value specifying whether to hide the viewer application's 
            tool bars when the document is active.
            </summary>
            <value>
            Default value is <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfDocumentViewerPreferences.HideMenubar">
            <summary>
            Gets or sets a value specifying whether to hide the viewer application's
            menu bar when the document is active.
            </summary>
            <value>
            Default value is <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfDocumentViewerPreferences.HideWindowUI">
            <summary>
            Gets or sets a value specifying whether to hide user interface elements 
            in the document's window (such as scroll bars and navigation controls), 
            leaving only the document's contents displayed.
            </summary>
            <value>
            Default value is <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfDocumentViewerPreferences.FitWindow">
            <summary>
            Gets or sets a value specifying whether to resize the document's 
            window to fit the size of the first displayed page.
            </summary>
            <value>
            Default value is <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfDocumentViewerPreferences.CenterWindow">
            <summary>
            Gets or sets a value specifying whether to position the document's 
            window in the center of the screen.
            </summary>
            <value>
            Default value is <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfDocumentViewerPreferences.DisplayDocTitle">
            <summary>
            Gets or sets a value specifying whether the window's title bar should
            display the document title taken from <see cref="P:Vintasoft.Imaging.Pdf.Tree.PdfDocumentInformation.Title" />.
            </summary>
            <value>
            <b>true</b> - the window's title bar will display the document title taken
            from <see cref="P:Vintasoft.Imaging.Pdf.Tree.PdfDocumentInformation.Title" />;<br />
            <b>false</b> - the window's title bar will display the name of the PDF file
            containing the document.<br />
            Default value: <b>false</b>.
            </value>
            <remarks>
            This parameter is available since PDF 1.4.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfDocumentViewerPreferences.NonFullScreenPageMode">
            <summary>
            Gets or sets the document's page mode, specifying how to display
            the document on exiting full-screen mode.
            </summary>
            <value>
            Default value is <b>PdfDocumentViewMode.UseNone</b>.
            </value>
            <remarks>
            This property is meaningful only if value of the <see cref="P:Vintasoft.Imaging.Pdf.PdfDocument.DocumentViewMode" /> 
            property is <b>PdfDocumentViewMode.FullScreen</b>;
            otherwise, property value is ignored.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfDocumentViewerPreferences.ViewArea">
            <summary>
            Gets or sets the page boundary type representing 
            the area of a page to be displayed when viewing the document on the screen.
            </summary>
            <value>
            Default value is <b>PdfPageBoundaryType.CropBox</b>.
            </value>
            <remarks>
            This parameter is available since PDF 1.4.<br />
            <br />
            This property is intended primarily for use by prepress applications that
            interpret or manipulate the page boundaries. 
            Most PDF consumer applications disregard it.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfDocumentViewerPreferences.ViewClip">
            <summary>
            Gets or sets the page boundary type to which the contents 
            of a page are to be clipped when viewing the document on the 
            screen.
            </summary>
            <value>
            Default value is <b>PdfPageBoundaryType.CropBox</b>.
            </value>
            <remarks>
            This parameter is available since PDF 1.4.<br />
            <br />
            This property is intended primarily for use by prepress applications that
            interpret or manipulate the page boundaries. 
            Most PDF consumer applications disregard it.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfDocumentViewerPreferences.PrintArea">
            <summary>
            Gets or sets the page boundary type representing the area of a page to be 
            rendered when printing the document.
            </summary>
            <value>
            Default value is <b>PdfPageBoundaryType.CropBox</b>.
            </value>
            <remarks>
            This parameter is available since PDF 1.4.<br />
            <br />
            This property is intended primarily for use by prepress applications that
            interpret or manipulate the page boundaries. 
            Most PDF consumer applications disregard it.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfDocumentViewerPreferences.PrintClip">
            <summary>
            Gets or sets the page boundary type to which the contents of a page are 
            to be clipped when printing the document.
            </summary>
            <value>
            Default value is <b>PdfPageBoundaryType.CropBox</b>.
            </value>
            <remarks>
            This parameter is available since PDF 1.4.<br />
            <br />
            This property is intended primarily for use by prepress applications that
            interpret or manipulate the page boundaries. 
            Most PDF consumer applications disregard it.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfDocumentViewerPreferences.Direction">
            <summary>
            Gets or sets the predominant reading order for text.
            </summary>
            <value>
            The following values are valid:
            <ul>
            <li><b>L2R</b> - Left to right</li>
            <li><b>R2L</b> - Right to left (including vertical writing systems, such as Chinese, Japanese, and Korean)</li>
            </ul>
            Default value: <b>L2R</b>.
            </value>
            <remarks>
            This parameter is available since PDF 1.7.<br />
            <br />
            This entry has no direct effect on the document's contents or
            page numbering but can be used to determine the relative positioning 
            of pages when displayed side by side or printed n-up. 
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfDocumentViewerPreferences.PrintScaling">
            <summary>
            Gets or sets the page scaling option to be selected when a print
            dialog is displayed for this document.
            </summary>
            <value>
            Valid values are <b>None</b>, which indicates that the print dialog
            should reflect no page scaling, and <b>AppDefault</b>, which indicates 
            that applications should use the current print scaling. If this property 
            has an unrecognized value, applications should use the current print scaling.<br />
            <br />
            Default value: <b>AppDefault</b>.
            </value>
            <remarks>
            This parameter is available since PDF 1.6.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfDocumentViewerPreferences.Duplex">
            <summary>
            Gets or sets the paper handling option to 
            use when printing the file from the print dialog.
            </summary>
            <value>
            The following values are valid:
            <ul>
            <li><b>Simplex</b> - Print single-sided</li>
            <li><b>DuplexFlipShortEdge</b> - Duplex and flip on the short edge of the sheet</li>
            <li><b>DuplexFlipLongEdge</b> - Duplex and flip on the long edge of the sheet</li>
            </ul>
            </value>
            <remarks>
            This parameter is available since PDF 1.7.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfDocumentViewerPreferences.PickTrayByPDFSize">
            <summary>
            Gets or sets a value specifying whether the PDF
            page size is used to select the input paper tray.
            </summary>
            <remarks>
            This parameter is available since PDF 1.7.<br />
            <br />
            This setting influences only the preset values used to populate 
            the print dialog presented by a PDF viewer application. 
            If <see cref="P:Vintasoft.Imaging.Pdf.Tree.PdfDocumentViewerPreferences.PickTrayByPDFSize" /> is <b>true</b>, the check box in 
            the print dialog associated with input paper tray is checked.<br />
            Note: This setting has no effect on Mac OS systems, which do not
            provide the ability to pick the input tray by size.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfDocumentViewerPreferences.PrintPageRange">
            <summary>
            Gets or sets the page numbers used to initialize the 
            print dialog box when the file is printed.
            </summary>
            <remarks>
            This parameter is available since PDF 1.7.<br />
            <br />
            The first page of the PDF file is denoted by 1. Each pair consists 
            of the first and last pages in the sub-range. An odd number of 
            integers causes this entry to be ignored. Negative numbers cause 
            the entire array to be ignored.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfDocumentViewerPreferences.NumCopies">
            <summary>
            Gets or sets the number of copies to be 
            printed when the print dialog is opened for this file.
            </summary>
            <value>
            Supported values are the integers 2 through 5. 
            Values outside this range are ignored.
            </value>
            <remarks>
            This parameter is available since PDF 1.7.
            </remarks>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.PdfDocumentPageLayoutMode">
            <summary>
            Specifies the page layout to be used when the document is opened.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.PdfDocumentPageLayoutMode.Undefined">
            <summary>
            Undefined.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.PdfDocumentPageLayoutMode.SinglePage">
            <summary>
            Display one page at a time.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.PdfDocumentPageLayoutMode.OneColumn">
            <summary>
            The pages in one column.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.PdfDocumentPageLayoutMode.TwoColumnLeft">
            <summary>
            The pages in two columns, with odd-numbered pages on the left.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.PdfDocumentPageLayoutMode.TwoColumnRight">
            <summary>
            The pages in two columns, with odd-numbered pages on the right.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.PdfDocumentPageLayoutMode.TwoPageLeft">
            <summary>
            (PDF 1.5) Display the pages two at a time, with odd-numbered pages on the left.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.PdfDocumentPageLayoutMode.TwoPageRight">
            <summary>
            (PDF 1.5) Display the pages two at a time, with odd-numbered pages on the right.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.PdfJavaScriptAction">
            <summary>
            Defines a JavaScript action associated with PDF element 
            (bookmark, link, interactive form field, ...).
            </summary>
            <remarks>
            A JavaScript action (PDF 1.3) causes a script to be compiled 
            and executed by the JavaScript interpreter. Depending on the
            nature of the script, various interactive form fields in the 
            document may update their values or change their visual 
            appearances.<br />
            <br />
            To support the use of parameterized function calls in JavaScript 
            scripts, the <see cref="P:Vintasoft.Imaging.Pdf.PdfDocument.JavaScripts" /> property can contain names of 
            document-level JavaScript actions. When the document is opened, 
            all of the actions in this dictionary are executed, defining 
            JavaScript functions for use by other scripts in the document.<br />
            <i>Adobe JavaScript for Acrobat API Reference</i> give details on the 
            contents and effects of JavaScript scripts.
            </remarks>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.PdfAction">
            <summary>
            Base class for action associated with PDF element 
            (page, bookmark, link, annotation...).
            </summary>
            <remarks>
            Instead of simply jumping to a destination in the
            document, an annotation or bookmark can specify an action
            (PDF 1.1) for the viewer application to perform,
            such as launching an application or jump to page.
            </remarks>
            <seealso cref="T:Vintasoft.Imaging.Pdf.Tree.PdfAnnotationHideAction" />
            <seealso cref="T:Vintasoft.Imaging.Pdf.Tree.PdfGotoAction" />
            <seealso cref="T:Vintasoft.Imaging.Pdf.Tree.PdfJavaScriptAction" />
            <seealso cref="T:Vintasoft.Imaging.Pdf.Tree.PdfLaunchAction" />
            <seealso cref="T:Vintasoft.Imaging.Pdf.Tree.PdfUriAction" />
            <seealso cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormAction" />
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfAction.ActionType">
            <summary>
            Gets the action type.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfAction.NextActions">
            <summary>
            Gets or sets the the sequence of next actions to be performed after the action.
            </summary>
            <remarks>
            Viewer applications should attempt to provide reasonable behavior
            in anomalous situations. For example, self-referential actions should 
            not be executed more than once, and actions that close the document 
            or otherwise render the next action impossible should terminate the 
            execution sequence. Applications should also provide some mechanism 
            for the user to interrupt and manually terminate a sequence of actions.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfJavaScriptAction.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfJavaScriptAction" /> class.
            </summary>
            <param name="document">Parent document.</param>
            <param name="javaScript">String that contains JavaScript script.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfJavaScriptAction.JavaScript">
            <summary>
            Gets or sets a text string containing the JavaScript script to be executed.
            </summary>      
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfJavaScriptAction.JavaScriptResource">
            <summary>
            Gets or sets text stream (resource) containing the JavaScript 
            script to be executed.
            </summary>
            <remarks>
            Use this property if JavaScript represent as binary data (array of bytes).
            </remarks>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.PdfUriAction">
            <summary>
            Associates action between the uniform resource identifier (URI) and
            PDF element (bookmark, link,...).
            </summary>
            <remarks>
            A uniform resource identifier (URI) is a string that identifies
            (resolves to) a resource on the Internet—typically a file that
            is the destination of a hypertext link, although it can also 
            resolve to a query or other entity.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfUriAction.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfUriAction" /> class.
            </summary>
            <param name="document">Parent document.</param>
            <param name="uri">The uniform resource identifier.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfUriAction.URI">
            <summary>
            Gets or sets the uniform resource identifier to resolve.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfUriAction.IsMap">
            <summary>
            Gets or sets a flag specifying whether to track the mouse position when the URI is resolved.
            </summary>
            <value>Default value is <b>false</b>.</value>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.PdfAnnotationHideAction">
            <summary>
            Defines a hide action (PDF 1.2) that hides or shows one or more 
            annotations on the screen by setting or clearing their
            <see cref="T:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationFlags" />.Hidden flag.
            </summary>
            <seealso cref="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotation.Flags" />
            <example>
            Here is an example that demonstrates how to create
            interactive form fields and use <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfAnnotationHideAction" /> to manage 
            their visibility using the <see cref="T:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationFlags" />.Hidden property.
            <code lang="VB.NET">
            
            ''' &lt;summary&gt;
            ''' Tests the hide action.
            ''' &lt;/summary&gt;
            Public Shared Sub TestHideAction()
                ' create PDF document
                Using document As New PdfDocument()
                    ' create interactive form in PDF document
                    document.InteractiveForm = New PdfDocumentInteractiveForm(document)
            
                    ' specify that the viewer application must construct appearance streams and
                    ' appearance properties for all widget annotations
                    document.InteractiveForm.NeedAppearances = True
            
                    ' create an empty page
                    Dim page As New PdfPage(document, PaperSizeKind.A4)
                    ' add page to the document
                    document.Pages.Add(page)
            
                    Dim width As Single = 100
                    Dim height As Single = 30
                    ' create a rectangle that defines push box position on PDF page
                    Dim rect As New RectangleF((page.Size.Width - width) / 2, ((page.Size.Height - height) / 3) * 2, width, height)
            
                    ' create a push button field
                    Dim button1 As PdfInteractiveFormPushButtonField = CreateButton(document, rect, "Button1", "Button1  (hide self)")
            
                    ' create a push button field
                    rect.Y -= rect.Height + rect.Height / 2
                    Dim button2 As PdfInteractiveFormPushButtonField = CreateButton(document, rect, "Button2", "Show Button1")
            
                    ' set the activate action
                    button1.Annotation.ActivateAction = New PdfAnnotationHideAction(True, button1.Annotation)
                    button2.Annotation.ActivateAction = New PdfAnnotationHideAction(False, button1.Annotation)
            
                    ' set the default appearance of text
                    Dim font As PdfFont = document.FontManager.GetStandardFont(StandardFontType.TimesRoman)
                    button1.SetTextDefaultAppearance(font, 12, Color.Black)
                    button2.SetTextDefaultAppearance(font, 12, Color.Black)
            
                    ' add the push button field to the interactive form of document
                    document.InteractiveForm.AddField(button1, page)
                    document.InteractiveForm.AddField(button2, page)
            
                    ' save the document
                    document.Save("HideActionTest.pdf")
                End Using
            End Sub
            
            ''' &lt;summary&gt;
            ''' Creates the button.
            ''' &lt;/summary&gt;
            ''' &lt;param name="document"&gt;The document.&lt;/param&gt;
            ''' &lt;param name="rect"&gt;Button rectangle in user space.&lt;/param&gt;
            ''' &lt;param name="name"&gt;The button name.&lt;/param&gt;
            ''' &lt;param name="text"&gt;The button text.&lt;/param&gt;
            Private Shared Function CreateButton(document As PdfDocument, rect As RectangleF, name As String, text As String) As PdfInteractiveFormPushButtonField
                ' create a push button field
                Dim button As New PdfInteractiveFormPushButtonField(document, name, rect)
            
                ' set the border style
                button.Annotation.BorderStyle = New PdfAnnotationBorderStyle(document)
                button.Annotation.BorderStyle.Style = PdfAnnotationBorderStyleType.Beveled
                button.Annotation.BorderStyle.Width = 1
            
                ' set the appearance characteristics
                button.Annotation.AppearanceCharacteristics = New PdfAnnotationAppearanceCharacteristics(document)
                button.Annotation.AppearanceCharacteristics.BackgroundColor = Color.LightGray
                button.Annotation.AppearanceCharacteristics.NormalCaption = text
            
                Return button
            End Function
            
            </code>
            <code lang="C#">
            
            /// &lt;summary&gt;
            /// Tests the hide action.
            /// &lt;/summary&gt;
            public static void TestHideAction()
            {
                // create PDF document
                using (PdfDocument document = new PdfDocument())
                {
                    // create interactive form in PDF document
                    document.InteractiveForm = new PdfDocumentInteractiveForm(document);
            
                    // specify that the viewer application must construct appearance streams and
                    // appearance properties for all widget annotations
                    document.InteractiveForm.NeedAppearances = true;
            
                    // create an empty page
                    PdfPage page = new PdfPage(document, PaperSizeKind.A4);
                    // add page to the document
                    document.Pages.Add(page);
            
                    float width = 100;
                    float height = 30;
                    // create a rectangle that defines push box position on PDF page
                    RectangleF rect = new RectangleF(
                        (page.Size.Width - width) / 2,
                        ((page.Size.Height - height) / 3) * 2,
                        width, height);
            
                    // create a push button field
                    PdfInteractiveFormPushButtonField button1 =
                        CreateButton(document, rect, "Button1", "Button1  (hide self)");
            
                    // create a push button field
                    rect.Y -= rect.Height + rect.Height / 2;
                    PdfInteractiveFormPushButtonField button2 =
                        CreateButton(document, rect, "Button2", "Show Button1");
            
                    // set the activate action
                    button1.Annotation.ActivateAction = new PdfAnnotationHideAction(true, button1.Annotation);
                    button2.Annotation.ActivateAction = new PdfAnnotationHideAction(false, button1.Annotation);
            
                    // set the default appearance of text
                    PdfFont font = document.FontManager.GetStandardFont(StandardFontType.TimesRoman);
                    button1.SetTextDefaultAppearance(font, 12, Color.Black);
                    button2.SetTextDefaultAppearance(font, 12, Color.Black);
            
                    // add the push button field to the interactive form of document
                    document.InteractiveForm.AddField(button1, page);
                    document.InteractiveForm.AddField(button2, page);
            
                    // save the document
                    document.Save("HideActionTest.pdf");
                }
            }
            
            /// &lt;summary&gt;
            /// Creates the button.
            /// &lt;/summary&gt;
            /// &lt;param name="document"&gt;The document.&lt;/param&gt;
            /// &lt;param name="rect"&gt;Button rectangle in user space.&lt;/param&gt;
            /// &lt;param name="name"&gt;The button name.&lt;/param&gt;
            /// &lt;param name="text"&gt;The button text.&lt;/param&gt;
            private static PdfInteractiveFormPushButtonField CreateButton(PdfDocument document, RectangleF rect, string name, string text)
            {
                // create a push button field
                PdfInteractiveFormPushButtonField button =
                    new PdfInteractiveFormPushButtonField(document, name, rect);
            
                // set the border style
                button.Annotation.BorderStyle = new PdfAnnotationBorderStyle(document);
                button.Annotation.BorderStyle.Style = PdfAnnotationBorderStyleType.Beveled;
                button.Annotation.BorderStyle.Width = 1;
            
                // set the appearance characteristics
                button.Annotation.AppearanceCharacteristics = new PdfAnnotationAppearanceCharacteristics(document);
                button.Annotation.AppearanceCharacteristics.BackgroundColor = Color.LightGray;
                button.Annotation.AppearanceCharacteristics.NormalCaption = text;
            
                return button;
            }
            
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfAnnotationHideAction.#ctor(Vintasoft.Imaging.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfAnnotationHideAction" /> class.
            </summary>
            <param name="document">The document.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfAnnotationHideAction.#ctor(System.Boolean,Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotation[])">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfAnnotationHideAction" /> class.
            </summary>
            <param name="hide">Indicates that action hides annotation(s).</param>
            <param name="annotations">The annotations that should be hidden/shown
            when action is executed.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfAnnotationHideAction.#ctor(Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotation[])">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfAnnotationHideAction" /> class.
            </summary>
            <param name="annotations">The annotations that should be hidden when action is executed.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfAnnotationHideAction.Annotation">
            <summary>
            Gets or sets the annotation that should be hidden/shown.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfAnnotationHideAction.Annotations">
            <summary>
            Gets or sets the list of annotations that should be hidden/shown.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfAnnotationHideAction.Hide">
            <summary>
            Gets or sets a value indicating whether to hide or show the annotation(s).
            </summary>
            <value>
            <b>true</b> - hide annotation(s);
            <b>true</b> - show annotation(s).<br />
            Default value is <b>true</b>.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.DigitalSignatures.PdfPkcsSignature">
            <summary>
            Represents PKCS signature that can be used for signing and verifying.
            </summary>
            <example>
            Here is an example that shows how to sign a PDF document using specified digital signature:
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Signs a PDF document using specified certificate.
            ''' &lt;/summary&gt;
            ''' &lt;param name="inputFilename"&gt;The filename of input PDF document.&lt;/param&gt;
            ''' &lt;param name="outputFilename"&gt;The filename of output PDF document.&lt;/param&gt;
            ''' &lt;param name="certificate"&gt;The certificate that should be used for signing the input PDF document.&lt;/param&gt;
            Public Shared Sub SignDocument(inputFilename As String, outputFilename As String, certificate As X509Certificate2)
                ' open PDF document
                Using document As New PdfDocument(inputFilename)
                    ' if document does not have interactive form
                    If document.InteractiveForm Is Nothing Then
                        ' create interactive form in document
                        document.InteractiveForm = New PdfDocumentInteractiveForm(document)
                    End If
            
                    ' specify that document contains signatures
                    document.InteractiveForm.SignatureFlags = PdfDocumentSignatureFlags.SignaturesExist Or PdfDocumentSignatureFlags.AppendOnly
            
                    ' the viewer application must NOT construct appearance streams and
                    ' appearance properties for widget annotations in the document
                    document.InteractiveForm.NeedAppearances = False
            
                    ' PDF page on which signature will be placed
                    Dim page As PdfPage = document.Pages(0)
            
                    ' calculate the signature field rectangle (field will be placed in the center of page)
                    Dim signatureRect As New RectangleF()
                    signatureRect.Width = page.MediaBox.Width / 5
                    signatureRect.Height = signatureRect.Width / 3
                    signatureRect.X = page.MediaBox.X + (page.MediaBox.Width - signatureRect.Width) / 2
                    signatureRect.Y = page.MediaBox.Y + (page.MediaBox.Height - signatureRect.Height) / 2
            
            
                    ' create PKCS#7 signature
                    Dim signature As PdfPkcsSignature = PdfPkcsSignature.CreatePkcs7Signature(certificate)
            
                    ' create signature info
                    Dim signatureInfo As New PdfSignatureInformation(document, signature)
                    signatureInfo.SignerName = certificate.GetNameInfo(X509NameType.SimpleName, False)
                    signatureInfo.Reason = "Test signing"
                    signatureInfo.Location = CultureInfo.CurrentCulture.EnglishName
                    signatureInfo.SigningTime = DateTime.Now
            
                    ' create the signature field
                    Dim signatureField As New PdfInteractiveFormSignatureField(document, "MySignature1", signatureRect)
            
                    ' set the signature information
                    signatureField.SignatureInfo = signatureInfo
            
                    ' create the signature appearance
                    Using g As PdfGraphics = signatureField.CreateAppearanceGraphics()
                        ' signature text
                        Dim signatureText As String = String.Format("Digitally signed by" &amp; vbLf &amp; "{0}", signatureInfo.SignerName)
            
                        ' signature appearance rect
                        Dim rect As New RectangleF(PointF.Empty, signatureField.Annotation.Rectangle.Size)
            
                        ' draw background
                        g.FillRectangle(New PdfBrush(Color.FromArgb(128, Color.Lime)), rect)
            
                        ' padding
                        rect.Inflate(-rect.Height / 10, -rect.Height / 10)
            
                        ' create TimesRoman font
                        Dim font As PdfFont = document.FontManager.GetStandardFont(StandardFontType.TimesRoman)
            
                        ' measure font size
                        Dim fontSize As Single = g.MeasureFontSize(signatureText, font, rect.Width, rect.Height)
            
                        ' draw signture text
                        g.DrawString(signatureText, font, fontSize, New PdfBrush(Color.Black), rect, PdfContentAlignment.Center, _
                            False)
                    End Using
            
                    ' add signature field to the interactive form of document
                    document.InteractiveForm.Fields.Add(signatureField)
            
                    ' if PDF page does not have annotations
                    If page.Annotations Is Nothing Then
                        ' create an empty annotation collection for page
                        page.Annotations = New PdfAnnotationList(document)
                    End If
                    ' add widget annotation of signature field to the annotation collection of page
                    page.Annotations.Add(signatureField.Annotation)
            
                    ' sign and save document to the output file
                    document.Save(outputFilename)
                End Using
            End Sub
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Signs a PDF document using specified certificate.
            /// &lt;/summary&gt;
            /// &lt;param name="inputFilename"&gt;The filename of input PDF document.&lt;/param&gt;
            /// &lt;param name="outputFilename"&gt;The filename of output PDF document.&lt;/param&gt;
            /// &lt;param name="certificate"&gt;The certificate that should be used for signing the input PDF document.&lt;/param&gt;
            public static void SignDocument(
                string inputFilename,
                string outputFilename,
                X509Certificate2 certificate)
            {
                // open PDF document
                using (PdfDocument document = new PdfDocument(inputFilename))
                {
                    // if document does not have interactive form
                    if (document.InteractiveForm == null)
                    {
                        // create interactive form in document
                        document.InteractiveForm = new PdfDocumentInteractiveForm(document);
                    }
            
                    // specify that document contains signatures
                    document.InteractiveForm.SignatureFlags =
                        PdfDocumentSignatureFlags.SignaturesExist | PdfDocumentSignatureFlags.AppendOnly;
            
                    // the viewer application must NOT construct appearance streams and
                    // appearance properties for widget annotations in the document
                    document.InteractiveForm.NeedAppearances = false;
            
                    // PDF page on which signature will be placed
                    PdfPage page = document.Pages[0];
            
                    // calculate the signature field rectangle (field will be placed in the center of page)
                    RectangleF signatureRect = new RectangleF();
                    signatureRect.Width = page.MediaBox.Width / 5;
                    signatureRect.Height = signatureRect.Width / 3;
                    signatureRect.X = page.MediaBox.X + (page.MediaBox.Width - signatureRect.Width) / 2;
                    signatureRect.Y = page.MediaBox.Y + (page.MediaBox.Height - signatureRect.Height) / 2;
            
            
                    // create PKCS#7 signature
                    PdfPkcsSignature signature = PdfPkcsSignature.CreatePkcs7Signature(certificate);
            
                    // create signature info
                    PdfSignatureInformation signatureInfo = new PdfSignatureInformation(document, signature);
                    signatureInfo.SignerName = certificate.GetNameInfo(X509NameType.SimpleName, false);
                    signatureInfo.Reason = "Test signing";
                    signatureInfo.Location = CultureInfo.CurrentCulture.EnglishName;
                    signatureInfo.SigningTime = DateTime.Now;
            
                    // create the signature field
                    PdfInteractiveFormSignatureField signatureField =
                        new PdfInteractiveFormSignatureField(document, "MySignature1", signatureRect);
            
                    // set the signature information
                    signatureField.SignatureInfo = signatureInfo;
            
                    // create the signature appearance
                    using (PdfGraphics g = signatureField.CreateAppearanceGraphics())
                    {
                        // signature text
                        string signatureText = string.Format("Digitally signed by\n{0}",
                            signatureInfo.SignerName);
            
                        // signature appearance rect
                        RectangleF rect = new RectangleF(PointF.Empty,
                            signatureField.Annotation.Rectangle.Size);
            
                        // draw background
                        g.FillRectangle(new PdfBrush(Color.FromArgb(128, Color.Lime)), rect);
            
                        // padding
                        rect.Inflate(-rect.Height / 10, -rect.Height / 10);
            
                        // create TimesRoman font
                        PdfFont font = document.FontManager.GetStandardFont(StandardFontType.TimesRoman);
            
                        // measure font size
                        float fontSize = g.MeasureFontSize(signatureText, font, rect.Width, rect.Height);
            
                        // draw signture text
                        g.DrawString(
                            signatureText,
                            font, fontSize, new PdfBrush(Color.Black),
                            rect, PdfContentAlignment.Center, false);
                    }
            
                    // add signature field to the interactive form of document
                    document.InteractiveForm.Fields.Add(signatureField);
            
                    // if PDF page does not have annotations
                    if (page.Annotations == null)
                        // create an empty annotation collection for page
                        page.Annotations = new PdfAnnotationList(document);
                    // add widget annotation of signature field to the annotation collection of page
                    page.Annotations.Add(signatureField.Annotation);
            
                    // sign and save document to the output file
                    document.Save(outputFilename);
                }
            }
            </code>
            </example>
            <seealso cref="T:Vintasoft.Imaging.Pdf.Tree.DigitalSignatures.PdfSignatureInformation" />
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.DigitalSignatures.PdfPkcsSignature.CreatePkcs7Signature(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.X509Certificates.X509Certificate2[])">
            <summary>
            Creates the PKCS#7 signature.
            </summary>
            <param name="signCertificate">The signing certificate.</param>
            <param name="signCertificateChain">The signing certificate chain.</param>
            <returns>A new instance of <see cref="T:Vintasoft.Imaging.Pdf.Tree.DigitalSignatures.PdfPkcsSignature" /> class.</returns>
            <remarks>Uses "adbe.pkcs7.detached" subfilter.</remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.DigitalSignatures.PdfPkcsSignature.CreatePkcs1Signature(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.X509Certificates.X509Certificate2[])">
            <summary>
            Creates the PKCS#1 signature.
            </summary>
            <param name="signCertificate">The signing certificate.</param>
            <param name="signCertificateChain">The signing certificate chain.</param>
            <returns>A new instance of <see cref="T:Vintasoft.Imaging.Pdf.Tree.DigitalSignatures.PdfPkcsSignature" /> class.</returns>
            <remarks>Uses "adbe.x509.rsa_sha1" subfilter.</remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.DigitalSignatures.PdfPkcsSignature.Verify">
            <summary>
            Verifies the signature.
            </summary>
            <returns><b>true</b> if signature is valid; otherwise, <b>false</b>.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.DigitalSignatures.PdfPkcsSignature.SignatureAlgorithmName">
            <summary>
            Gets the name of signature algorithm.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.DigitalSignatures.PdfPkcsSignature.IsSigningImplemented">
            <summary>
            Gets a value indicating whether signing is implemented.
            </summary>
            <value>
            <b>true</b> if signing is implemented; otherwise, <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.DigitalSignatures.PdfPkcsSignature.SigningCertificate">
            <summary>
            Gets the certificate that is used for signing.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.DigitalSignatures.PdfPkcsSignature.SigningCertificateChain">
            <summary>
            Gets the certificate chain that is used for signing.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.DigitalSignatures.PdfSignatureInformation">
            <summary>
            Contains information about a digital signature.
            </summary>
            <remarks>
            To verify signature need create PKCS signature object 
            (<see cref="M:Vintasoft.Imaging.Pdf.Tree.DigitalSignatures.PdfSignatureInformation.GetSignature" />) and 
            use <see cref="M:Vintasoft.Imaging.Pdf.Tree.DigitalSignatures.PdfPkcsSignature.Verify" /> method. 
            </remarks>
            <example>
            Here is an example that shows how to display information about digital signatures and
            verify digital signatures of PDF document:
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Displays and verifies signatures of PDF document.
            ''' &lt;/summary&gt;
            ''' &lt;param name="pdfFilename"&gt;The filename of PDF document.&lt;/param&gt;
            Public Shared Sub VerifyDocumentSignatures(pdfFilename As String)
                ' open PDF document
                Using document As New PdfDocument(pdfFilename)
                    ' if document does not have interactive form
                    If document.InteractiveForm Is Nothing Then
                        Console.WriteLine("Signature fields are not found.")
                        Return
                    End If
            
                    ' get an array of signature fields of document
                    Dim signatureFields As PdfInteractiveFormSignatureField() = document.InteractiveForm.GetSignatureFields()
                    ' if document does not have signature fields
                    If signatureFields.Length = 0 Then
                        Console.WriteLine("Signture fields are not found.")
                        Return
                    End If
            
                    ' for each signature field
                    For i As Integer = 0 To signatureFields.Length - 1
                        ' get reference to the signature field
                        Dim signatureField As PdfInteractiveFormSignatureField = signatureFields(i)
                        ' print signature field name
                        Console.WriteLine(String.Format("[{0}]Signaure field: {1}", i + 1, signatureField.FullyQualifiedName))
            
                        ' get information about signature
                        Dim signatureInfo As PdfSignatureInformation = signatureField.SignatureInfo
                        ' if signature information is empty
                        If signatureInfo Is Nothing Then
                            Console.WriteLine("Empty signature field.")
                        Else
                            ' if signature information is NOT empty
                            ' print signature filter
                            Console.WriteLine(String.Format("Filter      : {0} ({1})", signatureInfo.Filter, signatureInfo.SubFilter))
                            ' print the signer name
                            If signatureInfo.SignerName IsNot Nothing Then
                                Console.WriteLine(String.Format("Signed by   : {0}", signatureInfo.SignerName))
                            End If
                            ' print the signature reason
                            If signatureInfo.Reason IsNot Nothing Then
                                Console.WriteLine(String.Format("Reason      : {0}", signatureInfo.Reason))
                            End If
                            ' print the signature location
                            If signatureInfo.Location IsNot Nothing Then
                                Console.WriteLine(String.Format("Location    : {0}", signatureInfo.Location))
                            End If
                            ' print the signer contact info
                            If signatureInfo.ContactInfo IsNot Nothing Then
                                Console.WriteLine(String.Format("Contact Info: {0}", signatureInfo.SignerName))
                            End If
                            ' print the signing date
                            If signatureInfo.SigningTime &lt;&gt; DateTime.MinValue Then
                                Console.WriteLine(String.Format("Signig Date : {0}", signatureInfo.SigningTime.ToString("f")))
                            End If
            
                            ' get PKCS signature
                            Dim [error] As Boolean = False
                            Dim signature As PdfPkcsSignature = Nothing
                            Try
                                signature = signatureInfo.GetSignature()
                            Catch e As Exception
                                [error] = True
                                Console.WriteLine("PKCS signature parsing error: {0}", e.Message)
                            End Try
                            If [error] Then
                                Continue For
                            End If
            
                            ' print name of signature algorithm
                            Console.WriteLine(String.Format("Algorithm   : {0}", signature.SignatureAlgorithmName))
            
                            ' print information about signature certificate chain
                            Console.WriteLine("Sign certificate chain:")
                            Dim signCertChain As X509Certificate2() = signature.SigningCertificateChain
                            Dim padding As String = ""
                            For Each cert As X509Certificate2 In signCertChain
                                padding += "    "
                                Console.WriteLine("{0}Serial number: {1}", padding, cert.SerialNumber)
                                Console.WriteLine("{0}Issuer       : {1}", padding, cert.GetNameInfo(X509NameType.SimpleName, True))
                                Console.WriteLine("{0}Subject      : {1}", padding, cert.GetNameInfo(X509NameType.SimpleName, False))
                            Next
            
            
                            ' verify digital signature
                            VerifyDigitalSignature(signatureInfo, signature)
                        End If
                        Console.WriteLine()
                    Next
                End Using
            End Sub
            
            ''' &lt;summary&gt;
            ''' Verifies the digital signature.
            ''' &lt;/summary&gt;
            ''' &lt;param name="signature"&gt;The signature.&lt;/param&gt;
            ''' &lt;param name="signatureInfo"&gt;The signature information.&lt;/param&gt;
            ''' &lt;returns&gt;&lt;b&gt;true&lt;/b&gt; if signature is valid; otherwise, &lt;b&gt;false&lt;/b&gt;.&lt;/returns&gt;
            Public Shared Function VerifyDigitalSignature(signatureInfo As PdfSignatureInformation, signature As PdfPkcsSignature) As Boolean
                Console.WriteLine("Verifying signature...")
            
                Dim signatureVerifyResult As Boolean = False
                Dim certificateVerifyResult As Boolean = False
                Dim signatureCoversWholeDocument As Boolean = False
                Dim chain As X509Chain = Nothing
            
            
                ' verify signature
            
                Try
                    ' check that signature covers the whole document
                    signatureCoversWholeDocument = signatureInfo.SignatureCoversWholeDocument()
            
                    ' verify PKCS signature
                    signatureVerifyResult = signature.Verify()
            
                    ' build and verify certificate chain
                    Dim certificate As X509Certificate2 = signature.SigningCertificate
                    chain = New X509Chain()
                    certificateVerifyResult = chain.Build(certificate)
                Catch verificationException As Exception
                    Console.WriteLine("Verification failed: {0}", verificationException.Message)
                    Return False
                End Try
            
            
                ' print signature verification result
            
                ' if PKCS signature verification is failed OR
                ' signature does not cover the whole document
                If Not signatureVerifyResult OrElse Not signatureCoversWholeDocument Then
                    Console.WriteLine("Signature is INVALID.")
                ' if certificate verification is failed
                ElseIf Not certificateVerifyResult Then
                    Console.WriteLine("Signature validity is UNKNOWN.")
                Else
                    Console.WriteLine("Signature is VALID.")
                End If
            
            
                ' print signature verification details
            
                ' if signature verification is successful
                If signatureVerifyResult Then
                    ' if signature covers the whole document
                    If signatureCoversWholeDocument Then
                        Console.WriteLine("    Signature verification: Document has not been modified since this signature was applied.")
                    Else
                        ' if signature does NOT cover the whole document
                        Console.WriteLine("    Signature verification: The revision of the document that was covered by this signature has not been altered; however, there have been subsequent changes to the document.")
                    End If
                Else
                    ' if signature verification is NOT successful
                    Console.WriteLine("    Signature verification: Document has been modified or corrupted since it was signed.")
                End If
            
            
                ' print certeficate verification details
            
                ' if certificate chain is present
                If chain IsNot Nothing Then
                    ' if certificate verification is successful
                    If certificateVerifyResult Then
                        Console.WriteLine("    Certificate verification: Signer's certificate is valid.")
                    Else
                        ' if certificate verification is NOT successful
                        ' print certificate verification status
                        Console.WriteLine("    Certificate verification: Signer's certificate is invalid:")
                        For Each status As X509ChainStatus In chain.ChainStatus
                            Console.Write(String.Format("        {0}: {1}", status.Status, status.StatusInformation))
                        Next
                    End If
                End If
            
                Return signatureVerifyResult AndAlso signatureCoversWholeDocument AndAlso certificateVerifyResult
            End Function
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Displays and verifies signatures of PDF document.
            /// &lt;/summary&gt;
            /// &lt;param name="pdfFilename"&gt;The filename of PDF document.&lt;/param&gt;
            public static void VerifyDocumentSignatures(string pdfFilename)
            {
                // open PDF document
                using (PdfDocument document = new PdfDocument(pdfFilename))
                {
                    // if document does not have interactive form
                    if (document.InteractiveForm == null)
                    {
                        Console.WriteLine("Signature fields are not found.");
                        return;
                    }
            
                    // get an array of signature fields of document
                    PdfInteractiveFormSignatureField[] signatureFields =
                        document.InteractiveForm.GetSignatureFields();
                    // if document does not have signature fields
                    if (signatureFields.Length == 0)
                    {
                        Console.WriteLine("Signture fields are not found.");
                        return;
                    }
            
                    // for each signature field
                    for (int i = 0; i &lt; signatureFields.Length; i++)
                    {
                        // get reference to the signature field
                        PdfInteractiveFormSignatureField signatureField = signatureFields[i];
                        // print signature field name
                        Console.WriteLine(string.Format("[{0}]Signaure field: {1}", i + 1, signatureField.FullyQualifiedName));
            
                        // get information about signature
                        PdfSignatureInformation signatureInfo = signatureField.SignatureInfo;
                        // if signature information is empty
                        if (signatureInfo == null)
                        {
                            Console.WriteLine("Empty signature field.");
                        }
                        // if signature information is NOT empty
                        else
                        {
                            // print signature filter
                            Console.WriteLine(string.Format("Filter      : {0} ({1})", signatureInfo.Filter, signatureInfo.SubFilter));
                            // print the signer name
                            if (signatureInfo.SignerName != null)
                                Console.WriteLine(string.Format("Signed by   : {0}", signatureInfo.SignerName));
                            // print the signature reason
                            if (signatureInfo.Reason != null)
                                Console.WriteLine(string.Format("Reason      : {0}", signatureInfo.Reason));
                            // print the signature location
                            if (signatureInfo.Location != null)
                                Console.WriteLine(string.Format("Location    : {0}", signatureInfo.Location));
                            // print the signer contact info
                            if (signatureInfo.ContactInfo != null)
                                Console.WriteLine(string.Format("Contact Info: {0}", signatureInfo.SignerName));
                            // print the signing date
                            if (signatureInfo.SigningTime != DateTime.MinValue)
                                Console.WriteLine(string.Format("Signig Date : {0}", signatureInfo.SigningTime.ToString("f")));
            
                            // get PKCS signature
                            bool error = false;
                            PdfPkcsSignature signature = null;
                            try
                            {
                                signature = signatureInfo.GetSignature();
                            }
                            catch (Exception e)
                            {
                                error = true;
                                Console.WriteLine("PKCS signature parsing error: {0}", e.Message);
                            }
                            if (error)
                                continue;
            
                            // print name of signature algorithm
                            Console.WriteLine(string.Format("Algorithm   : {0}", signature.SignatureAlgorithmName));
            
                            // print information about signature certificate chain
                            Console.WriteLine("Sign certificate chain:");
                            X509Certificate2[] signCertChain = signature.SigningCertificateChain;
                            string padding = "";
                            foreach (X509Certificate2 cert in signCertChain)
                            {
                                padding += "    ";
                                Console.WriteLine("{0}Serial number: {1}", padding, cert.SerialNumber);
                                Console.WriteLine("{0}Issuer       : {1}", padding, cert.GetNameInfo(X509NameType.SimpleName, true));
                                Console.WriteLine("{0}Subject      : {1}", padding, cert.GetNameInfo(X509NameType.SimpleName, false));
                            }
            
            
                            // verify digital signature
                            VerifyDigitalSignature(signatureInfo, signature);
                        }
                        Console.WriteLine();
                    }
                }
            }
            
            /// &lt;summary&gt;
            /// Verifies the digital signature.
            /// &lt;/summary&gt;
            /// &lt;param name="signature"&gt;The signature.&lt;/param&gt;
            /// &lt;param name="signatureInfo"&gt;The signature information.&lt;/param&gt;
            /// &lt;returns&gt;&lt;b&gt;true&lt;/b&gt; if signature is valid; otherwise, &lt;b&gt;false&lt;/b&gt;.&lt;/returns&gt;
            public static bool VerifyDigitalSignature(
                PdfSignatureInformation signatureInfo,
                PdfPkcsSignature signature)
            {
                Console.WriteLine("Verifying signature...");
            
                bool signatureVerifyResult = false;
                bool certificateVerifyResult = false;
                bool signatureCoversWholeDocument = false;
                X509Chain chain = null;
            
            
                // verify signature
            
                try
                {
                    // check that signature covers the whole document
                    signatureCoversWholeDocument = signatureInfo.SignatureCoversWholeDocument();
            
                    // verify PKCS signature
                    signatureVerifyResult = signature.Verify();
            
                    // build and verify certificate chain
                    X509Certificate2 certificate = signature.SigningCertificate;
                    chain = new X509Chain();
                    certificateVerifyResult = chain.Build(certificate);
                }
                catch (Exception verificationException)
                {
                    Console.WriteLine("Verification failed: {0}", verificationException.Message);
                    return false;
                }
            
            
                // print signature verification result
            
                // if PKCS signature verification is failed OR
                // signature does not cover the whole document
                if (!signatureVerifyResult || !signatureCoversWholeDocument)
                    Console.WriteLine("Signature is INVALID.");
                // if certificate verification is failed
                else if (!certificateVerifyResult)
                    Console.WriteLine("Signature validity is UNKNOWN.");
                else
                    Console.WriteLine("Signature is VALID.");
            
            
                // print signature verification details
            
                // if signature verification is successful
                if (signatureVerifyResult)
                {
                    // if signature covers the whole document
                    if (signatureCoversWholeDocument)
                        Console.WriteLine("    Signature verification: Document has not been modified since this signature was applied.");
                    // if signature does NOT cover the whole document
                    else
                        Console.WriteLine("    Signature verification: The revision of the document that was covered by this signature has not been altered; however, there have been subsequent changes to the document.");
                }
                // if signature verification is NOT successful
                else
                {
                    Console.WriteLine("    Signature verification: Document has been modified or corrupted since it was signed.");
                }
            
            
                // print certeficate verification details
            
                // if certificate chain is present
                if (chain != null)
                {
                    // if certificate verification is successful
                    if (certificateVerifyResult)
                    {
                        Console.WriteLine("    Certificate verification: Signer's certificate is valid.");
                    }
                    // if certificate verification is NOT successful
                    else
                    {
                        // print certificate verification status
                        Console.WriteLine("    Certificate verification: Signer's certificate is invalid:");
                        foreach (X509ChainStatus status in chain.ChainStatus)
                            Console.Write(string.Format("        {0}: {1}", status.Status, status.StatusInformation));
                    }
                }
            
                return signatureVerifyResult &amp;&amp; signatureCoversWholeDocument &amp;&amp; certificateVerifyResult;
            }
            </code>
            </example>
            <seealso cref="T:Vintasoft.Imaging.Pdf.Tree.DigitalSignatures.PdfPkcsSignature" />
            <seealso cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormSignatureField.SignatureInfo" />
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.DigitalSignatures.PdfSignatureInformation.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,Vintasoft.Imaging.Pdf.Tree.DigitalSignatures.PdfPkcsSignature)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.DigitalSignatures.PdfSignatureInformation" /> class.
            </summary>
            <param name="document">Parent PDF document.</param>
            <param name="signature">The signature.</param>
            <exception cref="T:System.ArithmeticException">Thrown if
            signature is already used for signing.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.DigitalSignatures.PdfSignatureInformation.SignatureCoversWholeDocument">
            <summary>
            Determines that the signature covers the whole document.
            </summary>
            <returns>
            <b>true</b> if signature covers the whole document;
            otherwise <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.DigitalSignatures.PdfSignatureInformation.GetSignature">
            <summary>
            Returns the PKCS signature.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.DigitalSignatures.PdfSignatureInformation.Filter">
            <summary>
            Gets a name of the preferred signature handler that should be used for
            validating the signature. 
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.DigitalSignatures.PdfSignatureInformation.SubFilter">
            <summary>
            Gets a name that describes the encoding of the signature
            value and key information in the signature. 
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.DigitalSignatures.PdfSignatureInformation.SignerName">
            <summary>
            Gets or sets the name of the person or authority signing the document.
            </summary>
            <remarks>
            This value should be used only when it is not possible to extract 
            the name from the signature; for example, from the certificate of the signer.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.DigitalSignatures.PdfSignatureInformation.SigningTime">
            <summary>
            Gets or sets the time of signing.
            </summary>
            <remarks>
            Depending on the signature handler, this may be a normal 
            unverified computer time or a time generated in a verifiable 
            way from a secure time server.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.DigitalSignatures.PdfSignatureInformation.Location">
            <summary>
            Gets or sets the CPU host name or physical location of the signing.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.DigitalSignatures.PdfSignatureInformation.Reason">
            <summary>
            Gets or sets the reason for the signing.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.DigitalSignatures.PdfSignatureInformation.ContactInfo">
            <summary>
            Gets or sets an information provided by the signer to enable a recipient 
            to contact the signer to verify the signature.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.DigitalSignatures.PdfSignatureInformation.SignedRevision">
            <summary>
            Gets the document revision of this signature.
            </summary>
            <remarks>
            Document revision is authentic only if <see cref="M:Vintasoft.Imaging.Pdf.Tree.DigitalSignatures.PdfPkcsSignature.Verify" />
            method of this signature returns <b>true</b>.
            </remarks>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Security.AuthorizationResult">
            <summary>
            Specifies available results of the authentication process.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Security.AuthorizationResult.AuthenticationNotRequired">
            <summary>
            Document is not encrypted, authentication is not required.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Security.AuthorizationResult.IncorrectPassword">
            <summary>
            The password is incorrect.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Security.AuthorizationResult.UserPassword">
            <summary>
            Authentication passed successfully, user password identified.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Security.AuthorizationResult.OwnerPassword">
            <summary>
            Authentication passed successfully, owner password identified.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormAction">
            <summary>
            Represents a base class of interactive form action.
            </summary>
            <seealso cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormImportDataAction" />
            <seealso cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfResetFormAction" />
            <seealso cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfSubmitFormAction" />
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormAction.GetActionFields">
            <summary>
            Returns an array of fields that will be processed by the action
            </summary>
            <returns>An array of <see cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormField" /> instances.</returns>
            <seealso cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormAction.Fields" />
            <seealso cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormAction.FieldsIsExclude" />
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormAction.Fields">
            <summary>
            Gets or sets an array identifying which fields to include in the action 
            or which to exclude, depending on the setting of the <see cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormAction.FieldsIsExclude" /> property.
            </summary>
            <remarks>
            If this property is <b>null</b>, the <see cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormAction.FieldsIsExclude" /> flag is ignored, 
            and all fields in the document's interactive form is used by this action.
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormAction.FieldsIsExclude" />
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormAction.FieldsIsExclude">
            <summary>
            Gets or sets a value indicating whether the <see cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormAction.Fields" /> list
            specifies which fields to exclude in the action.
            </summary>
            <value>
            <b>true</b> - <see cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormAction.Fields" /> property defines an array identifying
            which fields to include in the action;
            <b>false</b> - <see cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormAction.Fields" /> property defines an array identifying
            which fields to exclude in the action.
            </value>
            <seealso cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormAction.Fields" />
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormFieldSubmitFormat">
            <summary>
            Specifies available interactive form field submit formats.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormFieldSubmitFormat.HTML">
            <summary>
            HTML Form format.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormFieldSubmitFormat.FDF">
            <summary>
            Forms Data Format (FDF).
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormFieldSubmitFormat.XFDF">
            <summary>
            XFDF, a version of FDF based on XML.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormFieldSubmitFormat.PDF">
            <summary>
            PDF format.
            </summary>
            <remarks>
            Document is submitted as PDF, using the MIME content type application/pdf.
            </remarks>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfSubmitFormAction">
            <summary>
            Represents a submit-form action.
            </summary>
            <remarks>
            A submit-form action transmits the names and values of 
            selected interactive form fields to a specified uniform 
            resource locator (URL), presumably the address of a Web 
            server that will process them and send back a response.
            </remarks>
            <example>
            Here is an example that demonstrates how to send a form data to a certain URL:
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Adds a submit button to a PDF document.
            ''' &lt;/summary&gt;
            ''' &lt;param name="pdfFilename"&gt;The filename of PDF document.&lt;/param&gt;
            ''' &lt;param name="url"&gt;URL to submit form.&lt;/param&gt;
            Public Shared Sub AddSubmitFormButton(pdfFilename As String, url As String)
                ' open PDF document
                Using document As New PdfDocument(pdfFilename)
                    ' create new PDF page
                    Dim page As New PdfPage(document, PaperSizeKind.A6)
                    ' add page to PDF document
                    document.Pages.Add(page)
            
                    ' create a button and add button to PDF page
                    Dim button As PdfInteractiveFormPushButtonField = CreateButtonAndAddToPdfPage(page, "Submit")
            
                    ' create submit action
                    Dim action As New PdfSubmitFormAction(document)
                    ' specify that all fields of document must be submitted
                    action.Fields = document.InteractiveForm.Fields
                    ' specify submit URL
                    action.Url = url
                    ' specify the submit format
                    action.SubmitFormat = PdfInteractiveFormFieldSubmitFormat.HTML
            
                    ' set the button action
                    button.Annotation.ActivateAction = action
            
                    ' save changes to a file
                    document.SaveChanges()
                End Using
            End Sub
            
            ''' &lt;summary&gt;
            ''' Creates button and adds it to PDF page.
            ''' &lt;/summary&gt;
            ''' &lt;param name="page"&gt;PDF page.&lt;/param&gt;
            ''' &lt;param name="caption"&gt;Caption of button.&lt;/param&gt;
            Public Shared Function CreateButtonAndAddToPdfPage(page As PdfPage, caption As String) As PdfInteractiveFormPushButtonField
                ' PDF document
                Dim document As PdfDocument = page.Document
            
                ' button position on PDF page
                Dim rect As New RectangleF(50, page.Size.Height - 150, 200, 100)
            
                ' create button
                Dim button As New PdfInteractiveFormPushButtonField(document, "button", rect)
                ' set the border style
                button.Annotation.BorderStyle = New PdfAnnotationBorderStyle(document)
                button.Annotation.BorderStyle.Style = PdfAnnotationBorderStyleType.Beveled
                button.Annotation.BorderStyle.Width = 2
                ' set the appearance characteristics
                button.Annotation.AppearanceCharacteristics = New PdfAnnotationAppearanceCharacteristics(document)
                button.Annotation.AppearanceCharacteristics.BackgroundColor = Color.LightGray
                button.Annotation.AppearanceCharacteristics.NormalCaption = caption
                ' set the text default appearance
                Dim font As PdfFont = document.FontManager.GetStandardFont(StandardFontType.TimesRoman)
                button.SetTextDefaultAppearance(font, 15F, Color.Black)
            
                ' if PDF document does NOT have interactive form
                If document.InteractiveForm Is Nothing Then
                    ' create interactive form in PDF document
                    document.InteractiveForm = New PdfDocumentInteractiveForm(document)
                End If
                ' add button to the interactive form of PDF document
                document.InteractiveForm.Fields.Add(button)
            
                ' if PDF page does NOT have annotation list
                If page.Annotations Is Nothing Then
                    ' create annotation list for PDF page
                    page.Annotations = New PdfAnnotationList(document)
                End If
                ' add the button annotation to PDF page
                page.Annotations.Add(button.Annotation)
            
                ' update field appearance
                button.UpdateAppearance()
            
                ' return the button
                Return button
            End Function
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Adds a submit button to a PDF document.
            /// &lt;/summary&gt;
            /// &lt;param name="pdfFilename"&gt;The filename of PDF document.&lt;/param&gt;
            /// &lt;param name="url"&gt;URL to submit form.&lt;/param&gt;
            public static void AddSubmitFormButton(string pdfFilename, string url)
            {
                // open PDF document
                using (PdfDocument document = new PdfDocument(pdfFilename))
                {
                    // create new PDF page
                    PdfPage page = new PdfPage(document, PaperSizeKind.A6);
                    // add page to PDF document
                    document.Pages.Add(page);
            
                    // create a button and add button to PDF page
                    PdfInteractiveFormPushButtonField button = CreateButtonAndAddToPdfPage(page, "Submit");
            
                    // create submit action
                    PdfSubmitFormAction action = new PdfSubmitFormAction(document);
                    // specify that all fields of document must be submitted
                    action.Fields = document.InteractiveForm.Fields;
                    // specify submit URL
                    action.Url = url;
                    // specify the submit format
                    action.SubmitFormat = PdfInteractiveFormFieldSubmitFormat.HTML;
            
                    // set the button action
                    button.Annotation.ActivateAction = action;
            
                    // save changes to a file
                    document.SaveChanges();
                }
            }
            
            /// &lt;summary&gt;
            /// Creates button and adds it to PDF page.
            /// &lt;/summary&gt;
            /// &lt;param name="page"&gt;PDF page.&lt;/param&gt;
            /// &lt;param name="caption"&gt;Caption of button.&lt;/param&gt;
            public static PdfInteractiveFormPushButtonField CreateButtonAndAddToPdfPage(PdfPage page, string caption)
            {
                // PDF document
                PdfDocument document = page.Document;
            
                // button position on PDF page
                RectangleF rect = new RectangleF(50, page.Size.Height - 150, 200, 100);
            
                // create button
                PdfInteractiveFormPushButtonField button = new PdfInteractiveFormPushButtonField(document, "button", rect);
                // set the border style
                button.Annotation.BorderStyle = new PdfAnnotationBorderStyle(document);
                button.Annotation.BorderStyle.Style = PdfAnnotationBorderStyleType.Beveled;
                button.Annotation.BorderStyle.Width = 2;
                // set the appearance characteristics
                button.Annotation.AppearanceCharacteristics = new PdfAnnotationAppearanceCharacteristics(document);
                button.Annotation.AppearanceCharacteristics.BackgroundColor = Color.LightGray;
                button.Annotation.AppearanceCharacteristics.NormalCaption = caption;
                // set the text default appearance
                PdfFont font = document.FontManager.GetStandardFont(StandardFontType.TimesRoman);
                button.SetTextDefaultAppearance(font, 15f, Color.Black);
            
                // if PDF document does NOT have interactive form
                if (document.InteractiveForm == null)
                    // create interactive form in PDF document
                    document.InteractiveForm = new PdfDocumentInteractiveForm(document);
                // add button to the interactive form of PDF document
                document.InteractiveForm.Fields.Add(button);
                
                // if PDF page does NOT have annotation list
                if (page.Annotations == null)
                    // create annotation list for PDF page
                    page.Annotations = new PdfAnnotationList(document);
                // add the button annotation to PDF page
                page.Annotations.Add(button.Annotation);
                
                // update field appearance
                button.UpdateAppearance();
            
                // return the button
                return button;
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfSubmitFormAction.#ctor(Vintasoft.Imaging.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfSubmitFormAction" /> class.
            </summary>
            <param name="document">Parent document.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfSubmitFormAction.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,System.Collections.Generic.IEnumerable{Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormField})">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfSubmitFormAction" /> class.
            </summary>
            <param name="document">Parent document.</param>
            <param name="fields">Field collection.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfSubmitFormAction.GetActionFields">
            <summary>
            Returns an array array identifying which fields to include in the submission.
            </summary>
            <returns>An array of <see cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormField" /> instances.</returns>
            <remarks>
            Fields whose <see cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormField.IsNoExport" /> property is set to <b>true</b>
            are never included in a submit-form action.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfSubmitFormAction.UrlSpecification">
            <summary>
            Gets or sets an URL file specification giving the uniform 
            resource locator (URL) of the script at the Web server that will
            process the submission.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfSubmitFormAction.Url">
            <summary>
            Gets or sets an URL giving the uniform 
            resource locator (URL) of the script at the Web server that will
            process the submission.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfSubmitFormAction.IsIncludeNoValueFields">
            <summary>
            Gets or sets a value indicating whether all fields including 
            fields without a value are submitted.
            </summary>
            <value>
            <b>true</b> - all fields are submitted.
            For fields without a value, only the field name is submitted.<br />
            <b>false</b> - fields without a value are not submitted.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfSubmitFormAction.SubmitFormat">
            <summary>
            Gets or sets a format of interactive form field submit.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfSubmitFormAction.IsUseGetMethod">
            <summary> 
            Get or sets a value indicating whether fields are submitted using an HTTP 
            GET request. 
            </summary>
            <value>
            <b>true</b> - field names and values must be submitted using an HTTP GET request;
            <b>false</b> - field names and values must be submitted using an HTTP POST request.
            </value>
            <remarks>
            This property is meaningful only when the <see cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfSubmitFormAction.SubmitFormat" /> property
            is set to <see cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormFieldSubmitFormat" />.HTML.
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfSubmitFormAction.SubmitFormat" />
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfResetFormAction">
            <summary>
            Represents a reset-form action.
            </summary>
            <remarks>
            A reset-form action resets selected interactive form
            fields to their default values.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfResetFormAction.#ctor(Vintasoft.Imaging.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfResetFormAction" /> class.
            </summary>
            <param name="document">Parent document.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfResetFormAction.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,System.Collections.Generic.IEnumerable{Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormField})">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfResetFormAction" /> class.
            </summary>
            <param name="document">Parent document.</param>
            <param name="fields">Field collection.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfResetFormAction.Execute">
            <summary>
            Executes a reset-form action.
            </summary>
            <remarks>
            A reset-form action resets selected interactive form 
            fields to their default values; that is, it sets the value in the field default value.<br />
            <br />
            If no default value is defined for a field, its value property is removed.<br />
            <br />
            For fields that can have no value (such as pushbuttons), the action has no effect.
            </remarks>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormImportDataAction">
            <summary>
            Represents an import interactive form data action.
            </summary>
            <remarks>
            An import-data action imports Forms Data Format (FDF) 
            data into the document's interactive form from a specified file.
            </remarks>
            <example>
            Here is an example that demonstrates how to load a form data from specified file:
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Adds a form import button to a PDF document.
            ''' &lt;/summary&gt;
            ''' &lt;param name="pdfFilename"&gt;&lt;/param&gt;
            ''' &lt;param name="loadFilename"&gt;&lt;/param&gt;
            Public Shared Sub AddFormImportButton(pdfFilename As String, loadFilename As String)
                ' open PDF document
                Using document As New PdfDocument(pdfFilename)
                    ' create PDF page
                    Dim page As New PdfPage(document, PaperSizeKind.A6)
                    ' add page to PDF document
                    document.Pages.Add(page)
            
                    ' create a button and add button to PDF page
                    Dim button As PdfInteractiveFormPushButtonField = CreateButtonAndAddToPdfPage(page, "Load form")
            
                    ' create reference to a file with data that should be imported
                    Dim fileReference As New PdfFileReferenceSpecification(document, loadFilename)
            
                    ' create the form import action
                    Dim action As New PdfInteractiveFormImportDataAction(document, fileReference)
                    ' specify that all fields of document must be imported
                    action.Fields = document.InteractiveForm.Fields
            
                    ' set the button action
                    button.Annotation.ActivateAction = action
            
                    ' save changes to a file
                    document.SaveChanges()
                End Using
            End Sub
            
            ''' &lt;summary&gt;
            ''' Creates button and adds it to PDF page.
            ''' &lt;/summary&gt;
            ''' &lt;param name="page"&gt;PDF page.&lt;/param&gt;
            ''' &lt;param name="caption"&gt;Caption of button.&lt;/param&gt;
            Public Shared Function CreateButtonAndAddToPdfPage(page As PdfPage, caption As String) As PdfInteractiveFormPushButtonField
                ' PDF document
                Dim document As PdfDocument = page.Document
            
                ' button position on PDF page
                Dim rect As New RectangleF(50, page.Size.Height - 150, 200, 100)
            
                ' create button
                Dim button As New PdfInteractiveFormPushButtonField(document, "button", rect)
                ' set the border style
                button.Annotation.BorderStyle = New PdfAnnotationBorderStyle(document)
                button.Annotation.BorderStyle.Style = PdfAnnotationBorderStyleType.Beveled
                button.Annotation.BorderStyle.Width = 2
                ' set the appearance characteristics
                button.Annotation.AppearanceCharacteristics = New PdfAnnotationAppearanceCharacteristics(document)
                button.Annotation.AppearanceCharacteristics.BackgroundColor = Color.LightGray
                button.Annotation.AppearanceCharacteristics.NormalCaption = caption
                ' set the text default appearance
                Dim font As PdfFont = document.FontManager.GetStandardFont(StandardFontType.TimesRoman)
                button.SetTextDefaultAppearance(font, 15F, Color.Black)
            
                ' if PDF document does NOT have interactive form
                If document.InteractiveForm Is Nothing Then
                    ' create interactive form in PDF document
                    document.InteractiveForm = New PdfDocumentInteractiveForm(document)
                End If
                ' add button to the interactive form of PDF document
                document.InteractiveForm.Fields.Add(button)
            
                ' if PDF page does NOT have annotation list
                If page.Annotations Is Nothing Then
                    ' create annotation list for PDF page
                    page.Annotations = New PdfAnnotationList(document)
                End If
                ' add the button annotation to PDF page
                page.Annotations.Add(button.Annotation)
            
                ' update field appearance
                button.UpdateAppearance()
            
                ' return the button
                Return button
            End Function
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Adds a form import button to a PDF document.
            /// &lt;/summary&gt;
            /// &lt;param name="pdfFilename"&gt;&lt;/param&gt;
            /// &lt;param name="loadFilename"&gt;&lt;/param&gt;
            public static void AddFormImportButton(string pdfFilename, string loadFilename)
            {
                // open PDF document
                using (PdfDocument document = new PdfDocument(pdfFilename))
                {
                    // create PDF page
                    PdfPage page = new PdfPage(document, PaperSizeKind.A6);
                    // add page to PDF document
                    document.Pages.Add(page);
            
                    // create a button and add button to PDF page
                    PdfInteractiveFormPushButtonField button = CreateButtonAndAddToPdfPage(page, "Load form");
            
                    // create reference to a file with data that should be imported
                    PdfFileReferenceSpecification fileReference = new PdfFileReferenceSpecification(document, loadFilename);
            
                    // create the form import action
                    PdfInteractiveFormImportDataAction action = new PdfInteractiveFormImportDataAction(document, fileReference);
                    // specify that all fields of document must be imported
                    action.Fields = document.InteractiveForm.Fields;
                    
                    // set the button action
                    button.Annotation.ActivateAction = action;
            
                    // save changes to a file
                    document.SaveChanges();
                }
            }
            
            /// &lt;summary&gt;
            /// Creates button and adds it to PDF page.
            /// &lt;/summary&gt;
            /// &lt;param name="page"&gt;PDF page.&lt;/param&gt;
            /// &lt;param name="caption"&gt;Caption of button.&lt;/param&gt;
            public static PdfInteractiveFormPushButtonField CreateButtonAndAddToPdfPage(PdfPage page, string caption)
            {
                // PDF document
                PdfDocument document = page.Document;
            
                // button position on PDF page
                RectangleF rect = new RectangleF(50, page.Size.Height - 150, 200, 100);
            
                // create button
                PdfInteractiveFormPushButtonField button = new PdfInteractiveFormPushButtonField(document, "button", rect);
                // set the border style
                button.Annotation.BorderStyle = new PdfAnnotationBorderStyle(document);
                button.Annotation.BorderStyle.Style = PdfAnnotationBorderStyleType.Beveled;
                button.Annotation.BorderStyle.Width = 2;
                // set the appearance characteristics
                button.Annotation.AppearanceCharacteristics = new PdfAnnotationAppearanceCharacteristics(document);
                button.Annotation.AppearanceCharacteristics.BackgroundColor = Color.LightGray;
                button.Annotation.AppearanceCharacteristics.NormalCaption = caption;
                // set the text default appearance
                PdfFont font = document.FontManager.GetStandardFont(StandardFontType.TimesRoman);
                button.SetTextDefaultAppearance(font, 15f, Color.Black);
            
                // if PDF document does NOT have interactive form
                if (document.InteractiveForm == null)
                    // create interactive form in PDF document
                    document.InteractiveForm = new PdfDocumentInteractiveForm(document);
                // add button to the interactive form of PDF document
                document.InteractiveForm.Fields.Add(button);
            
                // if PDF page does NOT have annotation list
                if (page.Annotations == null)
                    // create annotation list for PDF page
                    page.Annotations = new PdfAnnotationList(document);
                // add the button annotation to PDF page
                page.Annotations.Add(button.Annotation);
            
                // update field appearance
                button.UpdateAppearance();
            
                // return the button
                return button;
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormImportDataAction.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,Vintasoft.Imaging.Pdf.Tree.PdfFileReferenceSpecification)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormImportDataAction" /> class.
            </summary>
            <param name="document">Parent document.</param>
            <param name="fileSpecification">FDF file specification from which to import the data.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormImportDataAction.FileSpecification">
            <summary>
            Gets or sets a FDF file specification from which to import the data.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.BarcodeDataPreparationMode">
            <summary>
            Specifies available data preparation steps before barcode value encoding.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.BarcodeDataPreparationMode.Directly">
            <summary>
            The data is sent directly to the encoder.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.BarcodeDataPreparationMode.FlateCompression">
            <summary>
            The data undergoes flate compression before encoding.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.BarcodeSymbologyType">
            <summary>
            Specifies available barcode symbology type.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.BarcodeSymbologyType.Unsupported">
            <summary>
            Unsupported symbology.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.BarcodeSymbologyType.PDF417">
            <summary>
            The PDF417 barcode symbology.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.BarcodeSymbologyType.QRCode">
            <summary>
            The QR Code barcode symbology.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.BarcodeSymbologyType.DataMatrix">
            <summary>
            The DataMatrix barcode symbology.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormBarcodeField">
            <summary>
            Provides information about the barcode interactive form field.
            </summary>
            <example>
            Here is an example that shows how to create PDF document with PDF417 barcode field:
            <code lang="VB.NET">
            Imports System.Drawing
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.Pdf
            Imports Vintasoft.Imaging.Pdf.Tree
            Imports Vintasoft.Imaging.Pdf.Tree.Annotations
            Imports Vintasoft.Imaging.Pdf.Tree.Fonts
            Imports Vintasoft.Imaging.Pdf.Tree.InteractiveForms
            
            Class PdfInteractiveFormBarcodeFieldExample
                ''' &lt;summary&gt;
                ''' Creates a PDF document with barcode field.
                ''' &lt;/summary&gt;
                ''' &lt;param name="filename"&gt;The filename.&lt;/param&gt;
                ''' &lt;param name="barcodeSymbology"&gt;The barcode symbology.&lt;/param&gt;
                Public Shared Sub CreateDocumentWithBarcodeField(filename As String, barcodeSymbology As BarcodeSymbologyType)
                    ' create PDF document
                    Using document As New PdfDocument(New PdfFormat("1.7", False, True))
                        ' create interactive form in PDF document
                        document.InteractiveForm = New PdfDocumentInteractiveForm(document)
                        document.InteractiveForm.CalculationOrder = New PdfInteractiveFormFieldList(document)
            
                        ' create an empty page
                        Dim page As New PdfPage(document, PaperSizeKind.A4)
                        page.Annotations = New PdfAnnotationList(document)
                        ' add page to the document
                        document.Pages.Add(page)
            
            
                        Dim width As Single = 200
                        Dim height As Single = 25
                        ' create a rectangle that defines the field position on PDF page
                        Dim rect As New RectangleF((page.Size.Width - width) / 2, page.Size.Height - height * 8, width, height)
            
                        ' create text field (barcode value)
                        Dim textField As New PdfInteractiveFormTextField(document, "TextField", rect)
                        textField.TextValue = "test"
                        textField.DefaultValue = textField.Value
                        ' set the text default appearance
                        textField.SetTextDefaultAppearance(document.FontManager.GetStandardFont(StandardFontType.TimesRoman), 12, Color.Black)
                        ' set the appearance characteristics
                        textField.Annotation.AppearanceCharacteristics = New PdfAnnotationAppearanceCharacteristics(document)
                        textField.Annotation.AppearanceCharacteristics.BorderColor = Color.Gray
                        textField.Annotation.BorderStyle = New PdfAnnotationBorderStyle(document)
                        textField.Annotation.BorderStyle.Style = PdfAnnotationBorderStyleType.Beveled
                        document.InteractiveForm.AddField(textField, page)
            
            
                        width = 200
                        height = 150
                        ' create a rectangle that defines the field position on PDF page
                        rect = New RectangleF((page.Size.Width - width) / 2, ((page.Size.Height - height) / 3) * 2, width, height)
            
                        ' create a barcode field
                        Dim barcodeField As New PdfInteractiveFormBarcodeField(document, "BarcodeField", barcodeSymbology, rect)
            
                        ' set barcode field value
                        barcodeField.TextValue = textField.TextValue
            
                        ' set the barcode single module width to 0.02 inch
                        barcodeField.ModuleWidth = 0.02F
            
                        ' add the text field to the interactive form of document
                        document.InteractiveForm.Fields.Add(barcodeField)
            
                        ' add annotation, associated with the text field, to the page
                        page.Annotations.Add(barcodeField.Annotation)
            
                        ' create the calculate action of barcode value
                        Dim calculateValueAction As New PdfJavaScriptAction(document, "event.value = this.getField('TextField').value;")
            
                        ' add the barcode field to the calculated fields (calcualtion order) 
                        ' of the document interactive form fields
                        barcodeField.AdditionalActions = New PdfInteractiveFormFieldAdditionalActions(document)
                        barcodeField.AdditionalActions.CalculateValue = calculateValueAction
                        document.InteractiveForm.CalculationOrder.Add(barcodeField)
            
                        ' update (create) field appearances
                        document.InteractiveForm.UpdateAppearances()
            
                        ' save the document
                        document.Save(filename)
                    End Using
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System.Drawing;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.Pdf;
            using Vintasoft.Imaging.Pdf.Tree;
            using Vintasoft.Imaging.Pdf.Tree.Annotations;
            using Vintasoft.Imaging.Pdf.Tree.Fonts;
            using Vintasoft.Imaging.Pdf.Tree.InteractiveForms;
            
            class PdfInteractiveFormBarcodeFieldExample
            {
                /// &lt;summary&gt;
                /// Creates a PDF document with barcode field.
                /// &lt;/summary&gt;
                /// &lt;param name="filename"&gt;The filename.&lt;/param&gt;
                /// &lt;param name="barcodeSymbology"&gt;The barcode symbology.&lt;/param&gt;
                public static void CreateDocumentWithBarcodeField(string filename,
                    BarcodeSymbologyType barcodeSymbology)
                {
                    // create PDF document
                    using (PdfDocument document = new PdfDocument(new PdfFormat("1.7", false, true)))
                    {
                        // create interactive form in PDF document
                        document.InteractiveForm = new PdfDocumentInteractiveForm(document);
                        document.InteractiveForm.CalculationOrder =
                            new PdfInteractiveFormFieldList(document);
            
                        // create an empty page
                        PdfPage page = new PdfPage(document, PaperSizeKind.A4);
                        page.Annotations = new PdfAnnotationList(document);
                        // add page to the document
                        document.Pages.Add(page);
            
            
                        float width = 200;
                        float height = 25;
                        // create a rectangle that defines the field position on PDF page
                        RectangleF rect = new RectangleF(
                            (page.Size.Width - width) / 2,
                            page.Size.Height - height * 8,
                            width, height);
            
                        // create text field (barcode value)
                        PdfInteractiveFormTextField textField = new PdfInteractiveFormTextField(
                            document, "TextField", rect);
                        textField.TextValue = "test";
                        textField.DefaultValue = textField.Value;
                        // set the text default appearance
                        textField.SetTextDefaultAppearance(
                            document.FontManager.GetStandardFont(StandardFontType.TimesRoman), 12, Color.Black);
                        // set the appearance characteristics
                        textField.Annotation.AppearanceCharacteristics =
                            new PdfAnnotationAppearanceCharacteristics(document);
                        textField.Annotation.AppearanceCharacteristics.BorderColor = Color.Gray;
                        textField.Annotation.BorderStyle = new PdfAnnotationBorderStyle(document);
                        textField.Annotation.BorderStyle.Style = PdfAnnotationBorderStyleType.Beveled;
                        document.InteractiveForm.AddField(textField, page);
            
            
                        width = 200;
                        height = 150;
                        // create a rectangle that defines the field position on PDF page
                        rect = new RectangleF(
                            (page.Size.Width - width) / 2,
                            ((page.Size.Height - height) / 3) * 2,
                            width, height);
            
                        // create a barcode field
                        PdfInteractiveFormBarcodeField barcodeField = new PdfInteractiveFormBarcodeField(
                            document, "BarcodeField", barcodeSymbology, rect);
            
                        // set barcode field value
                        barcodeField.TextValue = textField.TextValue;
            
                        // set the barcode single module width to 0.02 inch
                        barcodeField.ModuleWidth = 0.02f;
            
                        // add the text field to the interactive form of document
                        document.InteractiveForm.Fields.Add(barcodeField);
            
                        // add annotation, associated with the text field, to the page
                        page.Annotations.Add(barcodeField.Annotation);
            
                        // create the calculate action of barcode value
                        PdfJavaScriptAction calculateValueAction = new PdfJavaScriptAction(document,
                            @"event.value = this.getField('TextField').value;");
            
                        // add the barcode field to the calculated fields (calcualtion order) 
                        // of the document interactive form fields
                        barcodeField.AdditionalActions = new PdfInteractiveFormFieldAdditionalActions(document);
                        barcodeField.AdditionalActions.CalculateValue = calculateValueAction;
                        document.InteractiveForm.CalculationOrder.Add(barcodeField);
            
                        // update (create) field appearances
                        document.InteractiveForm.UpdateAppearances();
            
                        // save the document
                        document.Save(filename);
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormTextField">
            <summary>
            Provides information about the text interactive form field.
            </summary>
            <example>
            Here is an example that shows how to create PDF document with numeric-only text field:
            <code lang="VB.NET">
            Imports System.Drawing
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.Pdf
            Imports Vintasoft.Imaging.Pdf.Tree
            Imports Vintasoft.Imaging.Pdf.Tree.Annotations
            Imports Vintasoft.Imaging.Pdf.Tree.Fonts
            Imports Vintasoft.Imaging.Pdf.Tree.InteractiveForms
            
            Class PdfInteractiveFormTextFieldExample
                ''' &lt;summary&gt;
                ''' Creates a PDF document with numeric text field.
                ''' &lt;/summary&gt;
                ''' &lt;param name="filename"&gt;The filename.&lt;/param&gt;
                Public Shared Sub CreateDocumentWithNumericTextField(filename As String)
                    ' create PDF document
                    Using document As New PdfDocument()
                        ' create interactive form in PDF document
                        document.InteractiveForm = New PdfDocumentInteractiveForm(document)
            
                        ' specify that the viewer application must construct appearance streams and
                        ' appearance properties for all widget annotations
                        document.InteractiveForm.NeedAppearances = True
            
                        ' create an empty page
                        Dim page As New PdfPage(document, PaperSizeKind.A4)
                        ' add page to the document
                        document.Pages.Add(page)
            
                        Dim width As Single = 100
                        Dim height As Single = 25
                        ' create a rectangle that defines the field position on PDF page
                        Dim rect As New RectangleF((page.Size.Width - width) / 2, ((page.Size.Height - height) / 3) * 2, width, height)
            
                        ' create a text field
                        Dim textField As New PdfInteractiveFormTextField(document, "NumericField", rect, "12345")
            
                        ' create the text value validation method that accepts numbers (0-9 digits) only
                        Dim javaScriptCode As String = "var regex = /[^0-9]/;if(regex.test(event.change)) event.change = '';"
                        Dim action As New PdfJavaScriptAction(document, javaScriptCode)
                        textField.AdditionalActions = New PdfInteractiveFormFieldAdditionalActions(document)
                        ' set the validation action for the AdditionalActions.Keystroke trigger event
                        textField.AdditionalActions.Keystroke = action
            
                        ' set the default appearance of text
                        Dim font As PdfFont = document.FontManager.GetStandardFont(StandardFontType.TimesRoman)
                        textField.SetTextDefaultAppearance(font, 12, Color.Black)
            
                        ' set the border style
                        textField.Annotation.BorderStyle = New PdfAnnotationBorderStyle(document)
                        textField.Annotation.BorderStyle.Style = PdfAnnotationBorderStyleType.Inset
                        textField.Annotation.BorderStyle.Width = 1
            
                        ' set the appearance characteristics
                        textField.Annotation.AppearanceCharacteristics = New PdfAnnotationAppearanceCharacteristics(document)
                        textField.Annotation.AppearanceCharacteristics.BorderColor = Color.Gray
            
                        ' add the text field to the interactive form of document
                        document.InteractiveForm.Fields.Add(textField)
            
                        ' add annotation, associated with the text field, to the page
                        page.Annotations = New PdfAnnotationList(document)
                        page.Annotations.Add(textField.Annotation)
            
                        ' save the document
                        document.Save(filename)
                    End Using
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System.Drawing;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.Pdf;
            using Vintasoft.Imaging.Pdf.Tree;
            using Vintasoft.Imaging.Pdf.Tree.Annotations;
            using Vintasoft.Imaging.Pdf.Tree.Fonts;
            using Vintasoft.Imaging.Pdf.Tree.InteractiveForms;
            
            class PdfInteractiveFormTextFieldExample
            {
                /// &lt;summary&gt;
                /// Creates a PDF document with numeric text field.
                /// &lt;/summary&gt;
                /// &lt;param name="filename"&gt;The filename.&lt;/param&gt;
                public static void CreateDocumentWithNumericTextField(string filename)
                {
                    // create PDF document
                    using (PdfDocument document = new PdfDocument())
                    {
                        // create interactive form in PDF document
                        document.InteractiveForm = new PdfDocumentInteractiveForm(document);
            
                        // specify that the viewer application must construct appearance streams and
                        // appearance properties for all widget annotations
                        document.InteractiveForm.NeedAppearances = true;
            
                        // create an empty page
                        PdfPage page = new PdfPage(document, PaperSizeKind.A4);
                        // add page to the document
                        document.Pages.Add(page);
            
                        float width = 100;
                        float height = 25;
                        // create a rectangle that defines the field position on PDF page
                        RectangleF rect = new RectangleF(
                            (page.Size.Width - width) / 2,
                            ((page.Size.Height - height) / 3) * 2,
                            width, height);
            
                        // create a text field
                        PdfInteractiveFormTextField textField =
                            new PdfInteractiveFormTextField(document, "NumericField", rect, "12345");
            
                        // create the text value validation method that accepts numbers (0-9 digits) only
                        string javaScriptCode = 
                            "var regex = /[^0-9]/;if(regex.test(event.change)) event.change = '';";
                        PdfJavaScriptAction action = new PdfJavaScriptAction(document, javaScriptCode);
                        textField.AdditionalActions = new PdfInteractiveFormFieldAdditionalActions(document);
                        // set the validation action for the AdditionalActions.Keystroke trigger event
                        textField.AdditionalActions.Keystroke = action;
            
                        // set the default appearance of text
                        PdfFont font = document.FontManager.GetStandardFont(StandardFontType.TimesRoman);
                        textField.SetTextDefaultAppearance(font, 12, Color.Black);
            
                        // set the border style
                        textField.Annotation.BorderStyle = new PdfAnnotationBorderStyle(document);
                        textField.Annotation.BorderStyle.Style = PdfAnnotationBorderStyleType.Inset;
                        textField.Annotation.BorderStyle.Width = 1;
                        
                        // set the appearance characteristics
                        textField.Annotation.AppearanceCharacteristics = new PdfAnnotationAppearanceCharacteristics(document);
                        textField.Annotation.AppearanceCharacteristics.BorderColor = Color.Gray;
            
                        // add the text field to the interactive form of document
                        document.InteractiveForm.Fields.Add(textField);
            
                        // add annotation, associated with the text field, to the page
                        page.Annotations = new PdfAnnotationList(document);
                        page.Annotations.Add(textField.Annotation);
            
                        // save the document
                        document.Save(filename);
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormField">
            <summary>
            Provides information about interactive form field.
            </summary>
            <remarks>
            Interactive Form Field is a node of interactive form tree. 
            Field node can be terminal and not terminal (<see cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormField.IsTerminalField" />):
            <ul>
            <li>Terminal field contains field value, field default value, 
            field properties and widget annotation (<see cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormField.Annotation" />) 
            that describes interactive form field appearance.</li>
            <li>Not terminal field uses to create group of interactive 
            form fields (<see cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormField.Kids" />).</li>
            </ul>
            <br />
            Interactive forms support four special types of actions in addition:
            <ul>
            <li><see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfJavaScriptAction" /></li>
            <li><see cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfResetFormAction" /></li>
            <li><see cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfSubmitFormAction" /></li>
            <li><see cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormImportDataAction" /></li>
            </ul>
            <br />
            Interactive form field and annotation may include 
            property that specifies an additional-actions 
            (<see cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormField.AdditionalActions" />, <see cref="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotation.AdditionalActions" />)
            that extends the set of events that can trigger the execution of an action.
            This trigger events may be used to create verification algorithms, 
            calculated fields and custom fields interaction logic.
            </remarks>
            <example>
            Here is an example that shows how to create PDF document with calculated text field:
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Creates a PDF document with calculated interactive form field.
            ''' &lt;/summary&gt;
            ''' &lt;param name="filename"&gt;The filename.&lt;/param&gt;
            Public Shared Sub CreateDocumentWithCalculatedInteractiveFormField(filename As String)
                ' create PDF document
                Using document As New PdfDocument()
                    ' create interactive form in PDF document
                    document.InteractiveForm = New PdfDocumentInteractiveForm(document)
            
                    ' specify that the viewer application must construct appearance streams and
                    ' appearance properties for all widget annotations
                    document.InteractiveForm.NeedAppearances = True
            
                    ' font and font size
                    Dim fontSize As Single = 12
                    Dim font As PdfFont = document.FontManager.GetStandardFont(StandardFontType.TimesRoman)
            
                    ' create an empty page
                    Dim page As New PdfPage(document, PaperSizeKind.A4)
                    ' add page to the document
                    document.Pages.Add(page)
            
                    Dim width As Single = 60
                    Dim height As Single = 40
                    ' create a rectangle that defines the object (first field) position on PDF page
                    Dim rect As New RectangleF((page.Size.Width - width * 5) / 2, ((page.Size.Height - height) / 3) * 2, width, height)
            
                    ' open PdfGraphics on page
                    Using graphics As PdfGraphics = page.GetGraphics()
                        ' create calculator field: group of three fields
                        Dim calculator As New PdfInteractiveFormField(document, "Calculator")
                        calculator.SetTextDefaultAppearance(font, fontSize * 1.5F, Color.Black)
                        calculator.TextQuadding = TextQuaddingType.Centered
            
                        ' create the border style
                        Dim borderStyle As New PdfAnnotationBorderStyle(document)
                        borderStyle.Style = PdfAnnotationBorderStyleType.Inset
                        borderStyle.Width = 1
            
                        ' create the appearance characteristics
                        Dim appearanceCharacteristics As New PdfAnnotationAppearanceCharacteristics(document)
                        appearanceCharacteristics.BorderColor = Color.Gray
            
                        ' create the left text box
                        Dim textField As New PdfInteractiveFormTextField(document, "Left", rect, "2")
                        textField.DefaultValue = textField.Value
                        textField.Annotation.BorderStyle = borderStyle
                        textField.Annotation.AppearanceCharacteristics = appearanceCharacteristics
                        ' add the left text box to the calculator
                        calculator.Kids.Add(textField)
            
                        ' update the rectangle that defines the object position on PDF page
                        rect.X += rect.Width
            
                        ' draw the symbol '+' on the page
                        graphics.DrawString("+", font, fontSize * 1.5F, New PdfBrush(Color.Black), rect, PdfContentAlignment.Center, _
                            False)
            
                        ' update the rectangle that defines the object position on PDF page
                        rect.X += rect.Width
            
                        ' create the right text box
                        textField = New PdfInteractiveFormTextField(document, "Right", rect, "3")
                        textField.DefaultValue = textField.Value
                        textField.Annotation.BorderStyle = borderStyle
                        textField.Annotation.AppearanceCharacteristics = appearanceCharacteristics
                        ' add the right text box to the calculator
                        calculator.Kids.Add(textField)
            
                        ' update the rectangle that defines the object position on PDF page
                        rect.X += rect.Width
            
                        ' draw the symbol '=' on the page
                        graphics.DrawString("=", font, fontSize * 1.5F, New PdfBrush(Color.Black), rect, PdfContentAlignment.Center, _
                            False)
            
                        ' create the calculator program written on JavaScript
                        Dim javaScriptCode As New StringBuilder()
                        javaScriptCode.Append("var left = this.getField('Calculator.Left');")
                        javaScriptCode.Append("var right = this.getField('Calculator.Right');")
                        javaScriptCode.Append("var result = this.getField('Calculator.Result');")
                        javaScriptCode.Append("result.value = left.value + right.value;")
                        Dim calculatorProgram As New PdfJavaScriptAction(document, javaScriptCode.ToString())
            
                        ' update the rectangle that defines the object position on PDF page
                        rect.X += rect.Width
            
                        ' create the result text box
                        textField = New PdfInteractiveFormTextField(document, "Result", rect)
                        textField.IsReadOnly = True
                        textField.Annotation.BorderStyle = borderStyle
                        textField.Annotation.AppearanceCharacteristics = appearanceCharacteristics
                        ' set a program that will calculate value of result field
                        textField.AdditionalActions = New PdfInteractiveFormFieldAdditionalActions(document)
                        textField.AdditionalActions.CalculateValue = calculatorProgram
                        ' specify that calcualtor program must be executed when page is opened
                        textField.Annotation.AdditionalActions.PageOpen = calculatorProgram
                        ' add the result text box to the calculator
                        calculator.Kids.Add(textField)
            
                        ' add result field to the calculated fields (calcualtion order) 
                        ' of the document interactive form fields
                        document.InteractiveForm.CalculationOrder = New PdfInteractiveFormFieldList(document)
                        document.InteractiveForm.CalculationOrder.Add(textField)
            
                        ' add field group to the document
                        document.InteractiveForm.Fields.Add(calculator)
            
                        ' add annotations, associated with field group, to the page
                        page.Annotations = New PdfAnnotationList(document)
                        page.Annotations.AddRange(calculator.GetAnnotations())
            
                        ' update appearance of field group
                        calculator.UpdateAppearance()
                    End Using
            
                    ' save the document
                    document.Save(filename)
                End Using
            End Sub
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Creates a PDF document with calculated interactive form field.
            /// &lt;/summary&gt;
            /// &lt;param name="filename"&gt;The filename.&lt;/param&gt;
            public static void CreateDocumentWithCalculatedInteractiveFormField(string filename)
            {
                // create PDF document
                using (PdfDocument document = new PdfDocument())
                {
                    // create interactive form in PDF document
                    document.InteractiveForm = new PdfDocumentInteractiveForm(document);
            
                    // specify that the viewer application must construct appearance streams and
                    // appearance properties for all widget annotations
                    document.InteractiveForm.NeedAppearances = true;
            
                    // font and font size
                    float fontSize = 12;
                    PdfFont font = document.FontManager.GetStandardFont(StandardFontType.TimesRoman);
            
                    // create an empty page
                    PdfPage page = new PdfPage(document, PaperSizeKind.A4);
                    // add page to the document
                    document.Pages.Add(page);
            
                    float width = 60;
                    float height = 40;
                    // create a rectangle that defines the object (first field) position on PDF page
                    RectangleF rect = new RectangleF(
                        (page.Size.Width - width * 5) / 2,
                        ((page.Size.Height - height) / 3) * 2,
                        width, height);
            
                    // open PdfGraphics on page
                    using (PdfGraphics graphics = page.GetGraphics())
                    {
                        // create calculator field: group of three fields
                        PdfInteractiveFormField calculator =
                            new PdfInteractiveFormField(document, "Calculator");
                        calculator.SetTextDefaultAppearance(font, fontSize * 1.5f, Color.Black);
                        calculator.TextQuadding = TextQuaddingType.Centered;
            
                        // create the border style
                        PdfAnnotationBorderStyle borderStyle = new PdfAnnotationBorderStyle(document);
                        borderStyle.Style = PdfAnnotationBorderStyleType.Inset;
                        borderStyle.Width = 1;
            
                        // create the appearance characteristics
                        PdfAnnotationAppearanceCharacteristics appearanceCharacteristics =
                            new PdfAnnotationAppearanceCharacteristics(document);
                        appearanceCharacteristics.BorderColor = Color.Gray;
            
                        // create the left text box
                        PdfInteractiveFormTextField textField =
                            new PdfInteractiveFormTextField(document, "Left", rect, "2");
                        textField.DefaultValue = textField.Value;
                        textField.Annotation.BorderStyle = borderStyle;
                        textField.Annotation.AppearanceCharacteristics = appearanceCharacteristics;
                        // add the left text box to the calculator
                        calculator.Kids.Add(textField);
            
                        // update the rectangle that defines the object position on PDF page
                        rect.X += rect.Width;
            
                        // draw the symbol '+' on the page
                        graphics.DrawString("+", font, fontSize * 1.5f,
                            new PdfBrush(Color.Black), rect, PdfContentAlignment.Center, false);
            
                        // update the rectangle that defines the object position on PDF page
                        rect.X += rect.Width;
            
                        // create the right text box
                        textField = new PdfInteractiveFormTextField(document, "Right", rect, "3");
                        textField.DefaultValue = textField.Value;
                        textField.Annotation.BorderStyle = borderStyle;
                        textField.Annotation.AppearanceCharacteristics = appearanceCharacteristics;
                        // add the right text box to the calculator
                        calculator.Kids.Add(textField);
            
                        // update the rectangle that defines the object position on PDF page
                        rect.X += rect.Width;
            
                        // draw the symbol '=' on the page
                        graphics.DrawString("=", font, fontSize * 1.5f,
                            new PdfBrush(Color.Black), rect, PdfContentAlignment.Center, false);
            
                        // create the calculator program written on JavaScript
                        StringBuilder javaScriptCode = new StringBuilder();
                        javaScriptCode.Append("var left = this.getField('Calculator.Left');");
                        javaScriptCode.Append("var right = this.getField('Calculator.Right');");
                        javaScriptCode.Append("var result = this.getField('Calculator.Result');");
                        javaScriptCode.Append("result.value = left.value + right.value;");
                        PdfJavaScriptAction calculatorProgram =
                            new PdfJavaScriptAction(document, javaScriptCode.ToString());
            
                        // update the rectangle that defines the object position on PDF page
                        rect.X += rect.Width;
            
                        // create the result text box
                        textField = new PdfInteractiveFormTextField(document, "Result", rect);
                        textField.IsReadOnly = true;
                        textField.Annotation.BorderStyle = borderStyle;
                        textField.Annotation.AppearanceCharacteristics = appearanceCharacteristics;
                        // set a program that will calculate value of result field
                        textField.AdditionalActions = new PdfInteractiveFormFieldAdditionalActions(document);
                        textField.AdditionalActions.CalculateValue = calculatorProgram;
                        // specify that calcualtor program must be executed when page is opened
                        textField.Annotation.AdditionalActions.PageOpen = calculatorProgram;
                        // add the result text box to the calculator
                        calculator.Kids.Add(textField);
            
                        // add result field to the calculated fields (calcualtion order) 
                        // of the document interactive form fields
                        document.InteractiveForm.CalculationOrder = new PdfInteractiveFormFieldList(document);
                        document.InteractiveForm.CalculationOrder.Add(textField);
            
                        // add field group to the document
                        document.InteractiveForm.Fields.Add(calculator);
            
                        // add annotations, associated with field group, to the page
                        page.Annotations = new PdfAnnotationList(document);
                        page.Annotations.AddRange(calculator.GetAnnotations());
            
                        // update appearance of field group
                        calculator.UpdateAppearance();
                    }
            
                    // save the document
                    document.Save(filename);
                }
            }
            </code>
            </example>
            <seealso cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormPushButtonField" />
            <seealso cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormCheckBoxField" />
            <seealso cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormRadioButtonGroupField" />
            <seealso cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormComboBoxField" />
            <seealso cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormListBoxField" />
            <seealso cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormTextField" />
            <seealso cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormBarcodeField" />
            <seealso cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormSignatureField" />
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormField.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormField" /> class.
            </summary>
            <param name="document">Parent PDF document.</param>
            <param name="name">Partial field name.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormField.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,System.String,System.Collections.Generic.IEnumerable{Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormField})">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormField" /> class.
            </summary>
            <param name="document">Parent PDF document.</param>
            <param name="name">Partial field name.</param>
            <param name="kids">Immediate children of the field.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormField.GetAvailableAppearanceStateNames">
            <summary>
            Returns a string array that contains available normal appearance 
            state names of <see cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormField.Annotation">widget annotation</see>.
            </summary>
            <seealso cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormField.Annotation" />
            <seealso cref="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotation.Appearances" />
            <seealso cref="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationAppearances.NormalStates" />
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormField.UpdateAppearance">
            <summary>
            Updates an annotation appearance using the properties of the default appearance.
            </summary>
            <seealso cref="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormField.SetTextDefaultAppearance(Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFont,System.Single,System.Drawing.Color)" />
            <seealso cref="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfWidgetAnnotation.AppearanceCharacteristics" />
            <seealso cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfDocumentInteractiveForm.NeedAppearances" />
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormField.SetTextDefaultAppearance(Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFont,System.Single,System.Drawing.Color)">
            <summary>
            Sets the properties of text default appearance.
            </summary>
            <param name="font">A font of variable text.</param>
            <param name="fontSize">A font size of variable text.</param>
            <param name="textColor">A color of variable text.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormField.GetAnnotations">
            <summary>
            Returns an array of <see cref="T:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotation" /> that contains all widget 
            annotations of interactive form field tree.
            This field is used as a root of interactive form field tree.
            </summary>
            <returns>Array of <see cref="T:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotation" /> instances.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormField.ResetValue">
            <summary>
            Resets the field value and children field values to their default values.
            </summary>
            <remarks>
            Resets fields to their default values; that is, it sets the value in the field default value.<br />
            Field value property is removed if no default value is defined for a field.<br />
            For fields that can have no value (such as pushbuttons), the action has no effect.
            </remarks>
            <seealso cref="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormField.SetDefaultValueFromValue" />
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormField.SetDefaultValueFromValue">
            <summary>
            Sets the field default value and children field default values to their current values.
            </summary>
            <remarks>
            Resets fields to their default values; that is, it sets the value in the field default value.<br />
            <br />
            Field value property is removed if no default value is defined for a field.<br />
            <br />
            For fields that can have no value (such as pushbuttons), the action has no effect.
            </remarks>
            <seealso cref="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormField.ResetValue" />
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormField.Remove">
            <summary>
            Deletes the field and all children from interactive form tree,
            also removes all widget annotations of deleted subtree from annotations of PDF pages.
            </summary>
            <example>
            Here is an example that demonstrates how to remove a signature from PDF document:
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Removes all digital signatures from PDF document.
            ''' &lt;/summary&gt;
            ''' &lt;param name="pdfFilename"&gt;The filename of PDF document.&lt;/param&gt;
            Public Shared Sub RemoveDigitalSignaturesFromPdfDocument(pdfFilename As String)
                ' open PDF document
                Using document As New PdfDocument(pdfFilename)
                    ' if PDF document has PDF interactive form
                    If document.InteractiveForm IsNot Nothing Then
                        ' get reference to the interactive form of PDF document
                        Dim form As PdfDocumentInteractiveForm = document.InteractiveForm
            
                        ' get all signature fields of PDF document
                        Dim signatureFields As PdfInteractiveFormSignatureField() = form.GetSignatureFields()
            
                        ' for each signature fields
                        For Each field As PdfInteractiveFormField In signatureFields
                            ' remove signature field
                            field.Remove()
                        Next
            
                        ' pack PDF document
                        document.Pack()
                    End If
                End Using
            End Sub
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Removes all digital signatures from PDF document.
            /// &lt;/summary&gt;
            /// &lt;param name="pdfFilename"&gt;The filename of PDF document.&lt;/param&gt;
            public static void RemoveDigitalSignaturesFromPdfDocument(string pdfFilename)
            {
                // open PDF document
                using (PdfDocument document = new PdfDocument(pdfFilename))
                {
                    // if PDF document has PDF interactive form
                    if (document.InteractiveForm != null)
                    {
                        // get reference to the interactive form of PDF document
                        PdfDocumentInteractiveForm form = document.InteractiveForm;
                        
                        // get all signature fields of PDF document
                        PdfInteractiveFormSignatureField[] signatureFields = form.GetSignatureFields();
                        
                        // for each signature fields
                        foreach (PdfInteractiveFormField field in signatureFields)
                        {
                            // remove signature field
                            field.Remove();
                        }
                        
                        // pack PDF document
                        document.Pack();
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormField.AdditionalActions">
            <summary>
            Gets or sets the additional actions defining the behavior of the field
            in response to various trigger events.
            </summary>
            <example><see cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfDocumentInteractiveForm.CalculationOrder" /></example>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormField.TextQuadding">
            <summary>
            Gets or sets the form of quadding (justification) to be used
            in displaying the text of the field.
            </summary>
            <value>
            Default value is <see cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.TextQuaddingType" />.LeftJustified.
            </value>
            <remarks>
            <b>This property is inheritable.</b>
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormField.Parent">
            <summary>
            Gets a parent filed of the field.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormField.Annotation">
            <summary>
            Gets a widget annotation (visual appearance) of the field.
            </summary>
            <remarks>
            This property is available only if <see cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormField.IsTerminalField" /> is <b>false</b>.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormField.Kids">
            <summary>
            Gets or sets a list of immediate children of the field.
            </summary>
            <seealso cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormField.IsTerminalField" />
            <remarks>
            This property is available only if <see cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormField.IsTerminalField" /> is <b>false</b>.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormField.IsTerminalField">
            <summary>
            Gets or sets a value indicating whether the field is terminal field (leaf node in fields tree).
            </summary>
            <value>
            <b>true</b> - the field is terminal field (leaf node in fields tree);
            <b>false</b> - the field is NOT terminal field.
            </value>
            <seealso cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormField.Kids" />
            <seealso cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormField.Annotation" />
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormField.PartialName">
            <summary>
            Gets or sets a partial name of the field.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if
            value contains a dot ('.') character.</exception>
            <seealso cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormField.FullyQualifiedName" />
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormField.FullyQualifiedName">
            <summary>
            Gets a fully qualified name of the field.
            </summary>
            <remarks>
            The fully qualified field name is not explicitly defined but is constructed
            from the partial field names of the field and all of its ancestors.
            For a field with no parent, the partial and fully qualified names are the same.
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormField.PartialName" />
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormField.UserInterfaceName">
            <summary>
            Gets or sets a user interface name of the field.
            </summary>
            <remarks>
            An alternate field name to be used in place of the actual field name
            wherever the field must be identified in the user interface 
            (such as in error or status messages referring to the field). 
            This text is also useful when extracting the document's contents 
            in support of accessibility to users with disabilities or for other purposes.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormField.MappingName">
            <summary>
            Gets or sets a mapping field name to be used when exporting 
            interactive form field data from the document.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormField.IsReadOnly">
            <summary>
            Gets or sets a value indicating whether the field is read-only.
            </summary>
            <value>
            <b>true</b> - the user may NOT change the value of the field;
            any associated widget annotations will not interact with 
            the user, i.e. they will not respond to mouse clicks or 
            change their appearance in response to mouse motions.<br />
            <b>false</b> - the user may change the value of the field.<br />
            <br />
            <b>Value of this property is a part of inheritable flag group.</b><br />
            Property value is taken from the field flags
            if at least one flag is specified explicitly.<br />
            Property value is taken from the field flags of the field parent in the field hierarchy
            if  not one flag is specified explicitly.
            </value>
            <remarks>
            This flag is useful for fields whose values are computed or imported from a database.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormField.IsRequired">
            <summary>
            Gets or sets a value indicating whether the field must have a value
            at the time it is exported by a submit-form action.
            </summary>
            <value>
            <b>true</b> - the field must have a value at the time it is exported by a submit-form action;
            <b>false</b> - the field value can be not specified at the time it is exported
            by a submit-form action.<br />
            <br />
            <b>Value of this property is a part of inheritable flag group.</b><br />
            Property value is taken from the field flags
            if at least one flag is specified explicitly.<br />
            Property value is taken from the field flags of the field parent in the field hierarchy
            if  not one flag is specified explicitly.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormField.IsNoExport">
            <summary>
            Gets or sets a value indicating whether the field must not be 
            exported by a submit-form action.
            </summary>
            <value>
            <b>true</b> - the field must NOT be exported by a submit-form action;
            <b>false</b> - the field must be exported by a submit-form action.<br />
            <br />
            <b>Value of this property is a part of inheritable flag group.</b><br />
            Property value is taken from the field flags
            if at least one flag is specified explicitly.<br />
            Property value is taken from the field flags of the field parent in the field hierarchy
            if  not one flag is specified explicitly.
            </value>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormTextField.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormTextField" /> class.
            </summary>
            <param name="document">Parent document of this field.</param>
            <param name="name">Partial field name.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormTextField.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,System.String,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormTextField" /> class.
            </summary>
            <param name="document">Parent document of this field.</param>
            <param name="name">Partial field name.</param>
            <param name="rect">An annotation rectangle, defining the location of annotation on 
            the page in default user space units.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormTextField.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,System.String,System.Drawing.RectangleF,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormTextField" /> class.
            </summary>
            <param name="document">Parent document of this field.</param>
            <param name="name">Partial field name.</param>
            <param name="rect">An annotation rectangle, defining the location of annotation on 
            the page in default user space units.</param>
            <param name="text">A value of text field.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormTextField.CreateAppearanceGraphics">
            <summary>
            Creates a <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" /> on annotation appearance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" /> instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormTextField.ResetValue">
            <summary>
            Resets field value to their default value.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormTextField.Value">
            <summary>
            Gets or sets a value of text field.
            </summary>
            <remarks>
            <b>This property is inheritable.</b>
            </remarks>
            <seealso cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormTextFieldStringValue" />
            <seealso cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormTextFieldStreamValue" />
            <seealso cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormTextFieldFileValue" />
            <seealso cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormTextField.TextValue" />
            <seealso cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormTextField.DefaultValue" />
            <example>
            Here is an example that shows how to create PDF document with numeric-only text field:
            <code lang="VB.NET">
            Imports System.Drawing
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.Pdf
            Imports Vintasoft.Imaging.Pdf.Tree
            Imports Vintasoft.Imaging.Pdf.Tree.Annotations
            Imports Vintasoft.Imaging.Pdf.Tree.Fonts
            Imports Vintasoft.Imaging.Pdf.Tree.InteractiveForms
            
            Class PdfInteractiveFormTextFieldExample
                ''' &lt;summary&gt;
                ''' Creates a PDF document with numeric text field.
                ''' &lt;/summary&gt;
                ''' &lt;param name="filename"&gt;The filename.&lt;/param&gt;
                Public Shared Sub CreateDocumentWithNumericTextField(filename As String)
                    ' create PDF document
                    Using document As New PdfDocument()
                        ' create interactive form in PDF document
                        document.InteractiveForm = New PdfDocumentInteractiveForm(document)
            
                        ' specify that the viewer application must construct appearance streams and
                        ' appearance properties for all widget annotations
                        document.InteractiveForm.NeedAppearances = True
            
                        ' create an empty page
                        Dim page As New PdfPage(document, PaperSizeKind.A4)
                        ' add page to the document
                        document.Pages.Add(page)
            
                        Dim width As Single = 100
                        Dim height As Single = 25
                        ' create a rectangle that defines the field position on PDF page
                        Dim rect As New RectangleF((page.Size.Width - width) / 2, ((page.Size.Height - height) / 3) * 2, width, height)
            
                        ' create a text field
                        Dim textField As New PdfInteractiveFormTextField(document, "NumericField", rect, "12345")
            
                        ' create the text value validation method that accepts numbers (0-9 digits) only
                        Dim javaScriptCode As String = "var regex = /[^0-9]/;if(regex.test(event.change)) event.change = '';"
                        Dim action As New PdfJavaScriptAction(document, javaScriptCode)
                        textField.AdditionalActions = New PdfInteractiveFormFieldAdditionalActions(document)
                        ' set the validation action for the AdditionalActions.Keystroke trigger event
                        textField.AdditionalActions.Keystroke = action
            
                        ' set the default appearance of text
                        Dim font As PdfFont = document.FontManager.GetStandardFont(StandardFontType.TimesRoman)
                        textField.SetTextDefaultAppearance(font, 12, Color.Black)
            
                        ' set the border style
                        textField.Annotation.BorderStyle = New PdfAnnotationBorderStyle(document)
                        textField.Annotation.BorderStyle.Style = PdfAnnotationBorderStyleType.Inset
                        textField.Annotation.BorderStyle.Width = 1
            
                        ' set the appearance characteristics
                        textField.Annotation.AppearanceCharacteristics = New PdfAnnotationAppearanceCharacteristics(document)
                        textField.Annotation.AppearanceCharacteristics.BorderColor = Color.Gray
            
                        ' add the text field to the interactive form of document
                        document.InteractiveForm.Fields.Add(textField)
            
                        ' add annotation, associated with the text field, to the page
                        page.Annotations = New PdfAnnotationList(document)
                        page.Annotations.Add(textField.Annotation)
            
                        ' save the document
                        document.Save(filename)
                    End Using
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System.Drawing;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.Pdf;
            using Vintasoft.Imaging.Pdf.Tree;
            using Vintasoft.Imaging.Pdf.Tree.Annotations;
            using Vintasoft.Imaging.Pdf.Tree.Fonts;
            using Vintasoft.Imaging.Pdf.Tree.InteractiveForms;
            
            class PdfInteractiveFormTextFieldExample
            {
                /// &lt;summary&gt;
                /// Creates a PDF document with numeric text field.
                /// &lt;/summary&gt;
                /// &lt;param name="filename"&gt;The filename.&lt;/param&gt;
                public static void CreateDocumentWithNumericTextField(string filename)
                {
                    // create PDF document
                    using (PdfDocument document = new PdfDocument())
                    {
                        // create interactive form in PDF document
                        document.InteractiveForm = new PdfDocumentInteractiveForm(document);
            
                        // specify that the viewer application must construct appearance streams and
                        // appearance properties for all widget annotations
                        document.InteractiveForm.NeedAppearances = true;
            
                        // create an empty page
                        PdfPage page = new PdfPage(document, PaperSizeKind.A4);
                        // add page to the document
                        document.Pages.Add(page);
            
                        float width = 100;
                        float height = 25;
                        // create a rectangle that defines the field position on PDF page
                        RectangleF rect = new RectangleF(
                            (page.Size.Width - width) / 2,
                            ((page.Size.Height - height) / 3) * 2,
                            width, height);
            
                        // create a text field
                        PdfInteractiveFormTextField textField =
                            new PdfInteractiveFormTextField(document, "NumericField", rect, "12345");
            
                        // create the text value validation method that accepts numbers (0-9 digits) only
                        string javaScriptCode = 
                            "var regex = /[^0-9]/;if(regex.test(event.change)) event.change = '';";
                        PdfJavaScriptAction action = new PdfJavaScriptAction(document, javaScriptCode);
                        textField.AdditionalActions = new PdfInteractiveFormFieldAdditionalActions(document);
                        // set the validation action for the AdditionalActions.Keystroke trigger event
                        textField.AdditionalActions.Keystroke = action;
            
                        // set the default appearance of text
                        PdfFont font = document.FontManager.GetStandardFont(StandardFontType.TimesRoman);
                        textField.SetTextDefaultAppearance(font, 12, Color.Black);
            
                        // set the border style
                        textField.Annotation.BorderStyle = new PdfAnnotationBorderStyle(document);
                        textField.Annotation.BorderStyle.Style = PdfAnnotationBorderStyleType.Inset;
                        textField.Annotation.BorderStyle.Width = 1;
                        
                        // set the appearance characteristics
                        textField.Annotation.AppearanceCharacteristics = new PdfAnnotationAppearanceCharacteristics(document);
                        textField.Annotation.AppearanceCharacteristics.BorderColor = Color.Gray;
            
                        // add the text field to the interactive form of document
                        document.InteractiveForm.Fields.Add(textField);
            
                        // add annotation, associated with the text field, to the page
                        page.Annotations = new PdfAnnotationList(document);
                        page.Annotations.Add(textField.Annotation);
            
                        // save the document
                        document.Save(filename);
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormTextField.TextValue">
            <summary>
            Gets or sets the text value of text field <see cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormTextField.Value" />.
            </summary>
            <seealso cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormTextFieldValue.TextValue" />
            <seealso cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormTextField.Value" />
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormTextField.DefaultValue">
            <summary>
            Gets or sets a default value of text field.
            </summary>
            <remarks>
            <b>This property is inheritable.</b>
            </remarks>
            <seealso cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormTextFieldStringValue" />
            <seealso cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormTextFieldStreamValue" />
            <seealso cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormTextFieldFileValue" />
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormTextField.MaxLength">
            <summary>
            Gets or sets the maximum length of the field text, in characters.
            </summary>
            <remarks>
            <b>This property is inheritable.</b>
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormTextField.IsMultiline">
            <summary>
            Gets or sets a value indicating whether this field is multiline.
            </summary>
            <value>
            <b>true</b> - the field can contain multiple lines of text;
            <b>false</b> - the field's text is restricted to a single line.<br />
            <br />
            <b>Value of this property is a part of inheritable flag group.</b><br />
            Property value is taken from the field flags
            if at least one flag is specified explicitly.<br />
            Property value is taken from the field flags of the field parent in the field hierarchy
            if  not one flag is specified explicitly.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormTextField.IsPassword">
            <summary>
            Gets or sets a value indicating whether this field is password.
            </summary>
            <value>
            <b>true</b> - the field is intended for entering a secure password 
            that should not be echoed visibly to the screen;<br />
            <b>false</b> - the field does NOT contain password.<br />
            <br />
            <b>Value of this property is a part of inheritable flag group.</b><br />
            Property value is taken from the field flags
            if at least one flag is specified explicitly.<br />
            Property value is taken from the field flags of the field parent in the field hierarchy
            if  not one flag is specified explicitly.
            </value>
            <remarks>
            Characters typed from the keyboard should instead be echoed in some 
            unreadable form, such as asterisks or bullet characters.
            To protect password confidentiality, viewer applications 
            should never store the value of the text field in the PDF 
            file if this flag is set.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormTextField.IsFileSelect">
            <summary>
            Gets or sets a value indicating whether this field is file select.
            </summary>
            <value>
            <b>true</b> - the text entered in the field represents the 
            pathname of a file whose contents are to be submitted as the 
            value of the field;<br />
            <b>false</b> - the field is NOT file select.<br />
            <br />
            <b>Value of this property is a part of inheritable flag group.</b><br />
            Property value is taken from the field flags
            if at least one flag is specified explicitly.<br />
            Property value is taken from the field flags of the field parent in the field hierarchy
            if  not one flag is specified explicitly.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormTextField.IsNotSpellChecked">
            <summary>
            Gets or sets a value indicating whether this field is not spell-checked.
            </summary>
            <value>
            <b>true</b> - text entered in the field is NOT spell-checked;
            <b>false</b> - text entered in the field is spell-checked.<br />
            <br />
            <b>Value of this property is a part of inheritable flag group.</b><br />
            Property value is taken from the field flags
            if at least one flag is specified explicitly.<br />
            Property value is taken from the field flags of the field parent in the field hierarchy
            if  not one flag is specified explicitly.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormTextField.IsNotScroll">
            <summary>
            Gets or sets a value indicating whether this field is not scrollable.
            </summary>
            <value>
            <b>true</b> - the field does not scroll (horizontally for single-line fields, 
            vertically for multiple-line fields) to accommodate more text than fits within
            its annotation rectangle. Once the field is full, no further text is accepted.<br />
            <b>false</b> - the field scrolls (horizontally for single-line fields, 
            vertically for multiple-line fields) to accommodate more text than fits within
            its annotation rectangle.<br />
            <br />
            <b>Value of this property is a part of inheritable flag group.</b><br />
            Property value is taken from the field flags
            if at least one flag is specified explicitly.<br />
            Property value is taken from the field flags of the field parent in the field hierarchy
            if  not one flag is specified explicitly.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormTextField.IsComb">
            <summary>
            Gets or sets a value indicating whether the field is comb.
            </summary>
            <value>
            <b>true</b> - the field is automatically divided 
            into as many equally spaced positions, or combs, as 
            the value of <see cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormTextField.MaxLength" />, and the text is laid out into those combs.<br />
            <b>false</b> - the field is not divided into combs.<br />
            <br />
            <b>Value of this property is a part of inheritable flag group.</b><br />
            Property value is taken from the field flags
            if at least one flag is specified explicitly.<br />
            Property value is taken from the field flags of the field parent in the field hierarchy
            if  not one flag is specified explicitly.
            </value>
            <remarks>
            Property value has effect only if <see cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormTextField.MaxLength" /> is less than 0,
            <see cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormTextField.IsMultiline" />, <see cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormTextField.IsPassword" /> and <see cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormTextField.IsFileSelect" /> are
            set to <b>false</b>.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormBarcodeField.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,System.String,Vintasoft.Imaging.Pdf.Tree.InteractiveForms.BarcodeSymbologyType,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormBarcodeField" /> class.
            </summary>
            <param name="document">Parent document of this field.</param>
            <param name="fieldName">Partial field name.</param>
            <param name="barcodeSymbology">Barcode symbology.</param>
            <param name="rect">An annotation rectangle, defining the location of annotation on 
            the page in default user space units.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormBarcodeField.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,System.String,Vintasoft.Imaging.Pdf.Tree.InteractiveForms.BarcodeSymbologyType,System.Single,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormBarcodeField" /> class.
            </summary>
            <param name="document">Parent document of this field.</param>
            <param name="fieldName">Partial field name.</param>
            <param name="barcodeSymbology">Barcode symbology.</param>
            <param name="resolution">Resolution, in dots-per-inch (dpi), at which
            the barcode object shall be rendered.</param>
            <param name="rect">An annotation rectangle, defining the location of annotation on 
            the page in default user space units.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormBarcodeField.UpdateAppearance">
            <summary>
            Updates the barcode field annotation appearance.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormBarcodeField.Resolution">
            <summary>
            Gets or sets the resolution, in dots-per-inch (dpi), at which
            the barcode object shall be rendered.
            </summary>
            <value>
            Default value is <b>300</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormBarcodeField.ModuleWidth">
            <summary>
            Gets or sets the width, in inches, of single barcode module.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormBarcodeField.ModuleXYRatio">
            <summary>
            Gets or sets the X/Y ratio of single barcode module.
            </summary>
            <value>
            For PDF417, the acceptable ratio range shall be from 1 to 4. 
            For QRCode and DataMatrix, this ratio shall always be 1.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormBarcodeField.DataPreparationSteps">
            <summary>
            Gets or sets the data preparation steps before barcode value encoding.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormBarcodeField.BarcodeSymbology">
            <summary>
            Gets or sets the barcode symbology.
            </summary>
            <value>
            The barcode symbology.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormBarcodeField.ErrorCorrectionCoefficient">
            <summary>
            Gets or sets an integer value representing the error correction coefficient.
            </summary>
            <value>
            For PDF417, shall be from 0 for 'Level0' to 8 for 'Level8'. <br />
            For QRCode, shall be from 0 to 3 (0 for 'L', 1 for 'M', 2 for 'Q', and 3 for 'H').
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormPushButtonField">
            <summary>
            Provides information about interactive form field that defines push button.
            </summary>
            <example>
            Here is an example that shows how to create PDF document with push button field:
            <code lang="VB.NET">
            Imports System.Drawing
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.Pdf
            Imports Vintasoft.Imaging.Pdf.Tree
            Imports Vintasoft.Imaging.Pdf.Tree.Annotations
            Imports Vintasoft.Imaging.Pdf.Tree.Fonts
            Imports Vintasoft.Imaging.Pdf.Tree.InteractiveForms
            
            Class PdfInteractiveFormPushbuttonFieldExample
                ''' &lt;summary&gt;
                ''' Creates a PDF document with push button field.
                ''' &lt;/summary&gt;
                ''' &lt;param name="filename"&gt;The filename.&lt;/param&gt;
                Public Shared Sub CreateDocumentWithPushbuttonField(filename As String)
                    ' create PDF document
                    Using document As New PdfDocument()
                        ' create interactive form in PDF document
                        document.InteractiveForm = New PdfDocumentInteractiveForm(document)
            
                        ' specify that the viewer application must construct appearance streams and
                        ' appearance properties for all widget annotations
                        document.InteractiveForm.NeedAppearances = True
            
                        ' create an empty page
                        Dim page As New PdfPage(document, PaperSizeKind.A4)
                        ' add page to the document
                        document.Pages.Add(page)
            
                        Dim width As Single = 70
                        Dim height As Single = 30
                        ' create a rectangle that defines push box position on PDF page
                        Dim rect As New RectangleF((page.Size.Width - width) / 2, ((page.Size.Height - height) / 3) * 2, width, height)
            
                        ' create a push button field
                        Dim button As New PdfInteractiveFormPushButtonField(document, "BestFitButton", rect)
            
                        ' set the border style
                        button.Annotation.BorderStyle = New PdfAnnotationBorderStyle(document)
                        button.Annotation.BorderStyle.Style = PdfAnnotationBorderStyleType.Beveled
                        button.Annotation.BorderStyle.Width = 1
            
                        ' set the appearance characteristics
                        button.Annotation.AppearanceCharacteristics = New PdfAnnotationAppearanceCharacteristics(document)
                        button.Annotation.AppearanceCharacteristics.BackgroundColor = Color.LightGray
                        button.Annotation.AppearanceCharacteristics.NormalCaption = "BestFit"
            
                        ' set the activate action
                        button.Annotation.ActivateAction = New PdfGotoAction(New PdfDestinationFit(document, page))
            
                        ' set the default appearance of text
                        Dim font As PdfFont = document.FontManager.GetStandardFont(StandardFontType.TimesRoman)
                        button.SetTextDefaultAppearance(font, 12, Color.Black)
            
                        ' add the push button field to the interactive form of document
                        document.InteractiveForm.Fields.Add(button)
            
                        ' add annotation, associated with push button field, to the page
                        page.Annotations = New PdfAnnotationList(document)
                        page.Annotations.Add(button.Annotation)
            
                        ' save the document
                        document.Save(filename)
                    End Using
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System.Drawing;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.Pdf;
            using Vintasoft.Imaging.Pdf.Tree;
            using Vintasoft.Imaging.Pdf.Tree.Annotations;
            using Vintasoft.Imaging.Pdf.Tree.Fonts;
            using Vintasoft.Imaging.Pdf.Tree.InteractiveForms;
            
            class PdfInteractiveFormPushbuttonFieldExample
            {
                /// &lt;summary&gt;
                /// Creates a PDF document with push button field.
                /// &lt;/summary&gt;
                /// &lt;param name="filename"&gt;The filename.&lt;/param&gt;
                public static void CreateDocumentWithPushbuttonField(string filename)
                {
                    // create PDF document
                    using (PdfDocument document = new PdfDocument())
                    {
                        // create interactive form in PDF document
                        document.InteractiveForm = new PdfDocumentInteractiveForm(document);
            
                        // specify that the viewer application must construct appearance streams and
                        // appearance properties for all widget annotations
                        document.InteractiveForm.NeedAppearances = true;
            
                        // create an empty page
                        PdfPage page = new PdfPage(document, PaperSizeKind.A4);
                        // add page to the document
                        document.Pages.Add(page);
            
                        float width = 70;
                        float height = 30;
                        // create a rectangle that defines push box position on PDF page
                        RectangleF rect = new RectangleF(
                            (page.Size.Width - width) / 2,
                            ((page.Size.Height - height) / 3) * 2,
                            width, height);
            
                        // create a push button field
                        PdfInteractiveFormPushButtonField button = 
                            new PdfInteractiveFormPushButtonField(document, "BestFitButton", rect);
                        
                        // set the border style
                        button.Annotation.BorderStyle = new PdfAnnotationBorderStyle(document);
                        button.Annotation.BorderStyle.Style = PdfAnnotationBorderStyleType.Beveled;
                        button.Annotation.BorderStyle.Width = 1;
                        
                        // set the appearance characteristics
                        button.Annotation.AppearanceCharacteristics = new PdfAnnotationAppearanceCharacteristics(document);
                        button.Annotation.AppearanceCharacteristics.BackgroundColor = Color.LightGray;
                        button.Annotation.AppearanceCharacteristics.NormalCaption = "BestFit";
                        
                        // set the activate action
                        button.Annotation.ActivateAction = new PdfGotoAction(new PdfDestinationFit(document, page));
                        
                        // set the default appearance of text
                        PdfFont font = document.FontManager.GetStandardFont(StandardFontType.TimesRoman);
                        button.SetTextDefaultAppearance(font, 12, Color.Black);
            
                        // add the push button field to the interactive form of document
                        document.InteractiveForm.Fields.Add(button);
            
                        // add annotation, associated with push button field, to the page
                        page.Annotations = new PdfAnnotationList(document);
                        page.Annotations.Add(button.Annotation);
                        
                        // save the document
                        document.Save(filename);
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormButtonField">
            <summary>
            Provides information about interactive form field that defines button
            (PushButton, RadioButtion, CheckBox).
            </summary>   
            <seealso cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormCheckBoxField" />
            <seealso cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormPushButtonField" />
            <seealso cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormRadioButtonGroupField" />
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormButtonField.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormButtonField" /> class.
            </summary>
            <param name="document">Parent document of the field.</param>
            <param name="name">Partial field name.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormButtonField.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,System.String,System.Collections.Generic.IEnumerable{Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormField})">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormButtonField" /> class.
            </summary>
            <param name="document">Parent document of the field.</param>
            <param name="name">Partial field name.</param>
            <param name="kids">Children of the field.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormPushButtonField.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormPushButtonField" /> class.
            </summary>
            <param name="document">Parent document of the field.</param>
            <param name="name">Partial field name.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormPushButtonField.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,System.String,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormPushButtonField" /> class.
            </summary>
            <param name="document">Parent document of the field.</param>
            <param name="name">Partial field name.</param>
            <param name="rect">An annotation rectangle, defining the location of annotation on 
            the page in default user space units.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormPushButtonField.CreateAppearanceGraphics">
            <summary>
            Creates a <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" /> on annotation appearance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" /> instance.</returns>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormCheckBoxField">
            <summary>
            Provides information about interactive form field that defines check box.
            </summary>
            <remarks>
            A check box field represents one or more check boxes that 
            toggle between two states, on and off, when manipulated by 
            the user with the mouse or keyboard. Each state can have a 
            separate appearance, which is defined by an appearance stream 
            in the appearances of the field's widget annotation. <br />
            The appearance for the off state is optional but, if present, 
            must be stored in the appearance dictionary under the name "Off". 
            The recommended (but not required) name for the on state is "Yes".<br />
            To change value of the filed, use property 
            <see cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormCheckBoxField.AppearanceStateName" />.
            To change default value of the filed, use property 
            <see cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormCheckBoxField.DefaultAppearanceStateName" />.
            </remarks>
            <example>
            Here is an example that shows how to create PDF document with the check box field:
            <code lang="VB.NET">
            Imports System.Drawing
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.Pdf
            Imports Vintasoft.Imaging.Pdf.Drawing
            Imports Vintasoft.Imaging.Pdf.Tree
            Imports Vintasoft.Imaging.Pdf.Tree.Annotations
            Imports Vintasoft.Imaging.Pdf.Tree.Fonts
            Imports Vintasoft.Imaging.Pdf.Tree.InteractiveForms
            
            Class PdfInteractiveFormCheckBoxFieldExample
                ''' &lt;summary&gt;
                ''' Creates a PDF document with the check box fields.
                ''' &lt;/summary&gt;
                ''' &lt;param name="filename"&gt;The filename.&lt;/param&gt;
                Public Shared Sub CreateDocumentWithCheckBoxField(filename As String)
                    ' create PDF document
                    Using document As New PdfDocument()
                        ' create interactive form in PDF document
                        document.InteractiveForm = New PdfDocumentInteractiveForm(document)
            
                        ' specify that the viewer application must construct appearance streams and
                        ' appearance properties for all widget annotations
                        document.InteractiveForm.NeedAppearances = True
            
                        ' create an empty page
                        Dim page As New PdfPage(document, PaperSizeKind.A4)
                        ' add page to the document
                        document.Pages.Add(page)
            
                        Dim fontSize As Single = 20
                        Dim width As Single = fontSize * 3F / 2F
                        Dim height As Single = width
                        ' create a rectangle that defines check box position on PDF page
                        Dim rect As New RectangleF((page.Size.Width - width) / 2, ((page.Size.Height - height) / 3) * 2, width, height)
            
                        ' create the first check box
                        Dim checkBox1 As New PdfInteractiveFormCheckBoxField(document, "CheckBox1", rect)
                        ' create a rectangle that defines size of the check box content
                        Dim contentRect As New RectangleF(0, 0, rect.Width, rect.Height)
                        ' get a reference to "ZapfDingbats" font
                        Dim font As PdfFont = document.FontManager.GetStandardFont(StandardFontType.ZapfDingbats)
                        ' create "Yes" appearance of checkbox1
                        Using g As PdfGraphics = checkBox1.CreateYesAppearanceGraphics()
                            g.DrawString("o", font, fontSize, New PdfBrush(Color.Black), contentRect, PdfContentAlignment.Center, _
                                False)
                            g.DrawString("4", font, fontSize, New PdfBrush(Color.Green), contentRect, PdfContentAlignment.Center, _
                                False)
                        End Using
                        ' create "Off" appearance of checkbox1
                        Using g As PdfGraphics = checkBox1.CreateOffAppearanceGraphics()
                            g.DrawString("o", font, fontSize, New PdfBrush(Color.Black), contentRect, PdfContentAlignment.Center, _
                                False)
                        End Using
                        ' set value of checkbox1
                        checkBox1.AppearanceStateName = "Off"
            
                        ' change the vertical position of rectangle that defines check box position on PDF page
                        rect.Y -= rect.Height
            
                        ' create the second check box
                        Dim checkBox2 As New PdfInteractiveFormCheckBoxField(document, "CheckBox2", rect)
                        ' use checkbox1 appearance as checkbox2 appearance
                        checkBox2.Annotation.Appearances = checkBox1.Annotation.Appearances
                        ' set value of checkBox2
                        checkBox2.AppearanceStateName = "Yes"
            
                        ' add the check box fields to the interactive form of document
                        document.InteractiveForm.Fields.Add(checkBox1)
                        document.InteractiveForm.Fields.Add(checkBox2)
            
                        ' add annotations, associated with check box fields, to the page
                        page.Annotations = New PdfAnnotationList(document)
                        page.Annotations.Add(checkBox1.Annotation)
                        page.Annotations.Add(checkBox2.Annotation)
            
                        ' save the document
                        document.Save(filename)
                    End Using
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System.Drawing;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.Pdf;
            using Vintasoft.Imaging.Pdf.Drawing;
            using Vintasoft.Imaging.Pdf.Tree;
            using Vintasoft.Imaging.Pdf.Tree.Annotations;
            using Vintasoft.Imaging.Pdf.Tree.Fonts;
            using Vintasoft.Imaging.Pdf.Tree.InteractiveForms;
            
            class PdfInteractiveFormCheckBoxFieldExample
            {
                /// &lt;summary&gt;
                /// Creates a PDF document with the check box fields.
                /// &lt;/summary&gt;
                /// &lt;param name="filename"&gt;The filename.&lt;/param&gt;
                public static void CreateDocumentWithCheckBoxField(string filename)
                {
                    // create PDF document
                    using (PdfDocument document = new PdfDocument())
                    {
                        // create interactive form in PDF document
                        document.InteractiveForm = new PdfDocumentInteractiveForm(document);
            
                        // specify that the viewer application must construct appearance streams and
                        // appearance properties for all widget annotations
                        document.InteractiveForm.NeedAppearances = true;
            
                        // create an empty page
                        PdfPage page = new PdfPage(document, PaperSizeKind.A4);
                        // add page to the document
                        document.Pages.Add(page);
            
                        float fontSize = 20;
                        float width = fontSize * 3f / 2f;
                        float height = width;
                        // create a rectangle that defines check box position on PDF page
                        RectangleF rect = new RectangleF(
                            (page.Size.Width - width) / 2,
                            ((page.Size.Height - height) / 3) * 2,
                            width, height);
            
                        // create the first check box
                        PdfInteractiveFormCheckBoxField checkBox1 = 
                            new PdfInteractiveFormCheckBoxField(document, "CheckBox1", rect);
                        // create a rectangle that defines size of the check box content
                        RectangleF contentRect = new RectangleF(0, 0, rect.Width, rect.Height);
                        // get a reference to "ZapfDingbats" font
                        PdfFont font = document.FontManager.GetStandardFont(StandardFontType.ZapfDingbats);
                        // create "Yes" appearance of checkbox1
                        using (PdfGraphics g = checkBox1.CreateYesAppearanceGraphics())
                        {
                            g.DrawString("o", font, fontSize, new PdfBrush(Color.Black), contentRect, PdfContentAlignment.Center, false);
                            g.DrawString("4", font, fontSize, new PdfBrush(Color.Green), contentRect, PdfContentAlignment.Center, false);
                        }
                        // create "Off" appearance of checkbox1
                        using (PdfGraphics g = checkBox1.CreateOffAppearanceGraphics())
                        {
                            g.DrawString("o", font, fontSize, new PdfBrush(Color.Black), contentRect, PdfContentAlignment.Center, false);
                        }
                        // set value of checkbox1
                        checkBox1.AppearanceStateName = "Off";
            
                        // change the vertical position of rectangle that defines check box position on PDF page
                        rect.Y -= rect.Height;
            
                        // create the second check box
                        PdfInteractiveFormCheckBoxField checkBox2 =
                            new PdfInteractiveFormCheckBoxField(document, "CheckBox2", rect);
                        // use checkbox1 appearance as checkbox2 appearance
                        checkBox2.Annotation.Appearances = checkBox1.Annotation.Appearances;
                        // set value of checkBox2
                        checkBox2.AppearanceStateName = "Yes";
            
                        // add the check box fields to the interactive form of document
                        document.InteractiveForm.Fields.Add(checkBox1);
                        document.InteractiveForm.Fields.Add(checkBox2);
            
                        // add annotations, associated with check box fields, to the page
                        page.Annotations = new PdfAnnotationList(document);
                        page.Annotations.Add(checkBox1.Annotation);
                        page.Annotations.Add(checkBox2.Annotation);
            
                        // save the document
                        document.Save(filename);
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormCheckBoxField.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormCheckBoxField" /> class.
            </summary>
            <param name="document">Parent document of the field.</param>
            <param name="name">Partial field name.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormCheckBoxField.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,System.String,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormCheckBoxField" /> class.
            </summary>
            <param name="document">Parent document of the field.</param>
            <param name="name">Partial field name.</param>
            <param name="rect">An annotation rectangle, defining the location of annotation on 
            the page in default user space units.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormCheckBoxField.CreateAppearanceGraphics(System.String)">
            <summary>
            Creates a <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" /> on annotation appearance with specified name.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" /> instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormCheckBoxField.CreateOffAppearanceGraphics">
            <summary>
            Creates a <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" /> on "Off" annotation appearance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" /> instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormCheckBoxField.CreateYesAppearanceGraphics">
            <summary>
            Creates a <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" /> on "Yes" annotation appearance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" /> instance.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormCheckBoxField.IsChecked">
            <summary>
            Gets a value indicating whether the check box is checked.
            </summary>
            <value>
            <b>true</b> - check box is checked (value of <see cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormCheckBoxField.AppearanceStateName" /> 
            property is NOT equal "Off");
            <b>false</b> - check box is NOT checked (value of <see cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormCheckBoxField.AppearanceStateName" /> 
            property is equal "Off").
            </value>
            <seealso cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormCheckBoxField.AppearanceStateName" />
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormCheckBoxField.AppearanceStateName">
            <summary>
            Gets or sets a name representing the check box's appearance state, 
            which is used to select the appropriate appearance from the 
            appearance dictionary.
            </summary>
            <value>
            "Off" - checkbox is unchecked;
            otherwise, checkbox is checked.</value>
            <remarks>
            <b>This property is inheritable.</b>
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormCheckBoxField.IsChecked" />
            <seealso cref="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotation.Appearances" />
            <seealso cref="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationAppearances.NormalStates" />
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormCheckBoxField.DefaultAppearanceStateName">
            <summary>
            Gets or sets a name representing the check box's default appearance state, 
            which is used to select the appropriate appearance from the 
            appearance dictionary.
            </summary>
            <remarks>
            <b>This property is inheritable.</b>
            </remarks>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormRadioButtonField">
            <summary>
            Provides information about interactive form field that defines radio button.
            </summary>   
            <remarks>
            Like check boxes, individual radio buttons have two states, on and off.
            A single radio button may not be turned off directly but only as a result of another
            button being turned on. Typically, a set of radio buttons have at
            most one button in the on state at any given time; selecting any of 
            the buttons automatically deselects all the others.
            </remarks>
            <seealso cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormRadioButtonGroupField" />
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormRadioButtonField.#ctor(Vintasoft.Imaging.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormRadioButtonField" /> class.
            </summary>
            <param name="document">Parent document of the field.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormRadioButtonField.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormRadioButtonField" /> class.
            </summary>
            <param name="document">Parent document of the field.</param>
            <param name="rect">An annotation rectangle, defining the location of annotation on 
            the page in default user space units.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormRadioButtonField.CreateAppearanceGraphics(System.String)">
            <summary>
            Creates a <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" /> on annotation appearance with specified name.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" /> instance.</returns>        
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormRadioButtonField.CreateOffAppearanceGraphics">
            <summary>
            Creates a <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" /> on "Off" annotation appearance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" /> instance.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormRadioButtonField.IsChecked">
            <summary>
            Gets or sets a value indicating whether the radio button is checked.
            </summary>
            <value>
            <b>true</b> - radio button is checked;
            <b>false</b> - radio button is NOT checked.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormRadioButtonGroupField">
            <summary>
            Provides information about a group of radio button interactive form fields.
            </summary>
            <remarks>
            A radio button field is a set of related buttons.<br />
            <br />
            <b>Note:</b> An exception occurs when multiple radio buttons in a field have 
            the same on state and the <see cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormRadioButtonGroupField.IsRadiosInUnison" /> 
            property is set to <b>true</b>. In that case, turning on one of the buttons turns
            on all of them.<br />
            <br />
            Use the <see cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormRadioButtonGroupField.CheckedAppearanceStateName" /> property 
            for changing the field value.<br />
            Use the <see cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormRadioButtonGroupField.DefaultCheckedAppearanceStateName" />
            property for changing the default value of field.
            </remarks>
            <seealso cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormRadioButtonField" />
            <example>
            Here is an example that shows how to create PDF document with two radio button groups:
            <code lang="VB.NET">
            Imports System.Drawing
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.Pdf
            Imports Vintasoft.Imaging.Pdf.Drawing
            Imports Vintasoft.Imaging.Pdf.Tree
            Imports Vintasoft.Imaging.Pdf.Tree.Annotations
            Imports Vintasoft.Imaging.Pdf.Tree.Fonts
            Imports Vintasoft.Imaging.Pdf.Tree.InteractiveForms
            
            Class PdfInteractiveFormRadioButtonGroupFieldExample
                ''' &lt;summary&gt;
                ''' Creates a PDF document with radio button group fields.
                ''' &lt;/summary&gt;
                ''' &lt;param name="filename"&gt;The filename.&lt;/param&gt;
                Public Shared Sub CreateDocumentWithRadioButtonGroupField(filename As String)
                    ' create PDF document
                    Using document As New PdfDocument()
                        ' create interactive form in PDF document
                        document.InteractiveForm = New PdfDocumentInteractiveForm(document)
            
                        ' specify that the viewer application must construct appearance streams and
                        ' appearance properties for all widget annotations
                        document.InteractiveForm.NeedAppearances = True
            
                        ' create an empty page
                        Dim page As New PdfPage(document, PaperSizeKind.A4)
                        ' add page to the document
                        document.Pages.Add(page)
            
                        ' "ZapfDingbats" font
                        Dim fontSize As Single = 15
                        Dim font As PdfFont = document.FontManager.GetStandardFont(StandardFontType.ZapfDingbats)
            
                        Dim width As Single = 100
                        Dim height As Single = 30
                        ' create a rectangle that defines the first radio button group position on PDF page
                        Dim rect As New RectangleF((page.Size.Width - width) / 2, ((page.Size.Height - height) / 3) * 2, width, height)
            
                        ' create the first radio button group
                        Dim radioGroup1 As New PdfInteractiveFormRadioButtonGroupField(document, "RadioGroup1")
                        ' add radio buttons to the radio button group
                        AddSimpleRadioButtons(radioGroup1, font, fontSize, rect, Color.Green, "1", _
                            "2", "3", "4", "5")
                        ' change the state of radio button with value "2" to the checked state
                        radioGroup1.CheckedAppearanceStateName = "2"
            
                        ' create a rectangle that defines the second radio button group position on PDF page
                        rect = New RectangleF(rect.X, rect.Y - rect.Height, rect.Width, rect.Height)
            
                        ' create the second radio button group
                        Dim radioGroup2 As New PdfInteractiveFormRadioButtonGroupField(document, "RadioGroup2")
                        ' add radio buttons to the radio button group
                        AddSimpleRadioButtons(radioGroup2, font, fontSize, rect, Color.Red, "One", _
                            "Two", "Three")
                        ' change the state of radio button with value "Two" to the checked state
                        radioGroup2.CheckedAppearanceStateName = "Two"
            
                        ' add radio button groups to the interactive form of document
                        document.InteractiveForm.Fields.Add(radioGroup1)
                        document.InteractiveForm.Fields.Add(radioGroup2)
            
                        ' add annotations, associated with radio button group fields, to the page
                        page.Annotations = New PdfAnnotationList(document)
                        page.Annotations.AddRange(radioGroup1.GetAnnotations())
                        page.Annotations.AddRange(radioGroup2.GetAnnotations())
            
                        ' save the document
                        document.Save(filename)
                    End Using
                End Sub
            
                ''' &lt;summary&gt;
                ''' Adds simple radio buttons to a radio button group.
                ''' &lt;/summary&gt;
                ''' &lt;param name="radioButtonGroup"&gt;The parent radio button group.&lt;/param&gt;
                ''' &lt;param name="font"&gt;The font.&lt;/param&gt;
                ''' &lt;param name="fontSize"&gt;The font size.&lt;/param&gt;
                ''' &lt;param name="rect"&gt;Rectangle that defines radio button group position on PDF page.&lt;/param&gt;
                ''' &lt;param name="onColor"&gt;Button color in "on" state.&lt;/param&gt;
                ''' &lt;param name="values"&gt;The values of radio buttons.&lt;/param&gt;
                Private Shared Sub AddSimpleRadioButtons(radioButtonGroup As PdfInteractiveFormRadioButtonGroupField, font As PdfFont, fontSize As Single, rect As RectangleF, onColor As Color, ParamArray values As String())
                    Dim offBrush As New PdfBrush(Color.Black)
                    Dim onBrush As New PdfBrush(onColor)
            
                    ' for each value
                    For i As Integer = 0 To values.Length - 1
                        ' create a rectangle that defines radio button position on PDF page
                        Dim radioButtonRect As New RectangleF(rect.X + i * rect.Width / values.Length, rect.Y, rect.Width / values.Length, rect.Height)
            
                        ' create a radio button
                        Dim radioButton As New PdfInteractiveFormRadioButtonField(radioButtonGroup.Document, radioButtonRect)
            
                        ' create a rectangle that defines size of the radio button content
                        radioButtonRect = New RectangleF(0, 0, radioButtonRect.Width, radioButtonRect.Height)
            
                        ' create ON button appearance
                        Using g As PdfGraphics = radioButton.CreateAppearanceGraphics(values(i))
                            g.DrawString("m", font, fontSize, offBrush, radioButtonRect, PdfContentAlignment.Center, _
                                False)
                            g.DrawString("l", font, fontSize, onBrush, radioButtonRect, PdfContentAlignment.Center, _
                                False)
                        End Using
                        ' create "Off" button appearance
                        Using g As PdfGraphics = radioButton.CreateOffAppearanceGraphics()
                            g.DrawString("m", font, fontSize, offBrush, radioButtonRect, PdfContentAlignment.Center, _
                                False)
                        End Using
            
                        ' add new radio button to radio button group
                        radioButtonGroup.Kids.Add(radioButton)
                    Next
                End Sub
            End Class
            
            </code>
            <code lang="C#">
            using System.Drawing;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.Pdf;
            using Vintasoft.Imaging.Pdf.Drawing;
            using Vintasoft.Imaging.Pdf.Tree;
            using Vintasoft.Imaging.Pdf.Tree.Annotations;
            using Vintasoft.Imaging.Pdf.Tree.Fonts;
            using Vintasoft.Imaging.Pdf.Tree.InteractiveForms;
            
            class PdfInteractiveFormRadioButtonGroupFieldExample
            {
                /// &lt;summary&gt;
                /// Creates a PDF document with radio button group fields.
                /// &lt;/summary&gt;
                /// &lt;param name="filename"&gt;The filename.&lt;/param&gt;
                public static void CreateDocumentWithRadioButtonGroupField(string filename)
                {
                    // create PDF document
                    using (PdfDocument document = new PdfDocument())
                    {
                        // create interactive form in PDF document
                        document.InteractiveForm = new PdfDocumentInteractiveForm(document);
            
                        // specify that the viewer application must construct appearance streams and
                        // appearance properties for all widget annotations
                        document.InteractiveForm.NeedAppearances = true;
            
                        // create an empty page
                        PdfPage page = new PdfPage(document, PaperSizeKind.A4);
                        // add page to the document
                        document.Pages.Add(page);
            
                        // "ZapfDingbats" font
                        float fontSize = 15;
                        PdfFont font = document.FontManager.GetStandardFont(StandardFontType.ZapfDingbats);
            
                        float width = 100;
                        float height = 30;
                        // create a rectangle that defines the first radio button group position on PDF page
                        RectangleF rect = new RectangleF(
                            (page.Size.Width - width) / 2,
                            ((page.Size.Height - height) / 3) * 2,
                            width, height);
            
                        // create the first radio button group
                        PdfInteractiveFormRadioButtonGroupField radioGroup1 = 
                            new PdfInteractiveFormRadioButtonGroupField(document, "RadioGroup1");
                        // add radio buttons to the radio button group
                        AddSimpleRadioButtons(radioGroup1, font, fontSize, rect, Color.Green, "1", "2", "3", "4", "5");
                        // change the state of radio button with value "2" to the checked state
                        radioGroup1.CheckedAppearanceStateName = "2";
            
                        // create a rectangle that defines the second radio button group position on PDF page
                        rect = new RectangleF(rect.X, rect.Y - rect.Height, rect.Width, rect.Height);
            
                        // create the second radio button group
                        PdfInteractiveFormRadioButtonGroupField radioGroup2 =
                            new PdfInteractiveFormRadioButtonGroupField(document, "RadioGroup2");
                        // add radio buttons to the radio button group
                        AddSimpleRadioButtons(radioGroup2, font, fontSize, rect, Color.Red, "One", "Two", "Three");
                        // change the state of radio button with value "Two" to the checked state
                        radioGroup2.CheckedAppearanceStateName = "Two";
            
                        // add radio button groups to the interactive form of document
                        document.InteractiveForm.Fields.Add(radioGroup1);
                        document.InteractiveForm.Fields.Add(radioGroup2);
            
                        // add annotations, associated with radio button group fields, to the page
                        page.Annotations = new PdfAnnotationList(document);
                        page.Annotations.AddRange(radioGroup1.GetAnnotations());
                        page.Annotations.AddRange(radioGroup2.GetAnnotations());
            
                        // save the document
                        document.Save(filename);
                    }
                }
            
                /// &lt;summary&gt;
                /// Adds simple radio buttons to a radio button group.
                /// &lt;/summary&gt;
                /// &lt;param name="radioButtonGroup"&gt;The parent radio button group.&lt;/param&gt;
                /// &lt;param name="font"&gt;The font.&lt;/param&gt;
                /// &lt;param name="fontSize"&gt;The font size.&lt;/param&gt;
                /// &lt;param name="rect"&gt;Rectangle that defines radio button group position on PDF page.&lt;/param&gt;
                /// &lt;param name="onColor"&gt;Button color in "on" state.&lt;/param&gt;
                /// &lt;param name="values"&gt;The values of radio buttons.&lt;/param&gt;
                private static void AddSimpleRadioButtons(
                    PdfInteractiveFormRadioButtonGroupField radioButtonGroup,
                    PdfFont font,
                    float fontSize, 
                    RectangleF rect,
                    Color onColor,
                    params string[] values)
                {
                    PdfBrush offBrush = new PdfBrush(Color.Black);
                    PdfBrush onBrush = new PdfBrush(onColor);
            
                    // for each value
                    for (int i = 0; i &lt; values.Length; i++)
                    {
                        // create a rectangle that defines radio button position on PDF page
                        RectangleF radioButtonRect = new RectangleF(
                            rect.X + i * rect.Width / values.Length, rect.Y, rect.Width / values.Length, rect.Height);
                        
                        // create a radio button
                        PdfInteractiveFormRadioButtonField radioButton = 
                            new PdfInteractiveFormRadioButtonField(radioButtonGroup.Document, radioButtonRect);
            
                        // create a rectangle that defines size of the radio button content
                        radioButtonRect = new RectangleF(0, 0, radioButtonRect.Width, radioButtonRect.Height);
                        
                        // create ON button appearance
                        using (PdfGraphics g = radioButton.CreateAppearanceGraphics(values[i]))
                        {
                            g.DrawString("m", font, fontSize, offBrush, radioButtonRect, PdfContentAlignment.Center, false);
                            g.DrawString("l", font, fontSize, onBrush, radioButtonRect, PdfContentAlignment.Center, false);
                        }
                        // create "Off" button appearance
                        using (PdfGraphics g = radioButton.CreateOffAppearanceGraphics())
                        {
                            g.DrawString("m", font, fontSize, offBrush, radioButtonRect, PdfContentAlignment.Center, false);
                        }
            
                        // add new radio button to radio button group
                        radioButtonGroup.Kids.Add(radioButton);
                    }
                }
            }
            
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormRadioButtonGroupField.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormRadioButtonGroupField" /> class.
            </summary>
            <param name="document">Parent document of the field.</param>
            <param name="name">Partial field name.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormRadioButtonGroupField.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,System.String,System.Collections.Generic.IEnumerable{Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormRadioButtonField})">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormRadioButtonGroupField" /> class.
            </summary>
            <param name="radioButtons">Collection that contains radio buttons of new radio button group.</param>
            <param name="document">Parent document of this field.</param>
            <param name="name">Partial field name.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormRadioButtonGroupField.CheckedAppearanceStateName">
            <summary>
            Gets or sets a name corresponding to the appearance state of whichever child field
            is currently in the on state.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormRadioButtonGroupField.DefaultCheckedAppearanceStateName">
            <summary>
            Gets or sets a default name corresponding to the appearance state of whichever child field
            is currently in the on state.
            </summary>
            <remarks>
            <b>This property is inheritable.</b>
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormRadioButtonGroupField.IsNoToggleToOff">
            <summary>
            Gets or sets a value indicating whether exactly one radio button must be selected
            at all times; clicking the currently selected button has no effect.
            </summary>
            <value>
            <b>true</b> - exactly one radio button must be selected at all times; 
            clicking the currently selected button has no effect.<br />
            <b>false</b> - clicking the selected button deselects it, leaving no button selected.<br />
            <br />
            <b>Value of this property is a part of inheritable flag group.</b><br />
            Property value is taken from the field flags
            if at least one flag is specified explicitly.<br />
            Property value is taken from the field flags of the field parent in the field hierarchy
            if  not one flag is specified explicitly.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormRadioButtonGroupField.IsRadiosInUnison">
            <summary>
            Gets or sets a value indicating whether this field is radios in unison.
            </summary>
            <value>
            <b>true</b> - a group of radio buttons within a radio button
            field that use the same value for the on state will turn on and 
            off in unison; that is if one is checked, they are all checked.<br />
            <b>false</b> - the buttons are mutually exclusive (the same behavior as 
            HTML radio buttons).<br />
            <br />
            <b>Value of this property is a part of inheritable flag group.</b><br />
            Property value is taken from the field flags
            if at least one flag is specified explicitly.<br />
            Property value is taken from the field flags of the field parent in the field hierarchy
            if  not one flag is specified explicitly.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormChoiceFieldItem">
            <summary>
            Represents an item of <see cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormChoiceField" /> (list box or combo box).
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormChoiceFieldItem.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormChoiceFieldItem" /> class.
            </summary>
            <param name="document">Parent PDF document.</param>
            <param name="displayedValue">Displayed value of item.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormChoiceFieldItem.ToString">
            <summary>
            Returns the string representation of the object.
            </summary>
            <returns>String representation of the object.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormChoiceFieldItem.DisplayedValue">
            <summary>
            Gets or sets the displayed value of item.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormChoiceFieldItemList">
            <summary>
            Represents a list of <see cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormChoiceFieldItem" />.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormChoiceFieldItemList.#ctor(Vintasoft.Imaging.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormChoiceFieldItemList" /> class.
            </summary>
            <param name="document">Parent PDF document.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormChoiceFieldItemList.Add(System.String)">
            <summary>
            Adds the specified item to the end of the list.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormChoiceFieldItemList.Insert(System.Int32,System.String)">
            <summary>
            Inserts the specified item to the specified index of the list.
            </summary>
            <param name="item">The item.</param>
            <param name="index">The zero-based index at which <paramref name="item" />
            should be inserted.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormChoiceFieldItemList.Remove(System.String)">
            <summary>
            Removes the specified item from the list.
            </summary>
            <param name="displayedItem">The displayed item.</param>
            <returns><b>true</b> if <paramref name="displayedItem" /> is successfully removed; 
            otherwise, <b>false</b>.  
            </returns>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormListBoxField">
            <summary>
            Provides information about interactive form field that defines list box.    
            </summary>
            <remarks>
            Use the <see cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormChoiceField.SelectedItem" /> or 
            <see cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormListBoxField.SelectedItems" /> property for
            changing the field value.<br />
            Use the <see cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormChoiceField.DefaultSelectedItem" /> or 
            <see cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormListBoxField.DefaultSelectedItems" /> property for
            changing the default value of the field.
            </remarks>
            <example>
            Here is an example that shows how to create PDF document with ListBox field:
            <code lang="VB.NET">
            Imports System.Drawing
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.Pdf
            Imports Vintasoft.Imaging.Pdf.Tree
            Imports Vintasoft.Imaging.Pdf.Tree.Annotations
            Imports Vintasoft.Imaging.Pdf.Tree.Fonts
            Imports Vintasoft.Imaging.Pdf.Tree.InteractiveForms
            
            Class PdfInteractiveFormListBoxFieldExample
                ''' &lt;summary&gt;
                ''' Creates a PDF document with the list box field.
                ''' &lt;/summary&gt;
                ''' &lt;param name="filename"&gt;The filename.&lt;/param&gt;
                Public Shared Sub CreateDocumentWithListBoxField(filename As String)
                    ' create PDF document
                    Using document As New PdfDocument()
                        ' create interactive form in PDF document
                        document.InteractiveForm = New PdfDocumentInteractiveForm(document)
            
                        ' specify that the viewer application must construct appearance streams and
                        ' appearance properties for all widget annotations
                        document.InteractiveForm.NeedAppearances = True
            
                        ' create an empty page
                        Dim page As New PdfPage(document, PaperSizeKind.A4)
                        ' add page to the document
                        document.Pages.Add(page)
            
                        Dim width As Single = 60
                        Dim height As Single = 70
                        ' create a rectangle that defines list box position on PDF page
                        Dim rect As New RectangleF((page.Size.Width - width) / 2, ((page.Size.Height - height) / 3) * 2, width, height)
            
                        ' create a list box field
                        Dim listBox As New PdfInteractiveFormListBoxField(document, "ListBox1", rect, New String() {"Item1", "Item2", "Item3"})
                        ' set the selected item
                        listBox.SelectedItem = "Item2"
                        ' set yje default selected item
                        listBox.DefaultSelectedItem = listBox.SelectedItem
            
                        ' set the border style
                        listBox.Annotation.BorderStyle = New PdfAnnotationBorderStyle(document)
                        listBox.Annotation.BorderStyle.Style = PdfAnnotationBorderStyleType.Beveled
                        listBox.Annotation.BorderStyle.Width = 1
            
                        ' set the appearance characteristics
                        listBox.Annotation.AppearanceCharacteristics = New PdfAnnotationAppearanceCharacteristics(document)
                        listBox.Annotation.AppearanceCharacteristics.BorderColor = Color.Gray
            
                        ' set the default appearance of text
                        Dim font As PdfFont = document.FontManager.GetStandardFont(StandardFontType.TimesRoman)
                        listBox.SetTextDefaultAppearance(font, 12, Color.Black)
            
                        ' add the list box field to the interactive form of document
                        document.InteractiveForm.Fields.Add(listBox)
            
                        ' add annotation, associated with list box field, to the page
                        page.Annotations = New PdfAnnotationList(document)
                        page.Annotations.Add(listBox.Annotation)
            
                        ' save the document
                        document.Save(filename)
                    End Using
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System.Drawing;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.Pdf;
            using Vintasoft.Imaging.Pdf.Tree;
            using Vintasoft.Imaging.Pdf.Tree.Annotations;
            using Vintasoft.Imaging.Pdf.Tree.Fonts;
            using Vintasoft.Imaging.Pdf.Tree.InteractiveForms;
            
            class PdfInteractiveFormListBoxFieldExample
            {
                /// &lt;summary&gt;
                /// Creates a PDF document with the list box field.
                /// &lt;/summary&gt;
                /// &lt;param name="filename"&gt;The filename.&lt;/param&gt;
                public static void CreateDocumentWithListBoxField(string filename)
                {
                    // create PDF document
                    using (PdfDocument document = new PdfDocument())
                    {
                        // create interactive form in PDF document
                        document.InteractiveForm = new PdfDocumentInteractiveForm(document);
            
                        // specify that the viewer application must construct appearance streams and
                        // appearance properties for all widget annotations
                        document.InteractiveForm.NeedAppearances = true;
            
                        // create an empty page
                        PdfPage page = new PdfPage(document, PaperSizeKind.A4);
                        // add page to the document
                        document.Pages.Add(page);
            
                        float width = 60;
                        float height = 70;
                        // create a rectangle that defines list box position on PDF page
                        RectangleF rect = new RectangleF(
                            (page.Size.Width - width) / 2,
                            ((page.Size.Height - height) / 3) * 2,
                            width, height);
            
                        // create a list box field
                        PdfInteractiveFormListBoxField listBox = new PdfInteractiveFormListBoxField(
                            document, "ListBox1", rect, new string[] { "Item1", "Item2", "Item3" });
                        // set the selected item
                        listBox.SelectedItem = "Item2";
                        // set yje default selected item
                        listBox.DefaultSelectedItem = listBox.SelectedItem;
                        
                        // set the border style
                        listBox.Annotation.BorderStyle = new PdfAnnotationBorderStyle(document);
                        listBox.Annotation.BorderStyle.Style = PdfAnnotationBorderStyleType.Beveled;
                        listBox.Annotation.BorderStyle.Width = 1;
                        
                        // set the appearance characteristics
                        listBox.Annotation.AppearanceCharacteristics = 
                            new PdfAnnotationAppearanceCharacteristics(document);
                        listBox.Annotation.AppearanceCharacteristics.BorderColor = Color.Gray;
            
                        // set the default appearance of text
                        PdfFont font = document.FontManager.GetStandardFont(StandardFontType.TimesRoman);
                        listBox.SetTextDefaultAppearance(font, 12, Color.Black);
            
                        // add the list box field to the interactive form of document
                        document.InteractiveForm.Fields.Add(listBox);
            
                        // add annotation, associated with list box field, to the page
                        page.Annotations = new PdfAnnotationList(document);
                        page.Annotations.Add(listBox.Annotation);
            
                        // save the document
                        document.Save(filename);
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormChoiceField">
            <summary>
            Provides information about interactive form field that defines choice field
            (ComboBox, ListBox).
            </summary>   
            <seealso cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormComboBoxField" />
            <seealso cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormListBoxField" />
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormChoiceField.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormChoiceField" /> class.
            </summary>
            <param name="document">Parent document of this field.</param>
            <param name="name">Partial field name.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormChoiceField.CreateAppearanceGraphics">
            <summary>
            Creates a <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" /> on annotation appearance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" /> instance.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormChoiceField.IsSort">
            <summary>
            Gets or sets a value indicating whether field's option
            items should be sorted alphabetically.
            </summary>
            <value>
            <b>true</b> - the field's option items should be sorted alphabetically;
            <b>false</b> - the field's option items should NOT be sorted alphabetically;
            <br />
            <b>Value of this property is a part of inheritable flag group.</b><br />
            Property value is taken from the field flags
            if at least one flag is specified explicitly.<br />
            Property value is taken from the field flags of the field parent in the field hierarchy
            if  not one flag is specified explicitly.
            </value>
            <remarks>
            This flag is intended for use by form authoring tools, 
            not by PDF viewer applications. Viewers should simply display 
            the options in the order in which they occur in the <see cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormChoiceField.Items" /> list.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormChoiceField.IsCommitOnSelectionChange">
            <summary>
            Gets or sets a value indicating whether the new value is committed as 
            soon as a selection is made with the pointing device.
            </summary>
            <value>
            <b>true</b> - the new value is committed as soon as a selection
            is made with the pointing device. This option enables applications
            to perform an action once a selection is made, without requiring
            the user to exit the field.<br />
            <b>false</b> - the new value is not committed until the user exits the field.<br />
            <br />
            <b>Value of this property is a part of inheritable flag group.</b><br />
            Property value is taken from the field flags
            if at least one flag is specified explicitly.<br />
            Property value is taken from the field flags of the field parent in the field hierarchy
            if  not one flag is specified explicitly.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormChoiceField.Items">
            <summary>
            Gets or sets a list of items to be presented to the user.
            </summary>
            <remarks>
            Each element of the list is either a text string representing 
            one of the available options (<see cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormChoiceFieldItem" />) 
            OR an item consisting of two text strings: the option's export value 
            and the text to be displayed as the name of the option
            (<see cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormChoiceFieldExtendedItem" />).
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormChoiceField.SelectedItem">
            <summary>
            Gets or sets a selected item of choice field.
            </summary>
            <value>
            <b>null</b> if choice field does NOT have selected item;<br />
            value of the <see cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormChoiceFieldItem.DisplayedValue" /> property if
            choice field has selected item.
            </value>
            <remarks>
            <b>This property is inheritable.</b>
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormChoiceField.DefaultSelectedItem">
            <summary>
            Gets or sets a default selected item of choice field.
            </summary>
            <value>
            <b>null</b> if choice field does NOT have selected item;<br />
            value of the <see cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormChoiceFieldItem.DisplayedValue" /> property if
            choice field has selected item.
            </value>
            <remarks>
            <b>This property is inheritable.</b>
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormListBoxField.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormListBoxField" /> class.
            </summary>
            <param name="document">Parent document of this field.</param>
            <param name="name">Partial field name.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormListBoxField.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,System.String,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormListBoxField" /> class.
            </summary>
            <param name="document">Parent document of this field.</param>
            <param name="name">Partial field name.</param>
            <param name="rect">An annotation rectangle, defining the location of annotation on 
            the page in default user space units.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormListBoxField.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,System.String,System.Drawing.RectangleF,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormListBoxField" /> class.
            </summary>
            <param name="document">Parent document of this field.</param>
            <param name="name">Partial field name.</param>
            <param name="rect">An annotation rectangle, defining the location of annotation on 
            the page in default user space units.</param>
            <param name="items">A collection of items to be presented to the user.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormListBoxField.IsMultiSelect">
            <summary>
            Gets or sets a value indicating whether more than one of the field's option 
            items may be selected simultaneously.
            </summary>
            <value>
            <b>true</b> - more than one of the field's option items may be selected simultaneously;
            <b>false</b> - no more than one item at a time may be selected.<br />
            <br />
            <b>Value of this property is a part of inheritable flag group.</b><br />
            Property value is taken from the field flags
            if at least one flag is specified explicitly.<br />
            Property value is taken from the field flags of the field parent in the field hierarchy
            if  not one flag is specified explicitly.
            </value>
            <seealso cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormListBoxField.SelectedItems" />
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormListBoxField.SelectedItems">
            <summary>
            Gets or sets a selected items of list box field.
            </summary>
            <value>
            <b>null</b> if list box does NOT have selected items;<br />
            an array of values of the <see cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormChoiceFieldItem.DisplayedValue" />
            property if list box has selected items.
            </value>
            <remarks>
            <b>This property is inheritable.</b><br />
            <br />
            This property should be used only if <see cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormListBoxField.IsMultiSelect" /> is set to <b>true</b>.
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormListBoxField.IsMultiSelect" />
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormListBoxField.SelectedItemIndexes">
            <summary>
            Gets or sets an array of integer values, 
            sorted in ascending order, representing the zero-based
            indices in the <see cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormChoiceField.Items" /> 
            collection of the currently selected option items. 
            </summary>
            <value>
            For fields that allow multiple selection 
            (<see cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormListBoxField.IsMultiSelect" /> is set to <b>true</b>), an array of integers, 
            sorted in ascending order, representing the zero-based
            indices in the <see cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormChoiceField.Items" />  
            array of the currently selected option items. 
            </value>
            <remarks>
            This entry is required when two or more elements in
            the <see cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormChoiceField.Items" />  
            array have different names but the same export value or when 
            the value of the choice field is an array. In other cases, 
            the entry is permitted but not required. If the items 
            identified by this entry differ from those in the <see cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormListBoxField.SelectedItems" /> 
            property, the <see cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormListBoxField.SelectedItems" /> entry takes precedence.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormListBoxField.DefaultSelectedItems">
            <summary>
            Gets or sets a default selected items of list box field.
            </summary>
            <value>
            <b>null</b> if list box does NOT have default selected items;<br />
            an array of values of the <see cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormChoiceFieldItem.DisplayedValue" />
            property if list box has default selected items.
            </value>
            <remarks>
            <b>This property is inheritable.</b><br />
            <br />
            This property should be used only if <see cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormListBoxField.IsMultiSelect" /> is set to <b>true</b>.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormListBoxField.TopItemIndex">
            <summary>
            Gets or sets the top index for scrollable list boxes.
            </summary>
            <value>
            Default value is 0.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormComboBoxField">
            <summary>
            Provides information about interactive form field that defines combo box.
            </summary>
            <remarks>
            Use the <see cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormChoiceField.SelectedItem" /> property
            for changing the field value.<br />
            Use the <see cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormChoiceField.DefaultSelectedItem" /> property
            for changing the default value of the field.
            </remarks>
            <example>
            Here is an example that shows how to create PDF document with ComboBox field:
            <code lang="VB.NET">
            Imports System.Drawing
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.Pdf
            Imports Vintasoft.Imaging.Pdf.Tree
            Imports Vintasoft.Imaging.Pdf.Tree.Annotations
            Imports Vintasoft.Imaging.Pdf.Tree.Fonts
            Imports Vintasoft.Imaging.Pdf.Tree.InteractiveForms
            
            Class PdfInteractiveFormComboBoxFieldExample
                ''' &lt;summary&gt;
                ''' Creates a PDF document with the combo box fields.
                ''' &lt;/summary&gt;
                ''' &lt;param name="filename"&gt;The filename.&lt;/param&gt;
                Public Shared Sub CreateDocumentWithComboBoxField(filename As String)
                    ' create PDF document
                    Using document As New PdfDocument()
                        ' create interactive form in PDF document
                        document.InteractiveForm = New PdfDocumentInteractiveForm(document)
            
                        ' specify that the viewer application must construct appearance streams and
                        ' appearance properties for all widget annotations
                        document.InteractiveForm.NeedAppearances = True
            
                        ' create an empty page
                        Dim page As New PdfPage(document, PaperSizeKind.A4)
                        ' add page to the document
                        document.Pages.Add(page)
            
                        Dim width As Single = 70
                        Dim height As Single = 20
                        ' create a rectangle that defines check box position on PDF page
                        Dim rect As New RectangleF((page.Size.Width - width) / 2, ((page.Size.Height - height) / 3) * 2, width, height)
            
                        ' create a combo box field
                        Dim comboBox As New PdfInteractiveFormComboBoxField(document, "ComboBox1", rect, New String() {"Item1", "Item2", "Item3"})
                        ' set the selected item
                        comboBox.SelectedItem = "Item2"
                        ' set the defaul selected item
                        comboBox.DefaultSelectedItem = comboBox.SelectedItem
            
                        ' set the border style
                        comboBox.Annotation.BorderStyle = New PdfAnnotationBorderStyle(document)
                        comboBox.Annotation.BorderStyle.Style = PdfAnnotationBorderStyleType.Beveled
                        comboBox.Annotation.BorderStyle.Width = 1
            
                        ' set the appearance characteristics
                        comboBox.Annotation.AppearanceCharacteristics = New PdfAnnotationAppearanceCharacteristics(document)
                        comboBox.Annotation.AppearanceCharacteristics.BorderColor = Color.Gray
            
                        ' sets the default appearance of text
                        Dim font As PdfFont = document.FontManager.GetStandardFont(StandardFontType.TimesRoman)
                        comboBox.SetTextDefaultAppearance(font, 12, Color.Black)
            
                        ' add combo box field to the interactive form of document
                        document.InteractiveForm.Fields.Add(comboBox)
            
                        ' add annotation, associated with combobox field, to the page
                        page.Annotations = New PdfAnnotationList(document)
                        page.Annotations.Add(comboBox.Annotation)
            
                        ' save the document
                        document.Save(filename)
                    End Using
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System.Drawing;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.Pdf;
            using Vintasoft.Imaging.Pdf.Tree;
            using Vintasoft.Imaging.Pdf.Tree.Annotations;
            using Vintasoft.Imaging.Pdf.Tree.Fonts;
            using Vintasoft.Imaging.Pdf.Tree.InteractiveForms;
            
            class PdfInteractiveFormComboBoxFieldExample
            {
                /// &lt;summary&gt;
                /// Creates a PDF document with the combo box fields.
                /// &lt;/summary&gt;
                /// &lt;param name="filename"&gt;The filename.&lt;/param&gt;
                public static void CreateDocumentWithComboBoxField(string filename)
                {
                    // create PDF document
                    using (PdfDocument document = new PdfDocument())
                    {
                        // create interactive form in PDF document
                        document.InteractiveForm = new PdfDocumentInteractiveForm(document);
            
                        // specify that the viewer application must construct appearance streams and
                        // appearance properties for all widget annotations
                        document.InteractiveForm.NeedAppearances = true;
            
                        // create an empty page
                        PdfPage page = new PdfPage(document, PaperSizeKind.A4);
                        // add page to the document
                        document.Pages.Add(page);
            
                        float width = 70;
                        float height = 20;
                        // create a rectangle that defines check box position on PDF page
                        RectangleF rect = new RectangleF(
                            (page.Size.Width - width) / 2,
                            ((page.Size.Height - height) / 3) * 2,
                            width, height);
            
                        // create a combo box field
                        PdfInteractiveFormComboBoxField comboBox = new PdfInteractiveFormComboBoxField(
                            document, "ComboBox1", rect, new string[] { "Item1", "Item2", "Item3" });
                        // set the selected item
                        comboBox.SelectedItem = "Item2";
                        // set the defaul selected item
                        comboBox.DefaultSelectedItem = comboBox.SelectedItem;
                        
                        // set the border style
                        comboBox.Annotation.BorderStyle = new PdfAnnotationBorderStyle(document);
                        comboBox.Annotation.BorderStyle.Style = PdfAnnotationBorderStyleType.Beveled;
                        comboBox.Annotation.BorderStyle.Width = 1;
                        
                        // set the appearance characteristics
                        comboBox.Annotation.AppearanceCharacteristics = 
                            new PdfAnnotationAppearanceCharacteristics(document);
                        comboBox.Annotation.AppearanceCharacteristics.BorderColor = Color.Gray;
                        
                        // sets the default appearance of text
                        PdfFont font = document.FontManager.GetStandardFont(StandardFontType.TimesRoman);
                        comboBox.SetTextDefaultAppearance(font, 12, Color.Black);
            
                        // add combo box field to the interactive form of document
                        document.InteractiveForm.Fields.Add(comboBox);
            
                        // add annotation, associated with combobox field, to the page
                        page.Annotations = new PdfAnnotationList(document);
                        page.Annotations.Add(comboBox.Annotation);
            
                        // save the document
                        document.Save(filename);
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormComboBoxField.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormComboBoxField" /> class.
            </summary>
            <param name="document">Parent document of this field.</param>
            <param name="name">Partial field name.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormComboBoxField.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,System.String,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormComboBoxField" /> class.
            </summary>
            <param name="document">Parent document of this field.</param>
            <param name="name">Partial field name.</param>
            <param name="rect">An annotation rectangle, defining the location of annotation on 
            the page in default user space units.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormComboBoxField.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,System.String,System.Drawing.RectangleF,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormComboBoxField" /> class.
            </summary>
            <param name="document">Parent document of this field.</param>
            <param name="name">Partial field name.</param>
            <param name="rect">An annotation rectangle, defining the location of annotation on 
            the page in default user space units.</param>
            <param name="items">A collection of items to be presented to the user.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormComboBoxField.IsEdit">
            <summary>
            Gets or sets a value indicating whether text entered in the field can be edited.
            </summary>
            <value>
            <b>true</b> - the combo box includes an editable text box as well as a drop-down list;
            <b>false</b> - the combo box includes only a drop-down list.<br />
            <br />
            <b>Value of this property is a part of inheritable flag group.</b><br />
            Property value is taken from the field flags
            if at least one flag is specified explicitly.<br />
            Property value is taken from the field flags of the field parent in the field hierarchy
            if  not one flag is specified explicitly.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormComboBoxField.IsDoNotSpellCheck">
            <summary>
            Gets or sets a value indicating whether text entered in the field is not spell-checked.
            </summary>
            <value>
            <b>true</b> - text entered in the field is NOT spell-checked;
            <b>false</b> - text entered in the field is spell-checked.<br />
            <br />
            <b>Value of this property is a part of inheritable flag group.</b><br />
            Property value is taken from the field flags
            if at least one flag is specified explicitly.<br />
            Property value is taken from the field flags of the field parent in the field hierarchy
            if  not one flag is specified explicitly.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormChoiceFieldExtendedItem">
            <summary>
            Represents an extended item of <see cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormChoiceField" /> (list box or combo box).
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormChoiceFieldExtendedItem.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormChoiceFieldExtendedItem" />
            class.
            </summary>
            <param name="document">Parent PDF document.</param>
            <param name="displayedValue">Displayed value of item.</param>
            <param name="exportedValue">Exported value of item.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormChoiceFieldExtendedItem.ToString">
            <summary>
            Returns the string representation of the object.
            </summary>
            <returns>String representation of the object.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormChoiceFieldExtendedItem.DisplayedValue">
            <summary>
            Gets or sets the displayed value of item.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormChoiceFieldExtendedItem.ExportedValue">
            <summary>
            Gets or sets the exported value of item.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormFieldList">
            <summary>
            Represents a collection of <see cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormField" /> objects.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormFieldList.#ctor(Vintasoft.Imaging.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormFieldList" /> class.
            </summary>
            <param name="document">Parent PDF document.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormFieldList.Insert(System.Int32,Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormField)">
            <summary>
            Inserts a form field into the <see cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormFieldList" />
            at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item" />
            should be inserted.</param>
            <param name="item">The object to insert. The value can be null for reference types.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="index" /> is less than 0 -or-
            <paramref name="index" /> is greater than list item count.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if
            <paramref name="item" /> is null.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormFieldList.FindFieldByPartialName(System.String)">
            <summary>
            Finds the field by partial name.
            </summary>
            <param name="partialName">Field partial name.</param>
            <returns>
            A <see cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormField" /> object instance if field is found;
            otherwise, <b>null</b>.
            </returns>
            <seealso cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormField.PartialName" />
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormFieldList.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="index" /> is not a valid index in the list.
            </exception>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormSignatureField">
            <summary>
            Provides information about digital signature interactive form field.
            </summary>
            <remarks>
            A signature field (PDF 1.3) is a form field that contains a digital signature.
            </remarks>
            <example>
            Example, which shows how to verify digital signature, can be found here:
            <see cref="T:Vintasoft.Imaging.Pdf.Tree.DigitalSignatures.PdfSignatureInformation" /><br />
            <br />
            Example, which shows how to place digital signature on PDF page, can be found here:
            <see cref="T:Vintasoft.Imaging.Pdf.Tree.DigitalSignatures.PdfPkcsSignature" />
            </example>    
            <seealso cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormSignatureField.SignatureInfo" />
            <seealso cref="T:Vintasoft.Imaging.Pdf.Tree.DigitalSignatures.PdfSignatureInformation" />
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormSignatureField.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormSignatureField" /> class.
            </summary>
            <param name="document">Parent document of this field.</param>
            <param name="name">Partial field name.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormSignatureField.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,System.String,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormSignatureField" /> class.
            </summary>
            <param name="document">Parent document of this field.</param>
            <param name="name">Partial field name.</param>
            <param name="rect">An annotation rectangle, defining the location of annotation on 
            the page in default user space units.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormSignatureField.CreateAppearanceGraphics">
            <summary>
            Creates a <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" /> on annotation appearance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" /> instance.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormSignatureField.SignatureInfo">
            <summary>
            Gets or sets a signature information containing 
            the signature and specifying various attributes of the signature field.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormTextFieldValue">
            <summary>
            Provides a base class for a value of of text interactive form field.
            </summary>   
            <seealso cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormTextFieldStringValue" />
            <seealso cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormTextFieldStreamValue" />
            <seealso cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormTextFieldFileValue" />
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormTextFieldValue.ToString">
            <summary>
            Returns the string representation of the object.
            </summary>
            <returns>String representation of the object.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormTextFieldValue.TextValue">
            <summary>
            Gets or sets a value of text field.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormTextFieldStringValue">
            <summary>
            Provides information about the text interactive form field's value stored in a text string.
            </summary>   
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormTextFieldStringValue.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormTextFieldStringValue" /> class.
            </summary>
            <param name="document">Parent PDF document.</param>
            <param name="value">String value of text field.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormTextFieldStringValue.TextValue">
            <summary>
            Gets or sets a value of text field.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormTextFieldStreamValue">
            <summary>
            Provides information about the text interactive form field's value stored in a stream.
            </summary>   
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormTextFieldStreamValue.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,Vintasoft.Imaging.Pdf.Tree.PdfResource)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormTextFieldStreamValue" /> class.
            </summary>
            <param name="document">Parent PDF document.</param>
            <param name="stream">Value of text field.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormTextFieldStreamValue.Stream">
            <summary>
            Gets a resource stream of the field value.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormTextFieldStreamValue.TextValue">
            <summary>
            Gets or sets a value of text field.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormTextFieldFileValue">
            <summary>
            Provides information about the text interactive form field's value stored in a file specification.
            </summary>   
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormTextFieldFileValue.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,Vintasoft.Imaging.Pdf.Tree.PdfEmbeddedFileSpecification)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormTextFieldFileValue" /> class.
            </summary>
            <param name="document">Parent PDF document.</param>
            <param name="fileSpecification">File specification.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormTextFieldFileValue.FileSpecification">
            <summary>
            Gets a file specification of the field value.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormTextFieldFileValue.TextValue">
            <summary>
            Gets or sets a value of text field.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if
            user tries to set the value.</exception>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.TextQuaddingType">
            <summary>
            Specifies available types of quadding (justification) which can be used in displaying the text.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.TextQuaddingType.Default">
            <summary>
            Default value.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.TextQuaddingType.LeftJustified">
            <summary>
            Left-justified text.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.TextQuaddingType.Centered">
            <summary>
            Centered text.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.TextQuaddingType.RightJustified">
            <summary>
            Right-justified text.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfDocumentInteractiveForm">
            <summary>
            Provides information about contents and properties of a document interactive form.
            </summary>
            <remarks>
            An interactive form is a collection of fields for gathering information
            interactively from the user.<br />
            PDF document may contain any number of fields appearing on any combination of pages, 
            all of which make up a single, global interactive form spanning the entire document.<br />
            The interactive form fields may be organized hierarchically into 
            one or more tree structures.<br />
            Many field attributes are inheritable, meaning that if they are not explicitly 
            specified for a given field, their values are taken from those of its parent 
            in the field hierarchy.
            </remarks>
            <example>Please see example here: <see cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormField" /></example>
            <see cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormField" />
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfDocumentInteractiveForm.#ctor(Vintasoft.Imaging.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfDocumentInteractiveForm" /> class.
            </summary>
            <param name="document">Parent PDF document.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfDocumentInteractiveForm.UpdateAppearances">
            <summary>
            Updates widget annotation appearances, of all fields, to reflect the default appearances.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfDocumentInteractiveForm.FindField(System.String)">
            <summary>
            Finds a field by specified fully qualified field name.
            </summary>
            <param name="fullyQualifiedFieldName">The fully qualified field name.</param>
            <returns>An <see cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormField" /> object instance if field is found;
            otherwise, <b>null</b>.</returns>
            <seealso cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormField.FullyQualifiedName" />
            <example>
            Here is an example that shows how find filed with specified name and change it value:
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Changes the text field value.
            ''' &lt;/summary&gt;
            ''' &lt;param name="document"&gt;The PDF document.&lt;/param&gt;
            ''' &lt;param name="fieldFullName"&gt;Full name of the field.&lt;/param&gt;
            ''' &lt;param name="newValue"&gt;The new value of the field.&lt;/param&gt;
            ''' &lt;returns&gt;
            ''' &lt;b&gt;true&lt;/b&gt; - field value is changed successfully;
            ''' &lt;b&gt;false&lt;/b&gt; - field value is NOT changed.
            ''' &lt;/returns&gt;
            Public Shared Function ChangeTextFieldValue(document As PdfDocument, fieldFullName As String, newValue As String) As Boolean
                ' if PDF document has PDF interactive form
                If document.InteractiveForm IsNot Nothing Then
                    ' find field by name
                    Dim field As PdfInteractiveFormField = document.InteractiveForm.FindField(fieldFullName)
                    ' if field is found
                    If field IsNot Nothing Then
                        Dim textField As PdfInteractiveFormTextField = TryCast(field, PdfInteractiveFormTextField)
                        ' if field is text field
                        If textField IsNot Nothing Then
                            ' set new value of the field
                            textField.Value = New PdfInteractiveFormTextFieldStringValue(document, newValue)
            
                            Return True
                        End If
                    End If
                End If
                Return False
            End Function
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Changes the text field value.
            /// &lt;/summary&gt;
            /// &lt;param name="document"&gt;The PDF document.&lt;/param&gt;
            /// &lt;param name="fieldFullName"&gt;Full name of the field.&lt;/param&gt;
            /// &lt;param name="newValue"&gt;The new value of the field.&lt;/param&gt;
            /// &lt;returns&gt;
            /// &lt;b&gt;true&lt;/b&gt; - field value is changed successfully;
            /// &lt;b&gt;false&lt;/b&gt; - field value is NOT changed.
            /// &lt;/returns&gt;
            public static bool ChangeTextFieldValue(PdfDocument document, string fieldFullName, string newValue)
            {
                // if PDF document has PDF interactive form
                if (document.InteractiveForm != null)
                {
                    // find field by name
                    PdfInteractiveFormField field = document.InteractiveForm.FindField(fieldFullName);
                    // if field is found
                    if (field != null)
                    {
                        PdfInteractiveFormTextField textField = field as PdfInteractiveFormTextField;
                        // if field is text field
                        if (textField != null)
                        {
                            // set new value of the field
                            textField.Value = new PdfInteractiveFormTextFieldStringValue(document, newValue);
            
                            return true;
                        }
                    }
                }
                return false;
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfDocumentInteractiveForm.RemoveField(System.String)">
            <summary>
            Removes the field and all it subfields from interactive form, 
            also removes all widget annotations of removed subtree from annotations of PDF pages.
            </summary>
            <param name="fullyQualifiedFieldName">The fully qualified field name.</param>
            <returns><b>true</b> if field was found and deleted; otherwise, <b>false</b>.</returns>
            <example>
            Here is an example that demonstrates how to remove a field by name:
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Removes an interactive field from interactive form of PDF document.
            ''' &lt;/summary&gt;
            ''' &lt;param name="pdfFilename"&gt;The filename of PDF document.&lt;/param&gt;
            ''' &lt;param name="fullyQualifiedFieldName"&gt;The name of field.&lt;/param&gt;
            Public Shared Sub RemoveFieldFromPdfInteractiveForm(pdfFilename As String, fullyQualifiedFieldName As String)
                ' open PDF document
                Using document As New PdfDocument(pdfFilename)
                    ' if PDF document has interactive form
                    If document.InteractiveForm IsNot Nothing Then
                        ' get reference to the interactive form
                        Dim form As PdfDocumentInteractiveForm = document.InteractiveForm
            
                        ' remove field from interactive form
                        form.RemoveField(fullyQualifiedFieldName)
            
                        ' save changes to a file
                        document.SaveChanges()
                    End If
                End Using
            End Sub
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Removes an interactive field from interactive form of PDF document.
            /// &lt;/summary&gt;
            /// &lt;param name="pdfFilename"&gt;The filename of PDF document.&lt;/param&gt;
            /// &lt;param name="fullyQualifiedFieldName"&gt;The name of field.&lt;/param&gt;
            public static void RemoveFieldFromPdfInteractiveForm(string pdfFilename, string fullyQualifiedFieldName)
            {
                // open PDF document
                using (PdfDocument document = new PdfDocument(pdfFilename))
                {
                    // if PDF document has interactive form
                    if (document.InteractiveForm != null)
                    {
                        // get reference to the interactive form
                        PdfDocumentInteractiveForm form = document.InteractiveForm;
            
                        // remove field from interactive form
                        form.RemoveField(fullyQualifiedFieldName);
            
                        // save changes to a file
                        document.SaveChanges();
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfDocumentInteractiveForm.RemoveField(Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormField)">
            <summary>
            Removes the field and all it subfields from interactive form, 
            also removes all widget annotations of removed subtree from annotations of PDF pages.
            </summary>
            <param name="field">The field to remove.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfDocumentInteractiveForm.AddField(Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormField,Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormFieldList,Vintasoft.Imaging.Pdf.Tree.PdfPage)">
            <summary>
            Adds a form field to the end of specified field list and
            adds the form field annotation(s) to end of annotation collection of specified PDF page.
            </summary>
            <param name="field">The field to add.</param>
            <param name="fields">The field list where the field must be added.</param>
            <param name="page">A PDF page where the form field annotation(s) must be added.</param>
            <seealso cref="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormField.GetAnnotations" />
            <seealso cref="P:Vintasoft.Imaging.Pdf.Tree.PdfPage.Annotations" />
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfDocumentInteractiveForm.AddField(Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormField,Vintasoft.Imaging.Pdf.Tree.PdfPage)">
            <summary>
            Adds a form field to the end of <see cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfDocumentInteractiveForm.Fields" /> list and
            adds the form field annotation(s) to end of annotation collection of specified PDF page.
            </summary>
            <param name="field">The field to add.</param>
            <param name="page">A PDF page where the form field annotation(s) must be added.</param>
            <seealso cref="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormField.GetAnnotations" />
            <seealso cref="P:Vintasoft.Imaging.Pdf.Tree.PdfPage.Annotations" />
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfDocumentInteractiveForm.GetTerminalFields">
            <summary>
            Returns all terminal fields of PDF document.
            </summary>
            <returns>An array that contains all terminal fields of PDF document.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfDocumentInteractiveForm.GetSignatureFields">
            <summary>
            Returns all signature fields of PDF document.
            </summary>
            <returns>An array that contains all signature fields of PDF document.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfDocumentInteractiveForm.Fields">
            <summary>
            Gets a field collection representing interactive
            form fields associated with the document.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfDocumentInteractiveForm.CalculationOrder">
            <summary>
            Gets or sets a list of interactive form fields with calculation 
            actions, defining the calculation order in which their values 
            will be recalculated when the value of any field changes.
            </summary>
            <remarks>
            This property required if any field in the document have additional-actions 
            containing a <see cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormFieldAdditionalActions.CalculateValue" /> property.
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormFieldAdditionalActions.CalculateValue" />
            <example>
            Here is an example that shows how to create PDF document with calculated field:
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Creates a PDF document with calculated interactive form field.
            ''' &lt;/summary&gt;
            ''' &lt;param name="filename"&gt;The filename.&lt;/param&gt;
            Public Shared Sub CreateDocumentWithCalculatedInteractiveFormField(filename As String)
                ' create PDF document
                Using document As New PdfDocument()
                    ' create interactive form in PDF document
                    document.InteractiveForm = New PdfDocumentInteractiveForm(document)
            
                    ' specify that the viewer application must construct appearance streams and
                    ' appearance properties for all widget annotations
                    document.InteractiveForm.NeedAppearances = True
            
                    ' font and font size
                    Dim fontSize As Single = 12
                    Dim font As PdfFont = document.FontManager.GetStandardFont(StandardFontType.TimesRoman)
            
                    ' create an empty page
                    Dim page As New PdfPage(document, PaperSizeKind.A4)
                    ' add page to the document
                    document.Pages.Add(page)
            
                    Dim width As Single = 60
                    Dim height As Single = 40
                    ' create a rectangle that defines the object (first field) position on PDF page
                    Dim rect As New RectangleF((page.Size.Width - width * 5) / 2, ((page.Size.Height - height) / 3) * 2, width, height)
            
                    ' open PdfGraphics on page
                    Using graphics As PdfGraphics = page.GetGraphics()
                        ' create calculator field: group of three fields
                        Dim calculator As New PdfInteractiveFormField(document, "Calculator")
                        calculator.SetTextDefaultAppearance(font, fontSize * 1.5F, Color.Black)
                        calculator.TextQuadding = TextQuaddingType.Centered
            
                        ' create the border style
                        Dim borderStyle As New PdfAnnotationBorderStyle(document)
                        borderStyle.Style = PdfAnnotationBorderStyleType.Inset
                        borderStyle.Width = 1
            
                        ' create the appearance characteristics
                        Dim appearanceCharacteristics As New PdfAnnotationAppearanceCharacteristics(document)
                        appearanceCharacteristics.BorderColor = Color.Gray
            
                        ' create the left text box
                        Dim textField As New PdfInteractiveFormTextField(document, "Left", rect, "2")
                        textField.DefaultValue = textField.Value
                        textField.Annotation.BorderStyle = borderStyle
                        textField.Annotation.AppearanceCharacteristics = appearanceCharacteristics
                        ' add the left text box to the calculator
                        calculator.Kids.Add(textField)
            
                        ' update the rectangle that defines the object position on PDF page
                        rect.X += rect.Width
            
                        ' draw the symbol '+' on the page
                        graphics.DrawString("+", font, fontSize * 1.5F, New PdfBrush(Color.Black), rect, PdfContentAlignment.Center, _
                            False)
            
                        ' update the rectangle that defines the object position on PDF page
                        rect.X += rect.Width
            
                        ' create the right text box
                        textField = New PdfInteractiveFormTextField(document, "Right", rect, "3")
                        textField.DefaultValue = textField.Value
                        textField.Annotation.BorderStyle = borderStyle
                        textField.Annotation.AppearanceCharacteristics = appearanceCharacteristics
                        ' add the right text box to the calculator
                        calculator.Kids.Add(textField)
            
                        ' update the rectangle that defines the object position on PDF page
                        rect.X += rect.Width
            
                        ' draw the symbol '=' on the page
                        graphics.DrawString("=", font, fontSize * 1.5F, New PdfBrush(Color.Black), rect, PdfContentAlignment.Center, _
                            False)
            
                        ' create the calculator program written on JavaScript
                        Dim javaScriptCode As New StringBuilder()
                        javaScriptCode.Append("var left = this.getField('Calculator.Left');")
                        javaScriptCode.Append("var right = this.getField('Calculator.Right');")
                        javaScriptCode.Append("var result = this.getField('Calculator.Result');")
                        javaScriptCode.Append("result.value = left.value + right.value;")
                        Dim calculatorProgram As New PdfJavaScriptAction(document, javaScriptCode.ToString())
            
                        ' update the rectangle that defines the object position on PDF page
                        rect.X += rect.Width
            
                        ' create the result text box
                        textField = New PdfInteractiveFormTextField(document, "Result", rect)
                        textField.IsReadOnly = True
                        textField.Annotation.BorderStyle = borderStyle
                        textField.Annotation.AppearanceCharacteristics = appearanceCharacteristics
                        ' set a program that will calculate value of result field
                        textField.AdditionalActions = New PdfInteractiveFormFieldAdditionalActions(document)
                        textField.AdditionalActions.CalculateValue = calculatorProgram
                        ' specify that calcualtor program must be executed when page is opened
                        textField.Annotation.AdditionalActions.PageOpen = calculatorProgram
                        ' add the result text box to the calculator
                        calculator.Kids.Add(textField)
            
                        ' add result field to the calculated fields (calcualtion order) 
                        ' of the document interactive form fields
                        document.InteractiveForm.CalculationOrder = New PdfInteractiveFormFieldList(document)
                        document.InteractiveForm.CalculationOrder.Add(textField)
            
                        ' add field group to the document
                        document.InteractiveForm.Fields.Add(calculator)
            
                        ' add annotations, associated with field group, to the page
                        page.Annotations = New PdfAnnotationList(document)
                        page.Annotations.AddRange(calculator.GetAnnotations())
            
                        ' update appearance of field group
                        calculator.UpdateAppearance()
                    End Using
            
                    ' save the document
                    document.Save(filename)
                End Using
            End Sub
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Creates a PDF document with calculated interactive form field.
            /// &lt;/summary&gt;
            /// &lt;param name="filename"&gt;The filename.&lt;/param&gt;
            public static void CreateDocumentWithCalculatedInteractiveFormField(string filename)
            {
                // create PDF document
                using (PdfDocument document = new PdfDocument())
                {
                    // create interactive form in PDF document
                    document.InteractiveForm = new PdfDocumentInteractiveForm(document);
            
                    // specify that the viewer application must construct appearance streams and
                    // appearance properties for all widget annotations
                    document.InteractiveForm.NeedAppearances = true;
            
                    // font and font size
                    float fontSize = 12;
                    PdfFont font = document.FontManager.GetStandardFont(StandardFontType.TimesRoman);
            
                    // create an empty page
                    PdfPage page = new PdfPage(document, PaperSizeKind.A4);
                    // add page to the document
                    document.Pages.Add(page);
            
                    float width = 60;
                    float height = 40;
                    // create a rectangle that defines the object (first field) position on PDF page
                    RectangleF rect = new RectangleF(
                        (page.Size.Width - width * 5) / 2,
                        ((page.Size.Height - height) / 3) * 2,
                        width, height);
            
                    // open PdfGraphics on page
                    using (PdfGraphics graphics = page.GetGraphics())
                    {
                        // create calculator field: group of three fields
                        PdfInteractiveFormField calculator =
                            new PdfInteractiveFormField(document, "Calculator");
                        calculator.SetTextDefaultAppearance(font, fontSize * 1.5f, Color.Black);
                        calculator.TextQuadding = TextQuaddingType.Centered;
            
                        // create the border style
                        PdfAnnotationBorderStyle borderStyle = new PdfAnnotationBorderStyle(document);
                        borderStyle.Style = PdfAnnotationBorderStyleType.Inset;
                        borderStyle.Width = 1;
            
                        // create the appearance characteristics
                        PdfAnnotationAppearanceCharacteristics appearanceCharacteristics =
                            new PdfAnnotationAppearanceCharacteristics(document);
                        appearanceCharacteristics.BorderColor = Color.Gray;
            
                        // create the left text box
                        PdfInteractiveFormTextField textField =
                            new PdfInteractiveFormTextField(document, "Left", rect, "2");
                        textField.DefaultValue = textField.Value;
                        textField.Annotation.BorderStyle = borderStyle;
                        textField.Annotation.AppearanceCharacteristics = appearanceCharacteristics;
                        // add the left text box to the calculator
                        calculator.Kids.Add(textField);
            
                        // update the rectangle that defines the object position on PDF page
                        rect.X += rect.Width;
            
                        // draw the symbol '+' on the page
                        graphics.DrawString("+", font, fontSize * 1.5f,
                            new PdfBrush(Color.Black), rect, PdfContentAlignment.Center, false);
            
                        // update the rectangle that defines the object position on PDF page
                        rect.X += rect.Width;
            
                        // create the right text box
                        textField = new PdfInteractiveFormTextField(document, "Right", rect, "3");
                        textField.DefaultValue = textField.Value;
                        textField.Annotation.BorderStyle = borderStyle;
                        textField.Annotation.AppearanceCharacteristics = appearanceCharacteristics;
                        // add the right text box to the calculator
                        calculator.Kids.Add(textField);
            
                        // update the rectangle that defines the object position on PDF page
                        rect.X += rect.Width;
            
                        // draw the symbol '=' on the page
                        graphics.DrawString("=", font, fontSize * 1.5f,
                            new PdfBrush(Color.Black), rect, PdfContentAlignment.Center, false);
            
                        // create the calculator program written on JavaScript
                        StringBuilder javaScriptCode = new StringBuilder();
                        javaScriptCode.Append("var left = this.getField('Calculator.Left');");
                        javaScriptCode.Append("var right = this.getField('Calculator.Right');");
                        javaScriptCode.Append("var result = this.getField('Calculator.Result');");
                        javaScriptCode.Append("result.value = left.value + right.value;");
                        PdfJavaScriptAction calculatorProgram =
                            new PdfJavaScriptAction(document, javaScriptCode.ToString());
            
                        // update the rectangle that defines the object position on PDF page
                        rect.X += rect.Width;
            
                        // create the result text box
                        textField = new PdfInteractiveFormTextField(document, "Result", rect);
                        textField.IsReadOnly = true;
                        textField.Annotation.BorderStyle = borderStyle;
                        textField.Annotation.AppearanceCharacteristics = appearanceCharacteristics;
                        // set a program that will calculate value of result field
                        textField.AdditionalActions = new PdfInteractiveFormFieldAdditionalActions(document);
                        textField.AdditionalActions.CalculateValue = calculatorProgram;
                        // specify that calcualtor program must be executed when page is opened
                        textField.Annotation.AdditionalActions.PageOpen = calculatorProgram;
                        // add the result text box to the calculator
                        calculator.Kids.Add(textField);
            
                        // add result field to the calculated fields (calcualtion order) 
                        // of the document interactive form fields
                        document.InteractiveForm.CalculationOrder = new PdfInteractiveFormFieldList(document);
                        document.InteractiveForm.CalculationOrder.Add(textField);
            
                        // add field group to the document
                        document.InteractiveForm.Fields.Add(calculator);
            
                        // add annotations, associated with field group, to the page
                        page.Annotations = new PdfAnnotationList(document);
                        page.Annotations.AddRange(calculator.GetAnnotations());
            
                        // update appearance of field group
                        calculator.UpdateAppearance();
                    }
            
                    // save the document
                    document.Save(filename);
                }
            }
            </code>
            </example>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfDocumentInteractiveForm.XFAResource">
            <summary>
            Gets or sets an XFA resource.        
            </summary>
            <value>
            Value of this property will be set to <b>null</b>
            when value of the <see cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfDocumentInteractiveForm.XFAResources" /> property will be set.
            </value>
            <remarks>
            XFA resource format is described by the Data Package (XDP) Specification.
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfDocumentInteractiveForm.XFAResources" />
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfDocumentInteractiveForm.XFAResources">
            <summary>
            Gets or sets a dictionary containing a name-resource pairs 
            specifying individual packets that together make up the XFA resource.
            </summary>
            <value>
            Value of this property will be set to <b>null</b>
            when value of the <see cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfDocumentInteractiveForm.XFAResource" /> property will be set.
            </value>
            <remarks>
            XFA resource format is described by the Data Package (XDP) Specification.
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfDocumentInteractiveForm.XFAResource" />
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfDocumentInteractiveForm.SignatureFlags">
            <summary>
            Gets or sets the set of flags specifying various 
            document-level characteristics related to signature fields.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfDocumentInteractiveForm.NeedAppearances">
            <summary>
            Gets or sets a value indicating whether the viewer application must construct
            appearance streams and appearance properties for all widget annotations in the document.
            </summary>
            <value>
            <b>true</b> - the viewer application must construct appearance streams and
            appearance properties for all widget annotations in the document.<br />
            <b>false</b> - the viewer application must NOT construct appearance streams and
            appearance properties for all widget annotations in the document.<br />
            Default value is <b>false</b>.
            </value>
            <seealso cref="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfDocumentInteractiveForm.UpdateAppearances" />
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfDocumentSignatureFlags">
            <summary>
            Specifies available flags specifying various
            document-level characteristics related to signature fields.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfDocumentSignatureFlags.Undefined">
            <summary>
            No flags.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfDocumentSignatureFlags.SignaturesExist">
            <summary>
            If set, the document contains at least one signature field.
            </summary>
            <remarks>
            This flag allows a viewer application to enable user 
            interface items (such as menu items or pushbuttons) 
            related to signature processing without having to scan 
            the entire document for the presence of signature fields.
            </remarks>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfDocumentSignatureFlags.AppendOnly">
            <summary>
            If set, the document contains signatures that may be 
            invalidated if the file is saved (written) in a way
            that alters its previous contents, as opposed to an 
            incremental update.
            </summary>
            <remarks>
            Merely updating the file by appending new information 
            to the end of the previous version is safe. Viewer 
            applications can use this flag to present a user 
            requesting a full save with an additional alert box 
            warning that signatures will be invalidated and requiring 
            explicit confirmation before continuing with the operation.
            </remarks>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentGroup">
            <summary>
            Provides information about an optional content group (layer) of PDF document.
            </summary>
            <remarks>
            Optional content group (layer) is a collection of graphics that can be made visible
            or invisible dynamically.
            </remarks>
            <example>
            Here is an example that demonstrates how to render PDF pages
            with the use of optional content groups:
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Renders PDF page with the optional content group.
            ''' &lt;/summary&gt;
            ''' &lt;param name="page"&gt;The page of PDF document.&lt;/param&gt;
            Public Shared Function RenderPdfPageWithOptionalContentGroup(page As PdfPage) As VintasoftImage
                ' get PDF document of page
                Dim document As PdfDocument = page.Document
            
                ' if document has optional content groups then
                If document.OptionalContentProperties IsNot Nothing AndAlso document.OptionalContentProperties.OptionalContentGroups IsNot Nothing Then
                    ' get a list of optional content groups of PDF document
                    Dim allGroups As IList(Of PdfOptionalContentGroup) = document.OptionalContentProperties.OptionalContentGroups
            
                    ' for each optional content group
                    For Each group As PdfOptionalContentGroup In allGroups
                        ' set the optional content group as invisible
                        document.OptionalContentConfiguration.SetGroupVisibility(group, False)
                    Next
                End If
            
                ' render PDF page
                Dim image As VintasoftImage = page.Render()
            
                ' return the image of PDF page
                Return image
            End Function
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Renders PDF page with the optional content group.
            /// &lt;/summary&gt;
            /// &lt;param name="page"&gt;The page of PDF document.&lt;/param&gt;
            public static VintasoftImage RenderPdfPageWithOptionalContentGroup(PdfPage page)
            {
                // get PDF document of page
                PdfDocument document = page.Document;
            
                // if document has optional content groups then
                if (document.OptionalContentProperties != null &amp;&amp;
                    document.OptionalContentProperties.OptionalContentGroups != null)
                {
                    // get a list of optional content groups of PDF document
                    IList&lt;PdfOptionalContentGroup&gt; allGroups = document.OptionalContentProperties.OptionalContentGroups;
            
                    // for each optional content group
                    foreach (PdfOptionalContentGroup group in allGroups)
                        // set the optional content group as invisible
                        document.OptionalContentConfiguration.SetGroupVisibility(group, false);
                }
            
                // render PDF page
                VintasoftImage image = page.Render();
            
                // return the image of PDF page
                return image;
            }
            </code>
            </example>
            <seealso cref="P:Vintasoft.Imaging.Pdf.PdfDocument.OptionalContentProperties" />
            <seealso cref="P:Vintasoft.Imaging.Pdf.PdfDocument.OptionalContentConfiguration" />
            <seealso cref="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.BeginOptionalContent(Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentGroup)" />
            <seealso cref="P:Vintasoft.Imaging.Pdf.Tree.PdfImageResource.OptionalContentGroup" />
            <seealso cref="P:Vintasoft.Imaging.Pdf.Tree.PdfFormXObjectResource.OptionalContentGroup" />
            <seealso cref="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotation.OptionalContentGroup" />
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.PdfMarkedContentProperty">
            <summary>
            Provides private information about marked content of PDF document.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentGroup.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentGroup" /> class.
            </summary>
            <param name="document">The Parent PDF document.</param>
            <param name="name">The name of optional content group.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentGroup.Name">
            <summary>
            Gets or sets the name of the optional content group.
            </summary>
            <value>
            String suitable for presentation in a viewer application's user interface.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentGroup.Intent">
            <summary>
            Gets or sets an intent of group.
            </summary>
            <value>
            Default value is <b><see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentIntent" />.View</b>.
            </value>
            <remarks>
            Intent is used to determine which optional content group's states 
            to consider and ignore in calculating the visibility of content.
            </remarks>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentIntent">
            <summary>
            Specifies available ways to distinguish between different intended uses of optional content.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentIntent.Any">
            <summary>
            Any intents.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentIntent.Design">
            <summary>
            Design is intended to represent a document designer's structural organization of artwork.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentIntent.View">
            <summary>
            View is intended for interactive use by document consumers.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.PdfPageAdditionalActions">
            <summary>
            Stores additional-actions defining the page's behavior 
            in response to various trigger events.
            </summary>
            <seealso cref="P:Vintasoft.Imaging.Pdf.Tree.PdfPage.AdditionalActions" />
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPageAdditionalActions.#ctor(Vintasoft.Imaging.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfPageAdditionalActions" /> class.
            </summary>
            <param name="document">Parent PDF document.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfPageAdditionalActions.PageOpen">
            <summary>
            Gets or sets an action to be performed when the page is opened.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfPageAdditionalActions.PageClose">
            <summary>
            Gets or sets an action to be performed when the page is closed.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormFieldAdditionalActions">
            <summary>
            Stores additional-actions defining the interactive form field's 
            behavior in response to various trigger events.
            </summary>
            <seealso cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormField.AdditionalActions" />
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormFieldAdditionalActions.#ctor(Vintasoft.Imaging.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormFieldAdditionalActions" /> class.
            </summary>
            <param name="document">Parent PDF document.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormFieldAdditionalActions.Keystroke">
            <summary>
            Gets or sets a JavaScript action to be performed when the user types a
            keystroke into a text field or combo box or modifies the
            selection in a scrollable list box.
            </summary>
            <remarks>
            This action can check the keystroke for validity and reject or modify it.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormFieldAdditionalActions.ValueFormatting">
            <summary>
            Gets or sets a JavaScript action to be performed before the field
            is formatted to display its current value.
            </summary>
            <remarks>
            This action can modify the field's value before formatting.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormFieldAdditionalActions.ValueChanged">
            <summary>
            Gets or sets a JavaScript action to be performed when the 
            field's value is changed.
            </summary>
            <remarks>
            This action can check the new value for validity.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfInteractiveFormFieldAdditionalActions.CalculateValue">
            <summary>
            Gets or sets a JavaScript action to be performed to recalculate the 
            value of this field when that of another field changes.
            </summary>
            <remarks>
            The order in which the document's fields are recalculated is defined
            by the <see cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfDocumentInteractiveForm.CalculationOrder" /> 
            property in the <see cref="P:Vintasoft.Imaging.Pdf.PdfDocument.InteractiveForm" />.
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.Pdf.Tree.InteractiveForms.PdfDocumentInteractiveForm.CalculationOrder" />
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.PdfPageBoundaryType">
            <summary>
            Specifies available page boundaries.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.PdfPageBoundaryType.Undefinded">
            <summary>
            Page boundary is undefined.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.PdfPageBoundaryType.MediaBox">
            <summary>
            Media box - <see cref="P:Vintasoft.Imaging.Pdf.Tree.PdfPage.MediaBox" />.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.PdfPageBoundaryType.CropBox">
            <summary>
            Crop box - <see cref="P:Vintasoft.Imaging.Pdf.Tree.PdfPage.CropBox" />.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.PdfPageBoundaryType.BleedBox">
            <summary>
            Bleed box - <see cref="P:Vintasoft.Imaging.Pdf.Tree.PdfPage.BleedBox" />.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.PdfPageBoundaryType.TrimBox">
            <summary>
            Trim box - <see cref="P:Vintasoft.Imaging.Pdf.Tree.PdfPage.TrimBox" />.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.PdfPageBoundaryType.ArtBox">
            <summary>
            Art box - <see cref="P:Vintasoft.Imaging.Pdf.Tree.PdfPage.ArtBox" />.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.PdfFormXObjectResourceDictionary">
            <summary>
            Represents a dictionary from name to <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfFormXObjectResource" />.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfFormXObjectResourceDictionary.#ctor(Vintasoft.Imaging.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfFormXObjectResourceDictionary" /> class.
            </summary>
            <param name="document">Parent PDF document.</param>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.PdfEmbeddedFile">
            <summary>
            Provides information about embedded file resource of PDF document.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.PdfResource">
            <summary>
            Provides information about resource of PDF document.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfResource.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfResource" /> class.        
            </summary>
            <param name="document">Parent PDF document.</param>
            <param name="data">Resource data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfResource.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,System.Byte[],Vintasoft.Imaging.Pdf.PdfCompression)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfResource" /> class.        
            </summary>
            <param name="document">Parent PDF document.</param>
            <param name="data">Resource data.</param>
            <param name="compression">Compression of new resource.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfResource.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,System.Byte[],Vintasoft.Imaging.Pdf.PdfCompression,Vintasoft.Imaging.Pdf.PdfCompressionSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfResource" /> class.        
            </summary>
            <param name="document">Parent PDF document.</param>
            <param name="data">Resource data.</param>
            <param name="compression">Compression of new resource.</param>
            <param name="compressionSettings">Compression settings.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfResource.GetAsStream">
            <summary>
            Returns uncompressed resource data.
            </summary>
            <returns>Stream with uncompressed data of the
            resource.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfResource.GetBytes">
            <summary>
            Returns uncompressed resource data.
            </summary>
            <returns>Array with uncompressed data of
            the resource.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfResource.CompressLossless(Vintasoft.Imaging.Pdf.PdfCompression,Vintasoft.Imaging.Pdf.PdfCompressionSettings,System.Boolean)">
            <summary>
            Compress the resource using lossless compression.
            </summary>
            <param name="compression">Compression that should be applied to the resource.</param>
            <param name="compressionSettings">Compression settings.</param>
            <param name="compressIfSizeReduced">Indicates that compression must be applied
            to the resource only if new size of resource is less than
            previous size of resource.</param>
            <returns>
            <b>true</b> if compression is applied to the resource;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfResource.Compression">
            <summary>
            Gets or sets compression of this resource.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfResource.Length">
            <summary>
            Returns length, in bytes, of the resource.
            </summary>
            <remarks>
            This property returns real length of the resource
            data. Length of uncompressed resource data can
            be bigger.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfResource.Metadata">
            <summary>
            (Optional; PDF 1.4) 
            Gets or sets a metadata stream containing metadata for the resource.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfResource.ResourceType">
            <summary>
            Gets a type of this resource.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfEmbeddedFile.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,System.IO.Stream,Vintasoft.Imaging.Pdf.PdfCompression,Vintasoft.Imaging.Pdf.PdfCompressionSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfEmbeddedFile" /> class.
            </summary>
            <param name="document">Parent document of this image resource.</param>
            <param name="stream">Stream that contains file.</param>
            <param name="compression">Compression of the resource.</param>
            <param name="compressionParams">Compression parameters.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfEmbeddedFile.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,System.IO.Stream,Vintasoft.Imaging.Pdf.PdfCompression)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfEmbeddedFile" /> class.
            </summary>
            <param name="document">Parent document of this image resource.</param>
            <param name="stream">Stream that contains file.</param>
            <param name="compression">Compression of the resource.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfEmbeddedFile.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfEmbeddedFile" /> class.
            </summary>
            <param name="document">Parent document of this image resource.</param>
            <param name="stream">Stream that contains file.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfEmbeddedFile.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,System.String,Vintasoft.Imaging.Pdf.PdfCompression,Vintasoft.Imaging.Pdf.PdfCompressionSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfEmbeddedFile" /> class.
            </summary>
            <param name="document">Parent document of this image resource.</param>
            <param name="filename">File name.</param>
            <param name="compression">Compression of the resource.</param>
            <param name="compressionParams">Compression parameters.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfEmbeddedFile.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,System.String,Vintasoft.Imaging.Pdf.PdfCompression)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfEmbeddedFile" /> class.
            </summary>
            <param name="document">Parent document of this image resource.</param>
            <param name="filename">File name.</param>
            <param name="compression">Compression of the resource.</param>
            <example>
            Here is an example that demonstrates how to embed file into PDF document:
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Embeds specified file into specified PDF document.
            ''' &lt;/summary&gt;
            ''' &lt;param name="pdfFilename"&gt;The filename of PDF document.&lt;/param&gt;
            ''' &lt;param name="embeddingFilename"&gt;The filename of embedding file.&lt;/param&gt;
            Public Shared Sub EmbedFileIntoPdfDocument(pdfFilename As String, embeddingFilename As String)
                ' open PDF document
                Using document As New PdfDocument(pdfFilename)
                    ' if embedded files are absent
                    If document.EmbeddedFiles Is Nothing Then
                        ' create new dictionary
                        document.EmbeddedFiles = New PdfEmbeddedFileSpecificationDictionary(document)
                    End If
            
                    ' create embedded file instance
                    Dim embeddedFile As New PdfEmbeddedFile(document, embeddingFilename, PdfCompression.Zip)
                    ' create embedded file specification
                    Dim fileSpecification As New PdfEmbeddedFileSpecification(embeddingFilename, embeddedFile)
                    ' set description of the embedded file specification
                    fileSpecification.Description = "Test embedding"
                    ' add the embedded file specification to the dictionary
                    document.EmbeddedFiles.Add(embeddingFilename, fileSpecification)
                    ' save changes to the source
                    document.SaveChanges()
                End Using
            End Sub
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Embeds specified file into specified PDF document.
            /// &lt;/summary&gt;
            /// &lt;param name="pdfFilename"&gt;The filename of PDF document.&lt;/param&gt;
            /// &lt;param name="embeddingFilename"&gt;The filename of embedding file.&lt;/param&gt;
            public static void EmbedFileIntoPdfDocument(string pdfFilename, string embeddingFilename)
            {
                // open PDF document
                using (PdfDocument document = new PdfDocument(pdfFilename))
                {
                    // if embedded files are absent
                    if (document.EmbeddedFiles == null)
                        // create new dictionary
                        document.EmbeddedFiles = new PdfEmbeddedFileSpecificationDictionary(document);
            
                    // create embedded file instance
                    PdfEmbeddedFile embeddedFile = new PdfEmbeddedFile(document, embeddingFilename, PdfCompression.Zip);
                    // create embedded file specification
                    PdfEmbeddedFileSpecification fileSpecification = new PdfEmbeddedFileSpecification(embeddingFilename, embeddedFile);
                    // set description of the embedded file specification
                    fileSpecification.Description = "Test embedding";
                    // add the embedded file specification to the dictionary
                    document.EmbeddedFiles.Add(embeddingFilename, fileSpecification);
                    // save changes to the source
                    document.SaveChanges();
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfEmbeddedFile.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfEmbeddedFile" /> class.
            </summary>
            <param name="document">Parent document of this image resource.</param>
            <param name="filename">File name.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfEmbeddedFile.Save(System.String)">
            <summary>
            Saves this embedded file to specified file.
            </summary>
            <param name="filename">File name where embedded file must be saved.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfEmbeddedFile.Save(System.IO.Stream)">
            <summary>
            Saves this embedded file to specified stream.
            </summary>
            <param name="stream">Stream where embedded file must be saved.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfEmbeddedFile.UncompressedLength">
            <summary>
            Gets the uncompressed size of the embedded file, in bytes.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfEmbeddedFile.ModifyDate">
            <summary>
            Gets or sets the date and time when the embedded file was last modified.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfEmbeddedFile.CreationDate">
            <summary>
            Gets or sets the date and time when the embedded file was created.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfEmbeddedFile.Compression">
            <summary>
            Gets or sets compression of this resource.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfEmbeddedFile.ResourceType">
            <summary>
            Gets a type of this resource.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.ShadingPatterns.ShadingPatternBase">
            <summary>
            Represents a base class for shading patterns.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.ShadingPatterns.ShadingPatternBase.ShadingPatternType">
            <summary>
            Gets the shading pattern type.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Utils.CollectionDebugView`1">
            <summary>
            Determines how a <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfTreeNodeList`1" /> class
            is displayed in the debugger variable windows.
            </summary>
            <typeparam name="T">Collection element type.</typeparam>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Utils.CollectionDebugView`1.#ctor(System.Collections.Generic.ICollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Utils.CollectionDebugView`1" /> class.
            </summary>
            <param name="collection">A collection.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Utils.CollectionDebugView`1.Items">
            <summary>
            Gets a collection items as array.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.PdfOptimizeSettings">
            <summary>
            Defines settings for optimizing of PDF document.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfOptimizeSettings.#ctor(Vintasoft.Imaging.Pdf.PdfCompression,Vintasoft.Imaging.Pdf.PdfCompression,Vintasoft.Imaging.Pdf.PdfCompression)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.PdfOptimizeSettings" /> class.       
            </summary>
            <param name="compressionForColorImages">Compression of color images.</param>
            <param name="compressionForBWImages">Compression of black/white images.</param>
            <param name="compressionForData">Compression of binary and text data.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.PdfOptimizeSettings.CompressionForColorImages">
            <summary>
            Gets or sets the compression of color images.
            </summary>
            <value>
            Default value is <see cref="T:Vintasoft.Imaging.Pdf.PdfCompression" />.Undefined.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.PdfOptimizeSettings.CompressionForBWImages">
            <summary>
            Gets or sets the compression of black/white images.
            </summary>
            <value>
            Default value is <see cref="T:Vintasoft.Imaging.Pdf.PdfCompression" />.Undefined.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.PdfOptimizeSettings.CompressionForData">
            <summary>
            Gets or sets the compression of binary and text data.
            </summary>
            <value>
            Default value is <see cref="T:Vintasoft.Imaging.Pdf.PdfCompression" />.Zip.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.PdfOptimizeSettings.CompressMetadata">
            <summary>
            Gets or sets a value indicating whether the metadata should be compressed.
            </summary>
            <value>
            Default value is <b>false</b>.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.PdfRuntimeError">
            <summary>
            Provides information about the runtime error
            which occurs during loading of PDF document or
            rendering of PDF page.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.PdfRuntimeMessage">
            <summary>
            Provides information about the runtime error
            which occurs during loading of PDF document or
            rendering of PDF page.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfRuntimeMessage.ToString">
            <summary>
            Returns a String that represents this object.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfRuntimeError.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Vintasoft.Imaging.Pdf.PdfRuntimeError" /> class.
            </summary>
            <param name="nodeName">A name of the node.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfRuntimeError.ToString">
            <summary>
            Builds a readable representation of the stack trace.
            </summary>
            <returns>A readable representation of the stack trace.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.PdfRuntimeError.StackTrace">
            <summary>
            Returns a stack trace, which is an ordered
            collection of one or more stack frames.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.PdfRuntimeWarning">
            <summary>
            Provides information about the runtime warning which occurs during
            loading of PDF document or rendering of PDF page.
            </summary>
            <remarks>
            Warning is not a critical error and may be ignored.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfRuntimeWarning.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Vintasoft.Imaging.Pdf.PdfRuntimeWarning" /> class.
            </summary>
            <param name="nodeName">A name of the node.</param>
            <param name="message">The message.</param>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Content.PdfGraphicsState">
            <summary>
            Contains current graphics control parameters (graphics state) of PDF renderer.
            </summary>
            <remarks>
            Detailed information about graphics control parameters can be found in
            PDF Reference 1.7, 4.3 Graphics State.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Content.PdfGraphicsState.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Content.PdfGraphicsState.Dispose">
            <summary>
            Releases all resources used by this <see cref="T:Vintasoft.Imaging.Pdf.Content.PdfGraphicsState" />.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Content.PdfGraphicsState.Font">
            <summary>
            Gets the current font that is used for drawing text.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Content.PdfGraphicsState.LineWidth">
            <summary>
            Gets or sets the thickness, in user space units, of paths to be 
            stroked. 
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Content.PdfGraphicsState.LineCapStyle">
            <summary>
            Gets or sets the shape of the endpoints for any open path that is stroked.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Content.PdfGraphicsState.LineJoinStyle">
            <summary>
            Gets or sets the shape of joints between connected segments of a stroked path.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Content.PdfGraphicsState.BlendMode">
            <summary>
            Gets or sets the current blending mode used in the transparent imaging model.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Content.PdfGraphicsState.TextFontSize">
            <summary>
            Gets or sets size of current text font.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Content.PdfGraphicsState.CharacterSpacing">
            <summary>
            Gets or sets the character spacing, which is a number expressed in unscaled text space units.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Content.PdfGraphicsState.WordSpacing">
            <summary>
            Gets or sets the word spacing, which is a number expressed in unscaled text space units. 
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Content.PdfGraphicsState.TextRise">
            <summary>
            Gets or sets the text rise, which is a number expressed in unscaled text space units. 
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Content.PdfGraphicsState.TextLeading">
            <summary>
            Gets or sets the text leading, which is a number expressed in unscaled text space units. 
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Content.PdfGraphicsState.TextHorizontalScaling">
            <summary>
            Gets or sets the horizontal scaling, which is a number 
            specifying the percentage of the normal width. 
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Content.PdfGraphicsState.TextRenderingMode">
            <summary>
            Gets or sets the text rendering mode.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Content.PdfGraphicsState.TextMatrix">
            <summary>
            Gets or sets the text matrix.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Content.PdfGraphicsState.TextLineMatrix">
            <summary>
            Gets or sets the text line matrix.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Content.PdfGraphicsState.CTM">
            <summary>
            Gets or sets the Current Transformation Matrix.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Content.PdfGraphicsState.AlphaConstantForStrokingOperations">
            <summary>
            Gets or sets the alpha constant for stroking operations (draw).
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Content.PdfGraphicsState.AlphaConstantForNonStrokingOperations">
            <summary>
            Gets or sets the alpha constant for non stroking operations (fill).
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Content.PdfGraphicsState.NonStrokingRgbColor">
            <summary>
            Gets or sets the non stroking RGB color (fill color).
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Content.PdfGraphicsState.StrokingRgbColor">
            <summary>
            Gets or sets the stroking RGB color (draw color).
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Content.TextRenderingMode">
            <summary>
            Specifies available text rendering modes.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Content.TextRenderingMode.Fill">
            <summary>
            Fill text.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Content.TextRenderingMode.Stroke">
            <summary>
            Stroke text.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Content.TextRenderingMode.FillAndStroke">
            <summary>
            Fill, then stroke text.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Content.TextRenderingMode.Invisible">
            <summary>
            Neither fill nor stroke text (invisible).
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Content.TextRenderingMode.FillAndAddClipPath">
            <summary>
            Fill text and add to path for clipping.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Content.TextRenderingMode.StrokeAndAddClipPath">
            <summary>
            Stroke text and add to path for clipping.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Content.TextRenderingMode.FillAndStrokeAndAddClipPath">
            <summary>
            Fill, then stroke text and add to path for clipping.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Content.TextRenderingMode.AddClipPath">
            <summary>
            Add text to path for clipping.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.PdfDocument">
            <summary>
            Represents PDF document.
            </summary>
            <example>
            Here is an example that shows how to get information about PDF document:
            <code lang="VB.NET">
            Public Shared Sub GetInfoAboutPDF(filename As String)
                ' open PDF document
                Using document As New PdfDocument(filename)
                    ' show information about PDF document
                    If document.IsEncrypted Then
                        Console.WriteLine(String.Format("Encryption  : {0}", document.EncryptionSystem))
                    End If
                    Console.WriteLine(String.Format("Pages count : {0}", document.Pages.Count))
                    Console.WriteLine(String.Format("Title       : {0}", document.DocumentInformation.Title))
                    Console.WriteLine(String.Format("Author      : {0}", document.DocumentInformation.Author))
                    Console.WriteLine(String.Format("Creator     : {0}", document.DocumentInformation.Creator))
                    Console.WriteLine(String.Format("Producer    : {0}", document.DocumentInformation.Producer))
                    Console.WriteLine(String.Format("Subject     : {0}", document.DocumentInformation.Subject))
                    If document.DocumentInformation.CreationDate &lt;&gt; DateTime.MinValue Then
                        Console.WriteLine(String.Format("CreationDate: {0}", document.DocumentInformation.CreationDate))
                    End If
                    If document.DocumentInformation.ModifyDate &lt;&gt; DateTime.MinValue Then
                        Console.WriteLine(String.Format("ModifyDate  : {0}", document.DocumentInformation.ModifyDate))
                    End If
            
                    ' for each page of PDF document
                    Dim page As PdfPage
                    For i As Integer = 0 To document.Pages.Count - 1
                        ' show information about PDF page
                        Console.WriteLine()
                        page = document.Pages(i)
                        Console.WriteLine(String.Format("Page {0}:", i))
                        Console.WriteLine(String.Format(" - Size (in units)    = {0}", page.Size))
                        Console.WriteLine(String.Format(" - Default Resolution = {0}", page.DefaultResolution))
                        Dim images As PdfImageResource() = page.GetImages()
                        If images.Length &gt; 0 Then
                            Console.WriteLine(String.Format(" - Contains {0} images.", images.Length))
                        End If
                        If page.Thumbnail IsNot Nothing Then
                            Console.WriteLine(" - Contains thumbnail.")
                        End If
                        If page.IsImageOnly Then
                            Console.WriteLine(" - Is image only page.")
                        End If
                    Next
                End Using
            End Sub
            </code>
            <code lang="C#">
            public static void GetInfoAboutPDF(string filename)
            {
                // open PDF document
                using (PdfDocument document = new PdfDocument(filename))
                {
                    // show information about PDF document
                    if (document.IsEncrypted)
                        Console.WriteLine(string.Format("Encryption  : {0}", document.EncryptionSystem));
                    Console.WriteLine(string.Format("Pages count : {0}", document.Pages.Count));
                    Console.WriteLine(string.Format("Title       : {0}", document.DocumentInformation.Title));
                    Console.WriteLine(string.Format("Author      : {0}", document.DocumentInformation.Author));
                    Console.WriteLine(string.Format("Creator     : {0}", document.DocumentInformation.Creator));
                    Console.WriteLine(string.Format("Producer    : {0}", document.DocumentInformation.Producer));
                    Console.WriteLine(string.Format("Subject     : {0}", document.DocumentInformation.Subject));
                    if (document.DocumentInformation.CreationDate != DateTime.MinValue)
                        Console.WriteLine(string.Format("CreationDate: {0}", document.DocumentInformation.CreationDate));
                    if (document.DocumentInformation.ModifyDate != DateTime.MinValue)
                        Console.WriteLine(string.Format("ModifyDate  : {0}", document.DocumentInformation.ModifyDate));
            
                    // for each page of PDF document
                    PdfPage page;
                    for (int i = 0; i &lt; document.Pages.Count; i++)
                    {
                        // show information about PDF page
                        Console.WriteLine();
                        page = document.Pages[i];
                        Console.WriteLine(string.Format("Page {0}:", i));
                        Console.WriteLine(string.Format(" - Size (in units)    = {0}", page.Size));
                        Console.WriteLine(string.Format(" - Default Resolution = {0}", page.DefaultResolution));
                        PdfImageResource[] images = page.GetImages();
                        if (images.Length &gt; 0)
                            Console.WriteLine(string.Format(" - Contains {0} images.", images.Length));
                        if (page.Thumbnail != null)
                            Console.WriteLine(" - Contains thumbnail.");
                        if (page.IsImageOnly)
                            Console.WriteLine(" - Is image only page.");
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfDocument.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.PdfDocument" /> class.
            </summary>
            <remarks>
            This constructor creates new PDF document compatible
            with version 1.4.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfDocument.#ctor(Vintasoft.Imaging.Pdf.PdfFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.PdfDocument" /> class.
            </summary>
            <param name="format">Format of new PDF document.</param>
            <remarks>
            This constructor creates new PDF document of specified format.
            </remarks>
            <example>Here is an example that demonstrates how to create
            an empty PDF document version 1.4 in the memory and save it to a file.
            <code lang="VB.NET">
            Public Sub CreatePdfDocumentInMemory(images As ImageCollection)
                ' create new PDF document version 1.4 in the memory
                Using document As New PdfDocument(New PdfFormat("1.4"))
                    ' create an empty image 
                    Using image As New VintasoftImage(600, 800)
                        ' add image to PDF document
                        document.Pages.Add(image)
                    End Using
            
                    ' save document to a file
                    document.Save("doc.pdf")
                End Using
            End Sub
            </code>
            <code lang="C#">
            public void CreatePdfDocumentInMemory(ImageCollection images)
            {
                // create new PDF document version 1.4 in the memory
                using (PdfDocument document = new PdfDocument(new PdfFormat("1.4")))
                {
                    // create an empty image 
                    using (VintasoftImage image = new VintasoftImage(600, 800))
                    {
                        // add image to PDF document
                        document.Pages.Add(image);
                    }
            
                    // save document to a file
                    document.Save("doc.pdf");
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfDocument.#ctor(Vintasoft.Imaging.Pdf.PdfFormat,Vintasoft.Imaging.Pdf.Security.EncryptionSystem)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.PdfDocument" /> class.
            </summary>
            <param name="format">Format of new PDF document.</param>
            <param name="encryptionSystem">Encryption system of new PDF document.</param>
            <remarks>
            This constructor creates new PDF document of specified format and encryption settings.
            </remarks>
            <example>Here is an example that demonstrates how to create
            an empty encrypted PDF document version 1.4 in the memory and save it to a file.
            <code lang="VB.NET">
            Public Shared Sub CreateEncryptedDocument(pdfFilename As String, images As ImageCollection, password As String)
                ' create encryption system 128-bit RC4, password protection
                Dim encryption As New EncryptionSystem(EncryptionAlgorithm.RC4, 128, password, password, UserAccessPermissions.AllowAll)
            
                ' create encrypted document
                Using document As New PdfDocument(PdfFormat.Pdf_14, encryption)
                    ' add pages
                    For Each image As VintasoftImage In images
                        document.Pages.Add(image)
                    Next
            
                    ' save document
                    document.SaveChanges(pdfFilename)
                End Using
            End Sub
            </code>
            <code lang="C#">
            public static void CreateEncryptedDocument(string pdfFilename, ImageCollection images, string password)
            {
                // create encryption system 128-bit RC4, password protection
                EncryptionSystem encryption = new EncryptionSystem(
                    EncryptionAlgorithm.RC4, 128,
                    password, password, UserAccessPermissions.AllowAll);
            
                // create encrypted document
                using (PdfDocument document = new PdfDocument(PdfFormat.Pdf_14, encryption))
                {
                    // add pages
                    foreach (VintasoftImage image in images)
                        document.Pages.Add(image);
            
                    // save document
                    document.SaveChanges(pdfFilename);
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfDocument.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.PdfDocument" /> class
            from the specified file.
            </summary>
            <param name="filename">File name of the PDF document.</param>
            <exception cref="T:Vintasoft.Imaging.Pdf.PdfException">Thrown if file is not correct.</exception>
            <remarks>
            This constructor opens an existing PDF document in read-write mode.
            </remarks>
            <example>Here is an example that demonstrates how to load
            a PDF document from file.
            <code lang="VB.NET">
            Public Shared Function LoadPdfDocumentFromFile(filename As String) As PdfDocument
                Return New PdfDocument(filename)
            End Function
            </code>
            <code lang="C#">
            public static PdfDocument LoadPdfDocumentFromFile(string filename)
            {
                return new PdfDocument(filename);
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfDocument.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.PdfDocument" /> class
            from the specified file.
            </summary>
            <param name="filename">File name of the PDF document.</param>
            <param name="readOnlyMode">Determines if PDF document should be
            opened in read-only mode.</param>
            <exception cref="T:Vintasoft.Imaging.Pdf.PdfException">Thrown if file is not correct.</exception>
            <remarks>
            This constructor opens an existing PDF document.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfDocument.#ctor(System.String,Vintasoft.Imaging.Pdf.PdfFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.PdfDocument" /> class.
            </summary>
            <param name="filename">File name of the new PDF document.</param>
            <param name="format">Format of new PDF document.</param>
            <remarks>
            This constructor creates new PDF document in
            read-write mode.
            </remarks>
            <example>Here is an example that demonstrates how to create
            an empty PDF/A document version 1.4 in a file.
            <code lang="VB.NET">
            Public Sub CreatePdfADocumentInFile(filename As String)
                ' create new PDF document version 1.4 in the memory
                Using document As New PdfDocument(filename, PdfFormat.Pdf_A)
                    ' create an empty image 
                    Using image As New VintasoftImage(600, 800)
                        ' add image to PDF document
                        document.Pages.Add(image)
                    End Using
            
                    ' save document to a file
                    document.SaveChanges()
                End Using
            End Sub
            </code>
            <code lang="C#">
            public void CreatePdfADocumentInFile(string filename)
            {
                // create new PDF document version 1.4 in the memory
                using (PdfDocument document = new PdfDocument(filename, PdfFormat.Pdf_A))
                {
                    // create an empty image 
                    using (VintasoftImage image = new VintasoftImage(600, 800))
                    {
                        // add image to PDF document
                        document.Pages.Add(image);
                    }
            
                    // save document to a file
                    document.SaveChanges();
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfDocument.#ctor(System.String,System.IO.FileMode,Vintasoft.Imaging.Pdf.PdfFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.PdfDocument" /> class from
            the specified file or creates a new document.
            </summary>
            <param name="filename">File name of the PDF document.</param>
            <param name="fileMode">A FileMode constant that determines how to
            open or create the PDF document.</param>
            <param name="format">Format of new PDF document.</param>
            <remarks>
            This constructor opens an existing or creates new PDF document in
            read-write mode.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfDocument.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,Vintasoft.Imaging.Pdf.PdfFormat)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Vintasoft.Imaging.Pdf.PdfDocument" /> class from the
            specified file or creates a new document.
            </summary>
            <param name="filename">File name of the PDF document.</param>
            <param name="fileMode">A FileMode constant that determines how to
            open or create the PDF document.</param>
            <param name="fileAccess">File access to open/create the PDF document.</param>
            <param name="format">Format of new PDF document.</param>
            <remarks>
            This constructor opens an existing or creates new PDF document with
            specified access mode.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfDocument.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,Vintasoft.Imaging.Pdf.PdfFormat,Vintasoft.Imaging.Pdf.Security.EncryptionSystem)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Vintasoft.Imaging.Pdf.PdfDocument" /> class from the
            specified file or creates a new document.
            </summary>
            <param name="filename">File name of the PDF document.</param>
            <param name="fileMode">A FileMode constant that determines how to
            open or create the PDF document.</param>
            <param name="fileAccess">File access to open/create the PDF document.</param>
            <param name="format">Format of new PDF document.</param>
            <param name="encryptionSystem">Encryption system of new PDF document.</param>
            <remarks>
            This constructor opens an existing or creates new PDF document with
            specified access mode.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfDocument.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.PdfDocument" /> class from
            the specified stream. 
            </summary>
            <param name="stream">The stream with PDF document.</param>
            <exception cref="T:Vintasoft.Imaging.Pdf.PdfException">Thrown if <i>stream</i> does not contain PDF
            document or PDF document is not correct.</exception>
            <remarks>
            This constructor opens an existing PDF document from the stream
            with access mode of the stream.
            </remarks>
            <example>
            <see cref="M:Vintasoft.Imaging.Pdf.PdfDocument.#ctor(System.IO.Stream,Vintasoft.Imaging.Pdf.PdfFormat)" />
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfDocument.#ctor(System.IO.Stream,Vintasoft.Imaging.Pdf.PdfFormat,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.PdfDocument" /> class
            from the specified stream. 
            </summary>
            <param name="stream">The stream with PDF document.</param>
            <param name="format">Format of new PDF document.</param>
            <param name="disposeStreamAfterUse">The flag indicating whether 
            the stream dispose after use, or not.</param>
            <exception cref="T:Vintasoft.Imaging.Pdf.PdfException">Thrown if <i>stream</i> data is not correct.</exception>
            <remarks>
            This constructor opens an existing PDF document from the stream
            with access mode of the stream if stream length is 0.<br />
            This constructor creates new PDF document in the stream
            if stream length is 0. Stream must have read-write access.<br />
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfDocument.#ctor(System.IO.Stream,Vintasoft.Imaging.Pdf.PdfFormat,Vintasoft.Imaging.Pdf.Security.EncryptionSystem,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.PdfDocument" /> class
            from the specified stream. 
            </summary>
            <param name="stream">The stream with PDF document.</param>
            <param name="format">Format of new PDF document.</param>
            <param name="disposeStreamAfterUse">The flag indicating whether 
            the stream dispose after use, or not.</param>
            <param name="encryptionSystem">Encryption system of new PDF document.</param>
            <exception cref="T:Vintasoft.Imaging.Pdf.PdfException">Thrown if <i>stream</i> data is not correct.</exception>
            <remarks>
            This constructor opens an existing PDF document from the stream
            with access mode of the stream if stream length is 0.<br />
            This constructor creates new PDF document in the stream
            if stream length is 0. Stream must have read-write access.<br />
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfDocument.#ctor(System.IO.Stream,Vintasoft.Imaging.Pdf.PdfFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.PdfDocument" /> class
            from the specified stream. 
            </summary>
            <param name="stream">The stream with PDF document.</param>
            <param name="format">Format of new PDF document.</param>
            <exception cref="T:Vintasoft.Imaging.Pdf.PdfException">Thrown if <i>stream</i> data is not correct.</exception>
            <remarks>
            This constructor opens an existing PDF document from the stream
            with access mode of the stream if stream length is 0.<br />
            This constructor creates new PDF document in the stream
            if stream length is 0. Stream must have read-write access.<br />
            </remarks>
            <example>Here is an example that demonstrates how to create
            an empty PDF document version 1.4 in a stream.
            <code lang="VB.NET">
            Public Sub CreatePdfDocumentInStream(stream As Stream)
                ' create new PDF document version 1.4 in the memory
                Using document As New PdfDocument(stream, New PdfFormat("1.4"))
                    ' create an empty image 
                    Using image As New VintasoftImage(600, 800)
                        ' add image to PDF document
                        document.Pages.Add(image)
                    End Using
            
                    ' save document to a file
                    document.SaveChanges()
                End Using
            End Sub
            </code>
            <code lang="C#">
            public void CreatePdfDocumentInStream(Stream stream)
            {
                // create new PDF document version 1.4 in the memory
                using (PdfDocument document = new PdfDocument(stream, new PdfFormat("1.4")))
                {
                    // create an empty image 
                    using (VintasoftImage image = new VintasoftImage(600, 800))
                    {
                        // add image to PDF document
                        document.Pages.Add(image);
                    }
            
                    // save document to a file
                    document.SaveChanges();
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfDocument.RemoveAttachments(System.Boolean)">
            <summary>
            Removes the <see cref="P:Vintasoft.Imaging.Pdf.PdfDocument.Attachments" /> (Potfolio).
            </summary>
            <param name="removeEmbeddedFiles">Determines that all embedded files,
            that are referenced in portfolio, must be removed.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if
            document does not have attachments.</exception>
            <seealso cref="P:Vintasoft.Imaging.Pdf.PdfDocument.Attachments" />
            <seealso cref="M:Vintasoft.Imaging.Pdf.PdfDocument.CreateAttachments(System.Boolean)" />
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfDocument.CreateAttachments(System.Boolean)">
            <summary>
            Creates the <see cref="P:Vintasoft.Imaging.Pdf.PdfDocument.Attachments" /> (Portfolio).
            </summary>
            <param name="useFolders">Determines that portfolio
            with folders (PDF 1.7 ExtensionLevel 3) must be created.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if
            document already has attachments.</exception>
            <seealso cref="P:Vintasoft.Imaging.Pdf.PdfDocument.Attachments" />
            <seealso cref="M:Vintasoft.Imaging.Pdf.PdfDocument.RemoveAttachments(System.Boolean)" />
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfDocument.RemoveUnusedNames">
            <summary>
            Analyzes the name dictionary of PDF document and
            removes not used names from the name dictionary.
            </summary>
            <returns>Removed name count.</returns>
            <remarks>
            <i>Note:</i> Method may use a lot of memory and can work for a long time
            because method analyzes the whole structure of PDF document.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfDocument.RemoveUnusedPages">
            <summary>
            Searches not used pages in PDF document and removes not used pages from PDF document.
            Also method removes all references to removed PDF pages.
            </summary>
            <returns>Removed pages count.</returns>
            <remarks>
            <i>Note:</i> Method may use a lot of memory and can work for a long time
            because method analyzes the whole structure of PDF document.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfDocument.GetSignatureInformation">
            <summary>
            Returns all digital signatures of PDF document.
            </summary>
            <returns>An array that contains all digital signatures of PDF document.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfDocument.RemoveStructureTree">
            <summary> 
            Removes a structure tree from this PDF document.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfDocument.GetImages">
            <summary>
            Returns a collection of image-resources of this PDF document.
            </summary>
            <returns>The collection that contains all image resources of this PDF document.</returns>
            <example>
            Here is an example that demonstrates how to obtain 
            information about all image resources of PDF page:
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Prints information about image-resources of PDF document.
            ''' &lt;/summary&gt;
            ''' &lt;param name="pdfFilename"&gt;The filename of PDF document.&lt;/param&gt;
            Public Shared Sub GetPdfImagesInfo(pdfFilename As String)
                ' open PDF document
                Using document As New PdfDocument(pdfFilename)
                    ' get collection of image-resources of PDF document
                    Dim images As PdfImageResource() = document.GetImages()
            
                    ' print count of image-resource
                    Console.WriteLine("Images count: {0}", images.Length)
            
                    ' for each image-resource
                    For Each image As PdfImageResource In images
                        ' print information about image-resource
                        Console.WriteLine(vbTab &amp; "{0,4}x{1,-4} {2,5}bpp {3}", image.Width, image.Height, image.BitsPerPixel, image.Compression)
                    Next
                End Using
            End Sub
            
            ' This code example produces the following output: 
              Images count: 11
                189x41      24bpp Jpeg
                120x50      24bpp Jpeg
                122x56      24bpp Jpeg
                143x41      24bpp Jpeg
                216x21      24bpp Jpeg
                106x49       8bpp Zip
                209x30      24bpp Jpeg
                189x24      24bpp Jpeg
                122x42      24bpp Jpeg
                  5x7       24bpp Zip
                817x292     24bpp Jpeg
              
            
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Prints information about image-resources of PDF document.
            /// &lt;/summary&gt;
            /// &lt;param name="pdfFilename"&gt;The filename of PDF document.&lt;/param&gt;
            public static void GetPdfImagesInfo(string pdfFilename)
            {
                // open PDF document
                using (PdfDocument document = new PdfDocument(pdfFilename))
                {
                    // get collection of image-resources of PDF document
                    PdfImageResource[] images = document.GetImages();
            
                    // print count of image-resource
                    Console.WriteLine("Images count: {0}", images.Length);
            
                    // for each image-resource
                    foreach (PdfImageResource image in images)
                    {
                        // print information about image-resource
                        Console.WriteLine("\t{0,4}x{1,-4} {2,5}bpp {3}", image.Width, image.Height,
                            image.BitsPerPixel, image.Compression);
                    }
                }
            }
            
            /* This code example produces the following output: 
            Images count: 11
              189x41      24bpp Jpeg
              120x50      24bpp Jpeg
              122x56      24bpp Jpeg
              143x41      24bpp Jpeg
              216x21      24bpp Jpeg
              106x49       8bpp Zip
              209x30      24bpp Jpeg
              189x24      24bpp Jpeg
              122x42      24bpp Jpeg
                5x7       24bpp Zip
              817x292     24bpp Jpeg
            */
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfDocument.GetResources">
            <summary>
            Returns a collection of resources of this PDF document.
            </summary>
            <returns>The collection that contains all resources of this PDF document.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfDocument.GetFonts">
            <summary>
            Returns a collection of fonts of this PDF document.
            </summary>
            <returns>The collection that contains all fonts of this PDF document.</returns>
            <example>
            Here is an example that demonstrates how to obtain 
            information about all fonts of PDF document:
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Gets and prints information about fonts of PDF document.
            ''' &lt;/summary&gt;
            ''' &lt;param name="pdfFilename"&gt;The filename of PDF document.&lt;/param&gt;
            Public Shared Sub PrintPdfFontsInfo(pdfFilename As String)
                ' open pdf document
                Using document As New PdfDocument(pdfFilename)
                    ' get collection of font of PDF document
                    Dim fonts As PdfFont() = document.GetFonts()
            
                    ' print font count
                    Console.WriteLine("Font count: {0}", fonts.Length)
                    Console.WriteLine()
            
                    ' for each font
                    For Each font As PdfFont In fonts
                        ' print name and type of font
                        Console.WriteLine(vbTab &amp; "Name: {0,-30} Type:{1}", font.FontName, font.FontType)
                    Next
                End Using
            End Sub
            
            ' This code example produces the following output: 
              Font count: 10
            '
                  Name: XIMJKA+TTE11BB980t00           Type:TrueType
                  Name: ANAPBW+TTE1198D80t00           Type:TrueType
                  Name: MyriadPro-Regular              Type:Type1
                  Name: IXDUSS+MyriadPro-Bold          Type:Type1
                  Name: GZINQW+MyriadPro-Black         Type:Type1
                  Name: SMICCY+MyriadPro-Regular       Type:Type1
                  Name: IXDUSS+MinionPro-SemiboldIt    Type:Type1
                  Name: IXDUSS+MinionPro-It            Type:Type1
                  Name: IXDUSS+MinionPro-Bold          Type:Type1
                  Name: YDDMIM+MinionPro-Regular       Type:Type1
              
            
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Gets and prints information about fonts of PDF document.
            /// &lt;/summary&gt;
            /// &lt;param name="pdfFilename"&gt;The filename of PDF document.&lt;/param&gt;
            public static void PrintPdfFontsInfo(string pdfFilename)
            {
                // open pdf document
                using (PdfDocument document = new PdfDocument(pdfFilename))
                {
                    // get collection of font of PDF document
                    PdfFont[] fonts = document.GetFonts();
            
                    // print font count
                    Console.WriteLine("Font count: {0}", fonts.Length);
                    Console.WriteLine();
            
                    // for each font
                    foreach (PdfFont font in fonts)
                        // print name and type of font
                        Console.WriteLine("\tName: {0,-30} Type:{1}", font.FontName, font.FontType);
                }
            }
            
            /* This code example produces the following output: 
            Font count: 10
            
                Name: XIMJKA+TTE11BB980t00           Type:TrueType
                Name: ANAPBW+TTE1198D80t00           Type:TrueType
                Name: MyriadPro-Regular              Type:Type1
                Name: IXDUSS+MyriadPro-Bold          Type:Type1
                Name: GZINQW+MyriadPro-Black         Type:Type1
                Name: SMICCY+MyriadPro-Regular       Type:Type1
                Name: IXDUSS+MinionPro-SemiboldIt    Type:Type1
                Name: IXDUSS+MinionPro-It            Type:Type1
                Name: IXDUSS+MinionPro-Bold          Type:Type1
                Name: YDDMIM+MinionPro-Regular       Type:Type1
            */
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfDocument.SaveChanges">
            <summary>
            Saves the changes to the source of PDF document.
            </summary>
            <example>
            Here is an example that demonstrates how to load an existing PDF document from memory stream,
            add a page to the document and save it to source stream:
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Loads PDF document from a stream, adds page to PDF document and
            ''' saves changes back to the source stream.
            ''' &lt;/summary&gt;
            ''' &lt;param name="pdfFilename"&gt;The filename of PDF document.&lt;/param&gt;
            Public Shared Sub OpenChangeAndSavePdfDocumentFromStream(pdfFilename As String)
                ' open stream
                Using stream As Stream = File.Open(pdfFilename, FileMode.Open, FileAccess.ReadWrite)
                    ' open PDF document
                    Using document As New PdfDocument(stream)
                        ' add new page to PDF document
                        document.Pages.Add(PaperSizeKind.A4)
            
                        ' save changes to the source stream
                        document.SaveChanges()
                    End Using
            
                    ' close the stream
                    stream.Close()
                End Using
            End Sub
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Loads PDF document from a stream, adds page to PDF document and
            /// saves changes back to the source stream.
            /// &lt;/summary&gt;
            /// &lt;param name="pdfFilename"&gt;The filename of PDF document.&lt;/param&gt;
            public static void OpenChangeAndSavePdfDocumentFromStream(string pdfFilename)
            {
                // open stream
                using (Stream stream = File.Open(pdfFilename, FileMode.Open, FileAccess.ReadWrite))
                {
                    // open PDF document
                    using (PdfDocument document = new PdfDocument(stream))
                    {
                        // add new page to PDF document
                        document.Pages.Add(PaperSizeKind.A4);
            
                        // save changes to the source stream
                        document.SaveChanges();
                    }
            
                    // close the stream
                    stream.Close();
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfDocument.SaveChanges(System.String)">
            <summary>
            Saves the changes to specified file and switches
            to the specified file.
            </summary>
            <param name="filename">File name to save PDF
            document.</param>
            <remarks>
            All further changes will affect specified file only.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfDocument.SaveChanges(System.IO.Stream)">
            <summary>
            Saves the changes to specified stream and switches
            to specified stream.
            </summary>
            <param name="stream">Stream to save PDF
            document.</param>
            <remarks>
            All further changes will affect specified stream only.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfDocument.Save(System.String)">
            <summary>
            Saves the PDF document to file.
            </summary>
            <param name="filename">File name to save PDF
            document.</param>
            <remarks>
            All further changes will affect the source of
            PDF document only.
            </remarks>
            <example>
            Here is an example that demonstrates how to load an existing PDF document from file,
            add a page to the document and save it to a new file:
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Loads PDF document from a file, adds page to PDF document and
            ''' saves changes to the new file.
            ''' &lt;/summary&gt;
            ''' &lt;param name="sourcePdfFilename"&gt;The filename of source PDF document.&lt;/param&gt;
            ''' &lt;param name="destPdfFilename"&gt;The filename of destination PDF document.&lt;/param&gt;
            Public Shared Sub OpenPdfDocumentAndSaveToNewFile(sourcePdfFilename As String, destPdfFilename As String)
                ' open PDF document
                Using document As New PdfDocument(sourcePdfFilename)
                    ' add new page to PDF document
                    document.Pages.Add(PaperSizeKind.A4)
            
                    ' save PDF document to the new file
                    document.Save(destPdfFilename)
                End Using
            End Sub
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Loads PDF document from a file, adds page to PDF document and
            /// saves changes to the new file.
            /// &lt;/summary&gt;
            /// &lt;param name="sourcePdfFilename"&gt;The filename of source PDF document.&lt;/param&gt;
            /// &lt;param name="destPdfFilename"&gt;The filename of destination PDF document.&lt;/param&gt;
            public static void OpenPdfDocumentAndSaveToNewFile(
                string sourcePdfFilename,
                string destPdfFilename)
            {
                // open PDF document
                using (PdfDocument document = new PdfDocument(sourcePdfFilename))
                {
                    // add new page to PDF document
                    document.Pages.Add(PaperSizeKind.A4);
            
                    // save PDF document to the new file
                    document.Save(destPdfFilename);
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfDocument.Save(System.IO.Stream)">
            <summary>
            Saves the PDF document to stream.
            </summary>
            <param name="stream">Stream to save PDF
            document.</param>
            <remarks>
            All further changes will affect the source of
            PDF document only.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfDocument.Pack">
            <summary>
            Packs the PDF document.
            </summary>
            <remarks>
            This methods copies content of this PDF document
            to temporary PDF document, removes unused objects
            from temporary PDF document and copies content of
            temporary PDF document back to this PDF document.
            Temporary PDF document is removed.
            </remarks>
            <seealso cref="M:Vintasoft.Imaging.Pdf.PdfDocument.Pack(Vintasoft.Imaging.Pdf.PdfFormat)" />
            <example>
            <see cref="M:Vintasoft.Imaging.Pdf.PdfDocument.Optimize(Vintasoft.Imaging.Pdf.PdfFormat,Vintasoft.Imaging.Pdf.PdfOptimizeSettings)" />
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfDocument.Pack(Vintasoft.Imaging.Pdf.PdfFormat)">
            <summary>
            Packs the PDF document with specified format.
            </summary>
            <param name="format">Format to pack.</param>
            <remarks>
            This methods copies content of this PDF document
            to temporary PDF document, removes unused objects
            from temporary PDF document, converts temporary
            PDF document to specified format and copies content
            of temporary PDF document back to this PDF document.
            Temporary PDF document is removed.
            </remarks>
            <seealso cref="M:Vintasoft.Imaging.Pdf.PdfDocument.Pack" />
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfDocument.Pack(Vintasoft.Imaging.Pdf.PdfFormat,Vintasoft.Imaging.Pdf.Security.EncryptionSystem)">
            <summary>
            Packs the PDF document with specified format.
            </summary>
            <param name="format">Format to pack.</param>
            <param name="encryptionSystem">Encryption system of PDF document.</param>
            <remarks>
            This methods copies content of this PDF document
            to temporary PDF document, removes unused objects
            from temporary PDF document, converts temporary
            PDF document to specified format and copies content
            of temporary PDF document back to this PDF document.
            Temporary PDF document is removed.
            </remarks>
            <example>
            Here is an example that shows how to encrypt, decrypt and change document passwords.
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Performs the authentication using the specified password.
            ''' &lt;/summary&gt;
            Public Shared Sub Authenticate(document As PdfDocument, password As String)
                If document.AuthorizationResult = AuthorizationResult.IncorrectPassword Then
                    document.Authenticate(password)
                    If document.AuthorizationResult = AuthorizationResult.IncorrectPassword Then
                        Throw New ArgumentException("Password is incorrect.")
                    End If
                End If
            End Sub
            
            ''' &lt;summary&gt;
            ''' Decrypts the specified document.
            ''' &lt;/summary&gt;
            Public Shared Sub Decrypt(document As PdfDocument, password As String)
                ' authentication
                Authenticate(document, password)
                ' pack document without encryption
                document.Pack(document.Format, Nothing)
            End Sub
            
            ''' &lt;summary&gt;
            ''' Encrypts PDF document with specified user password, owner password and
            ''' user access permissions.
            ''' &lt;/summary&gt;
            Public Shared Sub Encrypt(document As PdfDocument, userPassword As String, ownerPassword As String, allowPrint As Boolean, allowExtractContent As Boolean)
                ' select encryption algorithm and encryption key length
                Dim algorithm As EncryptionAlgorithm
                Dim keyLength As Integer
                If document.Format.MinorVersionNumber &lt; 4 Then
                    keyLength = 40
                    algorithm = EncryptionAlgorithm.RC4
                ElseIf document.Format.MinorVersionNumber &lt; 6 Then
                    keyLength = 128
                    algorithm = EncryptionAlgorithm.RC4
                Else
                    keyLength = 128
                    algorithm = EncryptionAlgorithm.AES
                End If
                ' select user access permissions
                Dim permissions As UserAccessPermissions = UserAccessPermissions.None
                permissions = permissions Or UserAccessPermissions.FillInteractiveFormFields
                If allowPrint Then
                    permissions = permissions Or UserAccessPermissions.PrintDocumentInHighResolution Or UserAccessPermissions.PrintDocumentInLowResolution
                End If
                If allowExtractContent Then
                    permissions = permissions Or UserAccessPermissions.ExtractTextAndGraphics
                End If
            
                ' create encryption system
                Dim encryption As New EncryptionSystem(algorithm, keyLength, userPassword, ownerPassword, permissions)
                ' pack and ecrypt document
                document.Pack(document.Format, encryption)
            End Sub
            
            ''' &lt;summary&gt;
            ''' Changes user and owner password.
            ''' &lt;/summary&gt;
            Public Shared Sub ChangePassword(document As PdfDocument, oldPassword As String, newUserPassword As String, newOwnerPassword As String)
                If Not document.IsEncrypted Then
                    Throw New ArgumentException("Document is not encrypted!")
                End If
            
                ' authentication
                Authenticate(document, oldPassword)
                ' create new encryption system
                Dim encryption As New EncryptionSystem(document.EncryptionSystem.Algorithm, document.EncryptionSystem.KeyLength, newUserPassword, newOwnerPassword, document.EncryptionSystem.UserPermissions)
                ' pack and ecrypt document
                document.Pack(document.Format, encryption)
            End Sub
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Performs the authentication using the specified password.
            /// &lt;/summary&gt;
            public static void Authenticate(PdfDocument document, string password)
            {
                if (document.AuthorizationResult == AuthorizationResult.IncorrectPassword)
                {
                    document.Authenticate(password);
                    if (document.AuthorizationResult == AuthorizationResult.IncorrectPassword)
                        throw new ArgumentException("Password is incorrect.");
                }
            }
            
            /// &lt;summary&gt;
            /// Decrypts the specified document.
            /// &lt;/summary&gt;
            public static void Decrypt(PdfDocument document, string password)
            {
                // authentication
                Authenticate(document, password);
                // pack document without encryption
                document.Pack(document.Format, null);
            }
            
            /// &lt;summary&gt;
            /// Encrypts PDF document with specified user password, owner password and
            /// user access permissions.
            /// &lt;/summary&gt;
            public static void Encrypt(
                PdfDocument document,
                string userPassword,
                string ownerPassword,
                bool allowPrint,
                bool allowExtractContent)
            {
                // select encryption algorithm and encryption key length
                EncryptionAlgorithm algorithm;
                int keyLength;
                if (document.Format.MinorVersionNumber &lt; 4)
                {
                    keyLength = 40;
                    algorithm = EncryptionAlgorithm.RC4;
                }
                else if (document.Format.MinorVersionNumber &lt; 6)
                {
                    keyLength = 128;
                    algorithm = EncryptionAlgorithm.RC4;
                }
                else
                {
                    keyLength = 128;
                    algorithm = EncryptionAlgorithm.AES;
                }
                // select user access permissions
                UserAccessPermissions permissions = UserAccessPermissions.None;
                permissions |= UserAccessPermissions.FillInteractiveFormFields;
                if (allowPrint)
                {
                    permissions |=
                           UserAccessPermissions.PrintDocumentInHighResolution |
                           UserAccessPermissions.PrintDocumentInLowResolution;
                }
                if (allowExtractContent)
                {
                    permissions |= UserAccessPermissions.ExtractTextAndGraphics;
                }
            
                // create encryption system
                EncryptionSystem encryption = new EncryptionSystem(algorithm, keyLength,
                    userPassword, ownerPassword, permissions);
                // pack and ecrypt document
                document.Pack(document.Format, encryption);
            }
            
            /// &lt;summary&gt;
            /// Changes user and owner password.
            /// &lt;/summary&gt;
            public static void ChangePassword(
                PdfDocument document,
                string oldPassword,
                string newUserPassword,
                string newOwnerPassword)
            {
                if (!document.IsEncrypted)
                    throw new ArgumentException("Document is not encrypted!");
            
                // authentication
                Authenticate(document, oldPassword);
                // create new encryption system
                EncryptionSystem encryption = new EncryptionSystem(
                    document.EncryptionSystem.Algorithm,
                    document.EncryptionSystem.KeyLength,
                    newUserPassword,
                    newOwnerPassword,
                    document.EncryptionSystem.UserPermissions);
                // pack and ecrypt document
                document.Pack(document.Format, encryption);
            }
            </code>
            </example>
            <seealso cref="M:Vintasoft.Imaging.Pdf.PdfDocument.Pack" />
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfDocument.Pack(System.String)">
            <summary>
            Packs and saves PDF document to specified
            file and switches to the specified file.
            </summary>
            <param name="filename">File name to pack PDF
            document.</param>
            <remarks>
            This methods copies content of this PDF document
            to specified file, removes unused objects from
            the specified file and switches to specified file.<br />
            Source PDF document is not affected.
            All further changes will affect the specified
            file only.
            </remarks>
            <seealso cref="M:Vintasoft.Imaging.Pdf.PdfDocument.Pack(System.String,Vintasoft.Imaging.Pdf.PdfFormat)" />
            <example>
            Here is an example that demonstrates how to load an existing PDF document from file, 
            delete a page from document, pack and save the changed document to a new file:
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Loads PDF document from a file,
            ''' removes the first page of PDF docuemnt and
            ''' packs PDF document to the new file.
            ''' &lt;/summary&gt;
            ''' &lt;param name="sourcePdfFilename"&gt;The filename of source PDF document.&lt;/param&gt;
            ''' &lt;param name="destPdfFilename"&gt;The filename of destination PDF document.&lt;/param&gt;
            Public Shared Sub RemovePageFromPdfDocumentAndPackPdfDocument(sourcePdfFilename As String, destPdfFilename As String)
                ' open PDF document
                Using document As New PdfDocument(sourcePdfFilename)
                    ' remove the first page from PDF document
                    document.Pages.RemoveAt(0)
            
                    ' pack PDF document to the new file
                    document.Pack(destPdfFilename)
                End Using
            End Sub
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Loads PDF document from a file,
            /// removes the first page of PDF docuemnt and
            /// packs PDF document to the new file.
            /// &lt;/summary&gt;
            /// &lt;param name="sourcePdfFilename"&gt;The filename of source PDF document.&lt;/param&gt;
            /// &lt;param name="destPdfFilename"&gt;The filename of destination PDF document.&lt;/param&gt;
            public static void RemovePageFromPdfDocumentAndPackPdfDocument(
                string sourcePdfFilename,
                string destPdfFilename)
            {
                // open PDF document
                using (PdfDocument document = new PdfDocument(sourcePdfFilename))
                {
                    // remove the first page from PDF document
                    document.Pages.RemoveAt(0);
            
                    // pack PDF document to the new file
                    document.Pack(destPdfFilename);
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfDocument.Pack(System.IO.Stream)">
            <summary>
            Packs and saves PDF document to specified
            stream and switches to the specified stream.
            </summary>
            <param name="stream">Stream to pack PDF
            document.</param>
            <remarks>
            This methods copies content of this PDF document
            to specified stream, removes unused objects from
            the specified stream and switches to specified
            stream.<br />
            Source PDF document is not affected.
            All further changes will affect the specified
            stream only.
            </remarks>
            <seealso cref="M:Vintasoft.Imaging.Pdf.PdfDocument.Pack(System.IO.Stream,Vintasoft.Imaging.Pdf.PdfFormat)" />
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfDocument.Pack(System.String,Vintasoft.Imaging.Pdf.PdfFormat)">
            <summary>
            Packs and saves PDF document to specified
            file in specified format and switches to
            the specified file.
            </summary>
            <param name="filename">File name to pack PDF document.</param>
            <param name="format">Format of PDF document.</param>
            <remarks>
            This methods copies content of this PDF document
            to specified file, converts content of the specified
            file to specified format, removes unused objects
            from the specified file and switches to specified
            file.<br />
            Source PDF document is not affected.
            All further changes will affect the specified
            file only.
            </remarks>
            <seealso cref="M:Vintasoft.Imaging.Pdf.PdfDocument.Pack(System.String)" />
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfDocument.Pack(System.String,Vintasoft.Imaging.Pdf.PdfFormat,Vintasoft.Imaging.Pdf.Security.EncryptionSystem)">
            <summary>
            Packs and saves PDF document to specified
            file in specified format and switches to
            the specified file.
            </summary>
            <param name="filename">File name to pack PDF document.</param>
            <param name="format">Format of PDF document.</param>
            <param name="encryptionSystem">Encryption settings of PDF document.</param>
            <remarks>
            This methods copies content of this PDF document
            to specified file, converts content of the specified
            file to specified format, changes encryption settings,
            removes unused objects from the specified file and switches to specified
            file.<br />
            Source PDF document is not affected.
            All further changes will affect the specified
            file only.
            </remarks>
            <example>
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Performs the authentication using the specified password.
            ''' &lt;/summary&gt;
            Public Shared Sub Authenticate(document As PdfDocument, password As String)
                If document.AuthorizationResult = AuthorizationResult.IncorrectPassword Then
                    document.Authenticate(password)
                    If document.AuthorizationResult = AuthorizationResult.IncorrectPassword Then
                        Throw New ArgumentException("Password is incorrect.")
                    End If
                End If
            End Sub
            
            ''' &lt;summary&gt;
            ''' Decrypts the specified document.
            ''' &lt;/summary&gt;
            Public Shared Sub Decrypt(document As PdfDocument, password As String)
                ' authentication
                Authenticate(document, password)
                ' pack document without encryption
                document.Pack(document.Format, Nothing)
            End Sub
            
            ''' &lt;summary&gt;
            ''' Encrypts PDF document with specified user password, owner password and
            ''' user access permissions.
            ''' &lt;/summary&gt;
            Public Shared Sub Encrypt(document As PdfDocument, userPassword As String, ownerPassword As String, allowPrint As Boolean, allowExtractContent As Boolean)
                ' select encryption algorithm and encryption key length
                Dim algorithm As EncryptionAlgorithm
                Dim keyLength As Integer
                If document.Format.MinorVersionNumber &lt; 4 Then
                    keyLength = 40
                    algorithm = EncryptionAlgorithm.RC4
                ElseIf document.Format.MinorVersionNumber &lt; 6 Then
                    keyLength = 128
                    algorithm = EncryptionAlgorithm.RC4
                Else
                    keyLength = 128
                    algorithm = EncryptionAlgorithm.AES
                End If
                ' select user access permissions
                Dim permissions As UserAccessPermissions = UserAccessPermissions.None
                permissions = permissions Or UserAccessPermissions.FillInteractiveFormFields
                If allowPrint Then
                    permissions = permissions Or UserAccessPermissions.PrintDocumentInHighResolution Or UserAccessPermissions.PrintDocumentInLowResolution
                End If
                If allowExtractContent Then
                    permissions = permissions Or UserAccessPermissions.ExtractTextAndGraphics
                End If
            
                ' create encryption system
                Dim encryption As New EncryptionSystem(algorithm, keyLength, userPassword, ownerPassword, permissions)
                ' pack and ecrypt document
                document.Pack(document.Format, encryption)
            End Sub
            
            ''' &lt;summary&gt;
            ''' Changes user and owner password.
            ''' &lt;/summary&gt;
            Public Shared Sub ChangePassword(document As PdfDocument, oldPassword As String, newUserPassword As String, newOwnerPassword As String)
                If Not document.IsEncrypted Then
                    Throw New ArgumentException("Document is not encrypted!")
                End If
            
                ' authentication
                Authenticate(document, oldPassword)
                ' create new encryption system
                Dim encryption As New EncryptionSystem(document.EncryptionSystem.Algorithm, document.EncryptionSystem.KeyLength, newUserPassword, newOwnerPassword, document.EncryptionSystem.UserPermissions)
                ' pack and ecrypt document
                document.Pack(document.Format, encryption)
            End Sub
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Performs the authentication using the specified password.
            /// &lt;/summary&gt;
            public static void Authenticate(PdfDocument document, string password)
            {
                if (document.AuthorizationResult == AuthorizationResult.IncorrectPassword)
                {
                    document.Authenticate(password);
                    if (document.AuthorizationResult == AuthorizationResult.IncorrectPassword)
                        throw new ArgumentException("Password is incorrect.");
                }
            }
            
            /// &lt;summary&gt;
            /// Decrypts the specified document.
            /// &lt;/summary&gt;
            public static void Decrypt(PdfDocument document, string password)
            {
                // authentication
                Authenticate(document, password);
                // pack document without encryption
                document.Pack(document.Format, null);
            }
            
            /// &lt;summary&gt;
            /// Encrypts PDF document with specified user password, owner password and
            /// user access permissions.
            /// &lt;/summary&gt;
            public static void Encrypt(
                PdfDocument document,
                string userPassword,
                string ownerPassword,
                bool allowPrint,
                bool allowExtractContent)
            {
                // select encryption algorithm and encryption key length
                EncryptionAlgorithm algorithm;
                int keyLength;
                if (document.Format.MinorVersionNumber &lt; 4)
                {
                    keyLength = 40;
                    algorithm = EncryptionAlgorithm.RC4;
                }
                else if (document.Format.MinorVersionNumber &lt; 6)
                {
                    keyLength = 128;
                    algorithm = EncryptionAlgorithm.RC4;
                }
                else
                {
                    keyLength = 128;
                    algorithm = EncryptionAlgorithm.AES;
                }
                // select user access permissions
                UserAccessPermissions permissions = UserAccessPermissions.None;
                permissions |= UserAccessPermissions.FillInteractiveFormFields;
                if (allowPrint)
                {
                    permissions |=
                           UserAccessPermissions.PrintDocumentInHighResolution |
                           UserAccessPermissions.PrintDocumentInLowResolution;
                }
                if (allowExtractContent)
                {
                    permissions |= UserAccessPermissions.ExtractTextAndGraphics;
                }
            
                // create encryption system
                EncryptionSystem encryption = new EncryptionSystem(algorithm, keyLength,
                    userPassword, ownerPassword, permissions);
                // pack and ecrypt document
                document.Pack(document.Format, encryption);
            }
            
            /// &lt;summary&gt;
            /// Changes user and owner password.
            /// &lt;/summary&gt;
            public static void ChangePassword(
                PdfDocument document,
                string oldPassword,
                string newUserPassword,
                string newOwnerPassword)
            {
                if (!document.IsEncrypted)
                    throw new ArgumentException("Document is not encrypted!");
            
                // authentication
                Authenticate(document, oldPassword);
                // create new encryption system
                EncryptionSystem encryption = new EncryptionSystem(
                    document.EncryptionSystem.Algorithm,
                    document.EncryptionSystem.KeyLength,
                    newUserPassword,
                    newOwnerPassword,
                    document.EncryptionSystem.UserPermissions);
                // pack and ecrypt document
                document.Pack(document.Format, encryption);
            }
            </code>
            </example>
            <seealso cref="M:Vintasoft.Imaging.Pdf.PdfDocument.Pack(System.String)" />
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfDocument.Pack(System.IO.Stream,Vintasoft.Imaging.Pdf.PdfFormat)">
            <summary>
            Packs and saves PDF document to specified
            stream in specified format and switches to
            the specified stream.
            </summary>
            <param name="stream">Stream to pack PDF
            document.</param>
            <param name="format">Format of PDF document.</param>
            <remarks>
            This methods copies content of this PDF document
            to specified stream, converts content of the
            specified stream to specified format, removes
            unused objects from the specified stream and
            switches to specified stream.<br />
            Source PDF document is not affected.
            All further changes will affect the specified
            stream only.
            </remarks>
            <seealso cref="M:Vintasoft.Imaging.Pdf.PdfDocument.Pack(System.IO.Stream)" />
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfDocument.Pack(System.IO.Stream,Vintasoft.Imaging.Pdf.PdfFormat,Vintasoft.Imaging.Pdf.Security.EncryptionSystem)">
            <summary>
            Packs and saves PDF document to specified
            stream in specified format and switches to
            the specified stream.
            </summary>
            <param name="stream">Stream to pack PDF
            document.</param>
            <param name="format">Format of PDF document.</param>
            <param name="encryptionSystem">Encryption settings of PDF document.</param>
            <remarks>
            This methods copies content of this PDF document
            to specified stream, converts content of the
            specified stream to specified format, changes encryption settings,
            removes unused objects from the specified stream and
            switches to specified stream.<br />
            Source PDF document is not affected.
            All further changes will affect the specified
            stream only.
            </remarks>
            <example>
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Performs the authentication using the specified password.
            ''' &lt;/summary&gt;
            Public Shared Sub Authenticate(document As PdfDocument, password As String)
                If document.AuthorizationResult = AuthorizationResult.IncorrectPassword Then
                    document.Authenticate(password)
                    If document.AuthorizationResult = AuthorizationResult.IncorrectPassword Then
                        Throw New ArgumentException("Password is incorrect.")
                    End If
                End If
            End Sub
            
            ''' &lt;summary&gt;
            ''' Decrypts the specified document.
            ''' &lt;/summary&gt;
            Public Shared Sub Decrypt(document As PdfDocument, password As String)
                ' authentication
                Authenticate(document, password)
                ' pack document without encryption
                document.Pack(document.Format, Nothing)
            End Sub
            
            ''' &lt;summary&gt;
            ''' Encrypts PDF document with specified user password, owner password and
            ''' user access permissions.
            ''' &lt;/summary&gt;
            Public Shared Sub Encrypt(document As PdfDocument, userPassword As String, ownerPassword As String, allowPrint As Boolean, allowExtractContent As Boolean)
                ' select encryption algorithm and encryption key length
                Dim algorithm As EncryptionAlgorithm
                Dim keyLength As Integer
                If document.Format.MinorVersionNumber &lt; 4 Then
                    keyLength = 40
                    algorithm = EncryptionAlgorithm.RC4
                ElseIf document.Format.MinorVersionNumber &lt; 6 Then
                    keyLength = 128
                    algorithm = EncryptionAlgorithm.RC4
                Else
                    keyLength = 128
                    algorithm = EncryptionAlgorithm.AES
                End If
                ' select user access permissions
                Dim permissions As UserAccessPermissions = UserAccessPermissions.None
                permissions = permissions Or UserAccessPermissions.FillInteractiveFormFields
                If allowPrint Then
                    permissions = permissions Or UserAccessPermissions.PrintDocumentInHighResolution Or UserAccessPermissions.PrintDocumentInLowResolution
                End If
                If allowExtractContent Then
                    permissions = permissions Or UserAccessPermissions.ExtractTextAndGraphics
                End If
            
                ' create encryption system
                Dim encryption As New EncryptionSystem(algorithm, keyLength, userPassword, ownerPassword, permissions)
                ' pack and ecrypt document
                document.Pack(document.Format, encryption)
            End Sub
            
            ''' &lt;summary&gt;
            ''' Changes user and owner password.
            ''' &lt;/summary&gt;
            Public Shared Sub ChangePassword(document As PdfDocument, oldPassword As String, newUserPassword As String, newOwnerPassword As String)
                If Not document.IsEncrypted Then
                    Throw New ArgumentException("Document is not encrypted!")
                End If
            
                ' authentication
                Authenticate(document, oldPassword)
                ' create new encryption system
                Dim encryption As New EncryptionSystem(document.EncryptionSystem.Algorithm, document.EncryptionSystem.KeyLength, newUserPassword, newOwnerPassword, document.EncryptionSystem.UserPermissions)
                ' pack and ecrypt document
                document.Pack(document.Format, encryption)
            End Sub
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Performs the authentication using the specified password.
            /// &lt;/summary&gt;
            public static void Authenticate(PdfDocument document, string password)
            {
                if (document.AuthorizationResult == AuthorizationResult.IncorrectPassword)
                {
                    document.Authenticate(password);
                    if (document.AuthorizationResult == AuthorizationResult.IncorrectPassword)
                        throw new ArgumentException("Password is incorrect.");
                }
            }
            
            /// &lt;summary&gt;
            /// Decrypts the specified document.
            /// &lt;/summary&gt;
            public static void Decrypt(PdfDocument document, string password)
            {
                // authentication
                Authenticate(document, password);
                // pack document without encryption
                document.Pack(document.Format, null);
            }
            
            /// &lt;summary&gt;
            /// Encrypts PDF document with specified user password, owner password and
            /// user access permissions.
            /// &lt;/summary&gt;
            public static void Encrypt(
                PdfDocument document,
                string userPassword,
                string ownerPassword,
                bool allowPrint,
                bool allowExtractContent)
            {
                // select encryption algorithm and encryption key length
                EncryptionAlgorithm algorithm;
                int keyLength;
                if (document.Format.MinorVersionNumber &lt; 4)
                {
                    keyLength = 40;
                    algorithm = EncryptionAlgorithm.RC4;
                }
                else if (document.Format.MinorVersionNumber &lt; 6)
                {
                    keyLength = 128;
                    algorithm = EncryptionAlgorithm.RC4;
                }
                else
                {
                    keyLength = 128;
                    algorithm = EncryptionAlgorithm.AES;
                }
                // select user access permissions
                UserAccessPermissions permissions = UserAccessPermissions.None;
                permissions |= UserAccessPermissions.FillInteractiveFormFields;
                if (allowPrint)
                {
                    permissions |=
                           UserAccessPermissions.PrintDocumentInHighResolution |
                           UserAccessPermissions.PrintDocumentInLowResolution;
                }
                if (allowExtractContent)
                {
                    permissions |= UserAccessPermissions.ExtractTextAndGraphics;
                }
            
                // create encryption system
                EncryptionSystem encryption = new EncryptionSystem(algorithm, keyLength,
                    userPassword, ownerPassword, permissions);
                // pack and ecrypt document
                document.Pack(document.Format, encryption);
            }
            
            /// &lt;summary&gt;
            /// Changes user and owner password.
            /// &lt;/summary&gt;
            public static void ChangePassword(
                PdfDocument document,
                string oldPassword,
                string newUserPassword,
                string newOwnerPassword)
            {
                if (!document.IsEncrypted)
                    throw new ArgumentException("Document is not encrypted!");
            
                // authentication
                Authenticate(document, oldPassword);
                // create new encryption system
                EncryptionSystem encryption = new EncryptionSystem(
                    document.EncryptionSystem.Algorithm,
                    document.EncryptionSystem.KeyLength,
                    newUserPassword,
                    newOwnerPassword,
                    document.EncryptionSystem.UserPermissions);
                // pack and ecrypt document
                document.Pack(document.Format, encryption);
            }
            </code>
            </example>
            <seealso cref="M:Vintasoft.Imaging.Pdf.PdfDocument.Pack(System.IO.Stream)" />
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfDocument.Optimize(Vintasoft.Imaging.Pdf.PdfOptimizeSettings)">
            <summary>
            Optimizes the PDF document.
            </summary>
            <param name="optimizeSettings">Optimize settings.</param>
            <remarks>
            This methods repacks images and data of PDF
            document using specified optimize settings.
            </remarks>
            <seealso cref="M:Vintasoft.Imaging.Pdf.PdfDocument.Optimize(Vintasoft.Imaging.Pdf.PdfFormat,Vintasoft.Imaging.Pdf.PdfOptimizeSettings)" />
            <example>
            <see cref="M:Vintasoft.Imaging.Pdf.PdfDocument.Optimize(Vintasoft.Imaging.Pdf.PdfFormat,Vintasoft.Imaging.Pdf.PdfOptimizeSettings)" />
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfDocument.Optimize(Vintasoft.Imaging.Pdf.PdfFormat,Vintasoft.Imaging.Pdf.PdfOptimizeSettings)">
            <summary>
            Optimizes the PDF document and converts PDF
            document to the specified format.
            </summary>
            <param name="format">Format to optimize.</param>
            <param name="optimizeSettings">Optimize settings.</param>
            <remarks>
            This methods repacks images and data of PDF
            document using specified optimize settings.
            </remarks>
            <seealso cref="M:Vintasoft.Imaging.Pdf.PdfDocument.Optimize(Vintasoft.Imaging.Pdf.PdfOptimizeSettings)" />
            <example>
            Here is an example that shows how to pack PDF file (optimize=false) 
            or how to pack PDF file and convert all color images to JPEG (optimize=true):
            <code lang="VB.NET">
            Public Shared Sub PackPdf(pdfFileName As String, optimize As Boolean)
                ' open PDF document to Read/Write
                Dim pdfDocument As New PdfDocument(pdfFileName)
                ' create PdfFormat - 1.6 format, with compressed cross-reference table
                Dim format As New PdfFormat("1.6", True, True)
                If optimize Then
                    ' set JPEG Quality to 80
                    PdfCompressionSettings.DefaultSettings.JpegQuality = 80
                    ' create optimize settings
                    'compression for Color images - JPEG
                    'compression for B/W images - not changed
                    Dim optimizeSettings As New PdfOptimizeSettings(PdfCompression.Jpeg, PdfCompression.Undefined, PdfCompression.Undefined)
                    'compression for Data - not changed
                    ' optimize and Pack document
                    pdfDocument.Optimize(format, optimizeSettings)
                Else
                    ' pack document
                    pdfDocument.Pack(format)
                End If
                ' free resources
                pdfDocument.Dispose()
            End Sub
            </code>
            <code lang="C#">
            public static void PackPdf(string pdfFileName, bool optimize)
            {
                // open PDF document to Read/Write
                PdfDocument pdfDocument = new PdfDocument(pdfFileName);
                // create PdfFormat - 1.6 format, with compressed cross-reference table
                PdfFormat format = new PdfFormat("1.6", true, true);
                if (optimize)
                {
                    // set JPEG Quality to 80
                    PdfCompressionSettings.DefaultSettings.JpegQuality = 80;
                    // create optimize settings
                    PdfOptimizeSettings optimizeSettings = new PdfOptimizeSettings(
                        PdfCompression.Jpeg,       //compression for Color images - JPEG
                        PdfCompression.Undefined,  //compression for B/W images - not changed
                        PdfCompression.Undefined); //compression for Data - not changed
                    // optimize and Pack document
                    pdfDocument.Optimize(format, optimizeSettings);
                }
                else
                {
                    // pack document
                    pdfDocument.Pack(format);
                }
                // free resources
                pdfDocument.Dispose();
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfDocument.Optimize(Vintasoft.Imaging.Pdf.PdfFormat,Vintasoft.Imaging.Pdf.Security.EncryptionSystem,Vintasoft.Imaging.Pdf.PdfOptimizeSettings)">
            <summary>
            Optimizes the PDF document and converts PDF
            document to the specified format with specified encryption settings.
            </summary>
            <param name="format">Format to optimize.</param>
            <param name="optimizeSettings">Optimize settings.</param>
            <param name="encryptionSystem">Encryption settings of PDF document.</param>
            <remarks>
            This methods repacks images and data of PDF
            document using specified optimize settings.
            </remarks>
            <seealso cref="M:Vintasoft.Imaging.Pdf.PdfDocument.Optimize(Vintasoft.Imaging.Pdf.PdfOptimizeSettings)" />
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfDocument.ClearCache">
            <summary>
            Clear the resources cache.
            </summary>
            <remarks>
            Clears cached resources of the renderer: image resources, fonts, streams.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfDocument.GetStandardFont(Vintasoft.Imaging.Pdf.Tree.Fonts.StandardFontType)">
            <summary>
            Returns a <see cref="T:Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFont" /> object for specified
            <see cref="T:Vintasoft.Imaging.Pdf.Tree.Fonts.StandardFontType">standard font type</see>.
            </summary>
            <param name="standardFontType"><see cref="T:Vintasoft.Imaging.Pdf.Tree.Fonts.StandardFontType">Standard font type</see>.</param>
            <returns>the <see cref="T:Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFont" /> object.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfDocument.Dispose">
            <summary>
            Releases all resources used by this <see cref="T:Vintasoft.Imaging.Pdf.PdfDocument" />.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfDocument.AuthenticateAsUser(System.String)">
            <summary>
            Performs authentication as user using specified password.
            </summary>
            <param name="userPassword">The user password.</param>
            <returns>Authentication result.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfDocument.AuthenticateAsOwner(System.String)">
            <summary>
            Performs authentication as owner using specified password.
            </summary>
            <param name="ownerPassword">The owner password.</param>
            <returns>Authentication result.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfDocument.Authenticate(System.String)">
            <summary>
            Performs authentication using specified password.
            </summary>
            <param name="password">The password of user or owner.</param>
            <returns>Authentication result.</returns>
            <example>
            <code lang="VB.NET">
            Public Shared Sub DocumentAuthentication(document As PdfDocument, password As String)
                ' document is encryptred?
                If document.AuthorizationResult = AuthorizationResult.AuthenticationNotRequired Then
                    Console.WriteLine("Document is not encrypted.")
                    Return
                End If
            
                ' executes authentication
                If document.AuthorizationResult = AuthorizationResult.IncorrectPassword Then
                    document.Authenticate(password)
                End If
            
                ' check authorization result
                If document.AuthorizationResult = AuthorizationResult.IncorrectPassword Then
                    Console.WriteLine("The password is incorrect.")
                Else
                    Console.Write("Authentication pass successfully, ")
                    If document.AuthorizationResult = AuthorizationResult.OwnerPassword Then
                        Console.WriteLine("owner password identified.")
                    ElseIf document.AuthorizationResult = AuthorizationResult.UserPassword Then
                        Console.WriteLine("user password identified.")
                    ElseIf document.AuthorizationResult = (AuthorizationResult.UserPassword Or AuthorizationResult.OwnerPassword) Then
                        Console.WriteLine("user and owner passwords are equal.")
                    End If
                End If
            End Sub
            </code>
            <code lang="C#">
            public static void DocumentAuthentication(PdfDocument document, string password)
            {
                // document is encryptred?
                if (document.AuthorizationResult == AuthorizationResult.AuthenticationNotRequired)
                {
                    Console.WriteLine("Document is not encrypted.");
                    return;
                }
            
                // executes authentication
                if (document.AuthorizationResult == AuthorizationResult.IncorrectPassword)
                    document.Authenticate(password);
            
                // check authorization result
                if (document.AuthorizationResult == AuthorizationResult.IncorrectPassword)
                {
                    Console.WriteLine("The password is incorrect.");
                }
                else
                {
                    Console.Write("Authentication pass successfully, ");
                    if (document.AuthorizationResult == AuthorizationResult.OwnerPassword)
                        Console.WriteLine("owner password identified.");
                    else if (document.AuthorizationResult == AuthorizationResult.UserPassword)
                        Console.WriteLine("user password identified.");
                    else if (document.AuthorizationResult == (AuthorizationResult.UserPassword | AuthorizationResult.OwnerPassword))
                        Console.WriteLine("user and owner passwords are equal.");
                }
            }
            </code>
            </example>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.PdfDocument.AdditionalActions">
            <summary>
            Gets or sets an additional-actions defining the actions to be taken 
            in response to various trigger events affecting the document as a 
            whole.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.PdfDocument.InteractiveForm">
            <summary>
            Gets or sets information about contents and
            properties of a document interactive form.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if
            user tries to set NOT <b>null</b> value when
            property is already set to NOT <b>null</b> value.</exception>
            <example>
            Here is an example that demonstrates how to display the information
            about all form field of PDF document:
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Prints information about interactive form of PDF document.
            ''' &lt;/summary&gt;
            ''' &lt;param name="pdfFilename"&gt;The filename of PDF document.&lt;/param&gt;
            Public Shared Sub PrintInformationAboutPdfInteractiveForm(pdfFilename As String)
                ' open PDF document
                Using document As New PdfDocument(pdfFilename)
                    ' if PDF document has interactive form
                    If document.InteractiveForm IsNot Nothing Then
                        ' get reference to the interactive form
                        Dim form As PdfDocumentInteractiveForm = document.InteractiveForm
            
                        ' get an array that contains all interactive form fields of PDF document
                        Dim formFields As PdfInteractiveFormField() = form.GetTerminalFields()
            
                        ' print information abount field count
                        Console.WriteLine("Interactive Form Field Count: {0}", formFields.Length)
            
                        ' for each interactive field
                        For Each field As PdfInteractiveFormField In formFields
                            ' output information about interactive field
                            Console.WriteLine(vbTab &amp; "Name={0,-18} TypeName={1,-33} TextQuadding={2,-14} IsReadOnly={3,-5}", field.FullyQualifiedName, field.[GetType]().Name, field.TextQuadding, field.IsReadOnly)
                        Next
                    End If
                End Using
            End Sub
            
            ' This code example produces the following output: 
              Interactive Form Field Count: 13
                  Name=TextField1         TypeName=PdfInteractiveFormTextField       TextQuadding=Centered       IsReadOnly=False
                  Name=TextField2         TypeName=PdfInteractiveFormTextField       TextQuadding=LeftJustified  IsReadOnly=False
                  Name=TextField3         TypeName=PdfInteractiveFormTextField       TextQuadding=LeftJustified  IsReadOnly=False
                  Name=TextField4         TypeName=PdfInteractiveFormTextField       TextQuadding=LeftJustified  IsReadOnly=False
                  Name=TextField5         TypeName=PdfInteractiveFormTextField       TextQuadding=LeftJustified  IsReadOnly=False
                  Name=TextField6         TypeName=PdfInteractiveFormTextField       TextQuadding=LeftJustified  IsReadOnly=False
                  Name=NumericField       TypeName=PdfInteractiveFormTextField       TextQuadding=LeftJustified  IsReadOnly=False
                  Name=FileSelect         TypeName=PdfInteractiveFormTextField       TextQuadding=LeftJustified  IsReadOnly=False
                  Name=browseButton       TypeName=PdfInteractiveFormPushButtonField TextQuadding=LeftJustified  IsReadOnly=False
                  Name=Calculator.Left    TypeName=PdfInteractiveFormTextField       TextQuadding=Centered       IsReadOnly=False
                  Name=Calculator.Right   TypeName=PdfInteractiveFormTextField       TextQuadding=Centered       IsReadOnly=False
                  Name=Calculator.Result  TypeName=PdfInteractiveFormTextField       TextQuadding=Centered       IsReadOnly=True
                  Name=ResetButton        TypeName=PdfInteractiveFormPushButtonField TextQuadding=LeftJustified  IsReadOnly=False
              
            
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Prints information about interactive form of PDF document.
            /// &lt;/summary&gt;
            /// &lt;param name="pdfFilename"&gt;The filename of PDF document.&lt;/param&gt;
            public static void PrintInformationAboutPdfInteractiveForm(string pdfFilename)
            {
                // open PDF document
                using (PdfDocument document = new PdfDocument(pdfFilename))
                {
                    // if PDF document has interactive form
                    if (document.InteractiveForm != null)
                    {
                        // get reference to the interactive form
                        PdfDocumentInteractiveForm form = document.InteractiveForm;
                        
                        // get an array that contains all interactive form fields of PDF document
                        PdfInteractiveFormField[] formFields = form.GetTerminalFields();
                        
                        // print information abount field count
                        Console.WriteLine("Interactive Form Field Count: {0}", formFields.Length);
            
                        // for each interactive field
                        foreach (PdfInteractiveFormField field in formFields)
                        {
                            // output information about interactive field
                            Console.WriteLine("\tName={0,-18} TypeName={1,-33} TextQuadding={2,-14} IsReadOnly={3,-5}",
                                field.FullyQualifiedName, field.GetType().Name, field.TextQuadding, field.IsReadOnly);
                        }
                    }
                }
            }
            
            /* This code example produces the following output: 
            Interactive Form Field Count: 13
                Name=TextField1         TypeName=PdfInteractiveFormTextField       TextQuadding=Centered       IsReadOnly=False
                Name=TextField2         TypeName=PdfInteractiveFormTextField       TextQuadding=LeftJustified  IsReadOnly=False
                Name=TextField3         TypeName=PdfInteractiveFormTextField       TextQuadding=LeftJustified  IsReadOnly=False
                Name=TextField4         TypeName=PdfInteractiveFormTextField       TextQuadding=LeftJustified  IsReadOnly=False
                Name=TextField5         TypeName=PdfInteractiveFormTextField       TextQuadding=LeftJustified  IsReadOnly=False
                Name=TextField6         TypeName=PdfInteractiveFormTextField       TextQuadding=LeftJustified  IsReadOnly=False
                Name=NumericField       TypeName=PdfInteractiveFormTextField       TextQuadding=LeftJustified  IsReadOnly=False
                Name=FileSelect         TypeName=PdfInteractiveFormTextField       TextQuadding=LeftJustified  IsReadOnly=False
                Name=browseButton       TypeName=PdfInteractiveFormPushButtonField TextQuadding=LeftJustified  IsReadOnly=False
                Name=Calculator.Left    TypeName=PdfInteractiveFormTextField       TextQuadding=Centered       IsReadOnly=False
                Name=Calculator.Right   TypeName=PdfInteractiveFormTextField       TextQuadding=Centered       IsReadOnly=False
                Name=Calculator.Result  TypeName=PdfInteractiveFormTextField       TextQuadding=Centered       IsReadOnly=True
                Name=ResetButton        TypeName=PdfInteractiveFormPushButtonField TextQuadding=LeftJustified  IsReadOnly=False
            */
            </code>
            </example>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.PdfDocument.OptionalContentProperties">
            <summary>
            Gets or sets the properties of document optional content.
            </summary>
            <example>
            Here is an example that shows how to create document with optional content:
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Creates PDF document with the optional content.
            ''' &lt;/summary&gt;
            ''' &lt;param name="pdfFilename"&gt;The PDF filename.&lt;/param&gt;
            Public Shared Sub CreateDocumentWithOptionalContent(pdfFilename As String)
                ' create new PDF document
                Using document As New PdfDocument(pdfFilename, PdfFormat.Pdf_16)
                    ' add empty page (A4 size)
                    Dim page As PdfPage = document.Pages.Add(PaperSizeKind.A4)
            
                    ' crete two optional content groups
                    Dim layer1 As New PdfOptionalContentGroup(document, "Layer1")
                    Dim layer2 As New PdfOptionalContentGroup(document, "Layer2")
            
                    ' add optional content groups to OptionalContentProperties
                    document.OptionalContentProperties = New PdfOptionalContentProperties(document)
                    document.OptionalContentProperties.OptionalContentGroups.Add(layer1)
                    document.OptionalContentProperties.OptionalContentGroups.Add(layer2)
            
                    ' get PdfGraphics for PDF page
                    Using g As PdfGraphics = page.GetGraphics()
                        Dim font As PdfFont = document.FontManager.GetStandardFont(StandardFontType.TimesRoman)
                        Dim brush As New PdfBrush(Color.Black)
                        Dim brush1 As New PdfBrush(Color.Green)
                        Dim brush2 As New PdfBrush(Color.Red)
            
                        ' draw not optional content 
                        g.DrawString("Not optional content", font, 20, brush, New PointF(50, 650))
            
                        ' draw optional content "Layer1"
                        g.BeginOptionalContent(layer1)
                        g.DrawString(String.Format("Optional content '{0}'", layer1.Name), font, 25, brush1, New PointF(50, 550))
                        g.EndOptionalContent()
            
                        ' draw not optional content
                        g.DrawString("Not optional content", font, 30, brush, New PointF(50, 450))
            
                        ' draw optional content "Layer2"
                        g.BeginOptionalContent(layer2)
                        g.DrawString(String.Format("Optional content '{0}'", layer2.Name), font, 35, brush2, New PointF(50, 350))
                        g.EndOptionalContent()
            
                        ' draw not optional content
                        g.DrawString("Not optional content", font, 40, brush, New PointF(50, 250))
                    End Using
            
                    ' create optional content configurations
                    Dim configuration1 As New PdfOptionalContentConfiguration(document, "Layer1 and Layer2")
                    configuration1.SetGroupVisibility(layer1, True)
                    configuration1.SetGroupVisibility(layer2, True)
                    Dim configuration2 As New PdfOptionalContentConfiguration(document, "Layer1")
                    configuration2.SetGroupVisibility(layer1, True)
                    configuration2.SetGroupVisibility(layer2, False)
                    Dim configuration3 As New PdfOptionalContentConfiguration(document, "Layer2")
                    configuration3.SetGroupVisibility(layer1, False)
                    configuration3.SetGroupVisibility(layer2, True)
                    Dim configuration4 As New PdfOptionalContentConfiguration(document, "No Layers")
                    configuration4.SetGroupVisibility(layer1, False)
                    configuration4.SetGroupVisibility(layer2, False)
            
                    ' create list of optional content configuration 
                    document.OptionalContentProperties.Configurations = New PdfOptionalContentConfigurationList(document)
            
                    ' add configurations to list
                    document.OptionalContentProperties.Configurations.Add(configuration1)
                    document.OptionalContentProperties.Configurations.Add(configuration2)
                    document.OptionalContentProperties.Configurations.Add(configuration3)
                    document.OptionalContentProperties.Configurations.Add(configuration4)
            
                    ' set default configuration
                    document.OptionalContentProperties.DefaultConfiguration = configuration1
            
                    ' set presentation order
                    configuration1.PresentationOrder = New PdfOptionalContentPresentationOrder(document, layer1, layer2)
            
                    ' optional content panel is visible
                    document.DocumentViewMode = PdfDocumentViewMode.UseOC
            
                    ' save changes in PDF document
                    document.SaveChanges()
                End Using
            End Sub
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Creates PDF document with the optional content.
            /// &lt;/summary&gt;
            /// &lt;param name="pdfFilename"&gt;The PDF filename.&lt;/param&gt;
            public static void CreateDocumentWithOptionalContent(string pdfFilename)
            {
                // create new PDF document
                using (PdfDocument document = new PdfDocument(pdfFilename, PdfFormat.Pdf_16))
                {
                    // add empty page (A4 size)
                    PdfPage page = document.Pages.Add(PaperSizeKind.A4);
            
                    // crete two optional content groups
                    PdfOptionalContentGroup layer1 = new PdfOptionalContentGroup(document, "Layer1");
                    PdfOptionalContentGroup layer2 = new PdfOptionalContentGroup(document, "Layer2");
            
                    // add optional content groups to OptionalContentProperties
                    document.OptionalContentProperties = new PdfOptionalContentProperties(document);
                    document.OptionalContentProperties.OptionalContentGroups.Add(layer1);
                    document.OptionalContentProperties.OptionalContentGroups.Add(layer2);
            
                    // get PdfGraphics for PDF page
                    using (PdfGraphics g = page.GetGraphics())
                    {
                        PdfFont font = document.FontManager.GetStandardFont(StandardFontType.TimesRoman);
                        PdfBrush brush = new PdfBrush(Color.Black);
                        PdfBrush brush1 = new PdfBrush(Color.Green);
                        PdfBrush brush2 = new PdfBrush(Color.Red);
            
                        // draw not optional content 
                        g.DrawString("Not optional content", font, 20, brush, new PointF(50, 650));
            
                        // draw optional content "Layer1"
                        g.BeginOptionalContent(layer1);
                        g.DrawString(string.Format("Optional content '{0}'", layer1.Name),
                            font, 25, brush1, new PointF(50, 550));
                        g.EndOptionalContent();
            
                        // draw not optional content
                        g.DrawString("Not optional content", font, 30, brush, new PointF(50, 450));
            
                        // draw optional content "Layer2"
                        g.BeginOptionalContent(layer2);
                        g.DrawString(string.Format("Optional content '{0}'", layer2.Name),
                            font, 35, brush2, new PointF(50, 350));
                        g.EndOptionalContent();
            
                        // draw not optional content
                        g.DrawString("Not optional content", font, 40, brush, new PointF(50, 250));
                    }
            
                    // create optional content configurations
                    PdfOptionalContentConfiguration configuration1 =
                        new PdfOptionalContentConfiguration(document, "Layer1 and Layer2");
                    configuration1.SetGroupVisibility(layer1, true);
                    configuration1.SetGroupVisibility(layer2, true);
                    PdfOptionalContentConfiguration configuration2 =
                        new PdfOptionalContentConfiguration(document, "Layer1");
                    configuration2.SetGroupVisibility(layer1, true);
                    configuration2.SetGroupVisibility(layer2, false);
                    PdfOptionalContentConfiguration configuration3 =
                        new PdfOptionalContentConfiguration(document, "Layer2");
                    configuration3.SetGroupVisibility(layer1, false);
                    configuration3.SetGroupVisibility(layer2, true);
                    PdfOptionalContentConfiguration configuration4 =
                        new PdfOptionalContentConfiguration(document, "No Layers");
                    configuration4.SetGroupVisibility(layer1, false);
                    configuration4.SetGroupVisibility(layer2, false);
            
                    // create list of optional content configuration 
                    document.OptionalContentProperties.Configurations =
                        new PdfOptionalContentConfigurationList(document);
            
                    // add configurations to list
                    document.OptionalContentProperties.Configurations.Add(configuration1);
                    document.OptionalContentProperties.Configurations.Add(configuration2);
                    document.OptionalContentProperties.Configurations.Add(configuration3);
                    document.OptionalContentProperties.Configurations.Add(configuration4);
            
                    // set default configuration
                    document.OptionalContentProperties.DefaultConfiguration = configuration1;
            
                    // set presentation order
                    configuration1.PresentationOrder =
                        new PdfOptionalContentPresentationOrder(document, layer1, layer2);
            
                    // optional content panel is visible
                    document.DocumentViewMode = PdfDocumentViewMode.UseOC;
            
                    // save changes in PDF document
                    document.SaveChanges();
                }
            }
            </code>
            </example>        
            <seealso cref="T:Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentGroup" />
            <seealso cref="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.BeginOptionalContent(Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentGroup)" />
            <seealso cref="P:Vintasoft.Imaging.Pdf.Tree.PdfImageResource.OptionalContentGroup" />
            <seealso cref="P:Vintasoft.Imaging.Pdf.Tree.PdfFormXObjectResource.OptionalContentGroup" />
            <seealso cref="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotation.OptionalContentGroup" />
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.PdfDocument.OptionalContentConfiguration">
            <summary>
            Gets or sets a configuration of current optional content.
            </summary>
            <exception cref="T:System.InvalidOperationException">Throws if <see cref="P:Vintasoft.Imaging.Pdf.PdfDocument.OptionalContentProperties" /> is <b>null</b>.</exception>       
            <exception cref="T:System.ArgumentNullException">If value is <b>null</b>.</exception>
            <example>
            Here is an example that shows how to render document with optional content:
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Renders the content of the PDF use optonal.
            ''' &lt;/summary&gt;
            ''' &lt;param name="pdfFilename"&gt;The PDF filename.&lt;/param&gt;
            Public Shared Sub RenderPdfUsingOptonalContent(pdfFilename As String)
                ' get name of output PDF file
                Dim outputFileName As String = Path.Combine(Path.GetDirectoryName(pdfFilename), Path.GetFileNameWithoutExtension(pdfFilename))
                outputFileName = outputFileName &amp; "_{0}_{1}.tif"
            
                ' open document stream
                Using documentStream As Stream = File.Open(pdfFilename, FileMode.Open)
                    ' create image collection which will store pages of PDF document
                    Using documentImages As New ImageCollection()
                        ' add document pages to image collection
                        documentImages.Add(documentStream)
            
                        ' open PDF document
                        Dim document As PdfDocument = PdfDocumentController.OpenDocument(documentStream)
            
                        ' if document does not have optional content
                        If document.OptionalContentProperties Is Nothing Then
                            Console.WriteLine("Document does not have optional content.")
                            Return
                        End If
            
            
                        ' for each optional content configuration of PDF documen
                        For Each config As PdfOptionalContentConfiguration In document.OptionalContentProperties.Configurations
                            ' set the optional content configuration as current optional content configuration
                            document.OptionalContentConfiguration = config
                            ' render PDF pages and save them to a file
                            SaveImages(documentImages, String.Format(outputFileName, "config", config.Name))
                        Next
            
            
                        ' create custom optional content configuration
                        Dim myConfig As New PdfOptionalContentConfiguration(document, "MyConfig")
                        ' create an empty list of optional content groups whose state should
                        ' be set to ON when this configuration is applied
                        myConfig.OnGroups = New PdfOptionalContentGroupList(document)
                        ' specify that optional content groups are "Off" by default
                        myConfig.BaseState = PdfOptionalContentConfigurationBaseState.Off
                        ' set custom optional content configuration as
                        ' current optional content configuration of PDF document
                        document.OptionalContentConfiguration = myConfig
                        ' for each optional content group of PDF document
                        For Each group As PdfOptionalContentGroup In document.OptionalContentProperties.OptionalContentGroups
                            ' clear list of "On" groups, i.e. specify that groups must be not visible
                            myConfig.OnGroups.Clear()
                            ' add group to the list of "On" groups, i.e. specify that group must be visible
                            myConfig.OnGroups.Add(group)
                            ' render PDF pages and save them to a file
                            SaveImages(documentImages, String.Format(outputFileName, "group", group.Name))
                        Next
            
            
                        ' close PDF document
                        PdfDocumentController.CloseDocument(document)
            
                        ' free resources
                        documentImages.ClearAndDisposeItems()
                    End Using
                End Using
            End Sub
            
            ''' &lt;summary&gt;
            ''' Saves images (PDF pages) to the specified file.
            ''' &lt;/summary&gt;
            ''' &lt;param name="images"&gt;The image collection.&lt;/param&gt;
            ''' &lt;param name="filename"&gt;The filename where image collection must be saved.&lt;/param&gt;
            Private Shared Sub SaveImages(images As ImageCollection, filename As String)
                ' create encoder
                Using encoder As MultipageEncoderBase = AvailableEncoders.CreateMultipageEncoder(filename)
                    ' set rendering settings
                    images.SetRenderingSettings(New RenderingSettings(New Resolution(300, 300)))
            
                    ' specify that image collection should not be switched to new file
                    encoder.SaveAndSwitchSource = False
                    ' save images to a file
                    images.SaveSync(filename, encoder)
                End Using
            End Sub
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Renders the content of the PDF use optonal.
            /// &lt;/summary&gt;
            /// &lt;param name="pdfFilename"&gt;The PDF filename.&lt;/param&gt;
            public static void RenderPdfUsingOptonalContent(string pdfFilename)
            {
                // get name of output PDF file
                string outputFileName = Path.Combine(Path.GetDirectoryName(pdfFilename), Path.GetFileNameWithoutExtension(pdfFilename));
                outputFileName = outputFileName + "_{0}_{1}.tif";
            
                // open document stream
                using (Stream documentStream = File.Open(pdfFilename, FileMode.Open))
                {
                    // create image collection which will store pages of PDF document
                    using (ImageCollection documentImages = new ImageCollection())
                    {
                        // add document pages to image collection
                        documentImages.Add(documentStream);
            
                        // open PDF document
                        PdfDocument document = PdfDocumentController.OpenDocument(documentStream);
            
                        // if document does not have optional content
                        if (document.OptionalContentProperties == null)
                        {
                            Console.WriteLine("Document does not have optional content.");
                            return;
                        }
            
            
                        // for each optional content configuration of PDF documen
                        foreach (PdfOptionalContentConfiguration config in document.OptionalContentProperties.Configurations)
                        {
                            // set the optional content configuration as current optional content configuration
                            document.OptionalContentConfiguration = config;
                            // render PDF pages and save them to a file
                            SaveImages(documentImages, string.Format(outputFileName, "config", config.Name));
                        }
            
            
                        // create custom optional content configuration
                        PdfOptionalContentConfiguration myConfig = new PdfOptionalContentConfiguration(document, "MyConfig");
                        // create an empty list of optional content groups whose state should
                        // be set to ON when this configuration is applied
                        myConfig.OnGroups = new PdfOptionalContentGroupList(document);
                        // specify that optional content groups are "Off" by default
                        myConfig.BaseState = PdfOptionalContentConfigurationBaseState.Off;
                        // set custom optional content configuration as
                        // current optional content configuration of PDF document
                        document.OptionalContentConfiguration = myConfig;
                        // for each optional content group of PDF document
                        foreach (PdfOptionalContentGroup group in document.OptionalContentProperties.OptionalContentGroups)
                        {
                            // clear list of "On" groups, i.e. specify that groups must be not visible
                            myConfig.OnGroups.Clear();
                            // add group to the list of "On" groups, i.e. specify that group must be visible
                            myConfig.OnGroups.Add(group);
                            // render PDF pages and save them to a file
                            SaveImages(documentImages, string.Format(outputFileName, "group", group.Name));
                        }
            
            
                        // close PDF document
                        PdfDocumentController.CloseDocument(document);
            
                        // free resources
                        documentImages.ClearAndDisposeItems();
                    }
                }
            }
            
            /// &lt;summary&gt;
            /// Saves images (PDF pages) to the specified file.
            /// &lt;/summary&gt;
            /// &lt;param name="images"&gt;The image collection.&lt;/param&gt;
            /// &lt;param name="filename"&gt;The filename where image collection must be saved.&lt;/param&gt;
            private static void SaveImages(ImageCollection images, string filename)
            {
                // create encoder
                using (MultipageEncoderBase encoder = AvailableEncoders.CreateMultipageEncoder(filename))
                {
                    // set rendering settings
                    images.SetRenderingSettings(new RenderingSettings(new Resolution(300, 300)));
            
                    // specify that image collection should not be switched to new file
                    encoder.SaveAndSwitchSource = false;
                    // save images to a file
                    images.SaveSync(filename, encoder);
                }
            }
            </code>
            </example>        
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.PdfDocument.FontManager">
            <summary>
            Gets a font manager of this PDF document.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.PdfDocument.OpenDestination">
            <summary>
            Gets or sets a value specifying a destination to be displayed when the document is opened. 
            </summary>
            <remarks>
            Properties <see cref="P:Vintasoft.Imaging.Pdf.PdfDocument.OpenDestination" /> and <see cref="P:Vintasoft.Imaging.Pdf.PdfDocument.OpenAction" /> can not be set together.
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.Pdf.PdfDocument.OpenAction" />
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.PdfDocument.OpenAction">
            <summary>
            Gets or sets a value specifying an action to be performed when the document is opened. 
            </summary>
            <remarks>
            Properties <see cref="P:Vintasoft.Imaging.Pdf.PdfDocument.OpenDestination" /> and <see cref="P:Vintasoft.Imaging.Pdf.PdfDocument.OpenAction" /> can not be set together.
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.Pdf.PdfDocument.OpenDestination" />
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.PdfDocument.EmbeddedFiles">
            <summary>
            Gets or sets a dictionary of embedded file specifications.
            </summary>
            <example>
            Here is an example that demonstrates how to obtain 
            information about all embedded files of PDF document:
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Prints information about all embedded files of PDF document.
            ''' &lt;/summary&gt;
            ''' &lt;param name="pdfFilename"&gt;The filename of PDF document.&lt;/param&gt;
            Public Shared Sub PrintEmbeddedFilesInfo(pdfFilename As String)
                ' open PDF document
                Using document As New PdfDocument(pdfFilename, True)
                    ' get the dictionary of embedded file specifications
                    Dim embeddedFiles As PdfEmbeddedFileSpecificationDictionary = document.EmbeddedFiles
                    ' if dictionary is empty
                    If embeddedFiles Is Nothing OrElse embeddedFiles.Count = 0 Then
                        Console.WriteLine("No embedded files.")
                    Else
                        ' if dictionary is NOT empty
                        Console.WriteLine(String.Format("There are {0} embedded files.", embeddedFiles.Count))
                        ' counter of embedded files
                        Dim counter As Integer = 1
                        ' for each name-specification pair
                        For Each embeddedFileInfo As KeyValuePair(Of String, PdfEmbeddedFileSpecification) In embeddedFiles
                            ' write name of the file specification
                            Console.WriteLine(String.Format("{0}) Name: ""{1}""", System.Math.Max(System.Threading.Interlocked.Increment(counter),counter - 1), embeddedFileInfo.Key))
                            ' get the file specification
                            Dim embeddedFileSpecification As PdfEmbeddedFileSpecification = embeddedFileInfo.Value
                            ' write description of the file specification
                            Console.WriteLine(String.Format("   Description: ""{0}""", embeddedFileSpecification.Description))
                            ' write file name
                            Console.WriteLine(String.Format("   Filename: ""{0}""", embeddedFileSpecification.Filename))
                            ' write file system
                            Console.WriteLine(String.Format("   FileSystem: ""{0}""", embeddedFileSpecification.FileSystem))
                            ' get the embedded file
                            Dim embeddedFile As PdfEmbeddedFile = embeddedFileSpecification.EmbeddedFile
                            Console.WriteLine(String.Format("   EmbeddedFile:"))
                            ' write compression of the embedded file
                            Console.WriteLine(String.Format("      Compression: {0}", embeddedFile.Compression))
                            ' write creation date of the embedded file
                            Console.WriteLine(String.Format("      CreationDate: {0}", embeddedFile.CreationDate))
                            ' write modification date of the embedded file
                            Console.WriteLine(String.Format("      ModifyDate: {0}", embeddedFile.ModifyDate))
                            ' write uncompressed length of the embedded file
                            Console.WriteLine(String.Format("      UncompressedLength: {0} bytes", embeddedFile.UncompressedLength))
                            ' write compressed length of the embedded file
                            Console.WriteLine(String.Format("      CompressedLength: {0} bytes", embeddedFile.Length))
                            Console.WriteLine()
                        Next
                    End If
                End Using
            End Sub 
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Prints information about all embedded files of PDF document.
            /// &lt;/summary&gt;
            /// &lt;param name="pdfFilename"&gt;The filename of PDF document.&lt;/param&gt;
            public static void PrintEmbeddedFilesInfo(string pdfFilename)
            {
                // open PDF document
                using (PdfDocument document = new PdfDocument(pdfFilename, true))
                {
                    // get the dictionary of embedded file specifications
                    PdfEmbeddedFileSpecificationDictionary embeddedFiles = document.EmbeddedFiles;
                    // if dictionary is empty
                    if (embeddedFiles == null || embeddedFiles.Count == 0)
                    {
                        Console.WriteLine("No embedded files.");
                    }
                    // if dictionary is NOT empty
                    else
                    {
                        Console.WriteLine(string.Format("There are {0} embedded files.", embeddedFiles.Count));
                        // counter of embedded files
                        int counter = 1;
                        // for each name-specification pair
                        foreach (KeyValuePair&lt;string, PdfEmbeddedFileSpecification&gt; embeddedFileInfo in embeddedFiles)
                        {
                            // write name of the file specification
                            Console.WriteLine(string.Format("{0}) Name: \"{1}\"", counter++, embeddedFileInfo.Key));
                            // get the file specification
                            PdfEmbeddedFileSpecification embeddedFileSpecification = embeddedFileInfo.Value;
                            // write description of the file specification
                            Console.WriteLine(string.Format("   Description: \"{0}\"", embeddedFileSpecification.Description));
                            // write file name
                            Console.WriteLine(string.Format("   Filename: \"{0}\"", embeddedFileSpecification.Filename));
                            // write file system
                            Console.WriteLine(string.Format("   FileSystem: \"{0}\"", embeddedFileSpecification.FileSystem));
                            // get the embedded file
                            PdfEmbeddedFile embeddedFile = embeddedFileSpecification.EmbeddedFile;
                            Console.WriteLine(string.Format("   EmbeddedFile:"));
                            // write compression of the embedded file
                            Console.WriteLine(string.Format("      Compression: {0}", embeddedFile.Compression));
                            // write creation date of the embedded file
                            Console.WriteLine(string.Format("      CreationDate: {0}", embeddedFile.CreationDate));
                            // write modification date of the embedded file
                            Console.WriteLine(string.Format("      ModifyDate: {0}", embeddedFile.ModifyDate));
                            // write uncompressed length of the embedded file
                            Console.WriteLine(string.Format("      UncompressedLength: {0} bytes", embeddedFile.UncompressedLength));
                            // write compressed length of the embedded file
                            Console.WriteLine(string.Format("      CompressedLength: {0} bytes", embeddedFile.Length));
                            Console.WriteLine();
                        }
                    }
                }
            } 
            </code>
            </example>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.PdfDocument.Attachments">
            <summary>
            Gets a collections of file attachments that a PDF consumer 
            uses to enhance the presentation of file attachments 
            stored in the PDF document.
            </summary>
            <example>
            Here is an example that shows how to create new portfolio:
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Assemblies a portfolio from files and folders from specified path.
            ''' &lt;/summary&gt;
            ''' &lt;param name="rootPath"&gt;The root path to assembly portfolio.&lt;/param&gt;
            ''' &lt;param name="outputPdfFilename"&gt;The output PDF filename.&lt;/param&gt;
            Public Shared Sub AssemblyPortfolio(rootPath As String, outputPdfFilename As String)
                ' create PDF document (version 1.7)
                Using document As New PdfDocument(outputPdfFilename, PdfFormat.Pdf_17)
                    ' add page to document
                    Dim page As PdfPage = document.Pages.Add(PaperSizeKind.A4)
            
                    ' draw text on first page
                    Using g As PdfGraphics = page.GetGraphics()
                        Dim textBox As New TextBoxFigure()
                        textBox.Font = document.FontManager.GetStandardFont(StandardFontType.TimesRoman)
                        textBox.FontSize = 30
                        textBox.Location = New PointF(0, 0)
                        textBox.Size = page.MediaBox.Size
                        textBox.TextAlignment = PdfContentAlignment.Top Or PdfContentAlignment.Left Or PdfContentAlignment.Right
                        textBox.TextBrush = New PdfBrush(Color.Black)
                        textBox.Text = "This document is Portfolio" &amp; vbLf &amp; "(Attachment Collection)" &amp; vbLf &amp; "To view Portfolio you should use PDF viewer compatible with PDF 1.7 ExtensionLevel 3."
                        textBox.Draw(g)
                    End Using
            
                    ' create attachements
                    document.CreateAttachments(True)
            
                    ' set viewer settings
                    document.Attachments.View = AttachmentCollectionViewMode.TileMode
                    document.Attachments.SplitterBar = New PdfAttachmentCollectionSplitterBar(document)
                    document.Attachments.SplitterBar.Direction = AttachmentCollectionSplitterBarDirection.None
                    document.DocumentViewMode = PdfDocumentViewMode.UseAttachments
            
                    ' create field that defines sorting of files and folders in PDF viewer
                    Dim sortFieldName As String = "Order"
                    Dim sortField As New PdfAttachmentCollectionSchemaField(document, "Order (Sort)", AttachmentCollectionSchemaFieldDataType.Number)
                    sortField.IsVisible = False
                    document.Attachments.Schema = New PdfAttachmentCollectionSchema(document)
                    document.Attachments.Schema.Add(sortFieldName, sortField)
            
                    ' create sort properties
                    document.Attachments.Sort = New PdfAttachmentCollectionSort(document)
                    document.Attachments.Sort.FieldNames = New String() {sortFieldName}
            
                    ' use ZIP compression for files
                    Dim filesCompression As PdfCompression = PdfCompression.Zip
            
                    ' add files and folders to portfolio
                    AddPathRecursively(document.Attachments.RootFolder, rootPath, False, filesCompression, True, sortFieldName)
            
                    ' save changes in PDF document
                    document.SaveChanges()
                End Using
            End Sub
            
            ''' &lt;summary&gt;
            ''' Adds the path (all files and sub folders) to specified portfolio folder.
            ''' &lt;/summary&gt;
            ''' &lt;param name="folder"&gt;The portfolio folder.&lt;/param&gt;
            ''' &lt;param name="path"&gt;The path that should be added to the portfolio.&lt;/param&gt;
            ''' &lt;param name="addPathAsFolder"&gt;Determines that portfolio must contain folder with the path filename.&lt;/param&gt;
            ''' &lt;param name="compression"&gt;The compression that should be applied to files and folders.&lt;/param&gt;
            ''' &lt;param name="generateThumbnails"&gt;Determines that portfolio must contain thumbnails for files.&lt;/param&gt;
            ''' &lt;param name="sortFieldName"&gt;Name of the sort field.&lt;/param&gt;
            ''' &lt;returns&gt;
            ''' Added folder.
            ''' &lt;/returns&gt;
            Private Shared Function AddPathRecursively(folder As PdfAttachmentFolder, path__1 As String, addPathAsFolder As Boolean, compression As PdfCompression, generateThumbnails As Boolean, sortFieldName As String) As PdfAttachmentFolder
                ' sort order
                Dim order As Integer = 0
            
                ' folder to which path must be added
                Dim currentFolder As PdfAttachmentFolder
                ' if portfolio must contain folder with the path filename
                If addPathAsFolder Then
                    ' add new folder to portfolio folder and use it as current folder
                    currentFolder = folder.AddFolder(Path.GetFileName(path__1))
                    currentFolder.CreationDate = DateTime.Now
                Else
                    ' use root folder as current folder
                    currentFolder = folder
                    folder.ModificationDate = DateTime.Now
                End If
            
                ' get directories in the specified path
                Dim paths As String() = Directory.GetDirectories(path__1, "*", SearchOption.TopDirectoryOnly)
                ' for each directory
                For Each subPath As String In paths
                    ' if directory is hidden
                    If (File.GetAttributes(subPath) And FileAttributes.Hidden) &lt;&gt; 0 Then
                        ' ignore directory
                        Continue For
                    End If
            
                    Try
                        ' add the directory (all files and sub folders) to current portfolio folder
                        Dim addedSubFolder As PdfAttachmentFolder = AddPathRecursively(currentFolder, subPath, True, compression, generateThumbnails, sortFieldName)
            
                        ' if sorting must be used
                        If sortFieldName IsNot Nothing Then
                            ' add data field collection to the portfolio folder
                            addedSubFolder.DataFields = New PdfAttachmentDataFieldCollection(folder.Document)
                            ' add data field value which defines sorting
                            addedSubFolder.DataFields.Add(sortFieldName, New PdfAttachmentDataField(folder.Document, order))
                            ' increment sort order
                            order += 1
                        End If
                    Catch ex As Exception
                        Console.WriteLine(String.Format("{0}: {1}", currentFolder, ex.Message))
                    End Try
                Next
            
                ' get files in the specified path
                Dim files As String() = Directory.GetFiles(path__1, "*", SearchOption.TopDirectoryOnly)
                ' if files are found
                If files.Length &gt; 0 Then
                    ' for each file
                    For Each filename As String In files
                        ' if file is hidden
                        If (File.GetAttributes(filename) And FileAttributes.Hidden) &lt;&gt; 0 Then
                            ' ignore file
                            Continue For
                        End If
            
                        Try
                            ' add file
                            Console.WriteLine(String.Format("Add file {0}...", filename))
                            Dim file__2 As PdfEmbeddedFileSpecification = currentFolder.AddFile(filename, compression)
                            file__2.EmbeddedFile.CreationDate = DateTime.Now
            
                            ' if thumbnail must be generated
                            If generateThumbnails Then
                                ' generate file thumbnail
                                file__2.Thumbnail = CreateThumbnailResource(file__2.Document, filename)
                            End If
            
                            ' if sorting must be used
                            If sortFieldName IsNot Nothing Then
                                ' add data field collection to the portfolio folder
                                file__2.DataFields = New PdfAttachmentDataFieldCollection(folder.Document)
                                ' add data field value which defines sorting
                                file__2.DataFields.Add(sortFieldName, New PdfAttachmentDataField(folder.Document, order))
                                ' increment sort order
                                order += 1
            
                            End If
                        Catch ex As Exception
                            Console.WriteLine(String.Format("{0}: {1}", filename, ex.Message))
                        End Try
                    Next
                    currentFolder.ModificationDate = DateTime.Now
                End If
            
                Return currentFolder
            End Function
            
            ''' &lt;summary&gt;
            ''' Creates PDF image resource with thumbnail of specified file.
            ''' &lt;/summary&gt;
            ''' &lt;param name="document"&gt;The PDF document.&lt;/param&gt;
            ''' &lt;param name="filename"&gt;The name of file for which thumbnail must be generated.&lt;/param&gt;
            ''' &lt;returns&gt;Thumbnail image resource.&lt;/returns&gt;
            Private Shared Function CreateThumbnailResource(document As PdfDocument, filename As String) As PdfImageResource
                ' get codec for file
                Dim codec As Codec = AvailableCodecs.GetCodecByExtension(Path.GetExtension(filename))
                ' if code is available and codec has decoder
                If codec IsNot Nothing AndAlso codec.CanCreateDecoder Then
                    Try
                        ' get an image of first page of file
                        Using image As New VintasoftImage(filename)
                            ' get image thumbnail
                            Using thumbnailImage As VintasoftImage = image.Thumbnail.GetThumbnailImage(100, 100)
                                Dim compressionSettings As New PdfCompressionSettings()
                                compressionSettings.JpegQuality = 90
                                ' return PDF image-resource that contains image thumbnail
                                Return New PdfImageResource(document, thumbnailImage, PdfCompression.Jpeg, compressionSettings)
                            End Using
                        End Using
                    Catch
                    End Try
                End If
                Return Nothing
            End Function
            
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Assemblies a portfolio from files and folders from specified path.
            /// &lt;/summary&gt;
            /// &lt;param name="rootPath"&gt;The root path to assembly portfolio.&lt;/param&gt;
            /// &lt;param name="outputPdfFilename"&gt;The output PDF filename.&lt;/param&gt;
            public static void AssemblyPortfolio(string rootPath, string outputPdfFilename)
            {
                // create PDF document (version 1.7)
                using (PdfDocument document = new PdfDocument(outputPdfFilename, PdfFormat.Pdf_17))
                {
                    // add page to document
                    PdfPage page = document.Pages.Add(PaperSizeKind.A4);
            
                    // draw text on first page
                    using (PdfGraphics g = page.GetGraphics())
                    {
                        TextBoxFigure textBox = new TextBoxFigure();
                        textBox.Font = document.FontManager.GetStandardFont(StandardFontType.TimesRoman);
                        textBox.FontSize = 30;
                        textBox.Location = new PointF(0, 0);
                        textBox.Size = page.MediaBox.Size;
                        textBox.TextAlignment = PdfContentAlignment.Top | PdfContentAlignment.Left | PdfContentAlignment.Right;
                        textBox.TextBrush = new PdfBrush(Color.Black);
                        textBox.Text = "This document is Portfolio\n(Attachment Collection)\nTo view Portfolio you should use PDF viewer compatible with PDF 1.7 ExtensionLevel 3.";
                        textBox.Draw(g);
                    }
            
                    // create attachements
                    document.CreateAttachments(true);
            
                    // set viewer settings
                    document.Attachments.View = AttachmentCollectionViewMode.TileMode;
                    document.Attachments.SplitterBar = new PdfAttachmentCollectionSplitterBar(document);
                    document.Attachments.SplitterBar.Direction = AttachmentCollectionSplitterBarDirection.None;
                    document.DocumentViewMode = PdfDocumentViewMode.UseAttachments;
            
                    // create field that defines sorting of files and folders in PDF viewer
                    string sortFieldName = "Order";
                    PdfAttachmentCollectionSchemaField sortField = new PdfAttachmentCollectionSchemaField(document, "Order (Sort)", AttachmentCollectionSchemaFieldDataType.Number);
                    sortField.IsVisible = false;
                    document.Attachments.Schema = new PdfAttachmentCollectionSchema(document);
                    document.Attachments.Schema.Add(sortFieldName, sortField);
            
                    // create sort properties
                    document.Attachments.Sort = new PdfAttachmentCollectionSort(document);
                    document.Attachments.Sort.FieldNames = new string[] { sortFieldName };
            
                    // use ZIP compression for files
                    PdfCompression filesCompression = PdfCompression.Zip;
            
                    // add files and folders to portfolio
                    AddPathRecursively(
                        document.Attachments.RootFolder,
                        rootPath,
                        false,
                        filesCompression,
                        true,
                        sortFieldName);
            
                    // save changes in PDF document
                    document.SaveChanges();
                }
            }
            
            /// &lt;summary&gt;
            /// Adds the path (all files and sub folders) to specified portfolio folder.
            /// &lt;/summary&gt;
            /// &lt;param name="folder"&gt;The portfolio folder.&lt;/param&gt;
            /// &lt;param name="path"&gt;The path that should be added to the portfolio.&lt;/param&gt;
            /// &lt;param name="addPathAsFolder"&gt;Determines that portfolio must contain folder with the path filename.&lt;/param&gt;
            /// &lt;param name="compression"&gt;The compression that should be applied to files and folders.&lt;/param&gt;
            /// &lt;param name="generateThumbnails"&gt;Determines that portfolio must contain thumbnails for files.&lt;/param&gt;
            /// &lt;param name="sortFieldName"&gt;Name of the sort field.&lt;/param&gt;
            /// &lt;returns&gt;
            /// Added folder.
            /// &lt;/returns&gt;
            private static PdfAttachmentFolder AddPathRecursively(
                PdfAttachmentFolder folder,
                string path,
                bool addPathAsFolder,
                PdfCompression compression,
                bool generateThumbnails,
                string sortFieldName)
            {
                // sort order
                int order = 0;
            
                // folder to which path must be added
                PdfAttachmentFolder currentFolder;
                // if portfolio must contain folder with the path filename
                if (addPathAsFolder)
                {
                    // add new folder to portfolio folder and use it as current folder
                    currentFolder = folder.AddFolder(Path.GetFileName(path));
                    currentFolder.CreationDate = DateTime.Now;
                }
                else
                {
                    // use root folder as current folder
                    currentFolder = folder;
                    folder.ModificationDate = DateTime.Now;
                }
            
                // get directories in the specified path
                string[] paths = Directory.GetDirectories(path, "*", SearchOption.TopDirectoryOnly);
                // for each directory
                foreach (string subPath in paths)
                {
                    // if directory is hidden
                    if ((File.GetAttributes(subPath) &amp; FileAttributes.Hidden) != 0)
                        // ignore directory
                        continue;
            
                    try
                    {
                        // add the directory (all files and sub folders) to current portfolio folder
                        PdfAttachmentFolder addedSubFolder = AddPathRecursively(currentFolder, subPath, true, compression, generateThumbnails, sortFieldName);
            
                        // if sorting must be used
                        if (sortFieldName != null)
                        {
                            // add data field collection to the portfolio folder
                            addedSubFolder.DataFields = new PdfAttachmentDataFieldCollection(folder.Document);
                            // add data field value which defines sorting
                            addedSubFolder.DataFields.Add(sortFieldName, new PdfAttachmentDataField(folder.Document, order));
                            // increment sort order
                            order++;
                        }
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine(string.Format("{0}: {1}", currentFolder, ex.Message));
                    }
                }
            
                // get files in the specified path
                string[] files = Directory.GetFiles(path, "*", SearchOption.TopDirectoryOnly);
                // if files are found
                if (files.Length &gt; 0)
                {
                    // for each file
                    foreach (string filename in files)
                    {
                        // if file is hidden
                        if ((File.GetAttributes(filename) &amp; FileAttributes.Hidden) != 0)
                            // ignore file
                            continue;
            
                        try
                        {
                            // add file
                            Console.WriteLine(string.Format("Add file {0}...", filename));
                            PdfEmbeddedFileSpecification file = currentFolder.AddFile(filename, compression);
                            file.EmbeddedFile.CreationDate = DateTime.Now;
            
                            // if thumbnail must be generated
                            if (generateThumbnails)
                                // generate file thumbnail
                                file.Thumbnail = CreateThumbnailResource(file.Document, filename);
            
                            // if sorting must be used
                            if (sortFieldName != null)
                            {
                                // add data field collection to the portfolio folder
                                file.DataFields = new PdfAttachmentDataFieldCollection(folder.Document);
                                // add data field value which defines sorting
                                file.DataFields.Add(sortFieldName, new PdfAttachmentDataField(folder.Document, order));
                                // increment sort order
                                order++;
                            }
            
                        }
                        catch (Exception ex)
                        {
                            Console.WriteLine(string.Format("{0}: {1}", filename, ex.Message));
                        }
                    }
                    currentFolder.ModificationDate = DateTime.Now;
                }
            
                return currentFolder;
            }
            
            /// &lt;summary&gt;
            /// Creates PDF image resource with thumbnail of specified file.
            /// &lt;/summary&gt;
            /// &lt;param name="document"&gt;The PDF document.&lt;/param&gt;
            /// &lt;param name="filename"&gt;The name of file for which thumbnail must be generated.&lt;/param&gt;
            /// &lt;returns&gt;Thumbnail image resource.&lt;/returns&gt;
            private static PdfImageResource CreateThumbnailResource(PdfDocument document, string filename)
            {
                // get codec for file
                Codec codec = AvailableCodecs.GetCodecByExtension(Path.GetExtension(filename));
                // if code is available and codec has decoder
                if (codec != null &amp;&amp; codec.CanCreateDecoder)
                {
                    try
                    {
                        // get an image of first page of file
                        using (VintasoftImage image = new VintasoftImage(filename))
                        {
                            // get image thumbnail
                            using (VintasoftImage thumbnailImage = image.Thumbnail.GetThumbnailImage(100, 100))
                            {
                                PdfCompressionSettings compressionSettings = new PdfCompressionSettings();
                                compressionSettings.JpegQuality = 90;
                                // return PDF image-resource that contains image thumbnail
                                return new PdfImageResource(document, thumbnailImage, PdfCompression.Jpeg, compressionSettings);
                            }
                        }
                    }
                    catch
                    {
                    }
                }
                return null;
            }
            
            </code>
            </example>
            <seealso cref="M:Vintasoft.Imaging.Pdf.PdfDocument.CreateAttachments(System.Boolean)" />
            <seealso cref="M:Vintasoft.Imaging.Pdf.PdfDocument.RemoveAttachments(System.Boolean)" />
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.PdfDocument.JavaScripts">
            <summary>
            Gets or sets a dictionary that maps names to the document-level JavaScript actions.
            </summary>
            <remarks>
            To support the use of parameterized function calls in JavaScript 
            scripts, this property can contain names of 
            document-level JavaScript actions. When the document is opened, 
            all of the actions in this dictionary are executed, defining 
            JavaScript functions for use by other scripts in the document.<br />
            <br />
            <b>Note:</b> The names associated with individual JavaScript 
            actions in the name dictionary serve merely as a convenient 
            means for organizing and packaging scripts. The names are 
            arbitrary and need not bear any relation to the JavaScript name space.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.PdfDocument.Format">
            <summary>
            Gets the format of this PDF document that specified in the file's header.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.PdfDocument.SpecificationVersion">
            <summary>
            Gets or sets the version of the PDF specification to which the document 
            conforms (for example, 1.4) if later than the version specified in the 
            file's header (<see cref="P:Vintasoft.Imaging.Pdf.PdfDocument.Format" />).
            </summary>
            <remarks>
            If the header specifies a later version, or if this property is absent,
            the document conforms to the version specified in the header. This entry 
            enables a PDF producer application to update the version using an incremental update.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.PdfDocument.Extensions">
            <summary>
            Gets or sets a extensions dictionary representing information
            about the PDF extensions that this document contains.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.PdfDocument.IsEncrypted">
            <summary>
            Gets a value indicating whether the PDF document is encrypted.
            </summary>
            <value>
            <b>true</b> - PDF document is encrypted;
            <b>false</b> - PDF document is NOT encrypted.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.PdfDocument.EncryptionSystem">
            <summary>
            Gets an information about encryption system.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.PdfDocument.DocumentInformation">
            <summary>
            Returns information (author, modification date, etc)
            about this PDF document.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.PdfDocument.Pages">
            <summary>
            Returns the collection of pages of this PDF document.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.PdfDocument.Bookmarks">
            <summary>
            Returns the collection of bookmarks of this PDF document.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.PdfDocument.Images">
            <summary>
            Gets a collection of image-resources of this PDF document.
            </summary>
            <remarks>
            This collection contains all image-resources of this PDF document.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.PdfDocument.Fonts">
            <summary>
            Gets a collection of fonts of this PDF document.
            </summary>
            <remarks>
            This collection contains all fonts of this PDF document.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.PdfDocument.Metadata">
            <summary>
            Gets or sets metadata associated with this PDF document.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.PdfDocument.DecodingSettings">
            <summary>
            Gets or sets settings for decoding of pages of this
            PDF document.
            </summary>
            <example>
            Here is an example that demonstrates how to render PDF page with enabled color management:
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Renders PDF page with enabled color management.
            ''' &lt;/summary&gt;
            ''' &lt;param name="page"&gt;The PDF page.&lt;/param&gt;
            ''' &lt;param name="iccProfile"&gt;The ICC profile that should be applied to PDF page.&lt;/param&gt;
            Public Shared Function RenderPdfPageWithEnabledColorManagement(page As PdfPage, iccProfile As IccProfile) As VintasoftImage
                ' if decoding settings are NOT specified
                If page.Document.DecodingSettings Is Nothing Then
                    ' create the default decoding settings
                    page.Document.DecodingSettings = New DecodingSettings()
                End If
            
                ' get the decoding setting of PDF document
                Dim decodingSettings As DecodingSettings = page.Document.DecodingSettings
                ' if color management decoding settings is NOT enabled
                If decodingSettings.ColorManagement Is Nothing Then
                    ' create the default color management decoding settings
                    decodingSettings.ColorManagement = New ColorManagementDecodeSettings()
                End If
            
                ' set the ICC profile that should be applied to PDF page
                decodingSettings.ColorManagement.InputCmykProfile = iccProfile
            
                ' render PDF page
                Dim image As VintasoftImage = page.Render()
            
                ' return the image of PDF page
                Return image
            End Function
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Renders PDF page with enabled color management.
            /// &lt;/summary&gt;
            /// &lt;param name="page"&gt;The PDF page.&lt;/param&gt;
            /// &lt;param name="iccProfile"&gt;The ICC profile that should be applied to PDF page.&lt;/param&gt;
            public static VintasoftImage RenderPdfPageWithEnabledColorManagement(PdfPage page, IccProfile iccProfile)
            {
                // if decoding settings are NOT specified
                if (page.Document.DecodingSettings == null)
                    // create the default decoding settings
                    page.Document.DecodingSettings = new DecodingSettings();
            
                // get the decoding setting of PDF document
                DecodingSettings decodingSettings = page.Document.DecodingSettings;
                // if color management decoding settings is NOT enabled
                if (decodingSettings.ColorManagement == null)
                    // create the default color management decoding settings
                    decodingSettings.ColorManagement = new ColorManagementDecodeSettings();
            
                // set the ICC profile that should be applied to PDF page
                decodingSettings.ColorManagement.InputCmykProfile = iccProfile;
            
                // render PDF page
                VintasoftImage image = page.Render();
            
                // return the image of PDF page
                return image;
            }
            </code>
            </example>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.PdfDocument.RenderingSettings">
            <summary>
            Gets or sets settings for rendering of pages of this
            PDF document.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.PdfDocument.DocumentViewMode">
            <summary>
            Gets or sets the document view mode (PageMode) that
            specifies how the document should be displayed when opened.
            </summary>
            <seealso cref="P:Vintasoft.Imaging.Pdf.PdfDocument.ViewerPreferences" />
            <seealso cref="P:Vintasoft.Imaging.Pdf.PdfDocument.ViewerPageLayout" />
            <seealso cref="P:Vintasoft.Imaging.Pdf.PdfDocument.OpenAction" />
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.PdfDocument.ViewerPageLayout">
            <summary>
            Gets or sets the mode that specifies the page layout 
            to be used when the document is opened.
            </summary>
            <seealso cref="P:Vintasoft.Imaging.Pdf.PdfDocument.ViewerPreferences" />
            <seealso cref="P:Vintasoft.Imaging.Pdf.PdfDocument.DocumentViewMode" />
            <seealso cref="P:Vintasoft.Imaging.Pdf.PdfDocument.OpenAction" />
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.PdfDocument.ViewerPreferences">
            <summary>
            Gets or sets a viewer preferences that specify the way the 
            document is to be displayed on the screen. 
            </summary>
            <remarks>
            If this property is absent, applications should use their 
            own current user preference settings.
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.Pdf.PdfDocument.DocumentViewMode" />
            <seealso cref="P:Vintasoft.Imaging.Pdf.PdfDocument.ViewerPageLayout" />
            <seealso cref="P:Vintasoft.Imaging.Pdf.PdfDocument.OpenAction" />
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.PdfDocument.RuntimeMessages">
            <summary>
            Returns collection of runtime messages which occured
            during loading of this PDF document or
            rendering of PDF pages. 
            </summary>
            <example>
            Here is an example of code to calculate the errors / warnings in the document:
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Saves PDF document as a PDF/A document.
            ''' &lt;/summary&gt;
            Public Shared Sub SaveAsPdfADocument(sourceFilename As String, destFilename As String, ByRef errors As Integer, ByRef warnings As Integer)
                ' load PDF document
                Using document As New PdfDocument(sourceFilename)
                    errors = 0
                    warnings = 0
                    ' clear runtime errors and warnings
                    document.RuntimeMessages.Clear()
            
                    ' save PDF document as PDF/A document
                    document.Pack(destFilename, PdfFormat.Pdf_A)
            
                    ' check runtime errors and warnings
                    For Each message As PdfRuntimeMessage In document.RuntimeMessages
                        If TypeOf message Is PdfRuntimeWarning Then
                            warnings += 1
                        ElseIf TypeOf message Is PdfRuntimeError Then
                            errors += 1
                        End If
                    Next
                End Using
            End Sub
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Saves PDF document as a PDF/A document.
            /// &lt;/summary&gt;
            public static void SaveAsPdfADocument(string sourceFilename, string destFilename, out int errors, out int warnings)
            {
                // load PDF document
                using (PdfDocument document = new PdfDocument(sourceFilename))
                {
                    errors = 0;
                    warnings = 0;
                    // clear runtime errors and warnings
                    document.RuntimeMessages.Clear();
            
                    // save PDF document as PDF/A document
                    document.Pack(destFilename, PdfFormat.Pdf_A);
            
                    // check runtime errors and warnings
                    foreach (PdfRuntimeMessage message in document.RuntimeMessages)
                    {
                        if (message is PdfRuntimeWarning)
                            warnings++;
                        else if (message is PdfRuntimeError)
                            errors++;
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.PdfDocument.StreamLength">
            <summary>
            Returns length of the source (file or stream)
            of this PDF document.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.PdfDocument.SourceStream">
            <summary>
            Gets the source stream of this PDF document.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.PdfDocument.IsChanged">
            <summary>
            Determines if this PDF document is changed.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.PdfDocument.FontProgramsController">
            <summary>
            Gets or sets <see cref="T:Vintasoft.Imaging.Pdf.IFontProgramsController" /> that 
            allows to access external font programs.
            </summary>
            <value>
            Default value is instance 
            <see cref="T:Vintasoft.Imaging.Pdf.UserAndSystemFontProgramsController" /> class, i.e. fonts
            are searched in the "$ASSEMBLY_DIRECTORY$\fonts\" directory.
            </value>
            <example>
            Here is an example that demonstrates how to change the font search algorithm and
            search fonts in the specified folder, not found fonts will be replaced by Arial font:
            <code lang="VB.NET">
            Public Class UserAndSystemFontProgramsController
                Inherits SystemFontProgramsController
            
                Private _fontsDirectory As String
            
            
                Public Sub New(fontsDirectory As String)
                    MyBase.New()
                    _fontsDirectory = fontsDirectory
                    If Not Path.IsPathRooted(_fontsDirectory) Then
                        Dim assemlyDirectory As String = Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().ManifestModule.FullyQualifiedName)
                        _fontsDirectory = Path.Combine(assemlyDirectory, _fontsDirectory)
                    End If
                End Sub
            
            
                ''' &lt;summary&gt;
                ''' Defines custom font search algorithm.
                ''' &lt;/summary&gt;
                Public Overrides Function GetTrueTypeFontProgram(fontName As String) As Stream
                    ' convert PostScript font name to standard font name
                    Dim parsedFontName As String = ConvertPostScriptFontNameToStandardFontName(fontName)
            
                    ' combine directory path and font name
                    Dim fontFileName As String = Path.Combine(_fontsDirectory, parsedFontName &amp; ".ttf")
            
                    ' if file with font exists
                    If File.Exists(fontFileName) Then
                        ' return stream with font data
                        Return New FileStream(fontFileName, FileMode.Open, FileAccess.Read)
                    End If
            
                    ' search in system fonts
                    Return MyBase.GetTrueTypeFontProgram(fontName)
                End Function
            End Class
            
            Public Function LoadPdfDocument() As PdfDocument
                ' load PDF document
                Dim pdfDocument As New PdfDocument("d:\document.pdf")
            
                ' override search algorithm of fonts
                Dim directoryWithFonts As String = "path to directory with custom fonts"
                pdfDocument.FontProgramsController = New UserAndSystemFontProgramsController(directoryWithFonts)
            
                Return pdfDocument
            End Function
            </code>
            <code lang="C#">
            public class UserAndSystemFontProgramsController : SystemFontProgramsController
            {
            
                string _fontsDirectory;
            
            
                public UserAndSystemFontProgramsController(string fontsDirectory)
                    : base()
                {
                    _fontsDirectory = fontsDirectory;
                    if (!Path.IsPathRooted(_fontsDirectory))
                    {
                        string assemlyDirectory = Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().ManifestModule.FullyQualifiedName);
                        _fontsDirectory = Path.Combine(assemlyDirectory, _fontsDirectory);
                    }
                }
            
            
                /// &lt;summary&gt;
                /// Defines custom font search algorithm.
                /// &lt;/summary&gt;
                public override Stream GetTrueTypeFontProgram(string fontName)
                {
                    // convert PostScript font name to standard font name
                    string parsedFontName = ConvertPostScriptFontNameToStandardFontName(fontName);
            
                    // combine directory path and font name
                    string fontFileName = Path.Combine(_fontsDirectory, parsedFontName + ".ttf");
            
                    // if file with font exists
                    if (File.Exists(fontFileName))
                    {
                        // return stream with font data
                        return new FileStream(fontFileName, FileMode.Open, FileAccess.Read);
                    }
            
                    // search in system fonts
                    return base.GetTrueTypeFontProgram(fontName);
                }
            }
            
            public PdfDocument LoadPdfDocument()
            {
                // load PDF document
                PdfDocument pdfDocument = new PdfDocument(@"d:\document.pdf");
            
                // override search algorithm of fonts
                string directoryWithFonts = "path to directory with custom fonts";
                pdfDocument.FontProgramsController = new UserAndSystemFontProgramsController(directoryWithFonts);
            
                return pdfDocument;
            }
            </code>
            </example>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.PdfDocument.AuthorizationResult">
            <summary>
            Gets a result of last authentication.
            </summary>
            <example>
            <code lang="VB.NET">
            Public Shared Sub DocumentAuthentication(document As PdfDocument, password As String)
                ' document is encryptred?
                If document.AuthorizationResult = AuthorizationResult.AuthenticationNotRequired Then
                    Console.WriteLine("Document is not encrypted.")
                    Return
                End If
            
                ' executes authentication
                If document.AuthorizationResult = AuthorizationResult.IncorrectPassword Then
                    document.Authenticate(password)
                End If
            
                ' check authorization result
                If document.AuthorizationResult = AuthorizationResult.IncorrectPassword Then
                    Console.WriteLine("The password is incorrect.")
                Else
                    Console.Write("Authentication pass successfully, ")
                    If document.AuthorizationResult = AuthorizationResult.OwnerPassword Then
                        Console.WriteLine("owner password identified.")
                    ElseIf document.AuthorizationResult = AuthorizationResult.UserPassword Then
                        Console.WriteLine("user password identified.")
                    ElseIf document.AuthorizationResult = (AuthorizationResult.UserPassword Or AuthorizationResult.OwnerPassword) Then
                        Console.WriteLine("user and owner passwords are equal.")
                    End If
                End If
            End Sub
            </code>
            <code lang="C#">
            public static void DocumentAuthentication(PdfDocument document, string password)
            {
                // document is encryptred?
                if (document.AuthorizationResult == AuthorizationResult.AuthenticationNotRequired)
                {
                    Console.WriteLine("Document is not encrypted.");
                    return;
                }
            
                // executes authentication
                if (document.AuthorizationResult == AuthorizationResult.IncorrectPassword)
                    document.Authenticate(password);
            
                // check authorization result
                if (document.AuthorizationResult == AuthorizationResult.IncorrectPassword)
                {
                    Console.WriteLine("The password is incorrect.");
                }
                else
                {
                    Console.Write("Authentication pass successfully, ");
                    if (document.AuthorizationResult == AuthorizationResult.OwnerPassword)
                        Console.WriteLine("owner password identified.");
                    else if (document.AuthorizationResult == AuthorizationResult.UserPassword)
                        Console.WriteLine("user password identified.");
                    else if (document.AuthorizationResult == (AuthorizationResult.UserPassword | AuthorizationResult.OwnerPassword))
                        Console.WriteLine("user and owner passwords are equal.");
                }
            }
            </code>
            </example>
            <seealso cref="M:Vintasoft.Imaging.Pdf.PdfDocument.Authenticate(System.String)" />
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.PdfDocument.Revisions">
            <summary>
            Gets the document revisions.
            </summary>
            <remarks>
            PDF document revision is a state of PDF document at the moment when
            PDF document was signed using digital certificate.
            </remarks>
            <example>
            Here is an example that shows how to save all revisions of PDF document to the separate files:
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Saves the revisions of PDF document to the separate files.
            ''' &lt;/summary&gt;
            ''' &lt;param name="filename"&gt;The filename of PDF document.&lt;/param&gt;
            Public Shared Sub SaveRevisions(filename As String)
                ' open PDF document
                Using document As New PdfDocument(filename)
                    Dim revisionFilename As String = String.Format("{0}\{1}_rev{{0}}.pdf", Path.GetDirectoryName(filename), Path.GetFileNameWithoutExtension(filename))
            
                    ' if PDF document has revisions
                    If document.Revisions IsNot Nothing Then
                        ' for each revision
                        For Each revision As PdfDocumentRevision In document.Revisions
                            ' save revision to a file
                            revision.CopyRevisionTo(String.Format(revisionFilename, revision.RevisionNumber))
                        Next
                    End If
                End Using
            End Sub
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Saves the revisions of PDF document to the separate files.
            /// &lt;/summary&gt;
            /// &lt;param name="filename"&gt;The filename of PDF document.&lt;/param&gt;
            public static void SaveRevisions(string filename)
            {
                // open PDF document
                using (PdfDocument document = new PdfDocument(filename))
                {
                    string revisionFilename = string.Format(@"{0}\{1}_rev{{0}}.pdf",
                        Path.GetDirectoryName(filename),
                        Path.GetFileNameWithoutExtension(filename));
            
                    // if PDF document has revisions
                    if (document.Revisions != null)
                    {
                        // for each revision
                        foreach (PdfDocumentRevision revision in document.Revisions)
                            // save revision to a file
                            revision.CopyRevisionTo(string.Format(revisionFilename, revision.RevisionNumber));
                    }
                }
            }
            </code>
            </example>
            <seealso cref="P:Vintasoft.Imaging.Pdf.Tree.DigitalSignatures.PdfSignatureInformation.SignedRevision" />
        </member>
        <member name="E:Vintasoft.Imaging.Pdf.PdfDocument.DocumentChanged">
            <summary>
            Occurs when PDF document is changed. i.e. the value of
            the <see cref="P:Vintasoft.Imaging.Pdf.PdfDocument.IsChanged" /> property is changed.
            </summary>
            <remarks>
            Value of the <see cref="P:Vintasoft.Imaging.Pdf.PdfDocument.IsChanged" /> property is
            changed to <b>false</b> when document is saved.<br />
            Value of the <see cref="P:Vintasoft.Imaging.Pdf.PdfDocument.IsChanged" /> property is
            changed to <b>true</b> when content of the document
            is changed.
            </remarks>
        </member>
        <member name="E:Vintasoft.Imaging.Pdf.PdfDocument.Progress">
            <summary>
            Occurs when the PDF file is packing/saving.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.PdfDocumentController">
            <summary>
            Manages opened PDF documents.
            </summary>
            <remarks>
            This class manages access to PDF document and allows
            to access the single PDF document from several 
            <see cref="T:Vintasoft.Imaging.Pdf.PdfDocument" /> objects. 
            <see cref="T:Vintasoft.Imaging.Codecs.Encoders.PdfEncoder" /> and 
            <see cref="T:Vintasoft.Imaging.Codecs.Decoders.PdfDecoder" /> classes uses the 
            PDF document controller to manage PDF documents.
            </remarks>
            <example>
            Here is an example that shows how to 
            manage external fonts of PDF documents and 
            performs authentication of encrypted PDF documents:
            <code lang="VB.NET">
            
            ' MainForm constructor
            Public Sub New()
                '....
            
                ' subscribe to the DocumentOpened event for managing external fonts
                AddHandler PdfDocumentController.DocumentOpened, New EventHandler(Of PdfDocumentOpenedEventArgs)(AddressOf PdfDocumentController_DocumentOpened)
                ' subscribe to the AuthenticateRequest for performing authentication
            
                    '....
                AddHandler PdfDocumentController.AuthenticateRequest, New EventHandler(Of PdfDocumentOpenedEventArgs)(AddressOf PdfDocumentController_AuthenticateRequest)
            End Sub
            
            ''' &lt;summary&gt;
            ''' Opens the PDF document.
            ''' &lt;/summary&gt;
            ''' &lt;param name="stream"&gt;The stream that contains PDF document.&lt;/param&gt;
            Public Sub OpenPdfDocument(stream As Stream)
                imageViewer1.Images.Add(stream, True)
            End Sub
            
            ''' &lt;summary&gt;
            ''' Handles the AuthenticateRequest event of the PdfDocumentController object.
            ''' &lt;/summary&gt;
            Private Sub PdfDocumentController_AuthenticateRequest(sender As Object, e As PdfDocumentOpenedEventArgs)
                ' document is encrypted with password, authenticate as user
            
                Dim password As String = "userpassword"
                If e.Document.AuthenticateAsUser(password) = AuthorizationResult.IncorrectPassword Then
                    MessageBox.Show("Incorrect user password")
                End If
            End Sub
            
            ''' &lt;summary&gt;
            ''' Handles the DocumentOpened event of the PdfDocumentController control.
            ''' &lt;/summary&gt;
            Private Sub PdfDocumentController_DocumentOpened(sender As Object, e As PdfDocumentOpenedEventArgs)
                ' use CustomFontProgramsController to manage external fonts
                e.Document.FontProgramsController = New CustomFontProgramsController(e.Document)
            End Sub
            
            ''' &lt;summary&gt;
            ''' Class that provides access to fonts, located in specified directory,
            ''' and system fonts. 
            ''' &lt;/summary&gt;
            Public Class CustomFontProgramsController
                Inherits UserAndSystemFontProgramsController
            
                #Region "Fields"
            
                ''' &lt;summary&gt;
                ''' Standard font program name.
                ''' &lt;/summary&gt;
                Const DefaultStandardFontName As String = "Arial"
            
                ''' &lt;summary&gt;
                ''' The &lt;see cref="PdfDocument"/&gt;.
                ''' &lt;/summary&gt;
                Private _document As PdfDocument
            
                #End Region
            
            
            
                #Region "Constructor"
            
                ''' &lt;summary&gt;
                ''' Initializes a new instance of the
                ''' &lt;see cref="CustomFontProgramsController"/&gt; class.
                ''' &lt;/summary&gt;
                Public Sub New(document As PdfDocument)
                    MyBase.New("fonts\")
                    _document = document
                End Sub
            
                #End Region
            
            
            
                #Region "Methods"
            
                ''' &lt;summary&gt;
                ''' Returns a TrueType font program for specified font name.
                ''' &lt;/summary&gt;
                ''' &lt;param name="fontName"&gt;Font name.&lt;/param&gt;
                ''' &lt;returns&gt;The &lt;see cref="System.IO.Stream"/&gt; that contains the font
                ''' program in TrueType format if font is found successfully;
                ''' otherwise, &lt;b&gt;null&lt;/b&gt;.&lt;/returns&gt;
                Public Overrides Function GetTrueTypeFontProgram(fontName As String) As Stream
                    Dim result As Stream = MyBase.GetTrueTypeFontProgram(fontName)
                    ' if font program is not found
                    If result Is Nothing Then
                        Dim standardFontName As String = DefaultStandardFontName
                        If fontName.StartsWith("Courier") Then
                            standardFontName = "Courier New"
                        ElseIf fontName.Contains("TimesNewRoman") Then
                            standardFontName = "Times New Roman"
                        ElseIf fontName.Contains("Arial") Then
                            standardFontName = "Arial"
                        End If
            
                        Dim fontNameUpper As String = fontName.ToUpperInvariant()
                        If fontNameUpper.EndsWith("BOLD ITALIC") OrElse fontNameUpper.EndsWith("-BOLDITALICMT") Then
                            standardFontName += " Bold Italic"
                        ElseIf fontNameUpper.EndsWith("BOLD") OrElse fontNameUpper.EndsWith("-BOLDMT") Then
                            standardFontName += " Bold"
                        ElseIf fontNameUpper.EndsWith("ITALIC") OrElse fontNameUpper.EndsWith("-ITALICMT") Then
                            standardFontName += " Italic"
                        End If
            
                        result = MyBase.GetTrueTypeFontProgram(standardFontName)
            
                        If result IsNot Nothing Then
                            Dim message As String = String.Format("Font program '{0}' was not found, '{1}' program is used.", fontName, standardFontName)
                            _document.RuntimeMessages.Add(New PdfRuntimeWarning("FontProgramsController", message))
                        End If
                    End If
                    Return result
                End Function
            
                #End Region
            
            End Class
            
            </code>
            <code lang="C#">
            
            // MainForm constructor
            public MainForm()
            {
                //....
                
                // subscribe to the DocumentOpened event for managing external fonts
                PdfDocumentController.DocumentOpened += new EventHandler&lt;PdfDocumentOpenedEventArgs&gt;(PdfDocumentController_DocumentOpened);
                // subscribe to the AuthenticateRequest for performing authentication
                PdfDocumentController.AuthenticateRequest += new EventHandler&lt;PdfDocumentOpenedEventArgs&gt;(PdfDocumentController_AuthenticateRequest);
                
                //....
            }
            
            /// &lt;summary&gt;
            /// Opens the PDF document.
            /// &lt;/summary&gt;
            /// &lt;param name="stream"&gt;The stream that contains PDF document.&lt;/param&gt;
            public void OpenPdfDocument(Stream stream)
            {
                imageViewer1.Images.Add(stream, true);
            }
            
            /// &lt;summary&gt;
            /// Handles the AuthenticateRequest event of the PdfDocumentController object.
            /// &lt;/summary&gt;
            private void PdfDocumentController_AuthenticateRequest(object sender, PdfDocumentOpenedEventArgs e)
            {
                // document is encrypted with password, authenticate as user
            
                string password = "userpassword";
                if (e.Document.AuthenticateAsUser(password) == AuthorizationResult.IncorrectPassword)
                    MessageBox.Show("Incorrect user password");
            }
            
            /// &lt;summary&gt;
            /// Handles the DocumentOpened event of the PdfDocumentController control.
            /// &lt;/summary&gt;
            private void PdfDocumentController_DocumentOpened(object sender, PdfDocumentOpenedEventArgs e)
            {
                // use CustomFontProgramsController to manage external fonts
                e.Document.FontProgramsController = new CustomFontProgramsController(e.Document);
            }
            
            /// &lt;summary&gt;
            /// Class that provides access to fonts, located in specified directory,
            /// and system fonts. 
            /// &lt;/summary&gt;
            public class CustomFontProgramsController : UserAndSystemFontProgramsController
            {
            
                #region Fields
            
                /// &lt;summary&gt;
                /// Standard font program name.
                /// &lt;/summary&gt;
                const string DefaultStandardFontName = "Arial";
            
                /// &lt;summary&gt;
                /// The &lt;see cref="PdfDocument"/&gt;.
                /// &lt;/summary&gt;
                PdfDocument _document;
            
                #endregion
            
            
            
                #region Constructor
            
                /// &lt;summary&gt;
                /// Initializes a new instance of the
                /// &lt;see cref="CustomFontProgramsController"/&gt; class.
                /// &lt;/summary&gt;
                public CustomFontProgramsController(PdfDocument document)
                    : base(@"fonts\")
                {
                    _document = document;
                }
            
                #endregion
            
            
            
                #region Methods
            
                /// &lt;summary&gt;
                /// Returns a TrueType font program for specified font name.
                /// &lt;/summary&gt;
                /// &lt;param name="fontName"&gt;Font name.&lt;/param&gt;
                /// &lt;returns&gt;The &lt;see cref="System.IO.Stream"/&gt; that contains the font
                /// program in TrueType format if font is found successfully;
                /// otherwise, &lt;b&gt;null&lt;/b&gt;.&lt;/returns&gt;
                public override Stream GetTrueTypeFontProgram(string fontName)
                {
                    Stream result = base.GetTrueTypeFontProgram(fontName);
                    // if font program is not found
                    if (result == null)
                    {
                        string standardFontName = DefaultStandardFontName;
                        if (fontName.StartsWith("Courier"))
                            standardFontName = "Courier New";
                        else if (fontName.Contains("TimesNewRoman"))
                            standardFontName = "Times New Roman";
                        else if (fontName.Contains("Arial"))
                            standardFontName = "Arial";
            
                        string fontNameUpper = fontName.ToUpperInvariant();
                        if (fontNameUpper.EndsWith("BOLD ITALIC") || fontNameUpper.EndsWith("-BOLDITALICMT"))
                            standardFontName += " Bold Italic";
                        else if (fontNameUpper.EndsWith("BOLD") || fontNameUpper.EndsWith("-BOLDMT"))
                            standardFontName += " Bold";
                        else if (fontNameUpper.EndsWith("ITALIC") || fontNameUpper.EndsWith("-ITALICMT"))
                            standardFontName += " Italic";
            
                        result = base.GetTrueTypeFontProgram(standardFontName);
            
                        if (result != null)
                        {
                            string message = string.Format("Font program '{0}' was not found, '{1}' program is used.", fontName, standardFontName);
                            _document.RuntimeMessages.Add(new PdfRuntimeWarning("FontProgramsController", message));
                        }
                    }
                    return result;
                }
            
                #endregion
            
            }
            
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfDocumentController.OpenDocument(System.IO.Stream)">
            <summary>
            Opens the PDF document from specified stream.
            </summary>
            <param name="stream">Stream with data of PDF document.</param>
            <returns><see cref="T:Vintasoft.Imaging.Pdf.PdfDocument" /> associated
            with the specified file.</returns>
            <remarks>
            Document manager opens file in read-write mode.<br />
            <br />
            <b>Important</b>: Each <see cref="T:Vintasoft.Imaging.Pdf.PdfDocument" /> returned by this method must
            be closed with the <see cref="M:Vintasoft.Imaging.Pdf.PdfDocumentController.CloseDocument(Vintasoft.Imaging.Pdf.PdfDocument)" /> method.
            </remarks>
            <seealso cref="M:Vintasoft.Imaging.Pdf.PdfDocumentController.CloseDocument(Vintasoft.Imaging.Pdf.PdfDocument)" />
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfDocumentController.RegisterDocument(System.IO.Stream,Vintasoft.Imaging.Pdf.PdfDocument)">
            <summary>
            Registers opened PDF document on specified stream.
            </summary>
            <param name="stream">Specifies the <see cref="T:System.IO.Stream" /> of PDF document.</param>
            <param name="document">The <see cref="T:Vintasoft.Imaging.Pdf.PdfDocument" /> to register.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfDocumentController.CloseDocument(Vintasoft.Imaging.Pdf.PdfDocument)">
            <summary>
            Closes the PDF document associated with the
            <see cref="T:Vintasoft.Imaging.Pdf.PdfDocument" /> object.
            </summary>
            <param name="document"><see cref="T:Vintasoft.Imaging.Pdf.PdfDocument" />
            to close.</param>
            <remarks>
            Source (file or stream) of PDF document is closed
            physically only if there are no <see cref="T:Vintasoft.Imaging.Pdf.PdfDocument" />
            objects associated with the source.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfDocumentController.GetPageAssociatedWithImage(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Returns a <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfPage" /> associated with
            specified <see cref="T:Vintasoft.Imaging.VintasoftImage">image</see>.
            </summary>
            <returns>A <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfPage" /> associated with
            specified <see cref="T:Vintasoft.Imaging.VintasoftImage">image</see>.</returns>
        </member>
        <member name="E:Vintasoft.Imaging.Pdf.PdfDocumentController.AuthenticateRequest">
            <summary>
            Occurs when the opened PDF document is encrypted and required authentication.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.Pdf.PdfDocumentController.DocumentOpened">
            <summary>
            Occurs when the PDF document is opened.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Drawing.PdfBrush">
            <summary>
            Defines a brush of a single color for PDF document.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfBrush.#ctor(System.Drawing.Color,Vintasoft.Imaging.Pdf.Tree.GraphicsStateBlendMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfBrush" /> class.
            </summary>
            <param name="color">A Color structure that
            represents the color of this brush.</param>
            <param name="blendMode">Blending mode.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfBrush.#ctor(System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfBrush" /> class.
            </summary>
            <param name="color">A Color structure that
            represents the color of this brush.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfBrush.Equals(System.Object)">
            <summary>
            Determines whether two Object instances are equal.
            </summary>
            <param name="obj">The Object to compare with the
            current Object.</param>
            <returns><b>true</b> if the specified Object is
            equal to the current Object;
            otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfBrush.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current Object.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfBrush.Clone">
            <summary>
            Creates an exact copy of this 
            <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfBrush" /> object. 
            </summary>
            <returns>The <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfBrush" /> object that
            this method creates.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfBrush.Clone(Vintasoft.Imaging.Pdf.Drawing.PdfBrush)">
            <summary>
            Creates an exact copy of specified 
            <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfBrush" /> object. 
            </summary>
            <param name="brush">The source brush.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.PdfBrush.Color">
            <summary>
            Gets or sets the color of this <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfBrush" /> object.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.PdfBrush.BlendMode">
            <summary>
            Gets or sets the blending mode of this <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfBrush" />.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Drawing.PdfLineCap">
            <summary>
            Encapsulates a custom user-defined line cap. 
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfLineCap.#ctor(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfLineCap" /> class with the
            specified outline and fill. 
            </summary>
            <param name="fillPath">A <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> object that defines
            the fill for the custom cap.</param>
            <param name="strokePath">A <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> object that defines
            the outline of the custom cap.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfLineCap.CreateStandardCap(Vintasoft.Imaging.Pdf.Drawing.PdfLineCapStyles,System.Drawing.SizeF)">
            <summary>
            Creates standard cap.
            </summary>
            <param name="capStyle">Line cap style.</param>
            <param name="size">Cap size.</param>
            <returns><see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfLineCap" /> instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfLineCap.CreateStandardCap(Vintasoft.Imaging.Pdf.Drawing.PdfLineCapStyles,System.Single,System.Single)">
            <summary>
            Creates standard cap.
            </summary>
            <param name="capStyle">Line cap style.</param>
            <param name="width">Cap width.</param>
            <param name="height">Cap height.</param>
            <returns><see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfLineCap" /> instance.</returns>        
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Drawing.PdfLineCapStyles">
            <summary>
            Specifies available styles of the caps at the
            ends of the line-based annotations.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Drawing.PdfLineCapStyles.None">
            <summary>
            No cap.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Drawing.PdfLineCapStyles.Arrow">
            <summary>
            Arrow.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Drawing.PdfLineCapStyles.ClosedArrow">
            <summary>
            Arrow with drawn bottom line.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Drawing.PdfLineCapStyles.FilledArrow">
            <summary>
            Filled arrow.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Drawing.PdfLineCapStyles.ReversedArrow">
            <summary>
            Reversed arrow.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Drawing.PdfLineCapStyles.ReversedClosedArrow">
            <summary>
            Reversed arrow with drawn bottom line.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Drawing.PdfLineCapStyles.ReversedFilledArrow">
            <summary>
            Filled reversed arrow.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Drawing.PdfLineCapStyles.Ellipse">
            <summary>
            Ellipse.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Drawing.PdfLineCapStyles.FilledEllipse">
            <summary>
            Filled ellipse.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Drawing.PdfLineCapStyles.Rectangle">
            <summary>
            Rectangle.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Drawing.PdfLineCapStyles.FilledRectangle">
            <summary>
            Filled rectangle.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Drawing.PdfLineCapStyles.Diamond">
            <summary>
            Diamond (rhomb).
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Drawing.PdfLineCapStyles.FilledDiamond">
            <summary>
            Filled diamond (rhomb).
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Drawing.PdfLineCapStyles.Butt">
            <summary>
            Segment, perpendicular to the line.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Drawing.PdfLineCapStyles.Slash">
            <summary>
            Segment from the left-top to the right-down corner of the cap.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Drawing.PdfPen">
            <summary>
            Defines an object used to draw lines and curves. 
            This class cannot be inherited. 
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfPen.#ctor(System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfPen" /> class with the
            specified color. 
            </summary>
            <param name="color">A <see cref="P:Vintasoft.Imaging.Pdf.Drawing.PdfPen.Color" /> structure that indicates the
            color of this <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfPen" />.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfPen.#ctor(System.Drawing.Color,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfPen" />
            class with the specified <see cref="P:Vintasoft.Imaging.Pdf.Drawing.PdfPen.Color" /> and <see cref="P:Vintasoft.Imaging.Pdf.Drawing.PdfPen.Width" />
            properties. 
            </summary>
            <param name="color">A <see cref="P:Vintasoft.Imaging.Pdf.Drawing.PdfPen.Color" /> structure that indicates the
            color of this <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfPen" />.</param>
            <param name="width">A value indicating the width of this
            <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfPen" />.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfPen.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfPen" /> is equal
            to the current <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfPen" />.
            </summary>
            <param name="obj">The <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfPen" /> to compare with the
            current <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfPen" />. </param>
            <returns><b>true</b> if the specified <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfPen" /> is equal to
            the current <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfPen" />; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfPen.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current Object.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfPen.Clone">
            <summary>
            Creates an exact copy of this <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfPen" />. 
            </summary>
            <returns>An Object that can be cast to a <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfPen" />.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfPen.Clone(Vintasoft.Imaging.Pdf.Drawing.PdfPen)">
            <summary>
            Creates an exact copy of specified <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfPen" /> object. 
            </summary>
            <param name="pen">The source pen.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.PdfPen.Color">
            <summary>
            Gets or sets the color of this <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfPen" />. 
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.PdfPen.Width">
            <summary>
            Gets or sets the width of this <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfPen" />. 
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.PdfPen.BlendMode">
            <summary>
            Gets or sets the <see cref="T:Vintasoft.Imaging.Pdf.Tree.GraphicsStateBlendMode" /> of
            this <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfPen" />. 
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.PdfPen.DashPattern">
            <summary>
            Gets or sets an array of custom dashes and spaces. 
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.PdfPen.DashOffset">
            <summary>
            Gets or sets the distance from the start of a line to the
            beginning of a dash pattern. 
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.PdfPen.LineJoinStyle">
            <summary>
            Gets or sets the join style for the ends of two consecutive 
            lines drawn with this <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfPen" />. 
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.PdfPen.MiterLimit">
            <summary>
            Gets or sets the limit of the thickness of the join on a mitered corner.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.PdfPen.EndCap">
            <summary>
            Gets or sets the cap style used at the end of lines
            drawn with this <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfPen" />.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.PdfPen.StartCap">
            <summary>
            Gets or sets the cap style used at the beginning of lines drawn with
            this <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfPen" />.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.PdfFormat">
            <summary>
            Contains information about version of PDF document.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfFormat.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.PdfFormat" /> class.
            </summary>
            <param name="version">Version of the format.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfFormat.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.PdfFormat" /> class.
            </summary>
            <param name="version">Version of the format.</param>
            <param name="compresedCrossReferenceTable">Determines
            if compressed cross reference table should be used.</param>
            <param name="binaryFormat">Determines if text
            filters should be not used for binary data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfFormat.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
            <returns>A string that represents the version
            of the PDF format.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.PdfFormat.Pdf_A">
            <summary>
            Static instance of the PDF/A-1b format.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.PdfFormat.Pdf_14">
            <summary>
            Static instance of the PDF 1.4 format.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.PdfFormat.Pdf_16">
            <summary>
            Static instance of the PDF 1.6 with compressed XREF table format.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.PdfFormat.Pdf_17">
            <summary>
            Static instance of the PDF 1.7 with compressed XREF table format.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.PdfFormat.Version">
            <summary>
            String representation of the version.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.PdfFormat.CompressedCrossReferenceTable">
            <summary>
            Determines if compressed cross reference table
            is used in PDF document.
            </summary>
            <value><b>true</b> - compression will be used for reference table;
            <b>false</b> - reference table will be stored without compression.
            Default value is <b>false</b>.</value>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.PdfFormat.BinaryFormat">
            <summary>
            Determines if text filters should be used for
            binary data.
            </summary>
            <value>
            Default value is <b>true</b>.<br />
            <b>true</b> - binary data will be stored without changes;
            <b>false</b> - text filters will be used for binary data.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.PdfFormat.ContainsDocumentID">
            <summary>
            Determines what document ID should be generated.
            </summary>
            <value>
            Default value is <b>true</b>.<br />
            <b>true</b> - document ID generated;
            <b>false</b> - document ID not generated.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.PdfFormat.MinorVersionNumber">
            <summary>
            Gets a minor version number.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics">
            <summary>
            Encapsulates a PDF drawing surface.
            </summary>
            <remarks>
            <b>Important</b>: All point coordinates should be specified in Cartesian
            coordinates (X axis goes from left to right, Y axis goes from bottom to top).<br />
            <br />
            <b>Important:</b> All operations are vector operations, background bitmap has
            resolution 72 dpi.
            </remarks>
            <example>
            Here is an example that demonstrates how to draw some graphical primitives on PDF page:
            <code lang="VB.NET">
            Public Shared Sub TestPDFGraphics(pdfFileName As String)
                ' create new PDF document
                Dim document As New PdfDocument()
                ' add new page
                document.Pages.Add(New SizeF(1000, 1000))
                ' get graphics object associated with page
                Using graphics As PdfGraphics = document.Pages(0).GetGraphics()
                    ' draw primitives
                    Dim pen As New PdfPen(Color.Red)
                    pen.Width = 3
                    Dim brush As New PdfBrush(Color.Green)
                    graphics.DrawLine(pen, 0, 0, 50, 150)
                    graphics.DrawCurve(pen, 50, 150, 100, 200, 200, _
                        20, 300, 150)
                    pen.Color = Color.Blue
                    graphics.DrawEllipse(pen, 400, 400, 200, 300)
                    graphics.FillEllipse(brush, 500, 500, 70, 150)
                    brush.Color = Color.FromArgb(127, Color.Red)
                    graphics.FillRectangle(brush, 450, 550, 300, 300)
                    pen.Width = 10
                    graphics.DrawRectangle(pen, 0, 0, 1000, 1000)
            
                    ' draw vector string
                    brush.Color = Color.Green
                    Dim font As New Font(FontFamily.GenericSansSerif, 30)
                    graphics.DrawString("Vector string", font, brush, New PointF(100, 500))
                    Dim pdfFont As PdfFont = document.FontManager.GetStandardFont(StandardFontType.TimesRoman)
                    ' draw text string
                    graphics.DrawString("Text string", pdfFont, 30, brush, New PointF(100, 600))
                End Using
            
                ' get graphics object associated with page
                Using graphics As PdfGraphics = document.Pages(0).GetGraphics()
                    ' draw rendered page image (500x500 pixels) onto page
                    Using img As VintasoftImage = document.Pages(0).Render(500, 500)
                        graphics.DrawImage(img, New RectangleF(600, 0, 300, 300))
                    End Using
                End Using
            
                ' save document
                document.SaveChanges(pdfFileName)
            
                ' close document
                document.Dispose()
            End Sub
            </code>
            <code lang="C#">
            public static void TestPDFGraphics(string pdfFileName)
            {
                // create new PDF document
                PdfDocument document = new PdfDocument();
                // add new page
                document.Pages.Add(new SizeF(1000, 1000));
                // get graphics object associated with page
                using (PdfGraphics graphics = document.Pages[0].GetGraphics())
                {
                    // draw primitives
                    PdfPen pen = new PdfPen(Color.Red);
                    pen.Width = 3;
                    PdfBrush brush = new PdfBrush(Color.Green);
                    graphics.DrawLine(pen, 0, 0, 50, 150);
                    graphics.DrawCurve(pen, 50, 150, 100, 200, 200, 20, 300, 150);
                    pen.Color = Color.Blue;
                    graphics.DrawEllipse(pen, 400, 400, 200, 300);
                    graphics.FillEllipse(brush, 500, 500, 70, 150);
                    brush.Color = Color.FromArgb(127, Color.Red);
                    graphics.FillRectangle(brush, 450, 550, 300, 300);
                    pen.Width = 10;
                    graphics.DrawRectangle(pen, 0, 0, 1000, 1000);
            
                    // draw vector string
                    brush.Color = Color.Green;
                    Font font = new Font(FontFamily.GenericSansSerif, 30);
                    graphics.DrawString("Vector string", font, brush, new PointF(100, 500));
                    PdfFont pdfFont = document.FontManager.GetStandardFont(StandardFontType.TimesRoman);
                    // draw text string
                    graphics.DrawString("Text string", pdfFont, 30, brush, new PointF(100, 600));
                }
            
                // get graphics object associated with page
                using (PdfGraphics graphics = document.Pages[0].GetGraphics())
                {
                    // draw rendered page image (500x500 pixels) onto page
                    using (VintasoftImage img = document.Pages[0].Render(500, 500))
                        graphics.DrawImage(img, new RectangleF(600, 0, 300, 300));
                }
            
                // save document
                document.SaveChanges(pdfFileName);
            
                // close document
                document.Dispose();
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.SaveGraphicsState">
            <summary>
            Saves the current graphics state to the stack of graphics states.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.SetBrush(Vintasoft.Imaging.Pdf.Drawing.PdfBrush)">
            <summary>
            Sets a current brush.
            </summary>
            <param name="brush">Brush to set as current brush.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.RestoreGraphicsState">
            <summary>
            Restores the current graphics state from the stack of graphics states.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.SetCharacterSpacing(System.Single)">
            <summary>
            Sets the character spacing ('Tc' command).
            </summary>
            <param name="tc">The character spacing, a number expressed in unscaled text space units.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.SetWordSpacing(System.Single)">
            <summary>
            Sets the word spacing ('Tw' command).
            </summary>
            <param name="tw">The word spacing, a number expressed in unscaled text space units.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.SetTextRise(System.Single)">
            <summary>
            Sets the text rise ('Ts' command).
            </summary>
            <param name="ts">The text rise, a number expressed in unscaled text space units.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.SetHorizontalTextScaling(System.Single)">
            <summary>
            Sets the text horizontal scaling ('Tz' command).
            </summary>
            <param name="scale">Scale is a number specifying the percentage of the normal width.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.MultiplyTransform(System.Drawing.Drawing2D.Matrix)">
            <summary>
            Multiplies the world transformation of this <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" /> 
            object and specified the <see cref="T:System.Drawing.Drawing2D.Matrix" /> object.
            </summary>
            <param name="matrix"><see cref="T:System.Drawing.Drawing2D.Matrix" /> object that multiplies the world transformation.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.MultiplyTransform(Vintasoft.Imaging.Utils.AffineMatrix)">
            <summary>
            Multiplies the world transformation of this <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" /> 
            object and specified the <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" /> object.
            </summary>
            <param name="matrix"><see cref="T:System.Drawing.Drawing2D.Matrix" /> object that multiplies the world transformation.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.MultiplyTransform(System.Single[])">
            <summary>
            Multiplies the world transformation of this <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" /> 
            object and specified transformation.
            </summary>
            <param name="matrixElements">Matrix elements that multiplies the world transformation.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.MultiplyTransform(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Multiplies the world transformation of this <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" /> 
            object and specified transformation.
            </summary>
            <param name="m11">M11 matrix element.</param>
            <param name="m12">M12 matrix element.</param>
            <param name="m21">M21 matrix element.</param>
            <param name="m22">M22 matrix element.</param>
            <param name="dx">X offset.</param>
            <param name="dy">Y offset.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.TranslateTransform(System.Single,System.Single)">
            <summary>
            Changes the origin of the coordinate system by prepending the specified translation
            to the transformation matrix of this <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" />.
            </summary>
            <param name="dx">The x-coordinate of the translation.</param>
            <param name="dy">The y-coordinate of the translation.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.ScaleTransform(System.Single,System.Single)">
            <summary>
            Applies the specified scaling operation to the transformation matrix of this
            <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" /> by prepending it to the object's transformation matrix.
            </summary>
            <param name="sx">Scale factor in the x direction.</param>
            <param name="sy">Scale factor in the y direction.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.RotateTransform(System.Single)">
            <summary>
            Applies the specified rotation to the transformation matrix of this <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" />.
            </summary>
            <param name="angle">Angle of rotation in degrees.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.IntersectClip(System.Drawing.RectangleF)">
            <summary>
            Updates the clip region of this  <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" /> to the intersection
            of the current clip region and the specified <see cref="T:System.Drawing.RectangleF" /> structure.
            </summary>
            <param name="rect"><see cref="T:System.Drawing.RectangleF" /> structure to intersect with
            the current clip region.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.IntersectClip(System.Drawing.RectangleF,System.Drawing.Drawing2D.FillMode)">
            <summary>
            Updates the clip region of this <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" /> to the intersection
            of the current clip region and the specified <see cref="T:System.Drawing.RectangleF" /> structure.
            </summary>
            <param name="rect"><see cref="T:System.Drawing.RectangleF" /> structure to intersect with
            the current clip region.</param>
            <param name="fillMode">Member of the <see cref="T:System.Drawing.Drawing2D.FillMode" /> enumeration that determines
            how the curve is filled.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.IntersectClip(System.Single,System.Single,System.Single,System.Single,System.Drawing.Drawing2D.FillMode)">
            <summary>
            Updates the clip region of this <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" /> to the intersection
            of the current clip region and the specified rectangle.
            </summary>
            <param name="x">X coordinate of rectangle.</param>
            <param name="y">Y coordinate of rectangle.</param>
            <param name="width">Width of rectangle.</param>
            <param name="height">Height of rectangle.</param>
            <param name="fillMode">Member of the <see cref="T:System.Drawing.Drawing2D.FillMode" /> enumeration that
            determines how the curve is filled.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.IntersectClip(System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Updates the clip region of this <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" /> to the intersection
            of the current clip region and the specified <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> object.
            </summary>
            <param name="path"><see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> object to intersect with
            the current clip region.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.IntersectClip(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.FillMode)">
            <summary>
            Updates the clip region of this <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" /> to the intersection
            of the current clip region and the specified <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> object.
            </summary>
            <param name="path"><see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> object to intersect with
            the current clip region.</param>
            <param name="fillMode">Member of the <see cref="T:System.Drawing.Drawing2D.FillMode" /> enumeration that
            determines how the curve is filled.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.DrawLines(Vintasoft.Imaging.Pdf.Drawing.PdfPen,System.Drawing.PointF[])">
            <summary>
            Draws a series of line segments that connect an array
            of <see cref="T:System.Drawing.PointF" /> structures. 
            </summary>
            <param name="pen"><see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfPen" /> that determines the color,
            width, and style of the line segments.</param>
            <param name="points">Array of <see cref="T:System.Drawing.PointF" /> structures that
            represent the points to connect.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.DrawLine(Vintasoft.Imaging.Pdf.Drawing.PdfPen,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Draws a line connecting two <see cref="T:System.Drawing.PointF" /> structures. 
            </summary>
            <param name="pen"><see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfPen" /> that determines the color, width,
            and style of the line. </param>
            <param name="pt1"><see cref="T:System.Drawing.PointF" /> structure that represents the
            first point to connect. </param>
            <param name="pt2"><see cref="T:System.Drawing.PointF" /> structure that represents
            the second point to connect.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.DrawLine(Vintasoft.Imaging.Pdf.Drawing.PdfPen,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws a line connecting the two points specified by the coordinate pairs. 
            </summary>
            <param name="pen"><see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfPen" /> that determines the color,
            width, and style of the line. </param>
            <param name="x1">The x-coordinate of the first point.</param>
            <param name="y1">The y-coordinate of the first point.</param>
            <param name="x2">The x-coordinate of the second point.</param>
            <param name="y2">The y-coordinate of the second point.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.DrawRectangle(Vintasoft.Imaging.Pdf.Drawing.PdfPen,System.Drawing.RectangleF)">
            <summary>
            Draws a rectangle specified by a <see cref="T:System.Drawing.RectangleF" /> structure. 
            </summary>
            <param name="pen"><see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfPen" /> that determines the color, width,
            and style of the rectangle.</param>
            <param name="rect">A <see cref="T:System.Drawing.RectangleF" /> structure that represents
            the rectangle to draw.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.DrawRectangle(Vintasoft.Imaging.Pdf.Drawing.PdfPen,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws a rectangle specified by a coordinate pair, a width, and a height. 
            </summary>
            <param name="pen"><see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfPen" /> that determines the color, width,
            and style of the rectangle.</param>
            <param name="x">The x-coordinate of the upper-left corner of the
            rectangle to draw.</param>
            <param name="y">The y-coordinate of the upper-left corner of the
            rectangle to draw.</param>
            <param name="width">The width of the rectangle to draw.</param>
            <param name="height">The height of the rectangle to draw.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.FillRectangle(Vintasoft.Imaging.Pdf.Drawing.PdfBrush,System.Drawing.RectangleF)">
            <summary>
            Fills the interior of a rectangle specified by a <see cref="T:System.Drawing.RectangleF" /> 
            structure. 
            </summary>
            <param name="brush"><see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfBrush" /> that determines the
            characteristics of the fill. </param>
            <param name="rect"><see cref="T:System.Drawing.RectangleF" /> structure that represents
            the rectangle to fill.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.FillRectangle(Vintasoft.Imaging.Pdf.Drawing.PdfBrush,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Fills the interior of a rectangle specified by a pair of coordinates,
            a width, and a height. 
            </summary>
            <param name="brush"><see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfBrush" /> that determines the
            characteristics of the fill.</param>
            <param name="x">The x-coordinate of the bottom-left corner of
            the rectangle to fill. </param>
            <param name="y">The y-coordinate of the bottom-left corner of
            the rectangle to fill. </param>
            <param name="width">Width of the rectangle to fill. </param>
            <param name="height">Height of the rectangle to fill. </param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.Rectangle(Vintasoft.Imaging.Pdf.Drawing.PdfPen,Vintasoft.Imaging.Pdf.Drawing.PdfBrush,System.Drawing.RectangleF)">
            <summary>
            Fills and then draws the rectangle specified by a <see cref="T:System.Drawing.RectangleF" />
            structure.
            </summary>
            <param name="pen"><see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfPen" /> that determines the color,
            width, and style of the rectangle border.</param>
            <param name="brush"><see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfBrush" /> that determines the
            characteristics of the fill.</param>
            <param name="rect">A <see cref="T:System.Drawing.RectangleF" /> structure that
            represents the rectangle.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.FillAndDrawRectangle(Vintasoft.Imaging.Pdf.Drawing.PdfPen,Vintasoft.Imaging.Pdf.Drawing.PdfBrush,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Fills and draws the rectangle specified by a coordinate pair,
            a width, and a height. 
            </summary>
            <param name="pen"><see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfPen" /> that determines the color,
            width, and style of the rectangle border.</param>
            <param name="brush"><see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfBrush" /> that determines the
            characteristics of the fill.</param>
            <param name="x">The x-coordinate of the bottom-left corner of
            the rectangle.</param>
            <param name="y">The y-coordinate of the bottom-left corner
            of the rectangle.</param>
            <param name="width">Width of the rectangle.</param>
            <param name="height">Height of the rectangle.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.DrawPolygon(Vintasoft.Imaging.Pdf.Drawing.PdfPen,System.Drawing.PointF[])">
            <summary>
            Draws a polygon defined by an array of <see cref="T:System.Drawing.PointF" /> structures. 
            </summary>
            <param name="pen"><see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfPen" /> that determines the color,
            width, and style of the polygon.</param>
            <param name="points">Array of <see cref="T:System.Drawing.PointF" /> structures that
            represent the vertices of the polygon.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.FillPolygon(Vintasoft.Imaging.Pdf.Drawing.PdfBrush,System.Drawing.PointF[])">
            <summary>
            Fills the interior of a polygon defined by an array of points
            specified by <see cref="T:System.Drawing.PointF" /> structures. 
            </summary>
            <param name="brush"><see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfBrush" /> that determines the
            characteristics of the fill.</param>
            <param name="points">Array of <see cref="T:System.Drawing.PointF" /> structures that
            represent the vertices of the polygon to fill.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.FillAndDrawPolygon(Vintasoft.Imaging.Pdf.Drawing.PdfPen,Vintasoft.Imaging.Pdf.Drawing.PdfBrush,System.Drawing.PointF[])">
            <summary>
            Fills and draws a polygon defined by an array of <see cref="T:System.Drawing.PointF" />
            structures. 
            </summary>
            <param name="pen"><see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfPen" /> that determines the color, width,
            and style of the polygon.</param>
            <param name="brush"><see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfBrush" /> that determines the
            characteristics of the fill.</param>
            <param name="points">Array of <see cref="T:System.Drawing.PointF" /> structures
            that represent the vertices of the polygon.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.DrawEllipse(Vintasoft.Imaging.Pdf.Drawing.PdfPen,System.Drawing.RectangleF)">
            <summary>
            Draws an ellipse defined by a bounding <see cref="T:System.Drawing.RectangleF" />. 
            </summary>
            <param name="pen"><see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfPen" /> that determines the color, width,
            and style of the ellipse.</param>
            <param name="rect"><see cref="T:System.Drawing.RectangleF" /> structure that defines the
            boundaries of the ellipse.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.DrawEllipse(Vintasoft.Imaging.Pdf.Drawing.PdfPen,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws an ellipse defined by a bounding rectangle specified by a pair
            of coordinates, a height, and a width. 
            </summary>
            <param name="pen"><see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfPen" /> that determines the color,
            width, and style of the ellipse.</param>
            <param name="x">The x-coordinate of the bottom-left corner of the 
            bounding rectangle that defines the ellipse.</param>
            <param name="y">The y-coordinate of the bottom-left corner of the
            bounding rectangle that defines the ellipse.</param>
            <param name="width">Width of the bounding rectangle that defines
            the ellipse.</param>
            <param name="height">Height of the bounding rectangle that defines
            the ellipse.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.FillEllipse(Vintasoft.Imaging.Pdf.Drawing.PdfBrush,System.Drawing.RectangleF)">
            <summary>
            Fills the interior of an ellipse defined by a bounding rectangle
            specified by a <see cref="T:System.Drawing.RectangleF" /> structure. 
            </summary>
            <param name="brush"><see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfBrush" /> that determines the
            characteristics of the fill.</param>
            <param name="rect"><see cref="T:System.Drawing.RectangleF" /> structure that represents
            the bounding rectangle that defines the ellipse.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.FillEllipse(Vintasoft.Imaging.Pdf.Drawing.PdfBrush,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Fills the interior of an ellipse defined by a bounding rectangle
            specified by a pair of coordinates, a width, and a height. 
            </summary>
            <param name="brush"><see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfBrush" /> that determines the
            characteristics of the fill. </param>
            <param name="x">The x-coordinate of the bottom-left corner of
            the bounding rectangle that defines the ellipse.</param>
            <param name="y">The y-coordinate of the bottom-left corner of
            the bounding rectangle that defines the ellipse.</param>
            <param name="width">Width of the bounding rectangle that defines
            the ellipse.</param>
            <param name="height">Height of the bounding rectangle that defines
            the ellipse.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.FillAndDrawEllipse(Vintasoft.Imaging.Pdf.Drawing.PdfPen,Vintasoft.Imaging.Pdf.Drawing.PdfBrush,System.Drawing.RectangleF)">
            <summary>
            Fills and draws an ellipse defined by a bounding rectangle
            specified by a <see cref="T:System.Drawing.RectangleF" /> structure. 
            </summary>
            <param name="pen"><see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfPen" /> that determines the color,
            width, and style of the ellipse.</param>
            <param name="brush"><see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfBrush" /> that determines the
            characteristics of the fill.</param>
            <param name="rect"><see cref="T:System.Drawing.RectangleF" /> structure that
            represents the bounding rectangle that defines the ellipse.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.FillAndDrawEllipse(Vintasoft.Imaging.Pdf.Drawing.PdfPen,Vintasoft.Imaging.Pdf.Drawing.PdfBrush,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Fills and draws an ellipse defined by a bounding rectangle
            specified by a pair of coordinates, a width, and a height. 
            </summary>
            <param name="pen"><see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfPen" /> that determines the color,
            width, and style of the ellipse.</param>
            <param name="brush"><see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfBrush" /> that determines the
            characteristics of the fill.</param>
            <param name="x">The x-coordinate of the bottom-left corner of
            the bounding rectangle that defines the ellipse.</param>
            <param name="y">The y-coordinate of the bottom-left corner of
            the bounding rectangle that defines the ellipse.</param>
            <param name="width">Width of the bounding rectangle that
            defines the ellipse.</param>
            <param name="height">Height of the bounding rectangle that
            defines the ellipse.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.DrawPath(Vintasoft.Imaging.Pdf.Drawing.PdfPen,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Draws a <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />. 
            </summary>
            <param name="pen"><see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfPen" /> that determines the color,
            width, and style of the path.</param>
            <param name="path"><see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> object to draw.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.DrawPath(Vintasoft.Imaging.Pdf.Drawing.PdfPen,System.Drawing.Drawing2D.GraphicsPath,System.Boolean)">
            <summary>
            Draws a <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />. 
            </summary>
            <param name="pen"><see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfPen" /> that determines the color,
            width, and style of the path.</param>
            <param name="path"><see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> object to draw.</param>
            <param name="invertYAxis">Invert the Y axis or not.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.FillPath(Vintasoft.Imaging.Pdf.Drawing.PdfBrush,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Fills the interior of a <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.
            </summary>
            <param name="brush"><see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfBrush" /> that determines the
            characteristics of the fill.</param>
            <param name="path"><see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> that represents
            the path to fill.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.FillAndDrawPath(Vintasoft.Imaging.Pdf.Drawing.PdfPen,Vintasoft.Imaging.Pdf.Drawing.PdfBrush,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Fills and draws a <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />. 
            </summary>
            <param name="pen"><see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfPen" /> that determines the color,
            width, and style of the path.</param>
            <param name="brush"><see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfBrush" /> that determines the
            characteristics of the fill.</param>
            <param name="path"><see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> object to draw.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.FillPath(Vintasoft.Imaging.Pdf.Drawing.PdfBrush,System.Drawing.Drawing2D.GraphicsPath,System.Boolean)">
            <summary>
            Fills a <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />. 
            </summary>
            <param name="brush"><see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfBrush" /> that should be used for filling path.</param>
            <param name="path"><see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> to fill.</param>
            <param name="invertYAxis">Invert the Y axis or not.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.DrawArc(Vintasoft.Imaging.Pdf.Drawing.PdfPen,System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Draws an arc representing a portion of an ellipse specified by
            a <see cref="T:System.Drawing.RectangleF" /> structure.
            </summary>
            <param name="pen"><see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfPen" /> that determines the color,
            width, and style of the arc.</param>
            <param name="rect"><see cref="T:System.Drawing.RectangleF" /> structure that defines
            the boundaries of the ellipse.</param>
            <param name="startAngle">Angle in degrees measured clockwise from
            the x-axis to the starting point of the arc.</param>
            <param name="sweepAngle">Angle in degrees measured clockwise from
            the startAngle parameter to ending point of the arc.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.DrawArc(Vintasoft.Imaging.Pdf.Drawing.PdfPen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws an arc representing a portion of an ellipse specified by a pair
            of coordinates, a width, and a height.
            </summary>
            <param name="pen"><see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfPen" /> that determines the color, width,
            and style of the arc.</param>
            <param name="x">The x-coordinate of the upper-left corner of the
            rectangle that defines the ellipse.</param>
            <param name="y">The y-coordinate of the upper-left corner of the
            rectangle that defines the ellipse.</param>
            <param name="width">Width of the rectangle that defines the ellipse.</param>
            <param name="height">Height of the rectangle that defines the ellipse.</param>
            <param name="startAngle">Angle in degrees measured clockwise from
            the x-axis to the starting point of the arc.</param>
            <param name="sweepAngle">Angle in degrees measured clockwise from
            the startAngle parameter to ending point of the arc.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.DrawInlineImage(Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.Pdf.PdfCompression,System.Drawing.RectangleF)">
            <summary>
            Compress the specified image using specified compression,
            saves compressed image as inline image in PDF document and
            draws the inline image at the specified location and with specified size.
            </summary>
            <param name="image"><see cref="T:Vintasoft.Imaging.VintasoftImage" /> to draw.</param>
            <param name="compression">The compression that should be applied to image.</param>
            <param name="rect"><see cref="T:System.Drawing.RectangleF" /> structure
            that specifies the location and size where image must be drawn.</param>
            <remarks>
            Because the inline format gives the application less flexibility 
            in managing the image data, it should be used only for small images 
            (4 KB or less).
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.DrawInlineImage(Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.Pdf.PdfCompression,Vintasoft.Imaging.Pdf.PdfCompressionSettings,System.Drawing.RectangleF)">
            <summary>
            Compress the specified image using specified compression,
            saves compressed image as inline image in PDF document and
            draws the inline image at the specified location and with specified size.
            </summary>
            <param name="image"><see cref="T:Vintasoft.Imaging.VintasoftImage" /> to draw.</param>
            <param name="compression">The compression that should be applied to image.</param>
            <param name="compressionSettings">The compression settings.</param>
            <param name="rect"><see cref="T:System.Drawing.RectangleF" /> structure
            that specifies the location and size where image must be drawn.</param>
            <remarks>
            Because the inline format gives the application less flexibility 
            in managing the image data, it should be used only for small images 
            (4 KB or less).
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.DrawInlineImage(Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.Pdf.PdfCompression)">
            <summary>
            Compress the specified image using specified compression,
            saves compressed image as inline image in PDF document and
            draws the inline image at the current location.
            </summary>
            <param name="image"><see cref="T:Vintasoft.Imaging.VintasoftImage" /> to draw.</param>
            <param name="compression">The compression that should be applied to image.</param>
            <remarks>
            Because the inline format gives the application less flexibility 
            in managing the image data, it should be used only for small images 
            (4 KB or less).
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.DrawInlineImage(Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.Pdf.PdfCompression,Vintasoft.Imaging.Pdf.PdfCompressionSettings)">
            <summary>
            Compress the specified image using specified compression,
            saves compressed image as inline image in PDF document and
            draws the inline image at the current location.
            </summary>
            <param name="image"><see cref="T:Vintasoft.Imaging.VintasoftImage" /> to draw.</param>
            <param name="compression">The compression that should be applied to image.</param>
            <param name="compressionSettings">The compression settings.</param>
            <remarks>
            Because the inline format gives the application less flexibility 
            in managing the image data, it should be used only for small images 
            (4 KB or less).
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.DrawImage(Vintasoft.Imaging.VintasoftImage,System.Drawing.RectangleF)">
            <summary>
            Compress the specified image using default compression,
            saves compressed image as image resource in PDF document and
            draws the image resource at the specified location and with specified size.
            </summary>
            <param name="image"><see cref="T:Vintasoft.Imaging.VintasoftImage" /> to draw.</param>
            <param name="rect"><see cref="T:System.Drawing.RectangleF" /> structure
            that specifies the location and size where image must be drawn.</param>
            <returns>Added <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfImageResource" /> object.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.DrawImage(Vintasoft.Imaging.Pdf.Tree.PdfImageResource,System.Drawing.RectangleF)">
            <summary>
            Draws the specified <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfImageResource" /> at the specified
            location and with the specified size. 
            </summary>
            <param name="imageResource"><see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfImageResource" /> to draw.</param>
            <param name="rect"><see cref="T:System.Drawing.RectangleF" /> structure
            that specifies the location and size where image must be drawn.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.DrawImage(Vintasoft.Imaging.Pdf.Tree.PdfImageResource,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws the specified <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfImageResource" /> at the specified
            location and with the specified size. 
            </summary>
            <param name="imageResource"><see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfImageResource" /> to draw.</param>
            <param name="x">The x-coordinate of the bottom-left corner of the drawn image. </param>
            <param name="y">The y-coordinate of the bottom-left corner of the drawn image. </param>
            <param name="width">Width of the drawn image.</param>
            <param name="height">Height of the drawn image.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.DrawImage(Vintasoft.Imaging.Pdf.Tree.PdfImageResource)">
            <summary>
            Draws the specified <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfImageResource" /> at the current location.
            </summary>
            <param name="imageResource"><see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfImageResource" /> to draw.</param>
            <example>
            Here is an example that demonstrates how to draw a new image on PDF page:
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Draws an image on PDF page.
            ''' &lt;/summary&gt;
            ''' &lt;param name="pdfFilename"&gt;The filename of PDF document.&lt;/param&gt;
            ''' &lt;param name="imageFilename"&gt;The filename of image.&lt;/param&gt;
            Public Shared Sub DrawImageOnPdfPage(pdfFilename As String, imageFilename As String)
                ' open PDF document
                Using document As New PdfDocument(pdfFilename)
                    ' open image
                    Using image As New VintasoftImage(imageFilename)
                        ' get the first page
                        Dim page As PdfPage = document.Pages(0)
                        ' get PDF graphics of PDF page
                        Using graphics As PdfGraphics = page.GetGraphics()
                            ' create image-resource based on image
                            Dim imageResource As New PdfImageResource(document, image, PdfCompression.Auto)
            
                            ' draw image-resource on PDF page
                            graphics.DrawImage(imageResource, New RectangleF(100, 100, 200, 300))
                        End Using
                    End Using
            
                    ' save changes to a file
                    document.SaveChanges()
                End Using
            End Sub
            
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Draws an image on PDF page.
            /// &lt;/summary&gt;
            /// &lt;param name="pdfFilename"&gt;The filename of PDF document.&lt;/param&gt;
            /// &lt;param name="imageFilename"&gt;The filename of image.&lt;/param&gt;
            public static void DrawImageOnPdfPage(string pdfFilename, string imageFilename)
            {
                // open PDF document
                using (PdfDocument document = new PdfDocument(pdfFilename))
                {
                    // open image
                    using (VintasoftImage image = new VintasoftImage(imageFilename))
                    {
                        // get the first page
                        PdfPage page = document.Pages[0];
                        // get PDF graphics of PDF page
                        using (PdfGraphics graphics = page.GetGraphics())
                        {
                            // create image-resource based on image
                            PdfImageResource imageResource = new PdfImageResource(document, image, PdfCompression.Auto);
            
                            // draw image-resource on PDF page
                            graphics.DrawImage(imageResource, new RectangleF(100, 100, 200, 300));
                        }
                    }
            
                    // save changes to a file
                    document.SaveChanges();
                }
            }
            
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.DrawImage(Vintasoft.Imaging.Pdf.Drawing.PdfPen,Vintasoft.Imaging.Pdf.Tree.PdfImageResource,System.Drawing.RectangleF)">
            <summary>
            Draws the specified <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfImageResource" /> at the specified
            location and with the specified size. 
            </summary>
            <param name="pen">The pen to draw border.</param>
            <param name="imageResource"><see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfImageResource" /> to draw.</param>
            <param name="rect"><see cref="T:System.Drawing.RectangleF" /> structure that specifies
            the location and size of the drawn image.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.DrawCurve(Vintasoft.Imaging.Pdf.Drawing.PdfPen,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Draws a cubic Bezier curve at specified coordinates.
            </summary>
            <param name="pen"><see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfPen" /> that determines the color, width,
            and style of the spline.</param>
            <param name="pt0">Start point.</param>
            <param name="pt1">First control point.</param>
            <param name="pt2">Second control point.</param>
            <param name="pt3">Last point.</param>
            <remarks>The curve extends from the point <i>pt0</i> to the point <i>pt3</i>, 
            using <i>pt1</i> and <i>pt2</i> as the Bezier control points.</remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.DrawCurve(Vintasoft.Imaging.Pdf.Drawing.PdfPen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws a cubic Bezier curve at specified coordinates.
            </summary>
            <param name="pen"><see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfPen" /> that determines the color, width,
            and style of the spline.</param>
            <param name="x0">The x-coordinate of the start point.</param>
            <param name="y0">The y-coordinate of the start point.</param>
            <param name="x1">The x-coordinate of the first control point.</param>
            <param name="y1">The y-coordinate of the first control point.</param>
            <param name="x2">The x-coordinate of the second control point.</param>
            <param name="y2">The y-coordinate of the second control point.</param>
            <param name="x3">The x-coordinate of the last point.</param>
            <param name="y3">The y-coordinate of the last point.</param>
            <remarks>The curve extends from the point (x0,y0) to the point (x3,y3), 
            using (x1,y1) and (x2,y2) as the Bezier control points.</remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.MeasureFontSize(System.String,Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFont,System.Single)">
            <summary>
            Measures the text font size for specified text width.
            </summary>
            <param name="text">String to measure.</param>
            <param name="font"><see cref="T:Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFont" /> that defines the text format of the string.</param>
            <param name="textWidth">Maximum width of the string in user units (1 / 72 inch).</param>
            <returns>Measured font size.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.MeasureFontSize(System.String,Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFont,System.Single,System.Single)">
            <summary>
            Measures the text font size for specified text width and height.
            </summary>
            <param name="text">String to measure.</param>
            <param name="font"><see cref="T:Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFont" /> that defines the text format of the string.</param>
            <param name="textWidth">Maximum width of the string in user units (1 / 72 inch).</param>
            <param name="textHeight">Maximum height, in user units (1 / 72 inch),
            of the layout area for the text.</param>
            <returns>Measured font size.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.MeasureFontSize(System.String,Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFont,System.Single,System.Single,System.Single)">
            <summary>
            Measures the text font size for specified text width and height.
            </summary>
            <param name="text">String to measure.</param>
            <param name="font"><see cref="T:Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFont" /> that defines the text format of the string.</param>
            <param name="textWidth">Maximum width of the string in user units (1 / 72 inch).</param>
            <param name="textHeight">Maximum height, in user units (1 / 72 inch),
            of the layout area for the text.</param>
            <param name="lineSpacing">The line spacing.</param>
            <returns>Measured font size.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.MeasureString(System.String,Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFont,System.Single,System.Single@,System.Single@)">
            <summary>
            Measures the specified string when drawn with the specified <see cref="T:Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFont" />.
            </summary>
            <param name="text">String to measure.</param>
            <param name="font"><see cref="T:Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFont" /> that defines the text format of the string.</param>
            <param name="height">Text string height.</param>
            <param name="width">Text string width.</param>
            <param name="fontSize">Font size.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.MeasureString(System.String,Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFont,System.Single,System.Single,System.Boolean,System.Single@,System.Single@)">
            <summary>
            Measures the specified string when drawn with the specified <see cref="T:Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFont" />.
            </summary>
            <param name="text">String to measure.</param>
            <param name="font"><see cref="T:Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFont" /> that defines the text format of the string.</param>
            <param name="height">Text string height.</param>
            <param name="maxWidth">Maximum width of text string.</param>
            <param name="width">Text string width.</param>
            <param name="fontSize">Font size.</param>
            <param name="wordWrap">Enables automatically wraps words to the beginning of the next line
            when necessary.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.MeasureString(System.String,Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFont,System.Single,System.Single,System.Boolean,System.Single,System.Single@,System.Single@)">
            <summary>
            Measures the specified string when drawn with the specified <see cref="T:Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFont" />.
            </summary>
            <param name="text">String to measure.</param>
            <param name="font"><see cref="T:Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFont" /> that defines the text format of the string.</param>
            <param name="height">Text string height.</param>
            <param name="maxWidth">Maximum width of text string.</param>
            <param name="width">Text string width.</param>
            <param name="fontSize">Font size.</param>
            <param name="wordWrap">Enables automatically wraps words to the beginning of
            the next line when necessary.</param>
            <param name="lineSpacing">Line spacing.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.DrawString(System.String,Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFont,System.Single,Vintasoft.Imaging.Pdf.Drawing.PdfBrush,System.Drawing.PointF)">
            <summary>
            Draws the specified text string at the specified location with the
            specified <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfBrush" /> and <see cref="T:Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFont" /> objects.
            </summary>
            <param name="s">String to draw.</param>
            <param name="font"><see cref="T:Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFont" /> that defines the text format of
            the string.</param>
            <param name="fontSize">Font size.</param>
            <param name="brush">A <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfBrush" /> that determines the color of the drawn text.</param>
            <param name="location"><see cref="T:System.Drawing.PointF" /> structure that specifies the text location.</param>
            <remarks>
            This method ignores carriage returns and new line characters.<br />
            <br />
            Use overloaded method that takes rectangle, instead of point that specifies location,
            if carriage returns and new line characters should NOT be ignored.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.DrawString(System.String,Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFont,System.Single,Vintasoft.Imaging.Pdf.Drawing.PdfBrush,System.Single,System.Single)">
            <summary>
            Draws the specified text string at the specified location with the
            specified <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfBrush" /> and <see cref="T:Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFont" /> objects.
            </summary>
            <param name="s">String to draw.</param>
            <param name="font"><see cref="T:Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFont" /> that defines the text format
            of the string.</param>
            <param name="fontSize">Font size.</param>
            <param name="brush">A <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfBrush" /> that determines the color of the drawn text.</param>
            <param name="x">The x-coordinate of the bottom-left corner of the drawn text.</param>
            <param name="y">The y-coordinate of the bottom-left corner of the drawn text.</param>
            <remarks>
            This method ignores carriage returns and new line characters.<br />
            <br />
            Use overloaded method that takes rectangle, instead of point that specifies location,
            if carriage returns and new line characters should NOT be ignored.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.DrawString(System.String,Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFont,System.Single,Vintasoft.Imaging.Pdf.Drawing.PdfBrush,System.Drawing.RectangleF,Vintasoft.Imaging.Pdf.Drawing.PdfContentAlignment,System.Boolean)">
            <summary>
            Draws the specified text string on the specified rectangle.
            </summary>
            <param name="s">String to draw.</param>
            <param name="font"><see cref="T:Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFont" /> that defines the text format of the string.</param>
            <param name="fontSize">Font size.</param>
            <param name="brush">A <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfBrush" /> that determines the color of the drawn text.</param>
            <param name="rect">A <see cref="T:System.Drawing.RectangleF" /> structure that specifies the location
            of the drawn text.</param>
            <param name="textAligment">Text alignment.</param>
            <param name="wordWrap">Enables automatically wraps words to the beginning of the next
            line when necessary.</param>
            <remarks>
            This method does NOT ignore carriage returns and new line characters.<br />
            <br />
            Use overloaded method that takes point that specifies location, instead of rectangle,
            if carriage returns and new line characters should be ignored.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.DrawString(System.String,Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFont,System.Single,Vintasoft.Imaging.Pdf.Drawing.PdfBrush,System.Drawing.RectangleF,Vintasoft.Imaging.Pdf.Drawing.PdfContentAlignment,System.Boolean,System.Single)">
            <summary>
            Draws the specified text string on the specified rectangle.
            </summary>
            <param name="s">String to draw.</param>
            <param name="font"><see cref="T:Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFont" /> that defines the text format of the string.</param>
            <param name="fontSize">Font size.</param>
            <param name="brush">A <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfBrush" /> that determines the color of the drawn text.</param>
            <param name="rect">A <see cref="T:System.Drawing.RectangleF" /> structure that specifies the location
            of the drawn text.</param>
            <param name="textAligment">Text alignment.</param>
            <param name="wordWrap">Enables automatically wraps words to the beginning of
            the next line when necessary.</param>
            <param name="lineSpacing">Line spacing.</param>
            <remarks>
            This method does NOT ignore carriage returns and new line characters.<br />
            <br />
            Use overloaded method that takes point that specifies location, instead of rectangle,
            if carriage returns and new line characters should be ignored.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.DrawString(System.String,Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFont,System.Single,Vintasoft.Imaging.Pdf.Drawing.PdfBrush,System.Single,System.Single,System.Single,System.Single,Vintasoft.Imaging.Pdf.Drawing.PdfContentAlignment,System.Boolean)">
            <summary>
            Draws the specified text string on the specified rectangle.
            </summary>
            <param name="s">String to draw.</param>
            <param name="font"><see cref="T:Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFont" /> that defines the text format of the string.</param>
            <param name="fontSize">Font size.</param>
            <param name="brush">A <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfBrush" /> that determines the color of the drawn text.</param>
            <param name="x">X coordinate of drawn rectangle.</param>
            <param name="y">Y coordinate of drawn rectangle.</param>
            <param name="width">Width of drawn rectangle.</param>
            <param name="height">Height of drawn rectangle.</param>
            <param name="textAligment">Text alignment.</param>
            <param name="wordWrap">Enables automatically wraps words to the beginning of
            the next line when necessary.</param>
            <remarks>
            This method does NOT ignore carriage returns and new line characters.<br />
            <br />
            Use overloaded method that takes point that specifies location, instead of rectangle,
            if carriage returns and new line characters should be ignored.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.DrawString(System.String,Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFont,System.Single,Vintasoft.Imaging.Pdf.Drawing.PdfBrush,System.Single,System.Single,System.Single,System.Single,Vintasoft.Imaging.Pdf.Drawing.PdfContentAlignment,System.Boolean,System.Single)">
            <summary>
            Draws the specified text string on the specified rectangle.
            </summary>
            <param name="s">String to draw.</param>
            <param name="font"><see cref="T:Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFont" /> that defines the text format of the string.</param>
            <param name="fontSize">Font size.</param>
            <param name="brush">A <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfBrush" /> that determines the color of the drawn text.</param>
            <param name="x">X coordinate of drawn rectangle.</param>
            <param name="y">Y coordinate of drawn rectangle.</param>
            <param name="width">Width of drawn rectangle.</param>
            <param name="height">Height of drawn rectangle.</param>
            <param name="textAligment">Text alignment.</param>
            <param name="wordWrap">Enables automatically wraps words to the beginning of
            the next line when necessary.</param>
            <param name="lineSpacing">Line spacing.</param>
            <remarks>
            This method does NOT ignore carriage returns and new line characters.<br />
            <br />
            Use overloaded method that takes point that specifies location, instead of rectangle,
            if carriage returns and new line characters should be ignored.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.DrawString(System.String,System.Drawing.Font,Vintasoft.Imaging.Pdf.Drawing.PdfBrush,System.Drawing.PointF)">
            <summary>
            Draws the specified text string in vector form at the specified location
            using the specified <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfBrush" /> and <see cref="T:System.Drawing.Font" /> objects.
            </summary>
            <param name="s">String to draw.</param>
            <param name="font"><see cref="T:System.Drawing.Font" /> that should be used for drawing a string.</param>
            <param name="brush"><see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfBrush" /> that determines the color and
            texture of the drawn text.</param>
            <param name="location"><see cref="T:System.Drawing.PointF" /> structure that specifies the text location.</param>
            <remarks>
            This method ignores carriage returns and new line characters.<br />
            <br />
            Use overloaded method that takes rectangle, instead of point that specifies location,
            if carriage returns and new line characters should NOT be ignored.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.DrawString(System.String,System.Drawing.Font,Vintasoft.Imaging.Pdf.Drawing.PdfBrush,System.Drawing.PointF,System.Drawing.StringFormat)">
            <summary>
            Draws the specified text string in vector form at the specified
            location with specified <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfBrush" /> and
            <see cref="T:System.Drawing.Font" /> objects using the formatting 
            attributes specified by <see cref="T:System.Drawing.StringFormat" />. 
            </summary>
            <param name="s">String to draw.</param>
            <param name="font"><see cref="T:System.Drawing.Font" /> that defines the string.</param>
            <param name="brush"><see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfBrush" /> that determines the color
            and texture of the drawn text.</param>
            <param name="location"><see cref="T:System.Drawing.PointF" /> structure that specifies the text location.</param>
            <param name="sf"><see cref="T:System.Drawing.StringFormat" /> that specifies formatting
            attributes, such as line spacing and alignment, that are applied t
            the drawn text.</param>
            <remarks>
            This method ignores carriage returns and new line characters.<br />
            <br />
            Use overloaded method that takes rectangle, instead of point that specifies location,
            if carriage returns and new line characters should NOT be ignored.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.DrawString(System.String,System.Drawing.Font,Vintasoft.Imaging.Pdf.Drawing.PdfBrush,System.Drawing.RectangleF,System.Drawing.StringFormat)">
            <summary>
            Draws the specified text string in vector form at the specified rectangle
            with specified <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfBrush" /> and <see cref="T:System.Drawing.Font" /> objects
            using the formatting attributes specified by <see cref="T:System.Drawing.StringFormat" />. 
            </summary>
            <param name="s">String to draw.</param>
            <param name="font"><see cref="T:System.Drawing.Font" /> that defines the string.</param>
            <param name="brush"><see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfBrush" /> that determines the color
            and texture of the drawn text.</param>
            <param name="rect"><see cref="T:System.Drawing.RectangleF" /> structure that specifies
            the location of the drawn text.</param>
            <param name="sf"><see cref="T:System.Drawing.StringFormat" /> that specifies formatting
            attributes, such as line spacing and alignment, that are applied to
            the drawn text.</param>
            <remarks>
            This method does NOT ignore carriage returns and new line characters.<br />
            <br />
            Use overloaded method that takes point that specifies location, instead of rectangle,
            if carriage returns and new line characters should be ignored.
            </remarks>
            <example>
            Here is an example that demonstrates how to convert a text file to a PDF document.
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Converts a text file to a PDF document.
            ''' &lt;/summary&gt;
            ''' &lt;param name="sourceTextFile"&gt;The filename of source text file.&lt;/param&gt;
            ''' &lt;param name="destPdfFile"&gt;The filename of destination PDF document.&lt;/param&gt;
            Public Shared Sub ConvertTextFileToPdfDocument(sourceTextFilename As String, destPdfFilename As String)
                ' get text of text file
                Dim text As String = File.ReadAllText(sourceTextFilename, Encoding.UTF8)
            
                ' create PDF document
                Using pdfDocument As New PdfDocument(destPdfFilename, PdfFormat.Pdf_14)
                    ' create page of A4 size
                    Dim pdfPage As New PdfPage(pdfDocument, ImageSize.FromPaperKind(PaperSizeKind.A4))
                    ' add page to the PDF document
                    pdfDocument.Pages.Add(pdfPage)
            
                    ' get PdfGrahics of page
                    Using graphics As PdfGraphics = PdfGraphics.FromPage(pdfPage)
                        ' create a font that should be used for drawing a text
                        Dim font As New Font(FontFamily.GenericSerif, 14)
            
                        ' create a brush that should be used for drawing a text
                        Dim brush As New PdfBrush(Color.Black)
            
                        ' specify a rectangle where text should be drawn
                        Dim rect As RectangleF = pdfPage.MediaBox
            
                        ' specify a string format that should be used for drawing a text 
                        Dim stringFormat__1 As StringFormat = StringFormat.GenericDefault
            
                        ' draw text on the PDF page
                        graphics.DrawString(text, font, brush, rect, stringFormat__1)
                    End Using
            
                    ' save PDF document
                    pdfDocument.SaveChanges()
                End Using
            End Sub
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Converts a text file to a PDF document.
            /// &lt;/summary&gt;
            /// &lt;param name="sourceTextFile"&gt;The filename of source text file.&lt;/param&gt;
            /// &lt;param name="destPdfFile"&gt;The filename of destination PDF document.&lt;/param&gt;
            public static void ConvertTextFileToPdfDocument(string sourceTextFilename, string destPdfFilename)
            {
                // get text of text file
                string text = File.ReadAllText(sourceTextFilename, Encoding.UTF8);
            
                // create PDF document
                using (PdfDocument pdfDocument = new PdfDocument(destPdfFilename, PdfFormat.Pdf_14))
                {
                    // create page of A4 size
                    PdfPage pdfPage = new PdfPage(pdfDocument, ImageSize.FromPaperKind(PaperSizeKind.A4));
                    // add page to the PDF document
                    pdfDocument.Pages.Add(pdfPage);
            
                    // get PdfGrahics of page
                    using (PdfGraphics graphics = PdfGraphics.FromPage(pdfPage))
                    {
                        // create a font that should be used for drawing a text
                        Font font = new Font(FontFamily.GenericSerif, 14);
            
                        // create a brush that should be used for drawing a text
                        PdfBrush brush = new PdfBrush(Color.Black);
            
                        // specify a rectangle where text should be drawn
                        RectangleF rect = pdfPage.MediaBox;
            
                        // specify a string format that should be used for drawing a text 
                        StringFormat stringFormat = StringFormat.GenericDefault;
            
                        // draw text on the PDF page
                        graphics.DrawString(text, font, brush, rect, stringFormat);
                    }
            
                    // save PDF document
                    pdfDocument.SaveChanges();
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.DrawString(System.String,System.Drawing.Font,Vintasoft.Imaging.Pdf.Drawing.PdfPen,System.Drawing.RectangleF,System.Drawing.StringFormat)">
            <summary>
            Draws the specified text string in vector form at the specified rectangle
            using specified <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfPen" /> and <see cref="T:System.Drawing.Font" /> objects
            using the formatting attributes specified by <see cref="T:System.Drawing.StringFormat" />. 
            </summary>
            <param name="s">String to draw.</param>
            <param name="font"><see cref="T:System.Drawing.Font" /> that defines the string.</param>
            <param name="pen"><see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfPen" /> to draw the text.</param>
            <param name="rect"><see cref="T:System.Drawing.RectangleF" /> structure that specifies
            the location of the drawn text.</param>
            <param name="sf"><see cref="T:System.Drawing.StringFormat" /> that specifies formatting
            attributes, such as line spacing and alignment, that are applied to
            the drawn text.</param>
            <remarks>
            This method does NOT ignore carriage returns and new line characters.<br />
            <br />
            Use overloaded method that takes point that specifies location, instead of rectangle,
            if carriage returns and new line characters should be ignored.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.DrawAnnotation(Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotation)">
            <summary>
            Draws the specified PDF annotation as form on the <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" />.
            </summary>
            <param name="annotation">The annotation to draw.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.DrawAnnotation(Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotation,System.Drawing.RectangleF)">
            <summary>
            Draws the specified PDF annotation as form on the <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" />.
            </summary>
            <param name="rect"><see cref="T:System.Drawing.RectangleF" /> structure that specifies
            the location of the annotation on the <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" />.</param>
            <param name="annotation">The annotation to draw.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.DrawPageAsForm(Vintasoft.Imaging.Pdf.Tree.PdfPage,System.Drawing.RectangleF)">
            <summary>
            Draws the specified PDF page as form in specified rectangle of the <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" />.
            </summary>
            <param name="page">The page to draw.</param>
            <param name="rect"><see cref="T:System.Drawing.RectangleF" /> structure that specifies
            the location of the drawn form.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.DrawPageAsForm(Vintasoft.Imaging.Pdf.Tree.PdfPage)">
            <summary>
            Draws the specified PDF page as form on the <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" />.
            </summary>
            <param name="page">The page to draw.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.DrawForm(Vintasoft.Imaging.Pdf.Tree.PdfFormXObjectResource,System.Drawing.RectangleF)">
            <summary>
            Draws the specified form in specified rectangle of this <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" />.
            </summary>
            <param name="form">The form to draw.</param>
            <param name="rect"><see cref="T:System.Drawing.RectangleF" /> structure that specifies
            the location of the drawn form.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.DrawForm(Vintasoft.Imaging.Pdf.Tree.PdfFormXObjectResource)">
            <summary>
            Draws the specified form on this <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" />.
            </summary>
            <param name="form">The form to draw.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.BeginOptionalContent(Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentGroup)">
            <summary>
            Begins a block of optional content.
            </summary>
            <param name="group">The optional content group.</param>
            <seealso cref="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.EndOptionalContent" />
            <example>
            Here is an example that shows how to create document with optional content:
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Creates PDF document with the optional content.
            ''' &lt;/summary&gt;
            ''' &lt;param name="pdfFilename"&gt;The PDF filename.&lt;/param&gt;
            Public Shared Sub CreateDocumentWithOptionalContent(pdfFilename As String)
                ' create new PDF document
                Using document As New PdfDocument(pdfFilename, PdfFormat.Pdf_16)
                    ' add empty page (A4 size)
                    Dim page As PdfPage = document.Pages.Add(PaperSizeKind.A4)
            
                    ' crete two optional content groups
                    Dim layer1 As New PdfOptionalContentGroup(document, "Layer1")
                    Dim layer2 As New PdfOptionalContentGroup(document, "Layer2")
            
                    ' add optional content groups to OptionalContentProperties
                    document.OptionalContentProperties = New PdfOptionalContentProperties(document)
                    document.OptionalContentProperties.OptionalContentGroups.Add(layer1)
                    document.OptionalContentProperties.OptionalContentGroups.Add(layer2)
            
                    ' get PdfGraphics for PDF page
                    Using g As PdfGraphics = page.GetGraphics()
                        Dim font As PdfFont = document.FontManager.GetStandardFont(StandardFontType.TimesRoman)
                        Dim brush As New PdfBrush(Color.Black)
                        Dim brush1 As New PdfBrush(Color.Green)
                        Dim brush2 As New PdfBrush(Color.Red)
            
                        ' draw not optional content 
                        g.DrawString("Not optional content", font, 20, brush, New PointF(50, 650))
            
                        ' draw optional content "Layer1"
                        g.BeginOptionalContent(layer1)
                        g.DrawString(String.Format("Optional content '{0}'", layer1.Name), font, 25, brush1, New PointF(50, 550))
                        g.EndOptionalContent()
            
                        ' draw not optional content
                        g.DrawString("Not optional content", font, 30, brush, New PointF(50, 450))
            
                        ' draw optional content "Layer2"
                        g.BeginOptionalContent(layer2)
                        g.DrawString(String.Format("Optional content '{0}'", layer2.Name), font, 35, brush2, New PointF(50, 350))
                        g.EndOptionalContent()
            
                        ' draw not optional content
                        g.DrawString("Not optional content", font, 40, brush, New PointF(50, 250))
                    End Using
            
                    ' create optional content configurations
                    Dim configuration1 As New PdfOptionalContentConfiguration(document, "Layer1 and Layer2")
                    configuration1.SetGroupVisibility(layer1, True)
                    configuration1.SetGroupVisibility(layer2, True)
                    Dim configuration2 As New PdfOptionalContentConfiguration(document, "Layer1")
                    configuration2.SetGroupVisibility(layer1, True)
                    configuration2.SetGroupVisibility(layer2, False)
                    Dim configuration3 As New PdfOptionalContentConfiguration(document, "Layer2")
                    configuration3.SetGroupVisibility(layer1, False)
                    configuration3.SetGroupVisibility(layer2, True)
                    Dim configuration4 As New PdfOptionalContentConfiguration(document, "No Layers")
                    configuration4.SetGroupVisibility(layer1, False)
                    configuration4.SetGroupVisibility(layer2, False)
            
                    ' create list of optional content configuration 
                    document.OptionalContentProperties.Configurations = New PdfOptionalContentConfigurationList(document)
            
                    ' add configurations to list
                    document.OptionalContentProperties.Configurations.Add(configuration1)
                    document.OptionalContentProperties.Configurations.Add(configuration2)
                    document.OptionalContentProperties.Configurations.Add(configuration3)
                    document.OptionalContentProperties.Configurations.Add(configuration4)
            
                    ' set default configuration
                    document.OptionalContentProperties.DefaultConfiguration = configuration1
            
                    ' set presentation order
                    configuration1.PresentationOrder = New PdfOptionalContentPresentationOrder(document, layer1, layer2)
            
                    ' optional content panel is visible
                    document.DocumentViewMode = PdfDocumentViewMode.UseOC
            
                    ' save changes in PDF document
                    document.SaveChanges()
                End Using
            End Sub
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Creates PDF document with the optional content.
            /// &lt;/summary&gt;
            /// &lt;param name="pdfFilename"&gt;The PDF filename.&lt;/param&gt;
            public static void CreateDocumentWithOptionalContent(string pdfFilename)
            {
                // create new PDF document
                using (PdfDocument document = new PdfDocument(pdfFilename, PdfFormat.Pdf_16))
                {
                    // add empty page (A4 size)
                    PdfPage page = document.Pages.Add(PaperSizeKind.A4);
            
                    // crete two optional content groups
                    PdfOptionalContentGroup layer1 = new PdfOptionalContentGroup(document, "Layer1");
                    PdfOptionalContentGroup layer2 = new PdfOptionalContentGroup(document, "Layer2");
            
                    // add optional content groups to OptionalContentProperties
                    document.OptionalContentProperties = new PdfOptionalContentProperties(document);
                    document.OptionalContentProperties.OptionalContentGroups.Add(layer1);
                    document.OptionalContentProperties.OptionalContentGroups.Add(layer2);
            
                    // get PdfGraphics for PDF page
                    using (PdfGraphics g = page.GetGraphics())
                    {
                        PdfFont font = document.FontManager.GetStandardFont(StandardFontType.TimesRoman);
                        PdfBrush brush = new PdfBrush(Color.Black);
                        PdfBrush brush1 = new PdfBrush(Color.Green);
                        PdfBrush brush2 = new PdfBrush(Color.Red);
            
                        // draw not optional content 
                        g.DrawString("Not optional content", font, 20, brush, new PointF(50, 650));
            
                        // draw optional content "Layer1"
                        g.BeginOptionalContent(layer1);
                        g.DrawString(string.Format("Optional content '{0}'", layer1.Name),
                            font, 25, brush1, new PointF(50, 550));
                        g.EndOptionalContent();
            
                        // draw not optional content
                        g.DrawString("Not optional content", font, 30, brush, new PointF(50, 450));
            
                        // draw optional content "Layer2"
                        g.BeginOptionalContent(layer2);
                        g.DrawString(string.Format("Optional content '{0}'", layer2.Name),
                            font, 35, brush2, new PointF(50, 350));
                        g.EndOptionalContent();
            
                        // draw not optional content
                        g.DrawString("Not optional content", font, 40, brush, new PointF(50, 250));
                    }
            
                    // create optional content configurations
                    PdfOptionalContentConfiguration configuration1 =
                        new PdfOptionalContentConfiguration(document, "Layer1 and Layer2");
                    configuration1.SetGroupVisibility(layer1, true);
                    configuration1.SetGroupVisibility(layer2, true);
                    PdfOptionalContentConfiguration configuration2 =
                        new PdfOptionalContentConfiguration(document, "Layer1");
                    configuration2.SetGroupVisibility(layer1, true);
                    configuration2.SetGroupVisibility(layer2, false);
                    PdfOptionalContentConfiguration configuration3 =
                        new PdfOptionalContentConfiguration(document, "Layer2");
                    configuration3.SetGroupVisibility(layer1, false);
                    configuration3.SetGroupVisibility(layer2, true);
                    PdfOptionalContentConfiguration configuration4 =
                        new PdfOptionalContentConfiguration(document, "No Layers");
                    configuration4.SetGroupVisibility(layer1, false);
                    configuration4.SetGroupVisibility(layer2, false);
            
                    // create list of optional content configuration 
                    document.OptionalContentProperties.Configurations =
                        new PdfOptionalContentConfigurationList(document);
            
                    // add configurations to list
                    document.OptionalContentProperties.Configurations.Add(configuration1);
                    document.OptionalContentProperties.Configurations.Add(configuration2);
                    document.OptionalContentProperties.Configurations.Add(configuration3);
                    document.OptionalContentProperties.Configurations.Add(configuration4);
            
                    // set default configuration
                    document.OptionalContentProperties.DefaultConfiguration = configuration1;
            
                    // set presentation order
                    configuration1.PresentationOrder =
                        new PdfOptionalContentPresentationOrder(document, layer1, layer2);
            
                    // optional content panel is visible
                    document.DocumentViewMode = PdfDocumentViewMode.UseOC;
            
                    // save changes in PDF document
                    document.SaveChanges();
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.EndOptionalContent">
            <summary>
            Ends a block of optional content.
            </summary>
            <seealso cref="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.BeginOptionalContent(Vintasoft.Imaging.Pdf.Tree.PdfOptionalContentGroup)" />
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.FromPage(Vintasoft.Imaging.Pdf.Tree.PdfPage)">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" /> from the specified <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfPage" />. 
            </summary>
            <param name="page"><see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfPage" /> from which to create the new <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" />.</param>
            <returns>New <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" /> for the specified <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfPage" />.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.FromPage(Vintasoft.Imaging.Pdf.Tree.PdfPage,System.Boolean)">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" /> from the specified <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfPage" />. 
            </summary>
            <param name="page"><see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfPage" /> from which to create the new <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" />.</param>
            <param name="append">Indicates whether the new graphic commands must be added
            to an existing graphic commands of page.</param>
            <returns>New <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" /> for the specified <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfPage" />.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.FromAnnotation(Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotation)">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" /> from
            the specified <see cref="T:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotation" />. 
            </summary>
            <param name="annotation"><see cref="T:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotation" />
            from which to create the new <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" />.</param>
            <returns>New <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" /> for
            the specified <see cref="T:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotation" />. </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.FromForm(Vintasoft.Imaging.Pdf.Tree.PdfFormXObjectResource)">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" /> from
            the specified <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfFormXObjectResource" />. 
            </summary>
            <param name="form"><see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfFormXObjectResource" />
            from which to create the new <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" />.</param>
            <returns>New <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" /> for
            the specified <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfFormXObjectResource" />.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.FromForm(Vintasoft.Imaging.Pdf.Tree.PdfFormXObjectResource,System.Boolean)">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" /> from
            the specified <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfFormXObjectResource" />. 
            </summary>
            <param name="form"><see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfFormXObjectResource" />
            from which to create the new <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" />.</param>
            <param name="append">Indicates whether the new graphic commands must be added
            to an existing graphic commands of form.</param>
            <returns>New <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" /> for
            the specified <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfFormXObjectResource" />.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.Dispose">
            <summary>
            Releases all resources used by this <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" />. 
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics.Document">
            <summary>
            Gets the PDF document.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.PdfException">
            <summary>
            Represents errors that occur during PDF document processing.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.PdfException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.PdfCompressionSettings">
            <summary>
            Encapsulates the settings for data compression in 
            resources of PDF document.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfCompressionSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.PdfCompressionSettings" /> 
            class with default compression settings.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.PdfCompressionSettings.DefaultSettings">
            <summary>
            Static instance of the default compression settings.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.PdfCompressionSettings.JpegQuality">
            <summary>
            Gets or sets quality for JPEG compression.
            </summary>
            <value>Default value is <b>90</b>.</value>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.PdfCompressionSettings.JpegSettings">
            <summary>
            Gets or sets the JPEG encoder settings.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if
            <i>new value</i> is <b>null</b>.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.PdfCompressionSettings.JpegSaveAsGrayscale">
            <summary>
            Gets or sets option to save JPEG file as grayscale.
            </summary>
            <value>Default value is <b>false</b>.</value>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.PdfCompressionSettings.ZipCompressionLevel">
            <summary>
            Gets or sets the ZIP compression level.
            </summary>
            <value>
            Possible values: from 0 to 9.<br />
            0 - no compression, 1 - best speed, 9 - best compression. <br />
            Default value is <b>6</b>.
            </value>       
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.PdfCompressionSettings.Jbig2UseGlobals">
            <summary>
            Use Jbig2Globals when using Jbig2 encoder.
            </summary>
            <value>Default value is <b>true</b>.</value>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.PdfCompressionSettings.Jbig2Settings">
            <summary>
            Gets or sets the JBIG2 encoder settings.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>new value</i> is <b>null</b>.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.PdfCompressionSettings.GenerateAlphaChannelForTransparentImages">
            <summary>
            Determines if need generate alpha-channel for transparent (32bpp, 8bpp) images.
            </summary>
            <value>Default value is <b>true</b>.</value>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.PdfCompressionSettings.Jpeg2000Settings">
            <summary>
            Gets or sets the settings for JPEG 2000 encoder.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.PdfCompression">
            <summary>
            Specifies available compressions for data of PDF document.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.PdfCompression.Auto">
            <summary>
            Best compression is used depending of the data.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.PdfCompression.Undefined">
            <summary>
            Undefined.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.PdfCompression.None">
            <summary>
            No compression is used.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.PdfCompression.AsciiHex">
            <summary>
            The ASCII hexadecimal compression is used for data compression.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.PdfCompression.Ascii85">
            <summary>
            ASCII base-85 encoding is used for data compression.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.PdfCompression.Lzw">
            <summary>
            LZW compression is used for data compression.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.PdfCompression.Zip">
            <summary>
            ZIP (Flate) compression is used for data compression.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.PdfCompression.RunLength">
            <summary>
            RunLength compression is used for data compression.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.PdfCompression.CcittFax">
            <summary>
            CCITTFax compression is used for data compression. This compression can
            be used only for monochrome images.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.PdfCompression.Jbig2">
            <summary>
            Jbig2 compression is used for data compression. This compression can
            be used only for monochrome images.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.PdfCompression.Jpeg">
            <summary>
            JPEG compression is used for data compression. This compression can
            be used only for grayscale or color images.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.PdfCompression.Jpeg2000">
            <summary>
            JPEG2000 compression is used for data compression. This compression can
            be used only for images.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.PdfCompression.Crypt">
            <summary>
            Data is encrypted.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.PdfCompression.Predictor">
            <summary>
            Prediction is used for data compression.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.UserAndSystemFontProgramsController">
            <summary>
            Provides access to fonts located in specified directory and system fonts. 
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.SystemFontProgramsController">
            <summary>
            Provides access to system fonts.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.IFontProgramsController">
            <summary>
            Interface that provides access to external font programs.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.IFontProgramsController.GetTrueTypeFontProgram(System.String)">
            <summary>
            Method is executed when external TrueType font is needed for drawing text on PDF page
            or text extraction from PDF page but font is not found in PDF document.<br />
            </summary>
            <param name="fontName">Font name.</param>
            <returns>The <see cref="T:System.IO.Stream" /> that contains the font
            program in TrueType format if font is found successfully;
            otherwise, <b>null</b>.</returns>
            <remarks>
            Application code must analyze font name and provide font that will be used instead
            of font with specified font name.<br />
            <br />
            Text drawing on PDF page or text extraction from PDF page will be interrupted with error
            if this method returns <b>null</b>.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.IFontProgramsController.GetCIDFontProgram(System.String)">
            <summary>
            Method is executed when external CID font is needed for drawing text on PDF page
            or text extraction from PDF page but font is not found in PDF document.
            </summary>
            <param name="fontName">Name of the font.</param>
            <returns>The <see cref="T:System.IO.Stream" /> that contains the font
            program if font is found successfully;
            otherwise, <b>null</b>.</returns>
            <remarks>
            Application code must analyze font name and provide font that will be used instead
            of font with specified font name.<br />
            <br />
            Text drawing on PDF page or text extraction from PDF page will be interrupted with error
            if this method returns <b>null</b>.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.IFontProgramsController.FontInstanceCreated(Vintasoft.Imaging.Pdf.Tree.PdfResources,Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFont@,System.Single@,System.String)">
            <summary>
            Method is executed when font instance is created.
            </summary>
            <param name="resources">The resources of content stream.</param>
            <param name="font">The font that was created.</param>
            <param name="fontSize">The font size.</param>
            <param name="resourceName">Name of the font resource.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.SystemFontProgramsController.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:Vintasoft.Imaging.Pdf.SystemFontProgramsController" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.SystemFontProgramsController.FontInstanceCreated(Vintasoft.Imaging.Pdf.Tree.PdfResources,Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFont@,System.Single@,System.String)">
            <summary>
            Method is executed when font instance is created.
            </summary>
            <param name="resources">The resources of content stream.</param>
            <param name="font">The font that was created.</param>
            <param name="fontSize">The font size.</param>
            <param name="resourceName">Name of the font resource.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.SystemFontProgramsController.GetCIDFontProgram(System.String)">
            <summary>
            Method is executed when external CID font is needed for drawing text on PDF page
            or text extraction from PDF page but font is not found in PDF document.
            </summary>
            <param name="fontName">Name of the font.</param>
            <returns>The <see cref="T:System.IO.Stream" /> that contains the font
            program if font is found successfully;
            otherwise, <b>null</b>.</returns>
            <remarks>
            Application code must analyze font name and provide font that will be used instead
            of font with specified font name.<br />
            <br />
            Text drawing on PDF page or text extraction from PDF page will be interrupted with error
            if this method returns <b>null</b>.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.SystemFontProgramsController.GetTrueTypeFontProgram(System.String)">
            <summary>
            Method is executed when external TrueType font is needed for drawing text on PDF page
            or text extraction from PDF page but font is not found in PDF document.<br />
            </summary>
            <param name="fontName">Font name.</param>
            <returns>The <see cref="T:System.IO.Stream" /> that contains the font
            program in TrueType format if font is found successfully;
            otherwise, <b>null</b>.</returns>
            <remarks>
            Application code must analyze font name and provide font that will be used instead
            of font with specified font name.<br />
            <br />
            Text drawing on PDF page or text extraction from PDF page will be interrupted with error
            if this method returns <b>null</b>.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.SystemFontProgramsController.ConvertPostScriptFontNameToStandardFontName(System.String)">
            <summary>
            Converts PostScript font name to standard font name.
            </summary>
            <param name="fontName">The PostScript name of the font.</param>
            <returns>Converted font name.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.SystemFontProgramsController.Dispose">
            <summary>
            Releases all resources used by this font programs controller.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UserAndSystemFontProgramsController.#ctor(System.String)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Vintasoft.Imaging.Pdf.UserAndSystemFontProgramsController" /> class.
            </summary>
            <param name="fontsDirectory">Directory to find font programs.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UserAndSystemFontProgramsController.GetTrueTypeFontProgram(System.String)">
            <summary>
            Returns a TrueType font program use specified font name.
            </summary>
            <param name="fontName">Font name.</param>
            <returns>The <see cref="T:System.IO.Stream" /> that contains the font
            program in TrueType format if font is found successfully;
            otherwise, <b>null</b>.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.UserAndSystemFontProgramsController.FontsDirectory">
            <summary>
            Gets the fonts directory.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.PdfRenderingMode">
            <summary>
            Specifies available PDF rendering modes.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.PdfRenderingMode.HighSpeed">
            <summary>
            Specifies high speed, low quality rendering. 
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.PdfRenderingMode.Normal">
            <summary>
            Specifies optimal balance between rendering speed and rendering quality.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.PdfRenderingMode.HighQuality">
            <summary>
            Specifies high quality, low speed rendering. 
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.PdfRenderingSettings">
            <summary>
            Contains settings for rendering of PDF page.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfRenderingSettings.#ctor">
            <summary>
            Initializes a new instance of
            the <see cref="T:Vintasoft.Imaging.Pdf.PdfRenderingSettings" /> class. 
            </summary>       
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfRenderingSettings.Clone">
            <summary>
            Creates an exact copy of this
            <see cref="T:Vintasoft.Imaging.Pdf.PdfRenderingSettings" />. 
            </summary>
            <returns>The <see cref="T:Vintasoft.Imaging.Pdf.PdfRenderingSettings" />
            this method creates, cast as an object.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfRenderingSettings.Equals(System.Object)">
            <summary>
            Determines whether two <see cref="T:Vintasoft.Imaging.Pdf.PdfRenderingSettings" /> instances are equal.
            </summary>
            <param name="obj">The <see cref="T:Vintasoft.Imaging.Pdf.PdfRenderingSettings" /> to compare with
            the current <see cref="T:Vintasoft.Imaging.Pdf.PdfRenderingSettings" />.</param>
            <returns><b>true</b> if the specified <see cref="T:Vintasoft.Imaging.Pdf.PdfRenderingSettings" /> is
            equal to the current <see cref="T:Vintasoft.Imaging.Pdf.PdfRenderingSettings" />;
            otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.PdfRenderingSettings.GetHashCode">
            <summary>
            Returns the hash code for this <see cref="T:Vintasoft.Imaging.Pdf.PdfRenderingSettings" />. 
            </summary>
            <returns>A hash code for the current <see cref="T:Vintasoft.Imaging.Pdf.PdfRenderingSettings" />.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.PdfRenderingSettings.ContentRenderer">
            <summary>
            Gets or sets the content renderer that customizes 
            content rendering algorithm.
            </summary>
            <seealso cref="T:Vintasoft.Imaging.Pdf.PdfContentRenderer" />
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.PdfRenderingSettings.Zoom">
            <summary>
            Get or sets the zoom factor for rendering
            of PDF page.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.PdfRenderingSettings.DrawPdfAnnotations">
            <summary>
            Determines that PDF page should be rendered with non Vintasoft annotations.
            </summary>
            <value>Default value is <b>true</b>.</value>
            <remarks>
            You should set values of this property and <see cref="P:Vintasoft.Imaging.Pdf.PdfRenderingSettings.DrawVintasoftAnnotations" /> property
            to <b>true</b> if you want to render page with all annotations.
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.Pdf.PdfRenderingSettings.DrawVintasoftAnnotations" />
            <example>
            Here is an example that demonstrates how to render PDF page with annotations:
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Renders PDF page with the PDF annotations.
            ''' &lt;/summary&gt;
            ''' &lt;param name="page"&gt;The page of PDF document.&lt;/param&gt;
            Public Shared Function RenderPdfPageWithPdfAnnotations(page As PdfPage) As VintasoftImage
                ' get rendering settings of PDF page
                Dim renderingSettings As PdfRenderingSettings = page.Document.RenderingSettings
                ' save previous value of PdfRenderingSettings.DrawPdfAnnotations property
                Dim prevDrawPdfAnnotations As Boolean = renderingSettings.DrawPdfAnnotations
                ' enable rendering of PDF annotations on PDF page
                renderingSettings.DrawPdfAnnotations = True
            
                ' render PDF page
                Dim image As VintasoftImage = page.Render()
            
                ' restore value of PdfRenderingSettings.DrawPdfAnnotations property
                renderingSettings.DrawPdfAnnotations = prevDrawPdfAnnotations
            
                ' return the image of PDF page
                Return image
            End Function
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Renders PDF page with the PDF annotations.
            /// &lt;/summary&gt;
            /// &lt;param name="page"&gt;The page of PDF document.&lt;/param&gt;
            public static VintasoftImage RenderPdfPageWithPdfAnnotations(PdfPage page)
            {
                // get rendering settings of PDF page
                PdfRenderingSettings renderingSettings = page.Document.RenderingSettings;
                // save previous value of PdfRenderingSettings.DrawPdfAnnotations property
                bool prevDrawPdfAnnotations = renderingSettings.DrawPdfAnnotations;
                // enable rendering of PDF annotations on PDF page
                renderingSettings.DrawPdfAnnotations = true;
            
                // render PDF page
                VintasoftImage image = page.Render();
            
                // restore value of PdfRenderingSettings.DrawPdfAnnotations property
                renderingSettings.DrawPdfAnnotations = prevDrawPdfAnnotations;
            
                // return the image of PDF page
                return image;
            }
            </code>
            </example>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.PdfRenderingSettings.DrawVintasoftAnnotations">
            <summary>
            Determines that PDF page should be rendered with Vintasoft annotations.
            </summary>
            <value>Default value is <b>false</b>.</value>
            <remarks>
            You should set values of this property and <see cref="P:Vintasoft.Imaging.Pdf.PdfRenderingSettings.DrawPdfAnnotations" /> property
            to <b>true</b> if you want to render page with all annotations.<br />
            <br />
            You should set value of this property to <b>false</b> if you render pages for
            VintaSoft's annotation viewer or annotated thumbnail viewer.
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.Pdf.PdfRenderingSettings.DrawPdfAnnotations" />
            <seealso cref="P:Vintasoft.Imaging.Codecs.Encoders.PdfEncoderSettings.GenerateAnnotationAppearance" />
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.PdfRenderingSettings.CacheResources">
            <summary>
            Determines that resources should be cached.
            </summary>
            <value>
            <b>true</b> - images and fonts will be cached;
            <b>false</b> - caching will not be used.
            </value>
            <remarks>
            Cache size is <b>20</b>Mb.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.PdfRenderingSettings.RenderingMode">
            <summary>
            Gets or sets <see cref="T:Vintasoft.Imaging.Pdf.PdfRenderingMode" /> enumeration 
            that determines page rendering mode. 
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.PdfRenderingSettings.PixelOffsetMode">
            <summary>
            Gets or sets pixel offset mode.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.PdfRenderingSettings.UseCropBox">
            <summary>
            Determines that the crop box should be used.
            </summary>
            <value>
            <b>true</b> - page should be cropped if page
            has crop box;
            <b>false</b> - page should not be cropped.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.PdfRenderingSettings.UsePageRotateProperty">
            <summary>
            Determines that the rendered page should be rotated if rotation for
            page is specified in PDF document.
            </summary>
            <value>Default value is <b>true</b>.</value>
            <seealso cref="P:Vintasoft.Imaging.Pdf.Tree.PdfPage.Rotate" />
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.PdfRenderingSettings.UseEmbeddedThumbnails">
            <summary>
            Determines that thumbnails embedded in PDF document should be used.
            </summary>
            <value>
            <b>true</b> - use embedded thumbnails if possible;
            <b>false</b> - always render page thumbnails.
            Default value is <b>true</b>.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.RegionF">
            <summary>
            Represents a region based on four points.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.RegionF.#ctor(System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.RegionF" /> class.
            </summary>
            <param name="rect">The rect.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.RegionF.#ctor(Vintasoft.Imaging.Pdf.RegionF)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.RegionF" /> class.
            </summary>
            <param name="region">The region.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.RegionF.#ctor(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.RegionF" /> class.
            </summary>
            <param name="leftTop">The left top point.</param>
            <param name="rightTop">The right top point.</param>
            <param name="leftBottom">The left bottom point.</param>
            <param name="rightBottom">The right bottom point.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.RegionF.IsPointInRegion(System.Drawing.PointF)">
            <summary>
            Determines that point is located in region.
            </summary>
            <param name="point">Point to test.</param>
            <returns><b>true</b> if point is located in region, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.RegionF.IsPointInBounds(System.Drawing.PointF)">
            <summary>
            Determines that point is located in <see cref="P:Vintasoft.Imaging.Pdf.RegionF.Bounds" />.
            </summary>
            <param name="point">Point to test.</param>
            <returns><b>true</b> if point is located in <see cref="P:Vintasoft.Imaging.Pdf.RegionF.Bounds" />, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.RegionF.Transform(Vintasoft.Imaging.Utils.AffineMatrix)">
            <summary>
            Transforms this region using specified transformation matrix.
            </summary>
            <param name="m">Matrix to transform.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.RegionF.LeftTop">
            <summary>
            Gets the left-top point of this region.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.RegionF.RightTop">
            <summary>
            Gets the right-top point of this region.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.RegionF.LeftBottom">
            <summary>
            Gets the left-bottom point of this region.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.RegionF.RightBottom">
            <summary>
            Gets the right-bottom point of this region.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.RegionF.Bounds">
            <summary>
            Gets the boundary rectangle of this region.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.RegionF.Center">
            <summary>
            Gets the center point of this region.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.RegionF.Angle">
            <summary>
            Gets the rotation angle of this region relative to vector (1,0).
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.RegionF.PolygonPoints">
            <summary>
            Gets an array of points of this region. 
            </summary>
            <remarks>
            This array forms the polygon.
            </remarks>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextRegion">
            <summary>
            Provides information about the text content of PDF page.
            </summary>
            <remarks>
            See also <see cref="P:Vintasoft.Imaging.Pdf.Tree.PdfPage.TextRegion" /> property.
            </remarks>
            <example>
            <code lang="VB.NET">  
            Public Sub WritePageTextContent(document As PdfDocument, pageIndex As Integer)  
                Console.WriteLine(document.Pages(pageIndex).TextRegion.TextContent)  
            End Sub
            </code>
            <code lang="C#">
            public void WritePageTextContent(PdfDocument document, int pageIndex)
            {
                Console.WriteLine(document.Pages[pageIndex].TextRegion.TextContent);
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextRegion.#ctor(Vintasoft.Imaging.Pdf.Content.TextExtraction.TextRegion[])">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextRegion" /> class
            which combines specified text regions.
            </summary>
            <param name="regions">An array that contains text regions.</param>
            <remarks>
            This constructor constructs new text region which combines specified text regions.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextRegion.#ctor(Vintasoft.Imaging.Pdf.Content.TextExtraction.TextRegion,System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextRegion" /> class
            which includes only necessary symbols from specified region.
            </summary>
            <param name="sourceRegion">The source text region.</param>
            <param name="symbolIndexes">The indexes of symbols, in source region,
            which should be added to new text region.</param>
            <remarks>
            This constructor constructs new text region which includes only necessary symbols
            from specified region.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextRegion.GetUniqueTextSymbols(Vintasoft.Imaging.Pdf.Content.TextExtraction.TextRegion[])">
            <summary>
            Gets the unique text symbols for specified text regions.
            </summary>
            <param name="textRegions">The text regions.</param>
            <returns>Dictionary that contains unique text symbols for each used font.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextRegion.GetSelectionBoundingBox">
            <summary>
            Returns the selection bounding box of text region.
            </summary>
            <returns>The selection bounding box of text region.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextRegion.ContainsPoint(System.Drawing.PointF)">
            <summary>
            Determines that this region contains specified point.
            </summary>
            <param name="point">The <see cref="T:System.Drawing.PointF" /> to determine.</param>
            <returns>
            <b>true</b> if region contains point;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextRegion.GetSubregion(System.Drawing.RectangleF)">
            <summary>
            Returns a subregion of this text region.
            </summary>
            <param name="rect">Location and size of subregion.</param>
            <returns>
            Subregion of this text region.
            </returns>
            <example>This example shows how to get text content of PDF page region.
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Returns the text region of PDF page.
            ''' &lt;/summary&gt;
            ''' &lt;param name="page"&gt;PDF page.&lt;/param&gt;
            ''' &lt;param name="imageViewer"&gt;Image viewer.&lt;/param&gt;
            ''' &lt;param name="selectedRegion"&gt;Selected region on image viewer.&lt;/param&gt;
            ''' &lt;returns&gt;Text region of PDF page.&lt;/returns&gt;
            Public Shared Function GetRegionTextPage(page As PdfPage, imageViewer As ImageViewer, selectedRegion As Rectangle) As String
                ' convert the rectangle from the control coordinates to the image coordinates
                Dim imageCoordinateSystemRectangle As RectangleF = imageViewer.RectangleToImage(selectedRegion)
            
                ' get left-top point of the rectangle
                Dim pdfPageCoordinateSystemPoint1 As PointF = imageCoordinateSystemRectangle.Location
                ' get rigth-bottom point of the rectangle
                Dim pdfPageCoordinateSystemPoint2 As New PointF(imageCoordinateSystemRectangle.Right, imageCoordinateSystemRectangle.Bottom)
                ' get resolution of the image
                Dim resolution As Resolution = imageViewer.Image.Resolution
                ' convert points from the image coordinate space to the page coordinate space
                page.PointToUnit(pdfPageCoordinateSystemPoint1, resolution)
                page.PointToUnit(pdfPageCoordinateSystemPoint2, resolution)
            
                ' create rectangle in the page's coordinate space
                Dim rectangle As New RectangleF(pdfPageCoordinateSystemPoint1, New SizeF(pdfPageCoordinateSystemPoint2.X - pdfPageCoordinateSystemPoint1.X, pdfPageCoordinateSystemPoint2.Y - pdfPageCoordinateSystemPoint1.Y))
                ' get text region of the page
                Dim textRegion As TextRegion = page.TextRegion.GetSubregion(rectangle, TextSelectionMode.Rectangle)
            
                Dim textContent As String = String.Empty
                ' if text region is found
                If textRegion IsNot Nothing Then
                    textContent = textRegion.TextContent
                End If
            
                Return textContent
            End Function
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Returns the text region of PDF page.
            /// &lt;/summary&gt;
            /// &lt;param name="page"&gt;PDF page.&lt;/param&gt;
            /// &lt;param name="imageViewer"&gt;Image viewer.&lt;/param&gt;
            /// &lt;param name="selectedRegion"&gt;Selected region on image viewer.&lt;/param&gt;
            /// &lt;returns&gt;Text region of PDF page.&lt;/returns&gt;
            public static string GetRegionTextPage(PdfPage page, ImageViewer imageViewer, Rectangle selectedRegion)
            {
                // convert the rectangle from the control coordinates to the image coordinates
                RectangleF imageCoordinateSystemRectangle = imageViewer.RectangleToImage(selectedRegion);
            
                // get left-top point of the rectangle
                PointF pdfPageCoordinateSystemPoint1 = imageCoordinateSystemRectangle.Location;
                // get rigth-bottom point of the rectangle
                PointF pdfPageCoordinateSystemPoint2 = new PointF(imageCoordinateSystemRectangle.Right, imageCoordinateSystemRectangle.Bottom);
                // get resolution of the image
                Resolution resolution = imageViewer.Image.Resolution;
                // convert points from the image coordinate space to the page coordinate space
                page.PointToUnit(ref pdfPageCoordinateSystemPoint1, resolution);
                page.PointToUnit(ref pdfPageCoordinateSystemPoint2, resolution);
            
                // create rectangle in the page's coordinate space
                RectangleF rectangle = new RectangleF(pdfPageCoordinateSystemPoint1,
                    new SizeF(pdfPageCoordinateSystemPoint2.X - pdfPageCoordinateSystemPoint1.X,
                              pdfPageCoordinateSystemPoint2.Y - pdfPageCoordinateSystemPoint1.Y));
                // get text region of the page
                TextRegion textRegion = page.TextRegion.GetSubregion(rectangle, TextSelectionMode.Rectangle);
                
                string textContent = string.Empty;
                // if text region is found
                if (textRegion != null)
                    textContent = textRegion.TextContent;
            
                return textContent;
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextRegion.GetSubregion(System.Drawing.RectangleF,Vintasoft.Imaging.Pdf.Content.TextExtraction.TextSelectionMode)">
            <summary>
            Returns a subregion of this text region.
            </summary>
            <param name="rect">Location and size of subregion.</param>
            <param name="selectionMode">Selection mode for subregion.</param>
            <returns>Subregion of this text region.</returns>
            <example>This example shows how to get text content of PDF page region.
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Returns the text region of PDF page.
            ''' &lt;/summary&gt;
            ''' &lt;param name="page"&gt;PDF page.&lt;/param&gt;
            ''' &lt;param name="imageViewer"&gt;Image viewer.&lt;/param&gt;
            ''' &lt;param name="selectedRegion"&gt;Selected region on image viewer.&lt;/param&gt;
            ''' &lt;returns&gt;Text region of PDF page.&lt;/returns&gt;
            Public Shared Function GetRegionTextPage(page As PdfPage, imageViewer As ImageViewer, selectedRegion As Rectangle) As String
                ' convert the rectangle from the control coordinates to the image coordinates
                Dim imageCoordinateSystemRectangle As RectangleF = imageViewer.RectangleToImage(selectedRegion)
            
                ' get left-top point of the rectangle
                Dim pdfPageCoordinateSystemPoint1 As PointF = imageCoordinateSystemRectangle.Location
                ' get rigth-bottom point of the rectangle
                Dim pdfPageCoordinateSystemPoint2 As New PointF(imageCoordinateSystemRectangle.Right, imageCoordinateSystemRectangle.Bottom)
                ' get resolution of the image
                Dim resolution As Resolution = imageViewer.Image.Resolution
                ' convert points from the image coordinate space to the page coordinate space
                page.PointToUnit(pdfPageCoordinateSystemPoint1, resolution)
                page.PointToUnit(pdfPageCoordinateSystemPoint2, resolution)
            
                ' create rectangle in the page's coordinate space
                Dim rectangle As New RectangleF(pdfPageCoordinateSystemPoint1, New SizeF(pdfPageCoordinateSystemPoint2.X - pdfPageCoordinateSystemPoint1.X, pdfPageCoordinateSystemPoint2.Y - pdfPageCoordinateSystemPoint1.Y))
                ' get text region of the page
                Dim textRegion As TextRegion = page.TextRegion.GetSubregion(rectangle, TextSelectionMode.Rectangle)
            
                Dim textContent As String = String.Empty
                ' if text region is found
                If textRegion IsNot Nothing Then
                    textContent = textRegion.TextContent
                End If
            
                Return textContent
            End Function
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Returns the text region of PDF page.
            /// &lt;/summary&gt;
            /// &lt;param name="page"&gt;PDF page.&lt;/param&gt;
            /// &lt;param name="imageViewer"&gt;Image viewer.&lt;/param&gt;
            /// &lt;param name="selectedRegion"&gt;Selected region on image viewer.&lt;/param&gt;
            /// &lt;returns&gt;Text region of PDF page.&lt;/returns&gt;
            public static string GetRegionTextPage(PdfPage page, ImageViewer imageViewer, Rectangle selectedRegion)
            {
                // convert the rectangle from the control coordinates to the image coordinates
                RectangleF imageCoordinateSystemRectangle = imageViewer.RectangleToImage(selectedRegion);
            
                // get left-top point of the rectangle
                PointF pdfPageCoordinateSystemPoint1 = imageCoordinateSystemRectangle.Location;
                // get rigth-bottom point of the rectangle
                PointF pdfPageCoordinateSystemPoint2 = new PointF(imageCoordinateSystemRectangle.Right, imageCoordinateSystemRectangle.Bottom);
                // get resolution of the image
                Resolution resolution = imageViewer.Image.Resolution;
                // convert points from the image coordinate space to the page coordinate space
                page.PointToUnit(ref pdfPageCoordinateSystemPoint1, resolution);
                page.PointToUnit(ref pdfPageCoordinateSystemPoint2, resolution);
            
                // create rectangle in the page's coordinate space
                RectangleF rectangle = new RectangleF(pdfPageCoordinateSystemPoint1,
                    new SizeF(pdfPageCoordinateSystemPoint2.X - pdfPageCoordinateSystemPoint1.X,
                              pdfPageCoordinateSystemPoint2.Y - pdfPageCoordinateSystemPoint1.Y));
                // get text region of the page
                TextRegion textRegion = page.TextRegion.GetSubregion(rectangle, TextSelectionMode.Rectangle);
                
                string textContent = string.Empty;
                // if text region is found
                if (textRegion != null)
                    textContent = textRegion.TextContent;
            
                return textContent;
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextRegion.GetLineSubregion(System.Drawing.PointF)">
            <summary>
            Returns a text region that contains a line at specified point.
            </summary>
            <param name="point">Location of line.</param>
            <returns>Text region that contains a line at specified point.</returns>
            <example>This example shows how to get text line of PDF page.
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Returns the text line of PDF page.
            ''' &lt;/summary&gt;
            ''' &lt;param name="page"&gt;PDF page.&lt;/param&gt;
            ''' &lt;param name="imageViewer"&gt;Image viewer.&lt;/param&gt;
            ''' &lt;param name="location"&gt;Point on image viewer.&lt;/param&gt;
            ''' &lt;returns&gt;Text line of PDF page.&lt;/returns&gt;
            Public Shared Function GetLineTextPage(page As PdfPage, imageViewer As ImageViewer, location As Point) As String
                ' convert the point from the control coordinates to the image coordinates
                Dim imageCoordinateSystemPoint As Point = imageViewer.PointToImage(location)
            
                Dim pdfPageCoordinateSystemPoint As PointF = imageCoordinateSystemPoint
                ' get resolution of the image
                Dim resolution As Resolution = imageViewer.Image.Resolution
                ' convert point from the image coordinate space to the page coordinate space
                page.PointToUnit(pdfPageCoordinateSystemPoint, resolution)
            
                ' get the text line of the page
                Dim textRegion As TextRegion = page.TextRegion.GetLineSubregion(pdfPageCoordinateSystemPoint)
            
                Dim textContent As String = String.Empty
                ' if text line is found
                If textRegion IsNot Nothing Then
                    textContent = textRegion.TextContent
                End If
            
                Return textContent
            End Function
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Returns the text line of PDF page.
            /// &lt;/summary&gt;
            /// &lt;param name="page"&gt;PDF page.&lt;/param&gt;
            /// &lt;param name="imageViewer"&gt;Image viewer.&lt;/param&gt;
            /// &lt;param name="location"&gt;Point on image viewer.&lt;/param&gt;
            /// &lt;returns&gt;Text line of PDF page.&lt;/returns&gt;
            public static string GetLineTextPage(PdfPage page, ImageViewer imageViewer, Point location)
            {
                // convert the point from the control coordinates to the image coordinates
                Point imageCoordinateSystemPoint = imageViewer.PointToImage(location);
            
                PointF pdfPageCoordinateSystemPoint = imageCoordinateSystemPoint;
                // get resolution of the image
                Resolution resolution = imageViewer.Image.Resolution;
                // convert point from the image coordinate space to the page coordinate space
                page.PointToUnit(ref pdfPageCoordinateSystemPoint, resolution);
            
                // get the text line of the page
                TextRegion textRegion = page.TextRegion.GetLineSubregion(pdfPageCoordinateSystemPoint);
                
                string textContent = string.Empty;
                // if text line is found
                if (textRegion != null)
                    textContent = textRegion.TextContent;
            
                return textContent;
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextRegion.GetWordSubregion(System.Drawing.PointF)">
            <summary>
            Returns a text region that contains a word at specified point.
            </summary>
            <param name="point">Location of word.</param>
            <returns>Text region that contains a word at specified point.</returns>
            <example>This example shows how to get text word of PDF page.
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Returns word of PDF page.
            ''' &lt;/summary&gt;
            ''' &lt;param name="page"&gt;PDF page.&lt;/param&gt;
            ''' &lt;param name="imageViewer"&gt;Image viewer.&lt;/param&gt;
            ''' &lt;param name="location"&gt;Point on image viewer.&lt;/param&gt;
            ''' &lt;returns&gt;Word of PDF page.&lt;/returns&gt;
            Public Shared Function GetWordPage(page As PdfPage, imageViewer As ImageViewer, location As Point) As String
                ' convert the point from the control coordinates to the image coordinates
                Dim imageCoordinateSystemPoint As Point = imageViewer.PointToImage(location)
            
                Dim pdfPageCoordinateSystemPoint As PointF = imageCoordinateSystemPoint
                ' get resolution of the image
                Dim resolution As Resolution = imageViewer.Image.Resolution
                ' convert point from the image coordinate space to the page coordinate space
                page.PointToUnit(pdfPageCoordinateSystemPoint, resolution)
            
                ' get word of the page
                Dim textRegion As TextRegion = page.TextRegion.GetWordSubregion(pdfPageCoordinateSystemPoint)
            
                Dim textContent As String = String.Empty
                ' if word is searched
                If textRegion IsNot Nothing Then
                    textContent = textRegion.TextContent
                End If
            
                Return textContent
            End Function
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Returns word of PDF page.
            /// &lt;/summary&gt;
            /// &lt;param name="page"&gt;PDF page.&lt;/param&gt;
            /// &lt;param name="imageViewer"&gt;Image viewer.&lt;/param&gt;
            /// &lt;param name="location"&gt;Point on image viewer.&lt;/param&gt;
            /// &lt;returns&gt;Word of PDF page.&lt;/returns&gt;
            public static string GetWordPage(PdfPage page, ImageViewer imageViewer, Point location)
            {
                // convert the point from the control coordinates to the image coordinates
                Point imageCoordinateSystemPoint = imageViewer.PointToImage(location);
            
                PointF pdfPageCoordinateSystemPoint = imageCoordinateSystemPoint;
                // get resolution of the image
                Resolution resolution = imageViewer.Image.Resolution;
                // convert point from the image coordinate space to the page coordinate space
                page.PointToUnit(ref pdfPageCoordinateSystemPoint, resolution);
            
                // get word of the page
                TextRegion textRegion = page.TextRegion.GetWordSubregion(pdfPageCoordinateSystemPoint);
                
                string textContent = string.Empty;
                // if word is searched
                if (textRegion != null)
                    textContent = textRegion.TextContent;
            
                return textContent;
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextRegion.FindSymbol(System.Drawing.PointF)">
            <summary>
            Finds a text symbol at specified coordinates.
            </summary>
            <param name="point"><see cref="T:System.Drawing.PointF" /> specifies the coordinates
            where text symbol must be searched.</param>
            <returns>
            <b>The <see cref="T:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextRegionSymbol" /></b> if symbol is found successfully;        
            otherwise, <b>null</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextRegion.FindText(System.String,System.Int32@,System.Boolean)">
            <summary>
            Finds the text in this text region.
            </summary>
            <param name="text">Text to search.</param>
            <param name="startIndex">Zero-based start position in text region.</param>
            <param name="searchUp">Indicates that text must be searched
            from current position in text region to the beginning of text region.</param>
            <returns>
            <see cref="T:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextRegion" /> if text is found;
            otherwise, <b>null</b>.
            </returns>
            <example>This example shows how to search a text string on PDF page.
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Outputs the information about specified word in content of PDF document.
            ''' &lt;/summary&gt;
            ''' &lt;param name="document"&gt;PDF document where word should be searched.&lt;/param&gt;
            ''' &lt;param name="word"&gt;Word to search.&lt;/param&gt;
            Public Sub SearchWordInTextOfPdfDocument(document As PdfDocument, word As String)
                Console.WriteLine("Searching the word in text of PDF document is started.")
            
                For i As Integer = 0 To document.Pages.Count - 1
                    Dim textRegions As TextRegion() = SimpleTextSearchOnPdfPage(document.Pages(i), word)
                    If textRegions IsNot Nothing Then
                        For j As Integer = 0 To textRegions.Length - 1
                            Console.WriteLine(String.Format("- Text={0}, Rectangle={1}", textRegions(j).TextContent, textRegions(j).Rectangle))
                        Next
                    End If
                Next
            
                Console.WriteLine("Searching the word in text of PDF document is finished.")
            End Sub
            
            ''' &lt;summary&gt;
            ''' Searches a text string on PDF page.
            ''' &lt;/summary&gt;
            ''' &lt;param name="page"&gt;PDF page where text should be searched.&lt;/param&gt;
            ''' &lt;param name="text"&gt;Text to search.&lt;/param&gt;
            ''' &lt;returns&gt;An array of text regions on PDF page where text was found.&lt;/returns&gt;
            Public Function SimpleTextSearchOnPdfPage(page As PdfPage, text As String) As TextRegion()
                Dim textRegions As New List(Of TextRegion)()
            
                Dim textRegion As TextRegion = Nothing
                Dim startIndex As Integer = 0
                Do
                    ' search text
                    textRegion = page.TextRegion.FindText(text, startIndex, False)
                    ' if found text is not empty
                    If textRegion IsNot Nothing Then
                        ' add result
                        textRegions.Add(textRegion)
                        ' shitf start index
                        startIndex += textRegion.TextContent.Length
                    End If
                Loop While textRegion IsNot Nothing
            
                Return textRegions.ToArray()
            End Function
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Outputs the information about specified word in content of PDF document.
            /// &lt;/summary&gt;
            /// &lt;param name="document"&gt;PDF document where word should be searched.&lt;/param&gt;
            /// &lt;param name="word"&gt;Word to search.&lt;/param&gt;
            public void SearchWordInTextOfPdfDocument(PdfDocument document, string word)
            {
                Console.WriteLine("Searching the word in text of PDF document is started.");
            
                for (int i = 0; i &lt; document.Pages.Count; i++)
                {
                    TextRegion[] textRegions = SimpleTextSearchOnPdfPage(document.Pages[i], word);
                    if (textRegions != null)
                    {
                        for (int j = 0; j &lt; textRegions.Length; j++)
                        {
                            Console.WriteLine(string.Format("- Text={0}, Rectangle={1}",
                                textRegions[j].TextContent,
                                textRegions[j].Rectangle));
                        }
                    }
                }
            
                Console.WriteLine("Searching the word in text of PDF document is finished.");
            }
            
            /// &lt;summary&gt;
            /// Searches a text string on PDF page.
            /// &lt;/summary&gt;
            /// &lt;param name="page"&gt;PDF page where text should be searched.&lt;/param&gt;
            /// &lt;param name="text"&gt;Text to search.&lt;/param&gt;
            /// &lt;returns&gt;An array of text regions on PDF page where text was found.&lt;/returns&gt;
            public TextRegion[] SimpleTextSearchOnPdfPage(PdfPage page, string text)
            {
                List&lt;TextRegion&gt; textRegions = new List&lt;TextRegion&gt;();
            
                TextRegion textRegion = null;
                int startIndex = 0;
                do
                {
                    // search text
                    textRegion = page.TextRegion.FindText(text, ref startIndex, false);
                    // if found text is not empty
                    if (textRegion != null)
                    {
                        // add result
                        textRegions.Add(textRegion);
                        // shitf start index
                        startIndex += textRegion.TextContent.Length;
                    }
                } while (textRegion != null);
            
                return textRegions.ToArray();
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextRegion.FindText(System.String,System.Boolean,System.Int32@,System.Boolean)">
            <summary>
            Finds the text in this text region.
            </summary>
            <param name="text">Text to search.</param>
            <param name="ignoreCase">Indicates that the case sensitivity should be ignored.</param>
            <param name="startIndex">Zero-based start position in text region.</param>
            <param name="searchUp">Indicates that text must be searched
            from current position in text region to the beginning of text region.</param>
            <returns>
            <see cref="T:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextRegion" /> if text is found;
            otherwise, <b>null</b>.
            </returns>
            <example>This example shows how to search a text string on PDF page.
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Outputs the information about specified word in content of PDF document.
            ''' &lt;/summary&gt;
            ''' &lt;param name="document"&gt;PDF document where word should be searched.&lt;/param&gt;
            ''' &lt;param name="word"&gt;Word to search.&lt;/param&gt;
            Public Sub SearchWordInTextOfPdfDocument(document As PdfDocument, word As String)
                Console.WriteLine("Searching the word in text of PDF document is started.")
            
                For i As Integer = 0 To document.Pages.Count - 1
                    Dim textRegions As TextRegion() = SimpleTextSearchOnPdfPage(document.Pages(i), word)
                    If textRegions IsNot Nothing Then
                        For j As Integer = 0 To textRegions.Length - 1
                            Console.WriteLine(String.Format("- Text={0}, Rectangle={1}", textRegions(j).TextContent, textRegions(j).Rectangle))
                        Next
                    End If
                Next
            
                Console.WriteLine("Searching the word in text of PDF document is finished.")
            End Sub
            
            ''' &lt;summary&gt;
            ''' Searches a text string on PDF page.
            ''' &lt;/summary&gt;
            ''' &lt;param name="page"&gt;PDF page where text should be searched.&lt;/param&gt;
            ''' &lt;param name="text"&gt;Text to search.&lt;/param&gt;
            ''' &lt;returns&gt;An array of text regions on PDF page where text was found.&lt;/returns&gt;
            Public Function SimpleTextSearchOnPdfPage(page As PdfPage, text As String) As TextRegion()
                Dim textRegions As New List(Of TextRegion)()
            
                Dim textRegion As TextRegion = Nothing
                Dim startIndex As Integer = 0
                Do
                    ' search text
                    textRegion = page.TextRegion.FindText(text, startIndex, False)
                    ' if found text is not empty
                    If textRegion IsNot Nothing Then
                        ' add result
                        textRegions.Add(textRegion)
                        ' shitf start index
                        startIndex += textRegion.TextContent.Length
                    End If
                Loop While textRegion IsNot Nothing
            
                Return textRegions.ToArray()
            End Function
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Outputs the information about specified word in content of PDF document.
            /// &lt;/summary&gt;
            /// &lt;param name="document"&gt;PDF document where word should be searched.&lt;/param&gt;
            /// &lt;param name="word"&gt;Word to search.&lt;/param&gt;
            public void SearchWordInTextOfPdfDocument(PdfDocument document, string word)
            {
                Console.WriteLine("Searching the word in text of PDF document is started.");
            
                for (int i = 0; i &lt; document.Pages.Count; i++)
                {
                    TextRegion[] textRegions = SimpleTextSearchOnPdfPage(document.Pages[i], word);
                    if (textRegions != null)
                    {
                        for (int j = 0; j &lt; textRegions.Length; j++)
                        {
                            Console.WriteLine(string.Format("- Text={0}, Rectangle={1}",
                                textRegions[j].TextContent,
                                textRegions[j].Rectangle));
                        }
                    }
                }
            
                Console.WriteLine("Searching the word in text of PDF document is finished.");
            }
            
            /// &lt;summary&gt;
            /// Searches a text string on PDF page.
            /// &lt;/summary&gt;
            /// &lt;param name="page"&gt;PDF page where text should be searched.&lt;/param&gt;
            /// &lt;param name="text"&gt;Text to search.&lt;/param&gt;
            /// &lt;returns&gt;An array of text regions on PDF page where text was found.&lt;/returns&gt;
            public TextRegion[] SimpleTextSearchOnPdfPage(PdfPage page, string text)
            {
                List&lt;TextRegion&gt; textRegions = new List&lt;TextRegion&gt;();
            
                TextRegion textRegion = null;
                int startIndex = 0;
                do
                {
                    // search text
                    textRegion = page.TextRegion.FindText(text, ref startIndex, false);
                    // if found text is not empty
                    if (textRegion != null)
                    {
                        // add result
                        textRegions.Add(textRegion);
                        // shitf start index
                        startIndex += textRegion.TextContent.Length;
                    }
                } while (textRegion != null);
            
                return textRegions.ToArray();
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextRegion.FindText(System.Text.RegularExpressions.Regex,System.Int32@,System.Boolean)">
            <summary>
            Finds the text using regular expression in this text region.
            </summary>
            <param name="regex">Regular expression to search.</param>
            <param name="startIndex">Zero-based start position in text region.</param>
            <param name="searchUp">Indicates that text must be searched
            from current position in text region to the beginning of text region.</param>
            <returns>
            <see cref="T:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextRegion" /> if text is found;
            otherwise, <b>null</b>.
            </returns>       
            <example>This example shows how to search a text, defined with regular expression, on PDF page.
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Outputs the information about digits in content of PDF document.
            ''' &lt;/summary&gt;
            ''' &lt;param name="document"&gt;PDF document where digits should be searched.&lt;/param&gt;
            Public Sub SearchDigitsInTextOfPdfDocument(document As PdfDocument)
                Console.WriteLine("Searching the digits in text of PDF document is started.")
            
                For i As Integer = 0 To document.Pages.Count - 1
                    Dim textRegions As TextRegion() = SimpleDigitsSearchOnPdfPage(document.Pages(i), New Regex("\d+"))
                    If textRegions IsNot Nothing Then
                        For j As Integer = 0 To textRegions.Length - 1
                            Console.WriteLine(String.Format("- Text={0}, Rectangle={1}", textRegions(j).TextContent, textRegions(j).Rectangle))
                        Next
                    End If
                Next
            
                Console.WriteLine("Searching the digits in text of PDF document is finished.")
            End Sub
            
            ''' &lt;summary&gt;
            ''' Searches a text, defined with regular expression, on PDF page.
            ''' &lt;/summary&gt;
            ''' &lt;param name="page"&gt;PDF page where text should be searched.&lt;/param&gt;
            ''' &lt;param name="regex"&gt;Regular expression which defines the searching text.&lt;/param&gt;
            ''' &lt;returns&gt;An array of text regions on PDF page where text was found.&lt;/returns&gt;
            Public Function SimpleDigitsSearchOnPdfPage(page As PdfPage, regex As Regex) As TextRegion()
                Dim textRegions As New List(Of TextRegion)()
                Dim textSearchEngine__1 As TextSearchEngine = TextSearchEngine.Create(regex)
            
                Dim textRegion As TextRegion = Nothing
                Dim startIndex As Integer = 0
                Do
                    ' search text
                    textRegion = page.TextRegion.FindText(textSearchEngine__1, startIndex, False)
                    ' if found text is not empty
                    If textRegion IsNot Nothing Then
                        ' add result
                        textRegions.Add(textRegion)
                        ' shitf start index
                        startIndex += textRegion.TextContent.Length
            
                    End If
                Loop While textRegion IsNot Nothing
            
                Return textRegions.ToArray()
            End Function
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Outputs the information about digits in content of PDF document.
            /// &lt;/summary&gt;
            /// &lt;param name="document"&gt;PDF document where digits should be searched.&lt;/param&gt;
            public void SearchDigitsInTextOfPdfDocument(PdfDocument document)
            {
                Console.WriteLine("Searching the digits in text of PDF document is started.");
            
                for (int i = 0; i &lt; document.Pages.Count; i++)
                {
                    TextRegion[] textRegions = SimpleDigitsSearchOnPdfPage(document.Pages[i], new Regex(@"\d+"));
                    if (textRegions != null)
                    {
                        for (int j = 0; j &lt; textRegions.Length; j++)
                        {
                            Console.WriteLine(string.Format("- Text={0}, Rectangle={1}",
                                textRegions[j].TextContent,
                                textRegions[j].Rectangle));
                        }
                    }
                }
            
                Console.WriteLine("Searching the digits in text of PDF document is finished.");
            }
            
            /// &lt;summary&gt;
            /// Searches a text, defined with regular expression, on PDF page.
            /// &lt;/summary&gt;
            /// &lt;param name="page"&gt;PDF page where text should be searched.&lt;/param&gt;
            /// &lt;param name="regex"&gt;Regular expression which defines the searching text.&lt;/param&gt;
            /// &lt;returns&gt;An array of text regions on PDF page where text was found.&lt;/returns&gt;
            public TextRegion[] SimpleDigitsSearchOnPdfPage(PdfPage page, Regex regex)
            {
                List&lt;TextRegion&gt; textRegions = new List&lt;TextRegion&gt;();
                TextSearchEngine textSearchEngine = TextSearchEngine.Create(regex);
            
                TextRegion textRegion = null;
                int startIndex = 0;
                do
                {
                    // search text
                    textRegion = page.TextRegion.FindText(textSearchEngine, ref startIndex, false);
                    // if found text is not empty
                    if (textRegion != null)
                    {
                        // add result
                        textRegions.Add(textRegion);
                        // shitf start index
                        startIndex += textRegion.TextContent.Length;
                    }
            
                } while (textRegion != null);
            
                return textRegions.ToArray();
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextRegion.FindText(Vintasoft.Imaging.Pdf.Content.TextExtraction.TextSearchEngine,System.Int32@,System.Boolean)">
            <summary>
            Finds the text in this text region using specified <see cref="T:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextSearchEngine" />.
            </summary>
            <param name="searchEngine">Text search engine that determines which text to find and
            how to find the text.</param>
            <param name="startIndex">Zero-based start position in text region.</param>
            <param name="searchUp">Indicates that text must be searched
            from current position in text region to the beginning of text region.</param>
            <returns>
            <see cref="T:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextRegion" /> if text is found;
            otherwise, <b>null</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextRegion.ToString">
            <summary>
            Returns the string representation of this <see cref="T:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextRegion" />.
            </summary>
            <returns>String representation of this <see cref="T:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextRegion" />.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextRegion.Rectangle">
            <summary>
            Gets the rectangle of this region.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextRegion.Symbols">
            <summary>
            Gets a text symbols of this region.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextRegion.Lines">
            <summary>
            Gets a lines of text symbols of this region.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextRegion.IsEmpty">
            <summary>
            Gets a value indicating whether <see cref="T:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextRegion" /> does not have symbols.
            </summary>
            <value>
            <b>true</b> - page does not have symbols;
            <b>false</b> - page has symbols.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextRegion.TextContent">
            <summary>
            Gets a text content of this region.
            </summary>
            <example>This example shows how to get all text content of PDF page.
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Returns all text of PDF page.
            ''' &lt;/summary&gt;
            ''' &lt;param name="page"&gt;PDF page.&lt;/param&gt;
            ''' &lt;returns&gt;Text content of PDF page.&lt;/returns&gt;
            Public Shared Function GetAllTextPage(page As PdfPage) As String
                Return page.TextRegion.TextContent
            End Function
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Returns all text of PDF page.
            /// &lt;/summary&gt;
            /// &lt;param name="page"&gt;PDF page.&lt;/param&gt;
            /// &lt;returns&gt;Text content of PDF page.&lt;/returns&gt;
            public static string GetAllTextPage(PdfPage page)
            {
                return page.TextRegion.TextContent;
            }
            </code>
            </example>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextRegion.FormattedTextContent">
            <summary>
            Gets a formatted text content.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextRegion.SelectionRegions">
            <summary>
            Gets an array of selection regions for this region.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextRegionSymbol">
            <summary>
            Provides information about text symbol of <see cref="T:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextRegion" />.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextRegionSymbol.ToString">
            <summary>
            Returns the string representation of this <see cref="T:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextRegionSymbol" />.
            </summary>
            <returns>String representation of this <see cref="T:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextRegionSymbol" />.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextRegionSymbol.TextSymbol">
            <summary>
            Gets the <see cref="P:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextRegionSymbol.TextSymbol" />.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextRegionSymbol.FontSize">
            <summary>
            Gets the font size.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextRegionSymbol.Region">
            <summary>
            Gets the <see cref="T:Vintasoft.Imaging.Pdf.RegionF" /> of this symbol.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextRegionSymbol.SelectionRegion">
            <summary>
            Gets the selection region of this symbol.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextRegionSymbol.Color">
            <summary>
            Gets the <see cref="P:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextRegionSymbol.Color" /> of this symbol.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextSymbol">
            <summary>
            Provides information about text symbol.
            </summary>
            <remarks>
            See also <see cref="T:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextRegionSymbol" /> class.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextSymbol.GetAsGraphicsPath">
            <summary>
            Returns a text symbol as <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.
            </summary>
            <returns>A text symbol as <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.</returns>
            <remarks>
            Graphics path of symbol defined in font coordinate space ((1/72 inch)*1000).
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextSymbol.GetFontSymbols(Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFont)">
            <summary>
            Returns an array that contains all symbols of specified font.
            </summary>
            <param name="font">A PDF font.</param>
            <returns>An array that contains all symbols of specified font.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextSymbol.Font">
            <summary>
            Gets the font associated with this symbol.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextSymbol.SymbolCode">
            <summary>
            Gets a unicode symbol code.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextSymbol.Symbol">
            <summary>
            Gets the text symbol.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextSymbol.HasGlyph">
            <summary>
            Gets a value indicating whether a symbol has glyph.
            </summary>
            <value>
            <b>true</b> if symbol has glyph; otherwise, <b>false</b>.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationHighlightingMode">
            <summary>
            Defines available highlighting modes of 
            <see cref="T:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfLinkAnnotation" /> or <see cref="T:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfWidgetAnnotation" />.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationHighlightingMode.Default">
            <summary>
            Default value.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationHighlightingMode.None">
            <summary>
            No highlighting.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationHighlightingMode.Invert">
            <summary>
            Invert the contents of the annotation rectangle (default).
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationHighlightingMode.Outline">
            <summary>
            Invert the annotation's border.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationHighlightingMode.Push">
            <summary>
            Display the annotation as if it were being pushed 
            below the surface of the page.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationFlags">
            <summary>
            Specifies various characteristics of the annotation.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationFlags.None">
            <summary>
            No flags.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationFlags.Invisible">
            <summary>
            If set, do not display the annotation if it does not belong to 
            one of the standard annotation types and no annotation handler is available.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationFlags.Hidden">
            <summary>
            (PDF 1.2) 
            If set, do not display or print the annotation or allow it to 
            interact with the user, regardless of its annotation type or whether an 
            annotation handler is available.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationFlags.Print">
            <summary>
            (PDF 1.2)
            If set, print the annotation when the page is printed. If clear, never 
            print the annotation, regardless of whether it is displayed on the screen. 
            This can be useful, for example, for annotations representing interactive 
            pushbuttons, which would serve no meaningful purpose on the printed page.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationFlags.NoZoom">
            <summary>
            (PDF 1.3) 
            If set, do not scale the annotation's appearance to match the
            magnification of the page. The location of the annotation on the page 
            (defined by the upper-left corner of its annotation rectangle) remains 
            fixed, regardless of the page magnification.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationFlags.NoRotate">
            <summary>
            (PDF 1.3) 
            If set, do not rotate the annotation's appearance to match the 
            rotation of the page. The upper-left corner of the annotation rectangle
            remains in a fixed location on the page, regardless of the page rotation.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationFlags.NoView">
            <summary>
            (PDF 1.3) 
            If set, do not display the annotation on the screen or allow 
            it to interact with the user. The annotation may be printed (depending 
            on the setting of the Print flag) but should be considered hidden for 
            purposes of on-screen display and user interaction.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationFlags.ReadOnly">
            <summary>
            (PDF 1.3) 
            If set, do not allow the annotation to interact with the user. 
            The annotation may be displayed or printed (depending on the settings of 
            the NoView and Print flags) but should not respond to mouse clicks or change 
            its appearance in response to mouse motions.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationFlags.Locked">
            <summary>
            (PDF 1.4) 
            If set, do not allow the annotation to be deleted or its properties
            (including position and size) to be modified by the user. However, this flag 
            does not restrict changes to the annotation's contents, such as the value of a 
            form field.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationFlags.ToggleNoView">
            <summary>
            (PDF 1.5) 
            If set, invert the interpretation of the NoView flag for certain events.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationFlags.LockedContents">
            <summary>
            (PDF 1.7) 
            If set, do not allow the contents of the annotation to be modified 
            by the user. This flag does not restrict deletion of the annotation or changes
            to other annotation properties, such as position and size.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationList">
            <summary>
            Represents a collection of <see cref="T:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotation" /> objects.
            </summary>
            <example>
            Here is an example that demonstrates how to delete annotation from PDF page:
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Removes the first annotation from PDF page
            ''' if it is a link annotation.
            ''' &lt;/summary&gt;
            ''' &lt;param name="page"&gt;The page of PDF document.&lt;/param&gt;
            Public Shared Function RemoveAnnotationFromPdfPage(page As PdfPage) As Boolean
                ' if annotations exist
                If page.Annotations IsNot Nothing AndAlso page.Annotations.Count &gt; 0 Then
                    ' if contents of the first annotation if it is a link
                    If TypeOf page.Annotations(0) Is PdfLinkAnnotation Then
                        ' remove the annotation
                        page.Annotations.RemoveAt(0)
                        Return True
                    End If
                End If
            
                Return False
            End Function
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Removes the first annotation from PDF page
            /// if it is a link annotation.
            /// &lt;/summary&gt;
            /// &lt;param name="page"&gt;The page of PDF document.&lt;/param&gt;
            public static bool RemoveAnnotationFromPdfPage(PdfPage page)
            {
                // if annotations exist
                if (page.Annotations != null &amp;&amp; page.Annotations.Count &gt; 0)
                {
                    // if contents of the first annotation if it is a link
                    if (page.Annotations[0] is PdfLinkAnnotation)
                    {
                        // remove the annotation
                        page.Annotations.RemoveAt(0);
                        return true;
                    }
                }
            
                return false;
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationList.#ctor(Vintasoft.Imaging.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationList" /> class.
            </summary>
            <param name="document">PDF document.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationList.Insert(System.Int32,Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotation)">
            <summary>
            Inserts an element into the <see cref="T:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationList" />
            at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item" />
            should be inserted.</param>
            <param name="item">The object to insert. The value can be null for reference types.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index" /> is less than 0.-or-<paramref name="index" /> 
            is greater than Count.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="item" /> is null.</exception>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationAppearances">
            <summary>
            Represents the appearances specifying how the annotation 
            is presented visually on the page.
            </summary>
            <remarks>
            Appearances enable the annotation to be presented visually
            in different ways to reflect its interactions with the user. Each 
            appearance is a form resurce: a self-contained content stream to 
            be rendered inside the annotation rectangle.<br />
            <br />
            An annotation can define as many as three separate appearances:
            <ul>
            <li>The "normal" appearance is used when the annotation is not interacting 
            with the user. This appearance is also used for printing the annotation.</li>
            <li>The "rollover" appearance is used when the user moves the cursor into 
            the annotation's active area without pressing the mouse button.</li>
            <li>The "down" appearance is used when the mouse button is pressed or held
            down within the annotation's active area.</li>
            Each entry may contain either a single appearance 
            (<see cref="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationAppearances.Normal" />, <see cref="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationAppearances.Rollover" />, <see cref="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationAppearances.Down" />)
            or an appearance subdictionary 
            (<see cref="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationAppearances.NormalStates" />, <see cref="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationAppearances.RolloverStates" />, <see cref="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationAppearances.DownStates" />). 
            In the latter case, the subdictionary defines multiple 
            appearances corresponding to different appearance states of the annotation.
            </ul>
            </remarks>    
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationAppearances.#ctor(Vintasoft.Imaging.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationAppearances" /> class.
            </summary>
            <param name="document">Parent PDF document.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationAppearances.GetAllAppearances">
            <summary>
            Returns all appearances, as array of FormXObjects, of this annotation appearances.
            </summary>
            <returns>
            All appearances, as array of FormXObjects, of this annotation appearances.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationAppearances.Normal">
            <summary>
            Gets or sets an annotation "normal" appearance.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationAppearances.NormalStates">
            <summary>
            Gets or sets an annotation "normal" appearance states that defines multiple
            appearances corresponding to different appearance states 
            of the annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationAppearances.Rollover">
            <summary>
            Gets or sets an annotation "rollover" appearance.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationAppearances.RolloverStates">
            <summary>
            Gets or sets an annotation "rollover" appearance states that defines multiple
            appearances corresponding to different appearance states 
            of the annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationAppearances.Down">
            <summary>
            Gets or sets an annotation "down" appearance.
            </summary>
            <seealso cref="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfWidgetAnnotation.HighlightingMode" />
            <seealso cref="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfLinkAnnotation.HighlightingMode" />
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationAppearances.DownStates">
            <summary>
            Gets or sets an annotation "down" appearance states that defines multiple
            appearances corresponding to different appearance states 
            of the annotation.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationBorderStyle">
            <summary>
            Stores information about border style of PDF annotation.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationBorderStyle.#ctor(Vintasoft.Imaging.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationBorderStyle" /> class.
            </summary>
            <param name="document">PDF document.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationBorderStyle.Width">
            <summary>
            Gets or sets a width of border line in points (user units).
            </summary>
            <value>
            Default value is <b>1</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationBorderStyle.DashArray">
            <summary>
            Gets or sets a dash array of border line.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationBorderStyle.Style">
            <summary>
            Gets or sets the border style.
            </summary>
            <value>Default value is <see cref="T:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotationBorderStyleType" />.Solid.</value>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfCircleAnnotation">
            <summary>
            Represents a PDF annotation that displays a circle.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfCircleAnnotation.#ctor(Vintasoft.Imaging.Pdf.Tree.PdfPage)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfCircleAnnotation" /> class.
            </summary>        
            <param name="page">The parent page of new annotation.</param>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfFreeTextAnnotation">
            <summary>
            Represents a PDF annotation that displays
            an editable text area and a leader polyline used to point to the area of PDF page.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfRectangleAnnotation">
            <summary>
            Represents a PDF annotation that displays a rectangle.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfRectangleAnnotation.#ctor(Vintasoft.Imaging.Pdf.Tree.PdfPage)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfRectangleAnnotation" /> class.
            </summary>        
            <param name="page">The parent page of new annotation.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfFreeTextAnnotation.#ctor(Vintasoft.Imaging.Pdf.Tree.PdfPage)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfFreeTextAnnotation" /> class.
            </summary>        
            <param name="page">The parent page of new annotation.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfFreeTextAnnotation.Text">
            <summary>
            Gets or sets the text of annotation.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfLineAnnotation">
            <summary>
            Represents a PDF annotation that displays a line.
            </summary>
            <example>
            Here is an example that demonstrates how to create a line annotation and add it onto PDF page:
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Creates a Line annotation and adds it onto PDF page.
            ''' &lt;/summary&gt;
            ''' &lt;param name="pdfFilename"&gt;The filename of PDF document.&lt;/param&gt;
            Public Shared Sub AddLineAnnotationOntoPage(pdfFilename As String)
                ' open PDF document
                Using pdfDocument As New PdfDocument(pdfFilename)
                    ' get first page of the document
                    Dim page As PdfPage = pdfDocument.Pages(0)
                    ' create line annotation
                    Dim lineAnnotation As New PdfLineAnnotation(page)
                    ' set color of the annotation
                    lineAnnotation.Color = Color.Green
                    ' set rectangle of the annotation
                    lineAnnotation.Rectangle = page.CropBox
                    ' set start point of the annotation
                    lineAnnotation.StartPoint = New PointF(0, 0)
                    ' set end point of the annotation
                    lineAnnotation.EndPoint = New PointF(page.CropBox.Width, page.CropBox.Height)
                    ' create graphics for normal appearance
                    Using pdfGraphics As PdfGraphics = lineAnnotation.CreateNormalAppearanceGraphics()
                        ' draw appearance of the annotation
                        pdfGraphics.DrawLine(New PdfPen(Color.Green, 3F), 0, 0, lineAnnotation.Rectangle.Width, lineAnnotation.Rectangle.Height)
                    End Using
                    ' if there is no annotations
                    If page.Annotations Is Nothing Then
                        ' create collection of annotations of the page
                        page.Annotations = New PdfAnnotationList(pdfDocument)
                    End If
                    ' add the annotation to the collection
                    page.Annotations.Add(lineAnnotation)
                    ' save changes to the source
                    pdfDocument.SaveChanges()
                End Using
            End Sub
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Creates a Line annotation and adds it onto PDF page.
            /// &lt;/summary&gt;
            /// &lt;param name="pdfFilename"&gt;The filename of PDF document.&lt;/param&gt;
            public static void AddLineAnnotationOntoPage(string pdfFilename)
            {
                // open PDF document
                using (PdfDocument pdfDocument = new PdfDocument(pdfFilename))
                {
                    // get first page of the document
                    PdfPage page = pdfDocument.Pages[0];
                    // create line annotation
                    PdfLineAnnotation lineAnnotation = new PdfLineAnnotation(page);
                    // set color of the annotation
                    lineAnnotation.Color = Color.Green;
                    // set rectangle of the annotation
                    lineAnnotation.Rectangle = page.CropBox;
                    // set start point of the annotation
                    lineAnnotation.StartPoint = new PointF(0, 0);
                    // set end point of the annotation
                    lineAnnotation.EndPoint = new PointF(page.CropBox.Width, page.CropBox.Height);
                    // create graphics for normal appearance
                    using (PdfGraphics pdfGraphics = lineAnnotation.CreateNormalAppearanceGraphics())
                    {
                        // draw appearance of the annotation
                        pdfGraphics.DrawLine(new PdfPen(Color.Green, 3f),
                            0, 0, lineAnnotation.Rectangle.Width, lineAnnotation.Rectangle.Height);
                    }
                    // if there is no annotations
                    if (page.Annotations == null)
                        // create collection of annotations of the page
                        page.Annotations = new PdfAnnotationList(pdfDocument);
                    // add the annotation to the collection
                    page.Annotations.Add(lineAnnotation);
                    // save changes to the source
                    pdfDocument.SaveChanges();
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfLineAnnotation.#ctor(Vintasoft.Imaging.Pdf.Tree.PdfPage)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfLineAnnotation" /> class.
            </summary>        
            <param name="page">The parent page of new annotation.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfLineAnnotation.StartPoint">
            <summary>
            Gets or sets a start line point of annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfLineAnnotation.EndPoint">
            <summary>
            Gets or sets an end line point of annotation.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfLinkAnnotation">
            <summary>
            Represents a PDF annotation that displays a link.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfLinkAnnotation.#ctor(Vintasoft.Imaging.Pdf.Tree.PdfPage)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfLinkAnnotation" /> class.
            </summary>        
            <param name="page">The parent page of new annotation.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfLinkAnnotation.Action">
            <summary>
            Gets or sets an action to be performed when the link annotation is activated.
            </summary>
            <remarks>
            This property is obsolete, use the <see cref="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfAnnotation.ActivateAction" /> property instead.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfLinkAnnotation.Destination">
            <summary>
            The destination to be displayed when this link is activated.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfLinkAnnotation.HighlightingMode">
            <summary>
            Gets or sets the annotation's highlighting mode, the visual effect to be used when the 
            mouse button is pressed or held down inside its active area.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfLinkAnnotation.QuadPoints">
            <summary>
            Gets or sets an array of 4 x n points specifying the coordinates 
            of nquadrilaterals in default user space that comprise the region in which
            the link should be activated. 
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfPolyAnnotationBase">
            <summary>
            Provides the base class that represents a point-based (polyline, polygon) PDF annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfPolyAnnotationBase.Points">
            <summary>
            Gets or sets an array of points representing the coordinates of each vertex, in 
            default user space.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfPolygonAnnotation">
            <summary>
            Represents a PDF annotation that displays a polygon.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfPolygonAnnotation.#ctor(Vintasoft.Imaging.Pdf.Tree.PdfPage)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfPolygonAnnotation" /> class.
            </summary>        
            <param name="page">The parent page of new annotation.</param>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfPolylineAnnotation">
            <summary>
            Represents a PDF annotation that displays a polyline.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfPolylineAnnotation.#ctor(Vintasoft.Imaging.Pdf.Tree.PdfPage)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfPolylineAnnotation" /> class.
            </summary>        
            <param name="page">The parent page of new annotation.</param>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfRubberStampAnnotation">
            <summary>
            Represents a PDF annotation that displays a rubber stamp.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfRubberStampAnnotation.#ctor(Vintasoft.Imaging.Pdf.Tree.PdfPage)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfRubberStampAnnotation" /> class.
            </summary>        
            <param name="page">The parent page of new annotation.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfRubberStampAnnotation.Text">
            <summary>
            Gets or sets the text of annotation.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfTextAnnotation">
            <summary>
            Represents a PDF annotation that displays a "sticky note"
            attached to a point in the PDF document. 
            </summary>    
            <remarks>
            When closed, the annotation appears as an icon; when open, it displays a pop-up 
            window containing the text of the note in a font and size chosen by the viewer application.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfTextAnnotation.#ctor(Vintasoft.Imaging.Pdf.Tree.PdfPage)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfTextAnnotation" /> class.
            </summary>        
            <param name="page">The parent page of new annotation.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfTextAnnotation.Open">
            <summary>
            Gets or sets a value indicating whether the annotation should initially be displayed open. 
            </summary>
            <value>
            Default value: <b>false</b> (closed).
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.Annotations.PdfTextAnnotation.StickName">
            <summary>
            Gets or sets the name of an icon to be used in displaying the annotation.
            </summary>
            <value>
            Default value: Note.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.PdfBookmark">
            <summary>
            Provides information about bookmark of PDF document.
            </summary>
            <remarks>
            A PDF document may optionally display a document bookmarks on the screen, 
            allowing the user to navigate interactively from one part of the document 
            to another. The bookmark consists of a tree-structured hierarchy of bookmark 
            items, which serve as a visual table of contents to display the
            document's structure to the user.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfBookmark.#ctor(Vintasoft.Imaging.Pdf.PdfDocument)">
            <summary>
             Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfBookmark" /> class.
            </summary>
            <param name="document">Parent document of this bookmark.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfBookmark.ToString">
            <summary>
            Returns a String that represents this bookmark.
            </summary>
            <returns>Bookmark Title</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfBookmark.Remove">
            <summary>
            Removes this bookmark from the <see cref="P:Vintasoft.Imaging.Pdf.Tree.PdfBookmark.ParentBookmarks" />.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfBookmark.Move(Vintasoft.Imaging.Pdf.Tree.PdfBookmarkCollection)">
            <summary>
            Moves this bookmark to the specified bookmark collection.
            </summary>
            <param name="bookmarks">The bookmark collection.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfBookmark.IsExpanded">
            <summary>
            Gets or sets a value that indicates whether the bookmark is expanded.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfBookmark.Title">
            <summary>
            The text to be displayed on the screen for this bookmark.
            </summary>
            <example>
            Here is an example that demonstrates how to change text of bookmark:
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Changes title of the first bookmark of PDF document.
            ''' &lt;/summary&gt;
            ''' &lt;param name="pdfFilename"&gt;The filename of PDF document.&lt;/param&gt;
            Public Shared Sub ChangeFirstBookmarkTitle(pdfFilename As String)
                ' open PDF document
                Using document As New PdfDocument(pdfFilename)
                    ' get the first bookmark of PDF document
                    Dim bookmark As PdfBookmark = document.Bookmarks(0)
                    ' change title of bookmark
                    bookmark.Title = "First bookmark"
            
                    ' save changes to a file
                    document.SaveChanges()
                End Using
            End Sub
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Changes title of the first bookmark of PDF document.
            /// &lt;/summary&gt;
            /// &lt;param name="pdfFilename"&gt;The filename of PDF document.&lt;/param&gt;
            public static void ChangeFirstBookmarkTitle(string pdfFilename)
            {
                // open PDF document
                using (PdfDocument document = new PdfDocument(pdfFilename))
                {
                    // get the first bookmark of PDF document
                    PdfBookmark bookmark = document.Bookmarks[0];
                    // change title of bookmark
                    bookmark.Title = "First bookmark";
            
                    // save changes to a file
                    document.SaveChanges();
                }
            }
            </code>
            </example>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfBookmark.ParentBookmark">
            <summary>
            Gets parent bookmark.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfBookmark.ParentBookmarks">
            <summary>
            Gets parent bookmarks.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfBookmark.ChildBookmarks">
            <summary>
            Gets a <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfBookmarkCollection" /> that contains the first-level
            child bookmarks of this bookmark.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfBookmark.Color">
            <summary>
            Color to be used for the bookmark entry's text.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfBookmark.Flags">
            <summary>
            A set of flags specifying style characteristics for displaying the
            bookmark item's text.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfBookmark.Destination">
            <summary>
            The destination to be displayed when this bookmark is activated.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfBookmark.Action">
            <summary>
            Gets or sets an action to be performed when this bookmark is activated.
            </summary>
            <remarks>
            Not permitted if a <see cref="P:Vintasoft.Imaging.Pdf.Tree.PdfBookmark.Destination" /> property is set.
            </remarks>
            <example>
            Here is an example that demonstrates how to change an action which have to be performed
            when bookmark becomes active:
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Changes action of the first bookmark of PDF document.
            ''' &lt;/summary&gt;
            ''' &lt;param name="pdfFilename"&gt;The filename of PDF document.&lt;/param&gt;
            Public Shared Sub ChangeFirstBookmarkAction(pdfFilename As String)
                ' open PDF document
                Using document As New PdfDocument(pdfFilename)
                    ' create goto action to the last page of PDF document
                    Dim dest As New PdfDestinationFit(document, document.Pages(document.Pages.Count - 1))
                    Dim newAction As New PdfGotoAction(dest)
            
                    ' get the first bookmark of PDF document
                    Dim bookmark As PdfBookmark = document.Bookmarks(0)
                    ' change the action of bookmark
                    bookmark.Action = newAction
            
                    ' save changes to a file
                    document.SaveChanges()
                End Using
            End Sub
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Changes action of the first bookmark of PDF document.
            /// &lt;/summary&gt;
            /// &lt;param name="pdfFilename"&gt;The filename of PDF document.&lt;/param&gt;
            public static void ChangeFirstBookmarkAction(string pdfFilename)
            {
                // open PDF document
                using (PdfDocument document = new PdfDocument(pdfFilename))
                {
                    // create goto action to the last page of PDF document
                    PdfDestinationFit dest = new PdfDestinationFit(document, document.Pages[document.Pages.Count - 1]);
                    PdfGotoAction newAction = new PdfGotoAction(dest);
                    
                    // get the first bookmark of PDF document
                    PdfBookmark bookmark = document.Bookmarks[0];
                    // change the action of bookmark
                    bookmark.Action = newAction;
            
                    // save changes to a file
                    document.SaveChanges();
                }
            }
            </code>
            </example>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.PdfBookmarkCollection">
            <summary>
            Represents a PdfBookmark collection.
            </summary>
            <example>
            Here is an example that shows how to find bookmark by bookmark name:
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Finds the bookmark.
            ''' &lt;/summary&gt;
            ''' &lt;param name="document"&gt;The document.&lt;/param&gt;
            ''' &lt;param name="bookmarkTitle"&gt;The title of bookmark.&lt;/param&gt;
            Public Function FindBookmark(document As PdfDocument, bookmarkTitle As String) As PdfBookmark
                Return FindBookmark(document.Bookmarks, bookmarkTitle)
            End Function
            
            ''' &lt;summary&gt;
            ''' Finds the bookmark.
            ''' &lt;/summary&gt;
            ''' &lt;param name="bookmarks"&gt;The bookmarks.&lt;/param&gt;
            ''' &lt;param name="bookmarkTitle"&gt;The title of bookmark.&lt;/param&gt;
            Private Function FindBookmark(bookmarks As PdfBookmarkCollection, bookmarkTitle As String) As PdfBookmark
                If bookmarks Is Nothing Then
                    Return Nothing
                End If
            
                For i As Integer = 0 To bookmarks.Count - 1
                    If bookmarks(i).Title = bookmarkTitle Then
                        Return bookmarks(i)
                    End If
            
                    Dim result As PdfBookmark = FindBookmark(bookmarks(i).ChildBookmarks, bookmarkTitle)
                    If result IsNot Nothing Then
                        Return result
                    End If
                Next
            
                Return Nothing
            End Function
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Finds the bookmark.
            /// &lt;/summary&gt;
            /// &lt;param name="document"&gt;The document.&lt;/param&gt;
            /// &lt;param name="bookmarkTitle"&gt;The title of bookmark.&lt;/param&gt;
            public PdfBookmark FindBookmark(PdfDocument document, string bookmarkTitle)
            {
                return FindBookmark(document.Bookmarks, bookmarkTitle);
            }
            
            /// &lt;summary&gt;
            /// Finds the bookmark.
            /// &lt;/summary&gt;
            /// &lt;param name="bookmarks"&gt;The bookmarks.&lt;/param&gt;
            /// &lt;param name="bookmarkTitle"&gt;The title of bookmark.&lt;/param&gt;
            private PdfBookmark FindBookmark(PdfBookmarkCollection bookmarks, string bookmarkTitle)
            {
                if (bookmarks == null)
                    return null;
            
                for (int i = 0; i &lt; bookmarks.Count; i++)
                {
                    if (bookmarks[i].Title == bookmarkTitle)
                        return bookmarks[i];
            
                    PdfBookmark result = FindBookmark(bookmarks[i].ChildBookmarks, bookmarkTitle);
                    if (result != null)
                        return result;
                }
            
                return null;
            }
            </code>
            </example>
            <seealso cref="M:Vintasoft.Imaging.Pdf.Tree.PdfBookmark.Remove" />
            <seealso cref="M:Vintasoft.Imaging.Pdf.Tree.PdfBookmark.Move(Vintasoft.Imaging.Pdf.Tree.PdfBookmarkCollection)" />    
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfBookmarkCollection.#ctor(Vintasoft.Imaging.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfBookmarkCollection" /> class.
            </summary>
            <param name="document">Parent PDF document.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfBookmarkCollection.IndexOf(Vintasoft.Imaging.Pdf.Tree.PdfBookmark)">
            <summary>
            Determines the index of a specific bookmark in the collection.
            </summary>
            <param name="item">The bookmark to locate in the collection.</param>
            <returns>The index of bookmark if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfBookmarkCollection.Insert(System.Int32,Vintasoft.Imaging.Pdf.Tree.PdfBookmark)">
            <summary>
            Inserts an bookmark to the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which bookmark should be inserted.</param>
            <param name="value">The bookmark to insert into the collection.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfBookmarkCollection.Add(Vintasoft.Imaging.Pdf.Tree.PdfBookmark)">
            <summary>
            Adds a bookmark to the collection.
            </summary>
            <param name="item">The bookmark to add to the collection.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfBookmarkCollection.RemoveAt(System.Int32)">
            <summary>
            Removes bookmark at the specified index.
            </summary>
            <param name="index">The zero-based index of bookmark to remove.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfBookmarkCollection.Contains(Vintasoft.Imaging.Pdf.Tree.PdfBookmark)">
            <summary>
            Determines whether the collection contains a specific value. 
            </summary>
            <param name="item">The bookmark to locate in the collection. </param>
            <returns><b>true</b> if the bookmark is found in the collection; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfBookmarkCollection.CopyTo(Vintasoft.Imaging.Pdf.Tree.PdfBookmark[],System.Int32)">
            <summary>
            Copies the elements of the collection to an Array,
            starting at a particular Array index. 
            </summary>
            <param name="array">The one-dimensional Array
            that is the destination of the elements copied
            from collection. The Array must have zero-based
            indexing.</param>
            <param name="arrayIndex">The zero-based index
            in array at which copying begins.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfBookmarkCollection.Remove(Vintasoft.Imaging.Pdf.Tree.PdfBookmark)">
            <summary>
            Removes the first occurrence of a specific object
            from the collection. 
            </summary>
            <param name="item">The bookmark to remove from
            the collection.</param>
            <returns><b>true</b> if bookmark is removed
            successfully; <b>false</b> otherwise.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfBookmarkCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
            <example>
            Here is an example that demonstrates how to remove all bookmarks from PDF document:
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Removes all bookmarks of PDF document.
            ''' &lt;/summary&gt;
            ''' &lt;param name="pdfFilename"&gt;The filename of PDF document.&lt;/param&gt;
            Public Shared Sub RemoveAllBookmarks(pdfFilename As String)
                ' open PDF document
                Using document As New PdfDocument(pdfFilename)
                    ' get the collection of bookmark of PDF document
                    Dim bookmarks As PdfBookmarkCollection = document.Bookmarks
            
                    ' if PDF document has bookmarks
                    If bookmarks IsNot Nothing Then
                        ' clear bookmarks of PDF document
                        bookmarks.Clear()
                    End If
            
                    ' save changes to a file
                    document.SaveChanges()
                End Using
            End Sub
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Removes all bookmarks of PDF document.
            /// &lt;/summary&gt;
            /// &lt;param name="pdfFilename"&gt;The filename of PDF document.&lt;/param&gt;
            public static void RemoveAllBookmarks(string pdfFilename)
            {
                // open PDF document
                using (PdfDocument document = new PdfDocument(pdfFilename))
                {
                    // get the collection of bookmark of PDF document
                    PdfBookmarkCollection bookmarks = document.Bookmarks;
            
                    // if PDF document has bookmarks
                    if (bookmarks != null)
                        // clear bookmarks of PDF document
                        bookmarks.Clear();
            
                    // save changes to a file
                    document.SaveChanges();
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfBookmarkCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An IEnumerator object that can be used
            to iterate through the collection.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfBookmarkCollection.Item(System.Int32)">
            <summary>
            Gets or sets the bookmark at the specified index.
            </summary>
            <param name="index">The zero-based index of the bookmark to get or set.</param>
            <returns>The bookmark at the specified index.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfBookmarkCollection.Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfBookmarkCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.PdfBookmarkFlags">
            <summary>
            Specifies available bookmark flags.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.PdfBookmarkFlags.None">
            <summary>
            No flags.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.PdfBookmarkFlags.Italic">
            <summary>
            Display the item in italic.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.PdfBookmarkFlags.Bold">
            <summary>
            Display the item in bold.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.PdfDocumentViewMode">
            <summary>
            Specifies how the document should be displayed when opened.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.PdfDocumentViewMode.Undefined">
            <summary>
            Undefined.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.PdfDocumentViewMode.UseNone">
            <summary>
            Neither document outline nor thumbnail images visible.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.PdfDocumentViewMode.UseOutlines">
            <summary>
            Document outline visible.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.PdfDocumentViewMode.UseThumbs">
            <summary>
            Thumbnail images visible.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.PdfDocumentViewMode.FullScreen">
            <summary>
            Full-screen mode, with no menu bar, window controls,
            or any other window visible.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.PdfDocumentViewMode.UseOC">
            <summary>
            Optional content group panel visible. Available
            since version 1.5 of PDF format.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.PdfDocumentViewMode.UseAttachments">
            <summary>
            Attachments panel visible. Available since version
            1.6 of PDF format.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.PdfActionType">
            <summary>
            Specifies available types of PDF actions.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.PdfActionType.Unsupported">
            <summary>
            Unsupported.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.PdfActionType.GoTo">
            <summary>
            Go to a destination in the current document.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.PdfActionType.Launch">
            <summary>
            Launch an application, usually to open a file.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.PdfActionType.URI">
            <summary>
            Resolve a uniform resource identifier.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.PdfActionType.SubmitForm">
            <summary>
            (PDF 1.2) Send data to a Uniform Resource Locator.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.PdfActionType.ResetForm">
            <summary>
            (PDF 1.2) Set fields to their default values.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.PdfActionType.ImportData">
            <summary>
            (PDF 1.2) Import field values from a file.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.PdfActionType.JavaScript">
            <summary>
            (PDF 1.3) Execute a JavaScript script.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.PdfActionType.Hide">
            <summary>
            (PDF 1.2) Set an annotation's Hidden flag.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.PdfGotoAction">
            <summary>
            Defines a go-to action associated with PDF element (bookmark, link,...).
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfGotoAction.#ctor(Vintasoft.Imaging.Pdf.Tree.PdfDestinationBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfGotoAction" /> class.
            </summary>
            <param name="destination">The destination to jump to.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfGotoAction.Destination">
            <summary>
            Gets or sets the destination to jump to.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.PdfLaunchAction">
            <summary>
            Defines a launch action (can launch an application or open a document)
            associated with PDF element (bookmark, link,...).
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfLaunchAction.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfLaunchAction" /> class. 
            </summary>
            <param name="document">Parent document of this action.</param>
            <param name="winCommandLine">A string containing
            Windows-specific launch command line.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfLaunchAction.WinCommandLine">
            <summary>
            Gets or sets string containing Windows-specific launch command line.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.PdfDestinationType">
            <summary>
            Specifies available destination types.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.PdfDestinationType.XYZoom">
            <summary>
            Display the page designated by page, with the coordinates (left, top) 
            positioned at the upper-left corner of the window and the contents of 
            the page magnified by the factor zoom. A null value for any of the parameters 
            left, top, or zoom specifies that the current value of that parameter is to 
            be retained unchanged.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.PdfDestinationType.Fit">
            <summary>
            Display the page designated by page, with its contents magnified just enough
            to fit the entire page within the window both horizontally and vertically.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.PdfDestinationType.FitHorizontal">
            <summary>
            Display the page designated by page, with the vertical coordinate top positioned 
            at the top edge of the window and the contents of the page magnified just enough 
            to fit the entire width of the page within the window. A null value for top 
            specifies that the current value of that parameter is to be retained unchanged.<br />
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.PdfDestinationType.FitVertical">
            <summary>
            Display the page designated by page, with the horizontal coordinate left positioned
            at the left edge of the window and the contents of the page magnified just
            enough to fit the entire height of the page within the window. A null value 
            for left specifies that the current value of that parameter is to be retained 
            unchanged.<br />
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.PdfDestinationType.FitRectangle">
            <summary>
            Display the page designated by page, with its contents magnified just enough 
            to fit the rectangle specified by the coordinates left, bottom, right, and topentirely
            within the window both horizontally and vertically. If the required horizontal and vertical
            magnification factors are different, use the smaller of the two, centering the rectangle 
            within the window in the other dimension. A null value for any of the parameters may result
            in unpredictable behavior.<br />
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.PdfDestinationType.FitBBox">
            <summary>
            (PDF 1.1) 
            Display the page designated by page, with its contents magnified just enough to fit
            its bounding box entirely within the window both horizontally and vertically. If the 
            required horizontal and vertical magnification factors are different, use the smaller
            of the two, centering the bounding box within the window in the other dimension.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.PdfDestinationType.FitBBoxHorizontal">
            <summary>
            (PDF 1.1) Display the page designated by page, with the vertical coordinate top 
            positioned at the top edge of the window and the contents of the page magnified 
            just enough to fit the entire width of its bounding box within the window. A null 
            value for top specifies that the current value of that parameter is to be retained
            unchanged.<br /> 
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.PdfDestinationType.FitBBoxVertical">
            <summary>
            (PDF 1.1) Display the page designated by page, with the horizontal coordinate 
            left positioned at the left edge of the window and the contents of the page magnified 
            just enough to fit the entire height of its bounding box within the window. A null
            value for left specifies that the current value of that parameter is to be retained 
            unchanged.<br /> 
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.PdfDestinationBase">
            <summary>
            Provides the <b>abstract</b> base class for destinations. 
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfDestinationBase.Page">
            <summary>
            Gets or sets the page designated for this destination.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfDestinationBase.DestinationType">
            <summary>
            Gets a destination type.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.PdfDestinationXYZ">
            <summary>
            Destination that displays the page designated by page, with the coordinates (left, top) 
            positioned at the upper-left corner of the window and the contents of 
            the page magnified by the factor zoom. A null value for any of the parameters 
            left, top, or zoom specifies that the current value of that parameter is to 
            be retained unchanged. A zoom value of 0 has the same meaning as a null value.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfDestinationXYZ.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,Vintasoft.Imaging.Pdf.Tree.PdfPage)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfDestinationXYZ" /> class.
            </summary>
            <param name="document">Parent document of this destination.</param>
            <param name="page">Page of this destination.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfDestinationXYZ.Left">
            <summary>
            Gets or sets the x-coordinate of the left edge of this destination.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfDestinationXYZ.Top">
            <summary>
            Gets or sets the y-coordinate of the top edge of this destination.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfDestinationXYZ.Zoom">
            <summary>
            Gets or or sets zoom.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.PdfDestinationFit">
            <summary>
            Destination that displays designated by page, with its contents magnified
            just enough to fit the entire page within the window both horizontally
            and vertically.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfDestinationFit.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,Vintasoft.Imaging.Pdf.Tree.PdfPage)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfDestinationFit" /> class.        
            </summary>
            <param name="document">Parent document of this destination.</param>
            <param name="page">Page of this destination.</param>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.PdfDestinationFitHorizontal">
            <summary>
            Destination that displays the page designated by page, with the vertical
            coordinate top positioned at the top edge of the window and the contents
            of the page magnified just enough to fit the entire width of the page within
            the window. A null value for top specifies that the current value of that
            parameter is to be retained unchanged.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfDestinationFitHorizontal.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,Vintasoft.Imaging.Pdf.Tree.PdfPage)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfDestinationFitHorizontal" /> class.        
            </summary>
            <param name="document">Parent document of this destination.</param>
            <param name="page">Page of this destination.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfDestinationFitHorizontal.Top">
            <summary>
            Gets or sets the y-coordinate of the top edge of this destination.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.PdfDestinationFitVertical">
            <summary>
            Destination that displays the page designated by page, with the horizontal coordinate left positioned
            at the left edge of the window and the contents of the page magnified just
            enough to fit the entire height of the page within the window. A null value 
            for left specifies that the current value of that parameter is to be retained 
            unchanged.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfDestinationFitVertical.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,Vintasoft.Imaging.Pdf.Tree.PdfPage)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfDestinationFitVertical" /> class.        
            </summary>
            <param name="document">Parent document of this destination.</param>
            <param name="page">Page of this destination.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfDestinationFitVertical.Left">
            <summary>
            Gets or sets the x-coordinate of the left edge of this destination.
            </summary>        
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.PdfDestinationFitRectangle">
            <summary>
            Destination that displays the page designated by page, with its contents magnified just enough 
            to fit the rectangle specified by the coordinates left, bottom, right, and topentirely
            within the window both horizontally and vertically. If the required horizontal and vertical
            magnification factors are different, use the smaller of the two, centering the rectangle 
            within the window in the other dimension. A null value for any of the parameters may result
            in unpredictable behavior.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfDestinationFitRectangle.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,Vintasoft.Imaging.Pdf.Tree.PdfPage)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfDestinationFitRectangle" /> class.        
            </summary>
            <param name="document">Parent document of this destination.</param>
            <param name="page">Page of this destination.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfDestinationFitRectangle.Left">
            <summary>
            Gets or sets the x-coordinate of the left edge of this destination.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfDestinationFitRectangle.Bottom">
            <summary>
            Gets or sets the y-coordinate of the bottom edge of this destination.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfDestinationFitRectangle.Right">
            <summary>
            Gets or sets the x-coordinate of the right edge of this destination.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfDestinationFitRectangle.Top">
            <summary>
            Gets or sets the y-coordinate of the top edge of this destination.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.PdfDestinationFitB">
            <summary>
            Destination that displays the page designated by page, with its contents
            magnified just enough to fit its bounding box entirely within the window
            both horizontally and vertically. If the required horizontal and vertical
            magnification factors are different, use the smaller of the two, centering
            the bounding box within the window in the other dimension.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfDestinationFitB.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,Vintasoft.Imaging.Pdf.Tree.PdfPage)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfDestinationFitB" /> class.        
            </summary>
            <param name="document">Parent document of this destination.</param>
            <param name="page">Page of this destination.</param>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.PdfDestinationFitBHorizontal">
            <summary>
            Destination that displays the page designated by page, with the vertical
            coordinate top positioned at the top edge of the window and the contents
            of the page magnified just enough to fit the entire width of its bounding
            box within the window. A null value for top specifies that the current
            value of that parameter is to be retained unchanged.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfDestinationFitBHorizontal.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,Vintasoft.Imaging.Pdf.Tree.PdfPage)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfDestinationFitBHorizontal" />
            class.        
            </summary>
            <param name="document">Parent document of this destination.</param>
            <param name="page">Page of this destination.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfDestinationFitBHorizontal.Top">
            <summary>
            Gets or sets the y-coordinate of the top edge of this destination.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.PdfDestinationFitBVertical">
            <summary>
            Destination that displays the page designated by page, with the horizontal
            coordinate left positioned at the left edge of the window and the contents
            of the page magnified just enough to fit the entire height of its bounding
            box within the window. A null value for left specifies that the current value
            of that parameter is to be retained unchanged.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfDestinationFitBVertical.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,Vintasoft.Imaging.Pdf.Tree.PdfPage)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfDestinationFitBVertical" /> class.        
            </summary>
            <param name="document">Parent document of this destination.</param>
            <param name="page">Page of this destination.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfDestinationFitBVertical.Left">
            <summary>
            Gets or sets the x-coordinate of the left edge of this destination.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFont">
            <summary>
            Provides information about font of PDF document.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFont.StandardFontsCount">
            <summary>
            Defines a count of standard fonts.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFont.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFontType)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFont" /> class.
            </summary>
            <param name="document">PDF document.</param>
            <param name="subType">Type of PDF font.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFont.ConvertFontEncodingToUnicode(System.UInt64[])">
            <summary>
            Converts an array of symbols in the font encoding to a Unicode text string.
            </summary>
            <param name="charCodes">The character codes in font encoding.</param>
            <returns>Unicode text string.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFont.ConvertUnicodeToFontEncoding(System.String)">
            <summary>
            Converts a Unicode text string to an array of symbols in the font encoding.
            </summary>
            <param name="text">Unicode text string.</param>
            <returns>Character codes in font encoding.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFont.CreateStandardFont(Vintasoft.Imaging.Pdf.PdfDocument,Vintasoft.Imaging.Pdf.Tree.Fonts.StandardFontType)">
            <summary>
            Creates the standard font.
            </summary>
            <param name="document">Parent document of this font.</param>
            <param name="standardFontType">Standard font type.</param>
            <returns><see cref="T:Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFont" /> of specified <see cref="P:Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFont.StandardFontType" />.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFont.FontType">
            <summary>
            Gets the font type.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFont.IsFullyDefined">
            <summary>
            Gets a value indicating whether the font is fully defined,
            i.e. font has no references to other sources.
            </summary>
            <value>
            <b>true</b> - font does not have references to other sources;
            <b>false</b> - font has references to other sources;
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFont.StandardFontType">
            <summary>
            Gets the type of the standard font.
            </summary>
            <seealso cref="M:Vintasoft.Imaging.Pdf.PdfFontManager.GetStandardFont(Vintasoft.Imaging.Pdf.Tree.Fonts.StandardFontType)" />
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFont.FontName">
            <summary>
            Gets the font name.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFont.FontProgramResource">
            <summary>
            Gets a <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfResource" /> instance that contains the font program.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.Fonts.StandardFontType">
            <summary>
            Specifies names of standard Type 1 fonts.
            </summary>
            <remarks>
            The names of 14 Type 1 fonts, known as the "standard 14 fonts".<br />
            <br />
            <b>Note:</b> Beginning with PDF 1.5, the special treatment given 
            to the standard 14 fonts is deprecated. All fonts used in a PDF
            document should be represented using a complete font descriptor. 
            For backwards capability, viewer applications must still provide 
            the special treatment identified for the standard 14 fonts.
            </remarks>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.Fonts.StandardFontType.NotStandard">
            <summary>
            This font is not standard.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.Fonts.StandardFontType.TimesRoman">
            <summary>
            Times−Roman font.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.Fonts.StandardFontType.TimesBold">
            <summary>
            Times−Bold font.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.Fonts.StandardFontType.TimesItalic">
            <summary>
            Times−Italic font.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.Fonts.StandardFontType.TimesBoldItalic">
            <summary>
            Times−BoldItalic font.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.Fonts.StandardFontType.Helvetica">
            <summary>
            Helvetica font.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.Fonts.StandardFontType.HelveticaBold">
            <summary>
            Helvetica-Bold font.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.Fonts.StandardFontType.HelveticaOblique">
            <summary>
            Helvetica-Oblique font.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.Fonts.StandardFontType.HelveticaBoldOblique">
            <summary>
            Helvetica-BoldOblique font.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.Fonts.StandardFontType.Courier">
            <summary>
            Courier font.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.Fonts.StandardFontType.CourierBold">
            <summary>
            Courier-Bold font.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.Fonts.StandardFontType.CourierOblique">
            <summary>
            Courier-Oblique font.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.Fonts.StandardFontType.CourierBoldOblique">
            <summary>
            Courier-BoldOblique font.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.Fonts.StandardFontType.Symbol">
            <summary>
            Symbol font.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.Fonts.StandardFontType.ZapfDingbats">
            <summary>
            ZapfDingbats font.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFontType">
            <summary>
            Specifies available types of the PDF fonts.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFontType.Undefined">
            <summary>
            Undefined.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFontType.Type0">
            <summary>
            A composite font — a font composed of glyphs from
            a descendant CIDFont.
            This type is available since PDF 1.2.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFontType.Type1">
            <summary>
            A font that defines glyphs using
            Type 1 font technology.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFontType.MMType1">
            <summary>
            A multiple master font — an extension of the Type 1
            font that allows the generation of a wide variety
            of typeface styles from a single font.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFontType.Type3">
            <summary>
            A font that defines glyphs using PDF
            graphics operators.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFontType.TrueType">
            <summary>
            A font based on the TrueType font format.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFontType.CIDFontType0">
            <summary>
            A CIDFont based on Type 1 font technology.
            This type is available since PDF 1.2.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFontType.CIDFontType2">
            <summary>
            A CIDFont based on TrueType font technology.
            This type is available since PDF 1.2.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.GraphicsStateBlendMode">
            <summary>
            Specifies available blending modes.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.GraphicsStateBlendMode.Undefined">
            <summary>
            BlendMode is undefined.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.GraphicsStateBlendMode.Normal">
            <summary>
            Selects the source color, ignoring the backdrop.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.GraphicsStateBlendMode.Multiply">
            <summary>
            Multiplies the backdrop and source color values.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.GraphicsStateBlendMode.Screen">
            <summary>
            Multiplies the complements of the backdrop and source
            color values, then complements the result.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.GraphicsStateBlendMode.Overlay">
            <summary>
            Multiplies or screens the colors, depending on the backdrop color 
            value. Source colors overlay the backdrop while preserving its 
            highlights and shadows. The backdrop color is not replaced but
            is mixed with the source color to reflect the lightness or darkness 
            of the backdrop.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.GraphicsStateBlendMode.Darken">
            <summary>
            Selects the darker of the backdrop and source colors.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.GraphicsStateBlendMode.Lighten">
            <summary>
            Selects the lighter of the backdrop and source colors.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.GraphicsStateBlendMode.ColorDodge">
            <summary>
            Brightens the backdrop color to reflect the source color. 
            Painting with black produces no changes.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.GraphicsStateBlendMode.ColorBurn">
            <summary>
            Darkens the backdrop color to reflect the source color. 
            Painting with white produces no change.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.GraphicsStateBlendMode.HardLight">
            <summary>
            Multiplies or screens the colors, depending on the source color value. 
            The effect is similar to shining a harsh spotlight on the backdrop.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.GraphicsStateBlendMode.SoftLight">
            <summary>
            Darkens or lightens the colors, depending on the source color value. 
            The effect is similar to shining a diffused spotlight on the backdrop
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.GraphicsStateBlendMode.Difference">
            <summary>
            Subtracts the darker of the two constituent colors from the lighter color.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.GraphicsStateBlendMode.Exclusion">
            <summary>
            Produces an effect similar to that of the Difference mode but lower in contrast. 
            Painting with white inverts the backdrop color; painting with black produces no change.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.GraphicsStateBlendMode.Hue">
            <summary>
            Creates a color with the hue of the source color and the 
            saturation and luminosity of the backdrop color.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.GraphicsStateBlendMode.Saturation">
            <summary>
            Creates a color with the saturation of the source color and the hue 
            and luminosity of the backdrop color. Painting with this mode in an
            area of the backdrop that is a pure gray (no saturation) produces no change.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.GraphicsStateBlendMode.Color">
            <summary>
            Creates a color with the hue and saturation of the source color and 
            the luminosity of the backdrop color. This preserves the gray levels
            of the backdrop and is useful for coloring monochrome images or tinting
            color images.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.GraphicsStateBlendMode.Luminosity">
            <summary>
            Creates a color with the luminosity of the source color and the hue 
            and saturation of the backdrop color. This produces an inverse effect 
            to that of the Color mode.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.GraphicsStateLineCapStyle">
            <summary>
            Specifies available line cap styles.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.GraphicsStateLineCapStyle.Undefined">
            <summary>
            Undefined.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.GraphicsStateLineCapStyle.ButtCap">
            <summary>
            The stroke is squared off at the endpoint of the path.         
            </summary>
            <remarks>
            There is no projection beyond the end of the path.
            </remarks>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.GraphicsStateLineCapStyle.RoundCap">
            <summary>
            A semicircular arc with a diameter equal to the line 
            width is drawn around the endpoint and filled in.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.GraphicsStateLineCapStyle.ProjectingSquareCap">
            <summary>
            The stroke continues beyond the endpoint of the path for a distance
            equal to half the line width and is squared off.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.GraphicsStateLineJoinStyle">
            <summary>
            Specifies available line join styles - shapes used at 
            the corners of paths when paths are stroked.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.GraphicsStateLineJoinStyle.Undefined">
            <summary>
            Undefined.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.GraphicsStateLineJoinStyle.MiterJoin">
            <summary>
            The outer edges of the strokes for the two segments are extended 
            until they meet at an angle, as in a picture frame. If the segments meet
            at too sharp an angle, a bevel join is used instead.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.GraphicsStateLineJoinStyle.RoundJoin">
            <summary>
            An arc of a circle with a diameter equal to the line width is drawn
            around the point where the two segments meet, connecting the outer 
            edges of the strokes for the two segments. This pieslice-shaped figure 
            is filled in, producing a rounded corner.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.GraphicsStateLineJoinStyle.BevelJoin">
            <summary>
            The two segments are finished with butt caps and the resulting notch 
            beyond the ends of the segments is filled with a triangle.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.PdfPage">
            <summary>
            Provides information about page of PDF document.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPage.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.Pdf.PdfCompression,Vintasoft.Imaging.Pdf.PdfCompressionSettings,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfPage" /> class.        
            </summary>
            <param name="document">Parent document of this page.</param>
            <param name="image">The <see cref="T:Vintasoft.Imaging.VintasoftImage" /> to be added as
            background of the page.</param>
            <param name="compression">Compression type of the image resource.</param>
            <param name="compressionSettings">Compression settings of the thumbnail
            resource.</param>
            <param name="progressController">The encoding progress controller.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPage.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.Pdf.PdfCompression,Vintasoft.Imaging.Pdf.PdfCompressionSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfPage" /> class.        
            </summary>
            <param name="document">Parent document of this page.</param>
            <param name="image">The <see cref="T:Vintasoft.Imaging.VintasoftImage" /> to be added as
            background of the page.</param>
            <param name="compression">Compression type of the image resource.</param>
            <param name="compressionSettings">Compression settings of the thumbnail
            resource.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPage.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.Pdf.PdfCompression)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfPage" /> class.        
            </summary>
            <param name="document">Parent document of this page.</param>
            <param name="image">The <see cref="T:Vintasoft.Imaging.VintasoftImage" /> to be added as
            background of the page.</param>
            <param name="compression">Compression type of the image resource.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPage.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfPage" /> class.        
            </summary>
            <param name="document">Parent document of this page.</param>
            <param name="image">The <see cref="T:Vintasoft.Imaging.VintasoftImage" /> to be added as
            background of the page.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPage.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfPage" /> class.
            </summary>
            <param name="document">Parent document of this page.</param>
            <param name="size">Size of new page in user units.</param>
            <example>
            Here is an example that demonstrates how to create a new PDF page and
            add it into a PDF document:
            <code lang="VB.NET">
            ' page size
            Dim pageSize As New RectangleF(0, 0, 600, 800)
            ' create new page of specified size
            Dim page As New PdfPage(document, pageSize)
            ' add page to a PDF document
            document.Pages.Add(page) 
            </code>
            <code lang="C#">
            // page size
            RectangleF pageSize = new RectangleF(0, 0, 600, 800);
            // create new page of specified size
            PdfPage page = new PdfPage(document, pageSize);
            // add page to a PDF document
            document.Pages.Add(page); 
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPage.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,Vintasoft.Imaging.ImageSize)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfPage" /> class.        
            </summary>
            <param name="document">Parent document of this page.</param>
            <param name="size">Size of new page.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPage.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,Vintasoft.Imaging.PaperSizeKind)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfPage" /> class.        
            </summary>
            <param name="document">Parent document of this page.</param>
            <param name="size">Size of new page.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPage.GetPageRotateCropTransform">
            <summary>
            Returns a transformation matrix that should be applied to non rotated and cropped page
            for rotating and cropping of the page.
            </summary>
            <returns>A transformation matrix that should be applied to non rotated and cropped page
            for rotating and cropping of the page.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPage.GetPageRotateCropAffineTransform">
            <summary>
            Returns a transformation matrix that should be applied to non rotated and cropped page
            for rotating and cropping the page.
            </summary>
            <returns>A transformation matrix that should be applied to non rotated and cropped page
            for rotating and cropping the page.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPage.RemoveContentAndBlackOutResources">
            <summary>
            Removes the content and blacks out all referenced resources (images, forms, annotations).
            </summary>
            <remarks>
            <b>Important!</b> - PDF document must be packed (<see cref="M:Vintasoft.Imaging.Pdf.PdfDocument.Pack" />)
            after content removal otherwise the removed content can be restored.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPage.GetContentImageExtractor">
            <summary>
            Returns an object that allows to extract images from this page.
            </summary>
            <returns>The object that allows to extract images from this page.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPage.GetImages">
            <summary>
            Returns a read-only collection that contains image-resources of this page.
            </summary>
            <returns>The read-only collection that contains image-resources of this page.</returns>
            <example>
            Here is an example that demonstrates how to obtain information about 
            image resources of all PDF pages:
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Gets and prints information about PDF image resources.
            ''' &lt;/summary&gt;
            ''' &lt;param name="pdfFileName"&gt;The filename of PDF document.&lt;/param&gt;
            Public Shared Sub GetImageResourcesInfo(pdfFileName As String)
                ' open PDF document
                Using document As New PdfDocument(pdfFileName)
                    ' for each PDF page
                    For pageIndex As Integer = 0 To document.Pages.Count - 1
                        ' get PDF page
                        Dim page As PdfPage = document.Pages(pageIndex)
                        ' get a collection of PDF image resources of page
                        Dim imageResources As PdfImageResource() = page.GetImages()
                        ' print the page index and count of image resources
                        Console.WriteLine("Page {0} Image resources count: {1}", pageIndex + 1, imageResources.Length)
                        ' for each image resource
                        For Each imageResource As PdfImageResource In imageResources
                            ' print information about image resource
                            Console.WriteLine(vbTab &amp; " {0}x{1} {2,5}bpp {3}", imageResource.Width, imageResource.Height, imageResource.BitsPerPixel, imageResource.Compression)
                        Next
                    Next
                End Using
            End Sub
            
            ' This code example produces the following output: 
              
              Page 1 Image resources count: 9
                   157x139    32bpp Zip
                   157x139     8bpp Jpeg
                   700x596    24bpp Jpeg
                   686x585    24bpp Jpeg
                   459x317    32bpp Jpeg
                   459x317     8bpp Zip, Predictor
                   484x487    32bpp Jpeg
                   484x487     8bpp Zip, Predictor
                   824x537    24bpp Zip
              Page 2 Image resources count: 0         
              
            
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Gets and prints information about PDF image resources.
            /// &lt;/summary&gt;
            /// &lt;param name="pdfFileName"&gt;The filename of PDF document.&lt;/param&gt;
            public static void GetImageResourcesInfo(string pdfFileName)
            {
                // open PDF document
                using (PdfDocument document = new PdfDocument(pdfFileName))
                {
                    // for each PDF page
                    for (int pageIndex = 0; pageIndex &lt; document.Pages.Count; pageIndex++)
                    {
                        // get PDF page
                        PdfPage page = document.Pages[pageIndex];
                        // get a collection of PDF image resources of page
                        PdfImageResource[] imageResources = page.GetImages();
                        // print the page index and count of image resources
                        Console.WriteLine("Page {0} Image resources count: {1}", pageIndex + 1, imageResources.Length);
                        // for each image resource
                        foreach (PdfImageResource imageResource in imageResources)
                        {
                            // print information about image resource
                            Console.WriteLine("\t {0}x{1} {2,5}bpp {3}",
                                imageResource.Width, imageResource.Height,
                                imageResource.BitsPerPixel, imageResource.Compression);
                        }
                    }
                }
            }
            
            /* This code example produces the following output: 
            
            Page 1 Image resources count: 9
                 157x139    32bpp Zip
                 157x139     8bpp Jpeg
                 700x596    24bpp Jpeg
                 686x585    24bpp Jpeg
                 459x317    32bpp Jpeg
                 459x317     8bpp Zip, Predictor
                 484x487    32bpp Jpeg
                 484x487     8bpp Zip, Predictor
                 824x537    24bpp Zip
            Page 2 Image resources count: 0         
            */
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPage.GetIccProfiles">
            <summary>
            Returns a read-only collection that contains ICC profiles of this page.
            </summary>
            <returns>The read-only collection that contains ICC profiles of this page.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPage.GetFonts">
            <summary>
            Returns a read-only collection that contains fonts of this page.
            </summary>
            <returns>The read-only collection that contains fonts of this page.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPage.GetResources">
            <summary>
            Returns a read-only collection that contains resources of this page.
            </summary>
            <returns>The read-only collection that contains resources of this page.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPage.PointToUnit(System.Single,System.Single)">
            <summary>
            Converts point from image coordinate space to PDF page coordinate space taking
            into account image resolution.
            </summary>
            <param name="point">Point, in pixels, to convert.</param>
            <param name="imageResolution">Resolution of the image coordinate space.</param>
            <returns>Point, in the PDF page's coordinate space.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPage.PointToPixel(System.Single,System.Single)">
            <summary>
            Converts point from PDF page coordinate space to image coordinate space taking
            into account image resolution.
            </summary>
            <param name="point">Point, in the PDF page's coordinate space, to convert.</param>
            <param name="imageResolution">Resolution of the image coordinate space.</param>
            <returns>Point, in the image's coordinate space.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPage.PointsToUnits(System.Drawing.PointF[],Vintasoft.Imaging.Resolution)">
            <summary>
            Converts points from the image's coordinate space to the PDF page's coordinate space.
            </summary>
            <param name="points">
            Provides points, in the image's coordinate space, to convert;
            returns the converted points, in the PDF page's coordinate space.
            </param>
            <param name="imageResolution">Resolution of the image coordinate space.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPage.PointsToUnits(System.Drawing.PointF[])">
             <summary>
             Converts points from the image's coordinate space with
             <see cref="P:Vintasoft.Imaging.Pdf.Tree.PdfPage.DefaultResolution" /> to the PDF page's coordinate space.
            </summary>
             <param name="points">
             Provides points, in the image's coordinate space, to convert;
             returns the converted points, in the PDF page's coordinate space.
             </param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPage.PointToUnit(System.Drawing.PointF@)">
            <summary>
            Converts point from the image's coordinate space with
            <see cref="P:Vintasoft.Imaging.Pdf.Tree.PdfPage.DefaultResolution" /> to the PDF page's coordinate space.
            </summary>
            <param name="point">
            Provides point, in the image's coordinate space, to convert;
            returns the converted point, in the PDF page's coordinate space.
            </param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPage.PointToUnit(System.Drawing.PointF@,Vintasoft.Imaging.Resolution)">
            <summary>
            Converts point from the image's coordinate space with
            specified resolution to the PDF page's coordinate space.
            </summary>
            <param name="point">
            Provides point, in the image's coordinate space, to convert;
            returns the converted point, in the PDF page's coordinate space.
            </param>
            <param name="imageResolution">Resolution of the image coordinate space.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPage.UnitsToPixels(System.Drawing.PointF@)">
            <summary>
            Converts point from image coordinate space with <see cref="P:Vintasoft.Imaging.Pdf.Tree.PdfPage.DefaultResolution" /> to
            PDF page coordinate space taking into account PDF page media box.
            </summary>
            <param name="point">
            Provides point, in the PDF page's coordinate space, to convert;
            returns the converted point, in the image's coordinate space.
            </param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPage.UnitsToPixels(System.Drawing.PointF@,Vintasoft.Imaging.Resolution)">
            <summary>
            Converts point from image coordinate space to PDF page coordinate space taking into account
            image resolution and PDF page media box.
            </summary>
            <param name="point">
            Provides point, in the PDF page's coordinate space, to convert;
            returns the converted point, in the image's coordinate space.
            </param>
            <param name="imageResolution">Resolution of the image coordinate space.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPage.UnitsToPixels(System.Drawing.PointF[],Vintasoft.Imaging.Resolution)">
            <summary>
            Converts points from image coordinate space to PDF page coordinate space taking into account
            image resolution and PDF page media box.
            </summary>
            <param name="points">
            Provides point, in the image's coordinate space, to convert;
            returns the converted point, in the PDF page's coordinate space.
            </param>
            <param name="imageResolution">Resolution of the image coordinate space.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPage.PointsFromPageSpaceToImageSpace(System.Drawing.PointF[],Vintasoft.Imaging.Resolution)">
            <summary>
            Converts points from PDF page coordinate space to image coordinate space taking into account
            image resolution, PDF page crop box, PDF page media box and PDF page rotation.
            </summary>
            <param name="points">
            Provides point, in the image's coordinate space, to convert;
            returns the converted point, in the PDF page's coordinate space.
            </param>
            <param name="imageResolution">Resolution of the image coordinate space.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPage.PointsFromImageSpaceToPageSpace(System.Drawing.PointF[],Vintasoft.Imaging.Resolution)">
            <summary>
            Converts points from image coordinate space to PDF page coordinate space taking into account
            image resolution, PDF page crop box, PDF page media box and PDF page rotation.
            </summary>
            <param name="points">
            Provides points, in the image's coordinate space, to convert;
            returns the converted points, in the PDF page's coordinate space.
            </param>
            <param name="imageResolution">Resolution of the image coordinate space.</param>
            <example>
            Here is an example that shows how to convert rectangle in 
            image space to PDF page space coordinate system:
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Converts the rectangle from image space to page space.
            ''' &lt;/summary&gt;
            ''' &lt;param name="rect"&gt;Rectangle in image space.&lt;/param&gt;
            ''' &lt;param name="imageResolution"&gt;The image resolution.&lt;/param&gt;
            ''' &lt;param name="page"&gt;The PDF page.&lt;/param&gt;
            ''' &lt;returns&gt;&lt;see cref="RectangleF"/&gt; structure in PDF page space.&lt;/returns&gt;
            Public Shared Function ConvertRectangleFromImageSpaceToPageSpace(rect As RectangleF, imageResolution As Resolution, page As PdfPage) As RectangleF
                ' Rectangle -&gt; PointF[]
                Dim points As PointF() = New PointF() {rect.Location, New PointF(rect.X + rect.Width, rect.Y + rect.Height)}
            
                ' ImageSpace -&gt; PageSpace
                page.PointsFromImageSpaceToPageSpace(points, imageResolution)
            
                ' Points -&gt; RectangleF
                Dim x0 As Single = Math.Min(points(0).X, points(1).X)
                Dim y0 As Single = Math.Min(points(0).Y, points(1).Y)
                Dim x1 As Single = Math.Max(points(0).X, points(1).X)
                Dim y1 As Single = Math.Max(points(0).Y, points(1).Y)
                Return New RectangleF(x0, y0, x1 - x0, y1 - y0)
            End Function
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Converts the rectangle from image space to page space.
            /// &lt;/summary&gt;
            /// &lt;param name="rect"&gt;Rectangle in image space.&lt;/param&gt;
            /// &lt;param name="imageResolution"&gt;The image resolution.&lt;/param&gt;
            /// &lt;param name="page"&gt;The PDF page.&lt;/param&gt;
            /// &lt;returns&gt;&lt;see cref="RectangleF"/&gt; structure in PDF page space.&lt;/returns&gt;
            public static RectangleF ConvertRectangleFromImageSpaceToPageSpace(
                RectangleF rect, Resolution imageResolution, PdfPage page)
            {
                // Rectangle -&gt; PointF[]
                PointF[] points = new PointF[] { 
                    rect.Location, 
                    new PointF(rect.X + rect.Width, rect.Y + rect.Height) };
            
                // ImageSpace -&gt; PageSpace
                page.PointsFromImageSpaceToPageSpace(points, imageResolution);
            
                // Points -&gt; RectangleF
                float x0 = Math.Min(points[0].X, points[1].X);
                float y0 = Math.Min(points[0].Y, points[1].Y);
                float x1 = Math.Max(points[0].X, points[1].X);
                float y1 = Math.Max(points[0].Y, points[1].Y);
                return new RectangleF(x0, y0, x1 - x0, y1 - y0);
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPage.GetTrasformFromPageSpaceToImageSpace(Vintasoft.Imaging.Resolution)">
            <summary>
            Gets the transformation matrix from page space to image space.
            </summary>
            <param name="imageResolution">The image resolution.</param>
            <returns>A transformation matrix that transforms page space to image space.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPage.GetPageSizeInPixels(Vintasoft.Imaging.Resolution)">
            <summary>
            Returns the page size in the image coordinate space.
            </summary>
            <param name="imageResolution">Resolution of the image coordinate space.</param>
            <returns>Page size in the image coordinate space.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPage.ConvertFromUserUnitsToUnitOfMeasure(System.Single,Vintasoft.Imaging.UnitOfMeasure)">
            <summary>
            Converts value in <see cref="T:Vintasoft.Imaging.UnitOfMeasure" />.UserUnits to value in specified <see cref="T:Vintasoft.Imaging.UnitOfMeasure" />.
            </summary>
            <param name="userUnits">Value in <see cref="T:Vintasoft.Imaging.UnitOfMeasure" />.UserUnits to convert.</param>
            <param name="units">Specifies the <see cref="T:Vintasoft.Imaging.UnitOfMeasure" /> for conversion.</param>
            <returns>Value converted to specified <see cref="T:Vintasoft.Imaging.UnitOfMeasure" />.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPage.ConvertFromUnitOfMeasureToUserUnits(System.Single,Vintasoft.Imaging.UnitOfMeasure)">
            <summary>
            Converts value in specified <see cref="T:Vintasoft.Imaging.UnitOfMeasure" /> to value in <see cref="T:Vintasoft.Imaging.UnitOfMeasure" />.UserUnits.
            </summary>
            <param name="value">Value in specified <see cref="T:Vintasoft.Imaging.UnitOfMeasure" /> to convert.</param>
            <param name="units">Specifies the <see cref="T:Vintasoft.Imaging.UnitOfMeasure" /> for conversion.</param>
            <returns>Value converted to <see cref="T:Vintasoft.Imaging.UnitOfMeasure" />.UserUnits.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPage.GetGraphics">
            <summary>
            Initializes a new instance of the 
            <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" /> class 
            associated with this page.
            </summary>
            <returns>New instance of the 
            <see cref="T:Vintasoft.Imaging.Pdf.Drawing.PdfGraphics" /> 
            class for this page.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPage.Render">
            <summary>
            Returns the rendered image of the page.
            </summary>
            <returns>Rendered image of the page.</returns>
            <example>
            Here is an example that demonstrates how to render PDF page in resolution 300x300 dpi:
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Gets PDF page with 300x300 resolution.
            ''' &lt;/summary&gt;
            ''' &lt;param name="page"&gt;The page of PDF document.&lt;/param&gt;
            Public Shared Function GetImage300dpi(page As PdfPage) As VintasoftImage
                ' get the rendering settings of PDF document
                Dim renderingSettings As PdfRenderingSettings = page.Document.RenderingSettings
                ' save previous resolution of rendering settings
                Dim prevResolution As Resolution = renderingSettings.Resolution
                ' set new resolution for image rendering 
                renderingSettings.Resolution = New Resolution(300, 300)
            
                ' render image of the page
                Dim image As VintasoftImage = page.Render()
            
                ' restore resolution of rendering settings
                renderingSettings.Resolution = prevResolution
            
                ' return the image
                Return image
            End Function
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Gets PDF page with 300x300 resolution.
            /// &lt;/summary&gt;
            /// &lt;param name="page"&gt;The page of PDF document.&lt;/param&gt;
            public static VintasoftImage GetImage300dpi(PdfPage page)
            {
                // get the rendering settings of PDF document
                PdfRenderingSettings renderingSettings = page.Document.RenderingSettings;
                // save previous resolution of rendering settings
                Resolution prevResolution = renderingSettings.Resolution;
                // set new resolution for image rendering 
                renderingSettings.Resolution = new Resolution(300, 300);
            
                // render image of the page
                VintasoftImage image = page.Render();
            
                // restore resolution of rendering settings
                renderingSettings.Resolution = prevResolution;
            
                // return the image
                return image;
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPage.Render(System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})">
            <summary>
            Returns the rendered image of the page.
            </summary>
            <param name="renderingProgress">An image rendering progress delegate.</param>
            <returns>Rendered image of the page.</returns>
            <example>
            Here is an example that demonstrates how to render PDF page with progress indication and
            cancel the rendering process at 80% level:
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Cancels rendering of PDF page when progress of rendering is greater than 80%.
            ''' &lt;/summary&gt;
            ''' &lt;param name="page"&gt;The page of PDF document.&lt;/param&gt;
            Public Shared Sub CancelRenderingExample(page As PdfPage)
                ' render image of PDF page
                page.Render(New EventHandler(Of ProgressEventArgs)(AddressOf RenderingProgress))
            End Sub
            
            ''' &lt;summary&gt;
            ''' Event handler of rendering progress.
            ''' &lt;/summary&gt;
            Public Shared Sub RenderingProgress(sender As Object, e As ProgressEventArgs)
                ' if rendering canbe canceled and rendering progress is geater than 80%
                If e.CanCancel AndAlso e.Progress &gt;= 80 Then
                    ' cancel rendering
                    e.Cancel = True
                End If
            End Sub
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Cancels rendering of PDF page when progress of rendering is greater than 80%.
            /// &lt;/summary&gt;
            /// &lt;param name="page"&gt;The page of PDF document.&lt;/param&gt;
            public static void CancelRenderingExample(PdfPage page)
            {
                // render image of PDF page
                page.Render(new EventHandler&lt;ProgressEventArgs&gt;(RenderingProgress));
            }
            
            /// &lt;summary&gt;
            /// Event handler of rendering progress.
            /// &lt;/summary&gt;
            public static void RenderingProgress(object sender, ProgressEventArgs e)
            {
                // if rendering canbe canceled and rendering progress is geater than 80%
                if (e.CanCancel &amp;&amp; e.Progress &gt;= 80)
                    // cancel rendering
                    e.Cancel = true;
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPage.Render(System.Int32,System.Int32)">
            <summary>
            Returns rendered image of this page and scales rendered image
            to specified rectangle.
            </summary>
            <param name="width">Necessary width of the page image.</param>
            <param name="height">Necessary height of the page image.</param>
            <returns>Rendered image of this page.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPage.Render(System.Drawing.RectangleF,System.Single,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs},System.EventHandler{Vintasoft.Imaging.ImageRendering.IntermediateImageRequestEventArgs})">
            <summary>
            Renders specified rectangle of PDF page with specified scale.
            </summary>
            <param name="rect">Rectangle of source image.</param>
            <param name="scale">Scale factor.</param>
            <param name="renderingProgress">An image rendering progress delegate.</param>
            <param name="intermediateImageRequest">Delegate for requesting intermediate image.
            Can be set to <b>null</b> (<b>Nothing</b> in Visual Basic)</param>
            <example>
            Here is an example that demonstrates how to render PDF page progressively:
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' The timer for getting intermediate images.
            ''' &lt;/summary&gt;
            Public _timer As New Stopwatch()
            
            ''' &lt;summary&gt;
            ''' The index of intermediate image.
            ''' &lt;/summary&gt;
            Public _intermediateImageIndex As Integer = 0
            
            ''' &lt;summary&gt;
            ''' Time interval, in milliseconds, for getting intermediate image during rendering.
            ''' &lt;/summary&gt;
            Public INTERMEDIATE_RENDER_IMAGE_INTERVAL As Integer = 300
            
            
            
            ''' &lt;summary&gt;
            ''' Gets the image of PDF page.
            ''' &lt;/summary&gt;
            ''' &lt;param name="page"&gt;The page of PDF document.&lt;/param&gt;
            Public Function RenderPdfPageProgressively(page As PdfPage) As VintasoftImage
                _intermediateImageIndex = 0
                ' start timer
                _timer.Start()
            
                ' render PDF page progressively
                Dim image As VintasoftImage = page.Render(page.CropBox, 1F, Nothing, New EventHandler(Of IntermediateImageRequestEventArgs)(AddressOf IntermediateImageRequest))
            
                ' stop timer
                _timer.[Stop]()
            
                ' return the result image
                Return image
            End Function
            
            ''' &lt;summary&gt;
            ''' Handler of event that occurs when intermediate image is ready and can be obtained.
            ''' &lt;/summary&gt;
            Public Sub IntermediateImageRequest(sender As Object, e As IntermediateImageRequestEventArgs)
                ' if intermediate image must be saved
                If _timer.ElapsedMilliseconds &gt;= INTERMEDIATE_RENDER_IMAGE_INTERVAL Then
                    ' reset timer
                    _timer.Reset()
                    ' set the delegate which invoked for obtaining the intermediate image
                    e.IntermediateImageCompleted = New IntermediateImageCompletedDelegate(AddressOf IntermediateImageReady)
                    ' start timer
                    _timer.Start()
                End If
            End Sub
            
            ''' &lt;summary&gt;
            ''' Delegate that allows to obtain intermediate image.
            ''' &lt;/summary&gt;
            Public Sub IntermediateImageReady(e As IntermediateImageReadyEventArgs)
                ' increment counter of intermediate images
                _intermediateImageIndex += 1
            
                ' clone the rendered image
                Using image As VintasoftImage = DirectCast(e.Image.Clone(), VintasoftImage)
                    Dim filename As String = String.Format("IntermediateImage_{0}.bmp", _intermediateImageIndex.ToString("00"))
                    ' save the intermediate image to a file
                    image.Save(filename)
                End Using
            End Sub
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// The timer for getting intermediate images.
            /// &lt;/summary&gt;
            public Stopwatch _timer = new Stopwatch();
            
            /// &lt;summary&gt;
            /// The index of intermediate image.
            /// &lt;/summary&gt;
            public int _intermediateImageIndex = 0;
            
            /// &lt;summary&gt;
            /// Time interval, in milliseconds, for getting intermediate image during rendering.
            /// &lt;/summary&gt;
            public int INTERMEDIATE_RENDER_IMAGE_INTERVAL = 300;
            
            
            
            /// &lt;summary&gt;
            /// Gets the image of PDF page.
            /// &lt;/summary&gt;
            /// &lt;param name="page"&gt;The page of PDF document.&lt;/param&gt;
            public VintasoftImage RenderPdfPageProgressively(PdfPage page)
            {
                _intermediateImageIndex = 0;
                // start timer
                _timer.Start();
            
                // render PDF page progressively
                VintasoftImage image = page.Render(page.CropBox, 1.0f, null,
                    new EventHandler&lt;IntermediateImageRequestEventArgs&gt;(IntermediateImageRequest));
            
                // stop timer
                _timer.Stop();
            
                // return the result image
                return image;
            }
            
            /// &lt;summary&gt;
            /// Handler of event that occurs when intermediate image is ready and can be obtained.
            /// &lt;/summary&gt;
            public void IntermediateImageRequest(object sender, IntermediateImageRequestEventArgs e)
            {
                // if intermediate image must be saved
                if (_timer.ElapsedMilliseconds &gt;= INTERMEDIATE_RENDER_IMAGE_INTERVAL)
                {
                    // reset timer
                    _timer.Reset();
                    // set the delegate which invoked for obtaining the intermediate image
                    e.IntermediateImageCompleted = new IntermediateImageCompletedDelegate(IntermediateImageReady);
                    // start timer
                    _timer.Start();
                }
            }
            
            /// &lt;summary&gt;
            /// Delegate that allows to obtain intermediate image.
            /// &lt;/summary&gt;
            public void IntermediateImageReady(IntermediateImageReadyEventArgs e)
            {
                // increment counter of intermediate images
                _intermediateImageIndex++;
            
                // clone the rendered image
                using (VintasoftImage image = (VintasoftImage)e.Image.Clone())
                {
                    string filename = string.Format("IntermediateImage_{0}.bmp", _intermediateImageIndex.ToString("00"));
                    // save the intermediate image to a file
                    image.Save(filename);
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPage.Render(System.Single)">
            <summary>
            Renders PDF page with specified scale.
            </summary>
            <param name="scale">Scale factor.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPage.Render(System.Drawing.RectangleF,System.Single)">
            <summary>
            Renders specified rectangle of PDF page with specified scale.
            </summary>
            <param name="rect">Rectangle on PDF page.</param>
            <param name="scale">Scale factor.</param>
            <example>
            Here is an example that demonstrates how to render PDF  page region in resolution 600x600 dpi:
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Gets region of PDF page with 600x600 resolution.
            ''' &lt;/summary&gt;
            ''' &lt;param name="page"&gt;The page of PDF document.&lt;/param&gt;
            ''' &lt;param name="region"&gt;The region of page.&lt;/param&gt;
            Public Shared Function GetImage600dpiRegion(page As PdfPage, region As RectangleF) As VintasoftImage
                ' get the rendering settings of PDF document
                Dim renderingSettings As PdfRenderingSettings = page.Document.RenderingSettings
                ' save previous resolution of rendering settings
                Dim prevResolution As Resolution = renderingSettings.Resolution
                ' set new resolution for image rendering 
                renderingSettings.Resolution = New Resolution(600, 600)
            
                ' render region of PDF page
                Dim image As VintasoftImage = page.Render(region, 1F)
            
                ' restore resolution of rendering settings
                renderingSettings.Resolution = prevResolution
            
                ' return the image
                Return image
            End Function
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Gets region of PDF page with 600x600 resolution.
            /// &lt;/summary&gt;
            /// &lt;param name="page"&gt;The page of PDF document.&lt;/param&gt;
            /// &lt;param name="region"&gt;The region of page.&lt;/param&gt;
            public static VintasoftImage GetImage600dpiRegion(PdfPage page, RectangleF region)
            {
                // get the rendering settings of PDF document
                PdfRenderingSettings renderingSettings = page.Document.RenderingSettings;
                // save previous resolution of rendering settings
                Resolution prevResolution = renderingSettings.Resolution;
                // set new resolution for image rendering 
                renderingSettings.Resolution = new Resolution(600, 600);
            
                // render region of PDF page
                VintasoftImage image = page.Render(region, 1.0f);
            
                // restore resolution of rendering settings
                renderingSettings.Resolution = prevResolution;
            
                // return the image
                return image;
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPage.GetThumbnail(System.Int32,System.Int32,Vintasoft.Imaging.Pdf.PdfRenderingSettings)">
            <summary>
            Returns thumbnail of this page.
            </summary>
            <param name="width">Thumbnail width.</param>
            <param name="height">Thumbnail height.</param>
            <param name="renderingSettings">Rendering settings.</param>
            <returns>
            Thumbnail of this page.
            </returns>
            <remarks>
            This method will always render thumbnail from page if 
            <see cref="P:Vintasoft.Imaging.Pdf.PdfRenderingSettings.UseEmbeddedThumbnails" /> is <b>false</b>.<br />
            This method will use embedded thumbnail if
            <see cref="P:Vintasoft.Imaging.Pdf.PdfRenderingSettings.UseEmbeddedThumbnails" /> is <b>true</b>
            and there is embedded thumbnail and size of embedded thumbnail
            is more or equal than the necessary thumbnail size.<br />
            This method will render thumbnail from page if 
            <see cref="P:Vintasoft.Imaging.Pdf.PdfRenderingSettings.UseEmbeddedThumbnails" /> is <b>true</b> and
            there is no embedded thumbnail or size of embedded thumbnail is less
            than the necessary thumbnail size.<br />
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPage.GetThumbnail(System.Int32,System.Int32)">
            <summary>
            Returns thumbnail of this page.
            </summary>
            <param name="width">Thumbnail width.</param>
            <param name="height">Thumbnail height.</param>
            <returns>
            Thumbnail of this page.
            </returns>
            <remarks>
            This method will always render thumbnail from page if 
            <see cref="P:Vintasoft.Imaging.Pdf.PdfRenderingSettings.UseEmbeddedThumbnails" /> is <b>false</b>.<br />
            This method will use embedded thumbnail if
            <see cref="P:Vintasoft.Imaging.Pdf.PdfRenderingSettings.UseEmbeddedThumbnails" /> is <b>true</b>
            and there is embedded thumbnail and size of embedded thumbnail
            is more or equal than the necessary thumbnail size.<br />
            This method will render thumbnail from page if 
            <see cref="P:Vintasoft.Imaging.Pdf.PdfRenderingSettings.UseEmbeddedThumbnails" /> is <b>true</b> and
            there is no embedded thumbnail or size of embedded thumbnail is less
            than the necessary thumbnail size.<br />
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPage.CreateThumbnail(System.Int32,System.Int32,Vintasoft.Imaging.Pdf.PdfRenderingSettings,Vintasoft.Imaging.Pdf.PdfCompression,Vintasoft.Imaging.Pdf.PdfCompressionSettings)">
            <summary>
            Creates the thumbnail for this page.
            </summary>
            <param name="width">Thumbnail width.</param>
            <param name="height">Thumbnail height.</param>
            <param name="renderingSettings">Rendering settings.</param>
            <param name="compression">Compression type of the image resource.</param>
            <param name="compressionSettings">Compression settings of the thumbnail
            resource.</param>
            <remarks>
            This method creates the thumbnail of specified size and saves the thumbnail
            in PDF document as a resource.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPage.RemoveThumbnail">
            <summary>
            Removes the thumbnail from this page.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPage.Clone">
            <summary>
            Creates a new object that is a copy of the current <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfPage" />
            instance.
            </summary>
            <returns>A new object that is a copy of this <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfPage" />
            instance.</returns>
            <remarks>
            Clones this page and all dependent tree nodes.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPage.Clone(Vintasoft.Imaging.Pdf.PdfDocument)">
            <summary>
            Creates a new object that is a copy of the current <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfPage" />
            instance in specified PDF document.
            </summary>
            <param name="destDocument">Destination PDF document.</param>
            <returns>A new object that is a copy of this <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfPage" />
            instance.</returns>
            <remarks>
            This method clones this page and all dependent tree nodes.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPage.GetLinkAnnotations">
            <summary>
            Returns an array that contains a link annotations of the page.
            </summary>
            <returns>An array that contains a link annotations of the page.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPage.ClearImages(System.Drawing.RectangleF[])">
            <summary>
            Clears image regions that intersect with specified rectangles on PDF page.
            </summary>
            <param name="rects">The array of rectangles, in PDF page space (user units).</param>
            <example>
            Here is an example that demonstrates how to clear images in specified rectangle of PDF page:
            <code lang="VB.NET">
            Public Shared Sub TestCrearImagesOnAllPages(inputPdfFilename As String, outputPdfFilename As String)
                ' open document
                Using document As New PdfDocument(inputPdfFilename)
                    ' for all pages
                    For Each page As PdfPage In document.Pages
                        Dim rect As RectangleF = page.MediaBox
                        rect.Inflate(New SizeF(-rect.Width / 4, -rect.Height / 4))
                        ' clear images in specified rect on PDF page
                        page.ClearImages(rect)
                    Next
                    ' pack document
                    If inputPdfFilename = outputPdfFilename Then
                        document.Pack()
                    Else
                        document.Pack(outputPdfFilename)
                    End If
                End Using
            End Sub
            </code>
            <code lang="C#">
            public static void TestCrearImagesOnAllPages(string inputPdfFilename, string outputPdfFilename)
            {
                // open document
                using (PdfDocument document = new PdfDocument(inputPdfFilename))
                {
                    // for all pages
                    foreach (PdfPage page in document.Pages)
                    {
                        RectangleF rect = page.MediaBox;
                        rect.Inflate(new SizeF(-rect.Width / 4, -rect.Height / 4));
                        // clear images in specified rect on PDF page
                        page.ClearImages(rect);
                    }
                    // pack document
                    if (inputPdfFilename == outputPdfFilename)
                        document.Pack();
                    else
                        document.Pack(outputPdfFilename);
                }
            }
            </code>
            </example>
            <seealso cref="M:Vintasoft.Imaging.Pdf.Tree.PdfImageResource.ClearPath(System.Drawing.Drawing2D.GraphicsPath)" />
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPage.RemoveAnnotations(System.Drawing.RectangleF[])">
            <summary>
            Removes annotations that intersect with specified rectangles on PDF page.
            </summary>
            <param name="rects">The array of rectangles, in PDF page space (user units).</param>
            <remarks>
            <b>Important!</b> - PDF document must be packed (<see cref="M:Vintasoft.Imaging.Pdf.PdfDocument.Pack" />)
            after content removal otherwise the removed content can be restored.
            </remarks>
            <example>
            Here is an example that demonstrates how to remove annotations in specified rectangle of PDF page:
            <code lang="VB.NET">
            Public Shared Sub TestRemoveAnnotationsOnAllPages(inputPdfFilename As String, outputPdfFilename As String)
                ' open document
                Using document As New PdfDocument(inputPdfFilename)
                    ' for all pages
                    For Each page As PdfPage In document.Pages
                        Dim rect As RectangleF = page.MediaBox
                        rect.Inflate(New SizeF(-rect.Width / 4, -rect.Height / 4))
                        ' remove annotations that intersect with specified rectangle on PDF page
                        page.RemoveAnnotations(rect)
                    Next
                    ' pack document
                    If inputPdfFilename = outputPdfFilename Then
                        document.Pack()
                    Else
                        document.Pack(outputPdfFilename)
                    End If
                End Using
            End Sub
            </code>
            <code lang="C#">
            public static void TestRemoveAnnotationsOnAllPages(string inputPdfFilename, string outputPdfFilename)
            {
                // open document
                using (PdfDocument document = new PdfDocument(inputPdfFilename))
                {
                    // for all pages
                    foreach (PdfPage page in document.Pages)
                    {
                        RectangleF rect = page.MediaBox;
                        rect.Inflate(new SizeF(-rect.Width / 4, -rect.Height / 4));
                        // remove annotations that intersect with specified rectangle on PDF page
                        page.RemoveAnnotations(rect);
                    }
                    // pack document
                    if (inputPdfFilename == outputPdfFilename)
                        document.Pack();
                    else
                        document.Pack(outputPdfFilename);
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPage.RemoveVectorGraphics(System.Drawing.RectangleF[])">
            <summary>
            Removes vector graphics that intersect with specified rectangles on PDF page.
            </summary>
            <param name="rects">The array of rectangles, in PDF page space (user units).</param>
            <remarks>
            <b>Important!</b> - PDF document must be packed (<see cref="M:Vintasoft.Imaging.Pdf.PdfDocument.Pack" />)
            after content removal otherwise the removed content can be restored.
            </remarks>
            <example>
            Here is an example that demonstrates how to remove vector graphics in specified rectangle of PDF page:
            <code lang="VB.NET">
            Public Shared Sub TestRemoveVectorGraphicsOnAllPages(inputPdfFilename As String, outputPdfFilename As String)
                ' open document
                Using document As New PdfDocument(inputPdfFilename)
                    ' for all pages
                    For Each page As PdfPage In document.Pages
                        Dim rect As RectangleF = page.MediaBox
                        rect.Inflate(New SizeF(-rect.Width / 4, -rect.Height / 4))
                        ' remove vector graphics that intersect with specified rectangle on PDF page
                        page.RemoveVectorGraphics(rect)
                    Next
                    ' pack document
                    If inputPdfFilename = outputPdfFilename Then
                        document.Pack()
                    Else
                        document.Pack(outputPdfFilename)
                    End If
                End Using
            End Sub
            </code>
            <code lang="C#">
            public static void TestRemoveVectorGraphicsOnAllPages(string inputPdfFilename, string outputPdfFilename)
            {
                // open document
                using (PdfDocument document = new PdfDocument(inputPdfFilename))
                {
                    // for all pages
                    foreach (PdfPage page in document.Pages)
                    {
                        RectangleF rect = page.MediaBox;
                        rect.Inflate(new SizeF(-rect.Width / 4, -rect.Height / 4));
                        // remove vector graphics that intersect with specified rectangle on PDF page
                        page.RemoveVectorGraphics(rect);
                    }
                    // pack document
                    if (inputPdfFilename == outputPdfFilename)
                        document.Pack();
                    else
                        document.Pack(outputPdfFilename);
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPage.RemoveText(System.Drawing.RectangleF[])">
            <summary>
            Removes text that contains in specified rectangles of PDF page.
            </summary>
            <param name="rects">The array of rectangles, in PDF page space (user units).</param>
            <remarks>
            <b>Important!</b> - PDF document must be packed (<see cref="M:Vintasoft.Imaging.Pdf.PdfDocument.Pack" />)
            after content removal otherwise the removed content can be restored.
            </remarks>
            <example>
            Here is an example that demonstrates how to remove text in rectangle of PDF page:
            <code lang="VB.NET">
            Public Shared Sub TestRemoveTextOnAllPages(inputPdfFilename As String, outputPdfFilename As String)
                ' open document
                Using document As New PdfDocument(inputPdfFilename)
                    ' for all pages
                    For Each page As PdfPage In document.Pages
                        Dim rect As RectangleF = page.MediaBox
                        rect.Inflate(New SizeF(-rect.Width / 4, -rect.Height / 4))
                        ' remove text that containts with specified rectangle on PDF page
                        page.RemoveText(rect)
                    Next
                    ' pack document
                    If inputPdfFilename = outputPdfFilename Then
                        document.Pack()
                    Else
                        document.Pack(outputPdfFilename)
                    End If
                End Using
            End Sub
            </code>
            <code lang="C#">
            public static void TestRemoveTextOnAllPages(string inputPdfFilename, string outputPdfFilename)
            {
                // open document
                using (PdfDocument document = new PdfDocument(inputPdfFilename))
                {
                    // for all pages
                    foreach (PdfPage page in document.Pages)
                    {
                        RectangleF rect = page.MediaBox;
                        rect.Inflate(new SizeF(-rect.Width / 4, -rect.Height / 4));
                        // remove text that containts with specified rectangle on PDF page
                        page.RemoveText(rect);
                    }
                    // pack document
                    if (inputPdfFilename == outputPdfFilename)
                        document.Pack();
                    else
                        document.Pack(outputPdfFilename);
                }
            }
            </code>
            </example>
            <seealso cref="M:Vintasoft.Imaging.Pdf.Tree.PdfPage.RemoveText(Vintasoft.Imaging.Pdf.Content.TextExtraction.TextRegion[])" />
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPage.RemoveText(Vintasoft.Imaging.Pdf.Content.TextExtraction.TextRegion[])">
            <summary>
            Removes specified text regions from page content.
            </summary>
            <param name="regions">The text regions to remove.</param>
            <remarks>
            <b>Important!</b> - PDF document must be packed (<see cref="M:Vintasoft.Imaging.Pdf.PdfDocument.Pack" />)
            after content removal otherwise the removed content can be restored.
            </remarks>
            <example>
            Here is an example that demonstrates how to find text on PDF page and remove text from PDF page:
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Searches and removes specified text on all pages of PDF document.
            ''' &lt;/summary&gt;
            ''' &lt;param name="inputPdfFilename"&gt;The name of input PDF file.&lt;/param&gt;
            ''' &lt;param name="outputPdfFilename"&gt;The name of output PDF file.&lt;/param&gt;
            ''' &lt;param name="textToRemove"&gt;The text to remove.&lt;/param&gt;
            Public Shared Sub TestFindAndRemoveTextOnAllPages(inputPdfFilename As String, outputPdfFilename As String, ParamArray textToRemove As String())
                ' open document
                Using document As New PdfDocument(inputPdfFilename)
                    ' if there is a text to remove
                    If textToRemove.Length &gt; 0 Then
                        ' create a list that contains text regions to remove
                        Dim textRegions As New List(Of TextRegion)()
            
                        ' for each page
                        For Each page As PdfPage In document.Pages
                            ' clear a list of text regions to remove
                            textRegions.Clear()
            
                            ' for all text strings that must be remove
                            For i As Integer = 0 To textToRemove.Length - 1
                                ' search text string on PDF page
                                Dim searchedText As TextRegion() = SimpleTextSearchOnPdfPage(page, textToRemove(i))
                                ' if text is found
                                If searchedText IsNot Nothing AndAlso searchedText.Length &gt; 0 Then
                                    ' add searched text to a list of text for removing
                                    textRegions.AddRange(searchedText)
                                End If
                            Next
            
                            ' if PDF page contains text regions with text to remove
                            If textRegions.Count &gt; 0 Then
                                ' remove text regions from PDF page
                                page.RemoveText(textRegions.ToArray())
                            End If
                        Next
                    End If
            
                    ' if names of source and destination files are the same
                    If inputPdfFilename = outputPdfFilename Then
                        ' pack PDF document
                        document.Pack()
                    Else
                        ' if names of source and destination files are different
                        ' pack source PDF document to specified file
                        document.Pack(outputPdfFilename)
                    End If
                End Using
            End Sub
            
            ''' &lt;summary&gt;
            ''' Searches a text string on PDF page.
            ''' &lt;/summary&gt;
            ''' &lt;param name="page"&gt;PDF page where text should be searched.&lt;/param&gt;
            ''' &lt;param name="text"&gt;Text to search.&lt;/param&gt;
            ''' &lt;returns&gt;An array of text regions on PDF page where text was found.&lt;/returns&gt;
            Public Shared Function SimpleTextSearchOnPdfPage(page As PdfPage, text As String) As TextRegion()
                Dim textRegions As New List(Of TextRegion)()
            
                Dim textRegion As TextRegion = Nothing
                Dim startIndex As Integer = 0
                Do
                    ' search text
                    textRegion = page.TextRegion.FindText(text, startIndex, False)
                    ' if text is found
                    If textRegion IsNot Nothing Then
                        ' add searched text to a result
                        textRegions.Add(textRegion)
                        ' shift start index
                        startIndex += textRegion.TextContent.Length
                    End If
                Loop While textRegion IsNot Nothing
            
                Return textRegions.ToArray()
            End Function
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Searches and removes specified text on all pages of PDF document.
            /// &lt;/summary&gt;
            /// &lt;param name="inputPdfFilename"&gt;The name of input PDF file.&lt;/param&gt;
            /// &lt;param name="outputPdfFilename"&gt;The name of output PDF file.&lt;/param&gt;
            /// &lt;param name="textToRemove"&gt;The text to remove.&lt;/param&gt;
            public static void TestFindAndRemoveTextOnAllPages(
                string inputPdfFilename,
                string outputPdfFilename,
                params string[] textToRemove)
            {
                // open document
                using (PdfDocument document = new PdfDocument(inputPdfFilename))
                {
                    // if there is a text to remove
                    if (textToRemove.Length &gt; 0)
                    {
                        // create a list that contains text regions to remove
                        List&lt;TextRegion&gt; textRegions = new List&lt;TextRegion&gt;();
            
                        // for each page
                        foreach (PdfPage page in document.Pages)
                        {
                            // clear a list of text regions to remove
                            textRegions.Clear();
            
                            // for all text strings that must be remove
                            for (int i = 0; i &lt; textToRemove.Length; i++)
                            {
                                // search text string on PDF page
                                TextRegion[] searchedText = SimpleTextSearchOnPdfPage(page, textToRemove[i]);
                                // if text is found
                                if (searchedText != null &amp;&amp; searchedText.Length &gt; 0)
                                    // add searched text to a list of text for removing
                                    textRegions.AddRange(searchedText);
                            }
            
                            // if PDF page contains text regions with text to remove
                            if (textRegions.Count &gt; 0)
                                // remove text regions from PDF page
                                page.RemoveText(textRegions.ToArray());
                        }
                    }
            
                    // if names of source and destination files are the same
                    if (inputPdfFilename == outputPdfFilename)
                        // pack PDF document
                        document.Pack();
                    // if names of source and destination files are different
                    else
                        // pack source PDF document to specified file
                        document.Pack(outputPdfFilename);
                }
            }
            
            /// &lt;summary&gt;
            /// Searches a text string on PDF page.
            /// &lt;/summary&gt;
            /// &lt;param name="page"&gt;PDF page where text should be searched.&lt;/param&gt;
            /// &lt;param name="text"&gt;Text to search.&lt;/param&gt;
            /// &lt;returns&gt;An array of text regions on PDF page where text was found.&lt;/returns&gt;
            public static TextRegion[] SimpleTextSearchOnPdfPage(PdfPage page, string text)
            {
                List&lt;TextRegion&gt; textRegions = new List&lt;TextRegion&gt;();
            
                TextRegion textRegion = null;
                int startIndex = 0;
                do
                {
                    // search text
                    textRegion = page.TextRegion.FindText(text, ref startIndex, false);
                    // if text is found
                    if (textRegion != null)
                    {
                        // add searched text to a result
                        textRegions.Add(textRegion);
                        // shift start index
                        startIndex += textRegion.TextContent.Length;
                    }
                } while (textRegion != null);
            
                return textRegions.ToArray();
            }
            </code>
            </example>
            <seealso cref="M:Vintasoft.Imaging.Pdf.Tree.PdfPage.RemoveText(System.Drawing.RectangleF[])" />
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPage.ExtractTextRegion(System.Boolean)">
            <summary>
            Extracts all text from this page.
            </summary>
            <param name="includeAnnotations">Determines that text from annotations
            must be extracted.</param>
            <returns>Extracted text region.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfPage.Resources">
            <summary>
            Gets the resources of PDF page.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfPage.DefaultResolution">
            <summary>
            Gets or sets the default rendering resolution, in dpi, of this page.
            </summary>
            <value>Resolution of the image if page contains the single image on the page;
            otherwise, <b>96</b>.</value>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfPage.LastModified">
            <summary>
            Gets or sets the date and time when the contents of page were
            most recently modified.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfPage.IsImageOnly">
            <summary>
            Determines that page contains only the image.
            </summary>
            <value><b>true</b> - page contains only the image;
            otherwise, <b>false</b>.</value>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfPage.MediaBox">
            <summary>
            Gets or sets the media box of this page.
            </summary>
            <remarks>
            This property defines a rectangle, expressed in default user space units,
            defining the boundaries of the physical medium on which the page is
            intended to be displayed or printed.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfPage.CropBox">
            <summary>
            Gets or sets the crop box for this page.
            </summary>
            <value>
            Default value is <see cref="P:Vintasoft.Imaging.Pdf.Tree.PdfPage.MediaBox" />.
            </value>
            <remarks>
            This property defines rectangle, expressed in default user space units,
            defining the visible region of default user space. When the page is
            displayed or printed, its contents are to be clipped (cropped) to
            this rectangle and then imposed on the output medium in some
            implementation-defined manner.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfPage.BleedBox">
            <summary>
            Gets or sets a rectangle, expressed in default user space units, defining the region to 
            which the contents of the page should be clipped when output in a production environment. 
            </summary>
            <value>
            Default value is the value of <see cref="P:Vintasoft.Imaging.Pdf.Tree.PdfPage.CropBox" />.       
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfPage.TrimBox">
            <summary>
            Gets or sets rectangle, expressed in default user space units, defining the intended 
            dimensions of the finished page after trimming. 
            </summary>
            <value>
            Default value is the value of <see cref="P:Vintasoft.Imaging.Pdf.Tree.PdfPage.CropBox" />.       
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfPage.ArtBox">
            <summary>
            Gets or sets a rectangle, expressed in default user space units, defining the extent 
            of the page's meaningful content (including potential white space) as intended 
            by the page's creator. 
            </summary>
            <value>
            Default value is the value of <see cref="P:Vintasoft.Imaging.Pdf.Tree.PdfPage.CropBox" />.       
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfPage.Size">
            <summary>
            Gets the rendered page size, in user units.
            </summary>
            <value>
            This property returns <see cref="P:Vintasoft.Imaging.Pdf.Tree.PdfPage.CropBox" />.Size if
            <see cref="T:Vintasoft.Imaging.Pdf.PdfRenderingSettings" />.CropPageAtCropBox is
            <b>true</b>;
            otherwise, returns <see cref="P:Vintasoft.Imaging.Pdf.Tree.PdfPage.MediaBox" />.Size.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfPage.BoundingBox">
            <summary>
            Gets the page bounding box, that depends from current rendering settings.
            </summary>
            <seealso cref="P:Vintasoft.Imaging.Pdf.PdfRenderingSettings.UseCropBox" />
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfPage.Images">
            <summary>
            Gets all image resources associated with this page.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfPage.Fonts">
            <summary>
            Gets all fonts associated with this page.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfPage.ImagesSize">
            <summary>
            Gets the size, in bytes, of all image resources of this page.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfPage.Rotate">
            <summary>
            Gets or sets the number of degrees by which the page should be rotated
            clockwise when displayed or printed.
            </summary>
            <value>Default value: 0. Value must be a multiple of 90. </value>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfPage.Metadata">
            <summary>
            Gets or sets metadata associated with this page.
            </summary>
            <remarks>Metadata are optional and they are
            available since version 1.4 of PDF standard.</remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfPage.Thumbnail">
            <summary>
            Gets or sets thumbnail associated with this page.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfPage.VintasoftXMPAnnotations">
            <summary>
            Gets or sets VintasoftXMP annotations packet associated with this page.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfPage.VintasoftBinaryAnnotations">
            <summary>
            Gets or sets VintasoftBinary annotations packet associated with this page.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfPage.TextRegion">
            <summary>
            Gets the <see cref="P:Vintasoft.Imaging.Pdf.Tree.PdfPage.TextRegion" /> of this page.
            </summary>
            <remarks>
            Content of text region does not contain text that does not included in <see cref="P:Vintasoft.Imaging.Pdf.Tree.PdfPage.BoundingBox" />.
            </remarks>
            <seealso cref="M:Vintasoft.Imaging.Pdf.Tree.PdfPage.ExtractTextRegion(System.Boolean)" />
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfPage.ImageExtractor">
            <summary>
            Gets the <see cref="P:Vintasoft.Imaging.Pdf.Tree.PdfPage.ImageExtractor" /> of this page.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfPage.Annotations">
            <summary>
            Gets or sets an annotation array representing annotations associated with the page.
            </summary>
            <example>
            Here is an example that demonstrates how to obtain 
            information about all annotations of PDF page:
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Gets and prints information about all annotations of PDF page.
            ''' &lt;/summary&gt;
            ''' &lt;param name="pdfFileName"&gt;The filename of PDF document.&lt;/param&gt;
            Public Shared Sub PrintAnnotationsInfo(pdfFileName As String)
                ' open PDF document
                Using document As New PdfDocument(pdfFileName)
                    ' for each PDF page
                    For pageIndex As Integer = 0 To document.Pages.Count - 1
                        ' get PDF page
                        Dim page As PdfPage = document.Pages(pageIndex)
                        ' get a collection of annotations of PDF page
                        Dim annotations As PdfAnnotationList = page.Annotations
                        If annotations Is Nothing Then
                            Console.WriteLine("Page {0}: no annotations.", pageIndex + 1)
                        Else
                            ' print the page index and count of annotations
                            Console.WriteLine("Page {0} Annotation count: {1}", pageIndex + 1, annotations.Count)
                            ' for each annotation
                            For Each annotation As PdfAnnotation In annotations
                                ' print information about annotation
                                Console.WriteLine("Annotation:")
                                Console.WriteLine("           Name: ""{0}""", annotation.Name)
                                Console.WriteLine("         Author: ""{0}""", annotation.Author)
                                Console.WriteLine("        Subject: ""{0}""", annotation.Subject)
                                Console.WriteLine("       Contents: ""{0}""", annotation.Contents)
                                Console.WriteLine("AppearanceState: ""{0}""", annotation.AppearanceState)
                                Console.WriteLine("       Modified: {0}", annotation.Modified)
                                Console.WriteLine("          Flags: {0}", annotation.Flags)
                                Console.WriteLine()
                            Next
                        End If
                    Next
                End Using
            End Sub 
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Gets and prints information about all annotations of PDF page.
            /// &lt;/summary&gt;
            /// &lt;param name="pdfFileName"&gt;The filename of PDF document.&lt;/param&gt;
            public static void PrintAnnotationsInfo(string pdfFileName)
            {
                // open PDF document
                using (PdfDocument document = new PdfDocument(pdfFileName))
                {
                    // for each PDF page
                    for (int pageIndex = 0; pageIndex &lt; document.Pages.Count; pageIndex++)
                    {
                        // get PDF page
                        PdfPage page = document.Pages[pageIndex];
                        // get a collection of annotations of PDF page
                        PdfAnnotationList annotations = page.Annotations;
                        if (annotations == null)
                        {
                            Console.WriteLine("Page {0}: no annotations.", pageIndex + 1);
                        }
                        else
                        {
                            // print the page index and count of annotations
                            Console.WriteLine("Page {0} Annotation count: {1}", pageIndex + 1, annotations.Count);
                            // for each annotation
                            foreach (PdfAnnotation annotation in annotations)
                            {
                                // print information about annotation
                                Console.WriteLine("Annotation:");
                                Console.WriteLine("           Name: \"{0}\"", annotation.Name);
                                Console.WriteLine("         Author: \"{0}\"", annotation.Author);
                                Console.WriteLine("        Subject: \"{0}\"", annotation.Subject);
                                Console.WriteLine("       Contents: \"{0}\"", annotation.Contents);
                                Console.WriteLine("AppearanceState: \"{0}\"", annotation.AppearanceState);
                                Console.WriteLine("       Modified: {0}", annotation.Modified);
                                Console.WriteLine("          Flags: {0}", annotation.Flags);
                                Console.WriteLine();
                            }
                        }
                    }
                }
            } 
            </code>
            </example>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfPage.AdditionalActions">
            <summary>
            Gets or sets an additional-actions defining actions to be 
            performed when the page is opened or closed.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfPage.BackgroundImage">
            <summary>
            Gets a background image if this page is image-only.
            </summary>
            <seealso cref="P:Vintasoft.Imaging.Pdf.Tree.PdfPage.IsImageOnly" />
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.PdfPageCollection">
            <summary>
            Represents a collection of pages of PDF document.
            </summary>
            <remarks>
            Class allows to:<br />
            <ul>
            <li>get an <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfPage" /> object associated with selected page</li>
            <li>add an <see cref="T:Vintasoft.Imaging.VintasoftImage" /> object as a PDF page to
            the PDF document</li>
            <li>insert an <see cref="T:Vintasoft.Imaging.VintasoftImage" /> object as a PDF page into
            the PDF document</li>
            <li>delete PDF page from the PDF document</li>
            </ul>
            <br />
            Instance of this class cannot be created directly, it can be received only
            from the <see cref="T:Vintasoft.Imaging.Pdf.PdfDocument" /> object.<br />
            <br />
            </remarks>
            <example>
            Here is an example that demonstrates how to add some new blank page to PDF document:
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Adds a new empty page into PDF document.
            ''' &lt;/summary&gt;
            ''' &lt;param name="pdfFileName"&gt;The filename of PDF document.&lt;/param&gt;
            ''' &lt;param name="pageSize"&gt;The size of page.&lt;/param&gt;
            Public Shared Sub AddEmptyPageToPdfDocument(pdfFileName As String, pageSize As SizeF)
                ' open PDF document
                Using document As New PdfDocument(pdfFileName)
                    ' get the collection of pages of PDF document
                    Dim pages As PdfPageCollection = document.Pages
            
                    ' add an empty page into collection of pages
                    pages.Add(pageSize)
            
                    ' save changes to a file
                    document.SaveChanges()
                End Using
            End Sub
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Adds a new empty page into PDF document.
            /// &lt;/summary&gt;
            /// &lt;param name="pdfFileName"&gt;The filename of PDF document.&lt;/param&gt;
            /// &lt;param name="pageSize"&gt;The size of page.&lt;/param&gt;
            public static void AddEmptyPageToPdfDocument(string pdfFileName, SizeF pageSize)
            {
                // open PDF document
                using (PdfDocument document = new PdfDocument(pdfFileName))
                {
                    // get the collection of pages of PDF document
                    PdfPageCollection pages = document.Pages;
            
                    // add an empty page into collection of pages
                    pages.Add(pageSize);
            
                    // save changes to a file
                    document.SaveChanges();
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPageCollection.RemoveThumbnails">
            <summary>
            Removes thumbnails from all pages of this PDF document.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPageCollection.CreateThumbnails(System.Int32,System.Int32,Vintasoft.Imaging.Pdf.PdfRenderingSettings,Vintasoft.Imaging.Pdf.PdfCompression,Vintasoft.Imaging.Pdf.PdfCompressionSettings)">
            <summary>
            Creates thumbnails for all pages of this PDF document.
            </summary>
            <param name="width">Thumbnail width.</param>
            <param name="height">Thumbnail height.</param>
            <param name="renderingSettings">Rendering settings for
            rendering of thumbnails.</param>
            <param name="compression">Compression for thumbnail image resource.</param>
            <param name="compressionSettings">Compression settings for thumbnail
            image resource.</param>
            <seealso cref="M:Vintasoft.Imaging.Pdf.Tree.PdfPageCollection.CreateThumbnails(System.Int32,System.Int32)" />
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPageCollection.CreateThumbnails(System.Int32,System.Int32)">
            <summary>
            Creates thumbnails for all pages of this PDF document.
            </summary>
            <param name="width">Thumbnail width.</param>
            <param name="height">Thumbnail height.</param>
            <remarks>
            This method will render thumbnails using current rendering settings
            of this PDF document and compress thumbnail resources using JPEG
            compression with 80% quality.
            </remarks>
            <seealso cref="M:Vintasoft.Imaging.Pdf.Tree.PdfPageCollection.CreateThumbnails(System.Int32,System.Int32,Vintasoft.Imaging.Pdf.PdfRenderingSettings,Vintasoft.Imaging.Pdf.PdfCompression,Vintasoft.Imaging.Pdf.PdfCompressionSettings)" />
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPageCollection.Insert(System.Int32,Vintasoft.Imaging.ImageSize)">
            <summary>
            Inserts new blank page with specified size into the
            <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfPageCollection" />.
            </summary>
            <param name="index">The zero-based index at which page should be inserted.</param>
            <param name="size">The page size.</param>
            <returns>Inserted <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfPage" />.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPageCollection.Insert(System.Int32,Vintasoft.Imaging.PaperSizeKind)">
            <summary>
            Inserts new blank page with specified size into the
            <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfPageCollection" />.
            </summary>
            <param name="index">The zero-based index at which page should be inserted.</param>
            <param name="size">The page size.</param>
            <returns>Inserted <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfPage" />.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPageCollection.Insert(System.Int32,System.Drawing.SizeF)">
            <summary>
            Inserts new blank page with specified size into the
            <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfPageCollection" />.
            </summary>
            <param name="index">The zero-based index at which page should be inserted.</param>
            <param name="size"><see cref="T:System.Drawing.SizeF" /> structure that specifies page size in user units.</param>
            <returns>Inserted <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfPage" />.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPageCollection.Insert(System.Int32,Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Inserts new page with specified image into the
            <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfPageCollection" />.
            </summary>
            <param name="index">The zero-based index at which page should be inserted.</param>
            <param name="image">Background image of the page.</param>
            <returns>Inserted <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfPage" />.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPageCollection.Insert(System.Int32,Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.Pdf.PdfCompression)">
            <summary>
            Inserts new page with specified image using the specified
            <see cref="T:Vintasoft.Imaging.Pdf.PdfCompression" /> into the
            <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfPageCollection" />.
            </summary>
            <param name="index">The zero-based index at which page should be inserted.</param>
            <param name="image">Background image of the page.</param>
            <param name="compression">Image resource compression.</param>
            <returns>Inserted <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfPage" />.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPageCollection.Insert(System.Int32,Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.Pdf.PdfCompression,Vintasoft.Imaging.Pdf.PdfCompressionSettings,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Inserts new page with specified image using the
            specified <see cref="T:Vintasoft.Imaging.Pdf.PdfCompression" /> and
            <see cref="T:Vintasoft.Imaging.Pdf.PdfCompressionSettings" /> into the
            <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfPageCollection" />.
            </summary>
            <param name="index">The zero-based index at which page should be inserted.</param>
            <param name="image">Background image of the page.</param>
            <param name="compression">Image resource compression.</param>
            <param name="compressionParams">Image resource compression settings.</param>
            <param name="progressController">Encoding progress controller.</param>
            <returns>Inserted <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfPage" />.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPageCollection.Insert(System.Int32,Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.Pdf.PdfCompression,Vintasoft.Imaging.Pdf.PdfCompressionSettings)">
            <summary>
            Inserts new page with specified image using the
            specified <see cref="T:Vintasoft.Imaging.Pdf.PdfCompression" /> and
            <see cref="T:Vintasoft.Imaging.Pdf.PdfCompressionSettings" /> into the
            <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfPageCollection" />.
            </summary>
            <param name="index">The zero-based index at which page should be inserted.</param>
            <param name="image">Background image of the page.</param>
            <param name="compression">Image resource compression.</param>
            <param name="compressionParams">Image resource compression settings.</param>
            <returns>Inserted <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfPage" />.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPageCollection.Insert(System.Int32,Vintasoft.Imaging.Pdf.Tree.PdfPage)">
            <summary>
            Inserts the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfPage" /> at specified index into
            the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfPageCollection" />. 
            </summary>
            <param name="index">The zero-based index at which page should be inserted.</param>
            <param name="page">The <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfPage" /> to insert.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPageCollection.Add(System.Drawing.SizeF)">
            <summary>
            Adds new blank page with specified size into the
            <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfPageCollection" />.
            </summary>
            <param name="size"><see cref="T:System.Drawing.SizeF" /> structure that specifies page size.</param>
            <returns>Added <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfPage" />.</returns>
            <example>
            Here is an example that demonstrates how to add some new blank page to PDF document:
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Adds a new empty page into PDF document.
            ''' &lt;/summary&gt;
            ''' &lt;param name="pdfFileName"&gt;The filename of PDF document.&lt;/param&gt;
            ''' &lt;param name="pageSize"&gt;The size of page.&lt;/param&gt;
            Public Shared Sub AddEmptyPageToPdfDocument(pdfFileName As String, pageSize As SizeF)
                ' open PDF document
                Using document As New PdfDocument(pdfFileName)
                    ' get the collection of pages of PDF document
                    Dim pages As PdfPageCollection = document.Pages
            
                    ' add an empty page into collection of pages
                    pages.Add(pageSize)
            
                    ' save changes to a file
                    document.SaveChanges()
                End Using
            End Sub
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Adds a new empty page into PDF document.
            /// &lt;/summary&gt;
            /// &lt;param name="pdfFileName"&gt;The filename of PDF document.&lt;/param&gt;
            /// &lt;param name="pageSize"&gt;The size of page.&lt;/param&gt;
            public static void AddEmptyPageToPdfDocument(string pdfFileName, SizeF pageSize)
            {
                // open PDF document
                using (PdfDocument document = new PdfDocument(pdfFileName))
                {
                    // get the collection of pages of PDF document
                    PdfPageCollection pages = document.Pages;
            
                    // add an empty page into collection of pages
                    pages.Add(pageSize);
            
                    // save changes to a file
                    document.SaveChanges();
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPageCollection.Add(Vintasoft.Imaging.ImageSize)">
            <summary>
            Adds new blank page with specified size into the
            <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfPageCollection" />.
            </summary>
            <param name="size">The page size.</param>
            <returns>Added <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfPage" />.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPageCollection.Add(Vintasoft.Imaging.PaperSizeKind)">
            <summary>
            Adds new blank page with specified size into the
            <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfPageCollection" />.
            </summary>
            <param name="size">The page size.</param>
            <returns>Added <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfPage" />.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPageCollection.Add(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Adds new page with specified image into the
            <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfPageCollection" />.
            </summary>
            <param name="image">Background image of the page.</param>
            <returns>Added <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfPage" />.</returns>
            <example>
            Here is an example that demonstrates how to add a new image-only page to PDF document:
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Adds new image-only PDF page into a PDF document.
            ''' &lt;/summary&gt;
            ''' &lt;param name="pdfFileName"&gt;The filename of PDF document.&lt;/param&gt;
            ''' &lt;param name="image"&gt;The image of the page.&lt;/param&gt;
            Public Shared Sub AddImageOnlyPdfPageToPdfDocument(pdfFileName As String, image As VintasoftImage)
                ' open PDF document
                Using document As New PdfDocument(pdfFileName)
                    ' get the collection of pages of PDF document
                    Dim pages As PdfPageCollection = document.Pages
            
                    ' add page with specified image into collection of pages
                    pages.Add(image)
            
                    ' save changes to a file
                    document.SaveChanges()
                End Using
            End Sub
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Adds new image-only PDF page into a PDF document.
            /// &lt;/summary&gt;
            /// &lt;param name="pdfFileName"&gt;The filename of PDF document.&lt;/param&gt;
            /// &lt;param name="image"&gt;The image of the page.&lt;/param&gt;
            public static void AddImageOnlyPdfPageToPdfDocument(string pdfFileName, VintasoftImage image)
            {
                // open PDF document
                using (PdfDocument document = new PdfDocument(pdfFileName))
                {
                    // get the collection of pages of PDF document
                    PdfPageCollection pages = document.Pages;
            
                    // add page with specified image into collection of pages
                    pages.Add(image);
            
                    // save changes to a file
                    document.SaveChanges();
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPageCollection.Add(Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.Pdf.PdfCompression)">
            <summary>
            Adds new page with specified image using the specified
            <see cref="T:Vintasoft.Imaging.Pdf.PdfCompression" /> into the
            <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfPageCollection" />.
            </summary>
            <param name="image">Background image of the page.</param>
            <param name="compression">Image resource compression.</param>
            <returns>Added <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfPage" />.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPageCollection.Add(Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.Pdf.PdfCompression,Vintasoft.Imaging.Pdf.PdfCompressionSettings,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Adds new page with specified image using the specified
            <see cref="T:Vintasoft.Imaging.Pdf.PdfCompression" /> and <see cref="T:Vintasoft.Imaging.Pdf.PdfCompressionSettings" />
            into the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfPageCollection" />.
            </summary>
            <param name="image">Background image of the page.</param>
            <param name="compression">Image resource compression.</param>
            <param name="compressionParams">Image resource compression settings.</param>
            <param name="progressController">Encoding progress controller.</param>
            <returns>Added <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfPage" />.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPageCollection.Add(Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.Pdf.PdfCompression,Vintasoft.Imaging.Pdf.PdfCompressionSettings)">
            <summary>
            Adds new page with specified image using the specified
            <see cref="T:Vintasoft.Imaging.Pdf.PdfCompression" /> and <see cref="T:Vintasoft.Imaging.Pdf.PdfCompressionSettings" />
            into the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfPageCollection" />.
            </summary>
            <param name="image">Background image of the page.</param>
            <param name="compression">Image resource compression.</param>
            <param name="compressionParams">Image resource compression settings.</param>
            <returns>Added <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfPage" />.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPageCollection.Add(Vintasoft.Imaging.Pdf.Tree.PdfPage)">
            <summary>
            Adds the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfPage" /> at specified index into
            the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfPageCollection" />. 
            </summary>
            <param name="page">The <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfPage" /> to add.</param>
            <example>
            Here is an example that demonstrates how to copy the first page of PDF 
            document and add it to the end of the same PDF document:
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Copies the first page of PDF document to the end of PDF document.
            ''' &lt;/summary&gt;
            ''' &lt;param name="pdfFileName"&gt;The filename of PDF document.&lt;/param&gt;
            Public Shared Sub CopyFirstPdfPageToEndOfPdfDocument(pdfFileName As String)
                ' open PDF document
                Using document As New PdfDocument(pdfFileName)
                    ' get the collection of pages of PDF document
                    Dim pages As PdfPageCollection = document.Pages
            
                    ' add first page to the end of PDF document
                    pages.Add(pages(0))
            
                    ' save changes to a file
                    document.SaveChanges()
                End Using
            End Sub
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Copies the first page of PDF document to the end of PDF document.
            /// &lt;/summary&gt;
            /// &lt;param name="pdfFileName"&gt;The filename of PDF document.&lt;/param&gt;
            public static void CopyFirstPdfPageToEndOfPdfDocument(string pdfFileName)
            {
                // open PDF document
                using (PdfDocument document = new PdfDocument(pdfFileName))
                {
                    // get the collection of pages of PDF document
                    PdfPageCollection pages = document.Pages;
            
                    // add first page to the end of PDF document
                    pages.Add(pages[0]);
            
                    // save changes to a file
                    document.SaveChanges();
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPageCollection.AddRange(Vintasoft.Imaging.Pdf.Tree.PdfPage[])">
            <summary>
            Appends a range of pages to the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfPageCollection" />. 
            </summary>
            <param name="pages">Array of pages to add.</param>
            <example>
            Here is an example that demonstrates how to copy all pages of PDF document
            and add them to the end of another PDF document:
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Copies all pages of source PDF document to the end of destination PDF document.
            ''' &lt;/summary&gt;
            ''' &lt;param name="srcPdfFileName"&gt;The filename of source PDF document.&lt;/param&gt;
            ''' &lt;param name="destPdfFileName"&gt;The filename of destination PDF document.&lt;/param&gt;
            Public Shared Sub CopyPagesFromOnePdfDocumentToAnother(srcPdfFileName As String, destPdfFileName As String)
                ' open source PDF document
                Using srcDocument As New PdfDocument(srcPdfFileName)
                    ' open destination PDF document
                    Using destDocument As New PdfDocument(destPdfFileName)
                        ' get pages of source PDF document as array
                        Dim srcDocumentPages As PdfPage() = srcDocument.Pages.ToArray()
            
                        ' append the array of PDF pages to the destination PDF document
                        destDocument.Pages.AddRange(srcDocumentPages)
            
                        ' save changes to a file
                        destDocument.SaveChanges()
                    End Using
                End Using
            End Sub
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Copies all pages of source PDF document to the end of destination PDF document.
            /// &lt;/summary&gt;
            /// &lt;param name="srcPdfFileName"&gt;The filename of source PDF document.&lt;/param&gt;
            /// &lt;param name="destPdfFileName"&gt;The filename of destination PDF document.&lt;/param&gt;
            public static void CopyPagesFromOnePdfDocumentToAnother(string srcPdfFileName, string destPdfFileName)
            {
                // open source PDF document
                using (PdfDocument srcDocument = new PdfDocument(srcPdfFileName))
                {
                    // open destination PDF document
                    using (PdfDocument destDocument = new PdfDocument(destPdfFileName))
                    {
                        // get pages of source PDF document as array
                        PdfPage[] srcDocumentPages = srcDocument.Pages.ToArray();
            
                        // append the array of PDF pages to the destination PDF document
                        destDocument.Pages.AddRange(srcDocumentPages);
            
                        // save changes to a file
                        destDocument.SaveChanges();
                    }
                }
            } 
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPageCollection.Swap(Vintasoft.Imaging.Pdf.Tree.PdfPage,Vintasoft.Imaging.Pdf.Tree.PdfPage)">
            <summary>
            Swaps two pages in the collection. 
            </summary>
            <param name="firstPage">First page.</param>
            <param name="secondPage">Second page.</param>
            <example>
            Here is an example that demonstrates how to reorder pages of PDF document:
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Swaps the first and the last pages of PDF document.
            ''' &lt;/summary&gt;
            ''' &lt;param name="pdfFileName"&gt;The filename of PDF document.&lt;/param&gt;
            Public Shared Sub SwapPages(pdfFileName As String)
                ' open PDF documnet
                Using document As New PdfDocument(pdfFileName)
                    ' get the collection of pages of PDF document
                    Dim pages As PdfPageCollection = document.Pages
            
                    ' get the page count
                    Dim pagesCount As Integer = pages.Count
                    ' swap the first and the last pages
                    pages.Swap(0, pagesCount - 1)
            
                    ' save changes to a file
                    document.SaveChanges()
                End Using
            End Sub
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Swaps the first and the last pages of PDF document.
            /// &lt;/summary&gt;
            /// &lt;param name="pdfFileName"&gt;The filename of PDF document.&lt;/param&gt;
            public static void SwapPages(string pdfFileName)
            {
                // open PDF documnet
                using (PdfDocument document = new PdfDocument(pdfFileName))
                {
                    // get the collection of pages of PDF document
                    PdfPageCollection pages = document.Pages;
            
                    // get the page count
                    int pagesCount = pages.Count;
                    // swap the first and the last pages
                    pages.Swap(0, pagesCount - 1);
            
                    // save changes to a file
                    document.SaveChanges();
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPageCollection.Swap(System.Int32,System.Int32)">
            <summary>
            Swaps two pages in the collection. 
            </summary>
            <param name="firstPageIndex">Index of the first page.</param>
            <param name="secondPageIndex">Index of the second page.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPageCollection.IndexOf(Vintasoft.Imaging.Pdf.Tree.PdfPage)">
            <summary>
            Gets the index of the specified <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfPage" />.
            </summary>
            <param name="page">The <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfPage" /> to search for.</param>
            <returns>Index of the specified <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfPage" />.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPageCollection.Clear">
            <summary>
            Removes all pages from the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfPageCollection" />. 
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPageCollection.Contains(Vintasoft.Imaging.Pdf.Tree.PdfPage)">
            <summary>
            Determines whether the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfPageCollection" /> contains a specific
            <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfPage" />. 
            </summary>
            <param name="item">The <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfPage" /> to locate.</param>
            <returns><b>true</b> if the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfPage" /> is found in the
            <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfPageCollection" />; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPageCollection.CopyTo(Vintasoft.Imaging.Pdf.Tree.PdfPage[],System.Int32)">
            <summary>
            Copies all the pages of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfPageCollection" /> instance to
            the specified one-dimensional Array. <b>This method is not implemented.</b>
            </summary>
            <param name="array">The one-dimensional Array that is the destination
            of the pages copied from the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfPageCollection" /> instance.</param>
            <param name="arrayIndex">A integer that represents the index in array
            at which copying begins.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPageCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the page at the specified index of the
            <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfPageCollection" /> instance. 
            </summary>
            <param name="index">The zero-based index of the page to remove.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPageCollection.Remove(Vintasoft.Imaging.Pdf.Tree.PdfPage)">
            <summary>
            Removes the first occurrence of a specific page from the
            <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfPageCollection" />. 
            </summary>
            <param name="value">The <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfPage" /> to remove from 
            the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfPageCollection" />. </param>
            <returns><b>true</b> if page removed; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPageCollection.ToArray">
            <summary>
            Copies the pages of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfPageCollection" /> to a new array.
            </summary>
            <returns>An array containing the pages of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfPageCollection" />.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfPageCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection. 
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfPageCollection.Item(System.Int32)">
            <summary>
            Gets or sets the page at the specified index.
            </summary>
            <param name="index">The zero-based index of the page to get or set.</param>
            <returns>The page at the specified index.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfPageCollection.Count">
            <summary>
            Gets the number of pages contained in the collection.
            </summary>
            <example>
            Here is an example that demonstrates how to get a page count of PDF document:
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Returns the number of pages in PDF document.
            ''' &lt;/summary&gt;
            ''' &lt;param name="pdfFileName"&gt;The filename of PDF document.&lt;/param&gt;
            Public Shared Function GetPagesCount(pdfFileName As String) As Integer
                ' open PDF document
                Using document As New PdfDocument(pdfFileName)
                    ' get the number of pages
                    Dim pagesCount As Integer = document.Pages.Count
            
                    ' return number of pages
                    Return pagesCount
                End Using
            End Function
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Returns the number of pages in PDF document.
            /// &lt;/summary&gt;
            /// &lt;param name="pdfFileName"&gt;The filename of PDF document.&lt;/param&gt;
            public static int GetPagesCount(string pdfFileName)
            {
                // open PDF document
                using (PdfDocument document = new PdfDocument(pdfFileName))
                {
                    // get the number of pages
                    int pagesCount = document.Pages.Count;
                    
                    // return number of pages
                    return pagesCount;
                }
            }
            </code>
            </example>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfPageCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.Patterns.PatternBase">
            <summary>
            Represents a base class for patterns. 
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.Patterns.PatternBase.PatternType">
            <summary>
            Gets code identifying the type of pattern.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.Patterns.PatternType">
            <summary>
            Specifies available pattern types.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.Patterns.PatternType.Undefined">
            <summary>
            Undefined.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.Patterns.PatternType.Tiling">
            <summary>
            Tiling pattern.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.Patterns.PatternType.Shading">
            <summary>
            Shading pattern.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.Patterns.TilingPattern">
            <summary>
            Represents the tiling pattern consists of a small graphical figure 
            called a pattern cell. 
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.Patterns.ShadingPattern">
            <summary>
            Shading patterns (PDF 1.3) provide a smooth transition 
            between colors across an area to be painted, independent of the
            resolution of any particular output device and without specifying 
            the number of steps in the color transition. 
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.Patterns.ShadingPattern.Shading">
            <summary>
            Gets a shading object defining the shading pattern's gradient fill.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.PdfResources">
            <summary>
            Contains named resources that are used in a content stream.
            </summary>
            <remarks>
            For example, if a text operator appearing within
            the content stream needs a certain font, the content stream's 
            resources can associate the name F42 with the corresponding
            font. 
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfResources.Patterns">
            <summary>
            Gets a dictionary that maps resource names to pattern objects.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfResources.Fonts">
            <summary>
            Gets or sets a dictionary that maps resource names to font
            dictionaries (see Chapter 5).
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfResources.Resources">
            <summary>
            Gets or sets a dictionary that maps resource names to external
            objects (Form XObjects, Image XObjects).
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.ShadingPatterns.ShadingPatternType">
            <summary>
            Specifies available shading pattern types.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.ShadingPatterns.ShadingPatternType.Undefined">
            <summary>
            Undefined pattern.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.ShadingPatterns.ShadingPatternType.FunctionBased">
            <summary>
            In type 1 (function-based) shadings, the color at every point 
            in the domain is defined by a specified mathematical function.
            The function need not be smooth or continuous. This type is the
            most general of the available shading types and is useful for
            shadings that cannot be adequately described with any of the 
            other types.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.ShadingPatterns.ShadingPatternType.Axial">
            <summary>
            Type 2 (axial) shadings define a color blend that varies along
            a linear axis between two endpoints and extends indefinitely
            perpendicular to that axis. The shading may optionally be
            extended beyond either or both endpoints by continuing the
            boundary colors indefinitely.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.ShadingPatterns.ShadingPatternType.Radial">
            <summary>
            Type 3 (radial) shadings define a color blend that varies 
            between two circles. Shadings of this type are commonly used to 
            depict three-dimensional spheres and cones.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.ShadingPatterns.ShadingPatternType.FreeFormGouraudShadedTriangleMesh">
            <summary>
            Type 4 shadings (free-form Gouraud-shaded triangle meshes) are commonly 
            used to represent complex colored and shaded three-dimensional shapes.
            The area to be shaded is defined by a path composed entirely of triangles. 
            The color at each vertex of the triangles is specified, and a technique
            known as Gouraud interpolation is used to color the interiors. 
            The interpolation functions defining the shading may be linear
            or nonlinear.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.ShadingPatterns.ShadingPatternType.LatticeFormGouraudShadedTriangleMesh">
            <summary>
            Type 5 shadings (lattice-form Gouraud-shaded triangle meshes) are
            similar to type 4, but instead of using free-form geometry, their
            vertices are arranged in a pseudorectangular lattice, which is 
            topologically equivalent to a rectangular grid. The vertices are
            organized into rows, which need not be geometrically linear.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.ShadingPatterns.ShadingPatternType.CoonsPatchMesh">
            <summary>
            Type 6 shadings (Coons patch meshes) are constructed from 
            one or more color patches, each bounded by four cubic Bézier 
            curves. Degenerate Bézier curves are allowed and are useful
            for certain graphical effects. At least one complete patch 
            must be specified.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.ShadingPatterns.ShadingPatternType.TensorProductPatchMesh">
            <summary>
            Type 7 shadings (tensor-product patch meshes) are identical to 
            type 6, except that they are based on a bicubic tensor-product
            patch defined by 16 control points instead of the 12 control
            points that define a Coons patch. The shading dictionaries 
            representing the two patch types differ only in the value of
            the ShadingType entry and in the number of control points specified
            for each patch in the data stream.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.PdfFormXObjectResource">
            <summary>
            Provides information about form XObject resource of PDF document.
            </summary>
            <remarks>
            A form XObject is a PDF content stream that is a 
            self-contained description of any sequence of graphics
            objects (including path objects, text objects, and sampled
            images). A form XObject may be painted multiple 
            times-either on several pages or at several locations 
            on the same page—and produces the same results each time,
            subject only to the graphics state at the time it is invoked. 
            Not only is this shared definition economical to represent
            in the PDF file, but under suitable circumstances the PDF
            consumer application can optimize execution by caching the
            results of rendering the form XObject for repeated reuse.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfFormXObjectResource.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfFormXObjectResource" /> class.
            </summary>
            <param name="document">Parent PDF document.</param>
            <param name="boundingBox">Bounding box of the form.</param>
            <example>
            Here is an example that demonstrates how to create an empty Form XObject, 
            draw a text on it and then draw the Form Xobject itself in the right lower 
            corner of each page of PDF document:
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Creates an empty Form XObject, draws a text on it
            ''' and then draws the Form XObject itself in the right lower corner
            ''' of each page of PDF document.
            ''' &lt;/summary&gt;
            ''' &lt;param name="pdfFilename"&gt;The filename of PDF document.&lt;/param&gt;
            ''' &lt;remarks&gt;
            ''' This method doesn't consider the rotation of the page.
            ''' &lt;/remarks&gt;
            Public Shared Sub DrawingOnTemplate(pdfFilename As String)
                ' open PDF document
                Using pdfDocument As New PdfDocument(pdfFilename)
                    ' bounding box of the form
                    Dim boundingBox As New RectangleF(0, 0, 100, 50)
                    ' create a form with specified bounding box
                    Dim form As New PdfFormXObjectResource(pdfDocument, boundingBox)
                    ' open PdfGraphics from the form
                    Using formGraphics As PdfGraphics = PdfGraphics.FromForm(form)
                        ' text of the string
                        Dim text As String = "Template"
                        ' get standard font
                        Dim font As PdfFont = pdfDocument.FontManager.GetStandardFont(StandardFontType.TimesRoman)
                        ' rectangle of text string on the form
                        Dim textRect As New RectangleF(10, 10, 80, 30)
                        ' get font size for specified rectangle
                        Dim fontSize As Single = formGraphics.MeasureFontSize(text, font, textRect.Width, textRect.Height)
                        ' create brush for the text string
                        Dim brush As New PdfBrush(Color.Red)
                        ' draw the text string on the form
                        formGraphics.DrawString(text, font, fontSize, brush, textRect, PdfContentAlignment.Center, _
                            False)
                    End Using
            
                    ' get original dimensions of the form
                    Dim formWidth As Single = form.BoundingBox.Width
                    Dim formHeight As Single = form.BoundingBox.Height
            
                    ' for each page of the PDF document
                    For Each page As PdfPage In pdfDocument.Pages
                        ' open PdfGraphics from the page
                        Using pageGraphics As PdfGraphics = PdfGraphics.FromPage(page)
                            ' get the crop box of the page
                            Dim cropBox As RectangleF = page.CropBox
                            ' width of form area on the page
                            Dim formAreaWidth As Single = cropBox.Width / 3
                            ' height of form area on the page
                            Dim formAreaHeight As Single = cropBox.Height / 3
            
                            ' calculate ratios of form area dimensions to form dimensions
                            Dim horizontalRatio As Single = formAreaWidth / formWidth
                            Dim verticalRatio As Single = formAreaHeight / formHeight
                            ' destination rectangle
                            Dim rect As RectangleF
            
                            ' calculate destination rectanle that is fitted into the specified
                            ' form area with the same width-to-height ratio as the form has
            
                            If horizontalRatio &gt; verticalRatio Then
                                ' calculate actual form area width
                                Dim actualFormAreaWidth As Single = formAreaWidth * (verticalRatio / horizontalRatio)
                                ' calculate the destination rectangle in the right lower corner of the page
                                rect = New RectangleF(cropBox.X + cropBox.Width - actualFormAreaWidth, cropBox.Y, actualFormAreaWidth, formAreaHeight)
                            Else
                                ' calculate actual form area height
                                Dim actualFormAreaHeight As Single = formAreaHeight * (horizontalRatio / verticalRatio)
                                ' calculate the destination rectangle in the right lower corner of the page
                                rect = New RectangleF(cropBox.X + 2 * cropBox.Width / 3, cropBox.Y, formAreaWidth, actualFormAreaHeight)
                            End If
                            ' set clip rectangle
                            pageGraphics.IntersectClip(rect)
                            ' draw the form on the page
                            pageGraphics.DrawForm(form, rect)
                        End Using
                    Next
                    ' save changes to the source
                    pdfDocument.SaveChanges()
                End Using
            End Sub
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Creates an empty Form XObject, draws a text on it
            /// and then draws the Form XObject itself in the right lower corner
            /// of each page of PDF document.
            /// &lt;/summary&gt;
            /// &lt;param name="pdfFilename"&gt;The filename of PDF document.&lt;/param&gt;
            /// &lt;remarks&gt;
            /// This method doesn't consider the rotation of the page.
            /// &lt;/remarks&gt;
            public static void DrawingOnTemplate(string pdfFilename)
            {
                // open PDF document
                using (PdfDocument pdfDocument = new PdfDocument(pdfFilename))
                {
                    // bounding box of the form
                    RectangleF boundingBox = new RectangleF(0, 0, 100, 50);
                    // create a form with specified bounding box
                    PdfFormXObjectResource form = new PdfFormXObjectResource(pdfDocument, boundingBox);
                    // open PdfGraphics from the form
                    using (PdfGraphics formGraphics = PdfGraphics.FromForm(form))
                    {
                        // text of the string
                        string text = "Template";
                        // get standard font
                        PdfFont font = pdfDocument.FontManager.GetStandardFont(StandardFontType.TimesRoman);
                        // rectangle of text string on the form
                        RectangleF textRect = new RectangleF(10, 10, 80, 30);
                        // get font size for specified rectangle
                        float fontSize = formGraphics.MeasureFontSize(text, font, textRect.Width, textRect.Height);
                        // create brush for the text string
                        PdfBrush brush = new PdfBrush(Color.Red);
                        // draw the text string on the form
                        formGraphics.DrawString(text, font, fontSize, brush, textRect, PdfContentAlignment.Center, false);
                    }
            
                    // get original dimensions of the form
                    float formWidth = form.BoundingBox.Width;
                    float formHeight = form.BoundingBox.Height;
            
                    // for each page of the PDF document
                    foreach (PdfPage page in pdfDocument.Pages)
                    {
                        // open PdfGraphics from the page
                        using (PdfGraphics pageGraphics = PdfGraphics.FromPage(page))
                        {
                            // get the crop box of the page
                            RectangleF cropBox = page.CropBox;
                            // width of form area on the page
                            float formAreaWidth = cropBox.Width / 3;
                            // height of form area on the page
                            float formAreaHeight = cropBox.Height / 3;
            
                            // calculate ratios of form area dimensions to form dimensions
                            float horizontalRatio = formAreaWidth / formWidth;
                            float verticalRatio = formAreaHeight / formHeight;
                            // destination rectangle
                            RectangleF rect;
            
                            // calculate destination rectanle that is fitted into the specified
                            // form area with the same width-to-height ratio as the form has
            
                            if (horizontalRatio &gt; verticalRatio)
                            {
                                // calculate actual form area width
                                float actualFormAreaWidth = formAreaWidth * (verticalRatio / horizontalRatio);
                                // calculate the destination rectangle in the right lower corner of the page
                                rect = new RectangleF(
                                    cropBox.X + cropBox.Width - actualFormAreaWidth,
                                    cropBox.Y,
                                    actualFormAreaWidth,
                                    formAreaHeight);
                            }
                            else
                            {
                                // calculate actual form area height
                                float actualFormAreaHeight = formAreaHeight * (horizontalRatio / verticalRatio);
                                // calculate the destination rectangle in the right lower corner of the page
                                rect = new RectangleF(
                                    cropBox.X + 2 * cropBox.Width / 3,
                                    cropBox.Y,
                                    formAreaWidth,
                                    actualFormAreaHeight);
                            }
                            // set clip rectangle
                            pageGraphics.IntersectClip(rect);
                            // draw the form on the page
                            pageGraphics.DrawForm(form, rect);
                        }
                    }
                    // save changes to the source
                    pdfDocument.SaveChanges();
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfFormXObjectResource.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,Vintasoft.Imaging.Pdf.Tree.PdfPage)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfFormXObjectResource" /> class.
            </summary>
            <param name="document">The document.</param>
            <param name="page">The page that copies and converts to form.</param>
            <example>
            Here is an example that demonstrates how to draw one PDF page 
            in the left upper corner of another PDF page:
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Draws one PDF page in the left upper corner of another PDF page
            ''' using Form XObject that represents the page.
            ''' &lt;/summary&gt;
            ''' &lt;param name="pdfFilename"&gt;The filename of PDF document.&lt;/param&gt;
            ''' &lt;remarks&gt;
            ''' This method doesn't consider the rotation of the page.
            ''' &lt;/remarks&gt;
            Public Shared Sub DrawingTemplateOnAnotherTemplate(pdfFilename As String)
                ' open PDF document
                Using pdfDocument As New PdfDocument(pdfFilename)
                    If pdfDocument.Pages.Count = 1 Then
                        Return
                    End If
            
                    ' get first page of the document
                    Dim firstPage As PdfPage = pdfDocument.Pages(0)
                    ' get second page of the document
                    Dim secondPage As PdfPage = pdfDocument.Pages(1)
                    ' create a form that represents the second page
                    Dim form As New PdfFormXObjectResource(pdfDocument, secondPage)
                    ' get original dimensions of the form
                    Dim formWidth As Single = form.BoundingBox.Width
                    Dim formHeight As Single = form.BoundingBox.Height
            
                    ' open PdfGraphics from the page
                    Using pageGraphics As PdfGraphics = PdfGraphics.FromPage(firstPage)
                        ' get the crop box of the page
                        Dim cropBox As RectangleF = firstPage.CropBox
                        ' width of form area on the page
                        Dim formAreaWidth As Single = cropBox.Width / 3
                        ' height of form area on the page
                        Dim formAreaHeight As Single = cropBox.Height / 3
            
                        ' calculate ratios of form area dimensions to form dimensions
                        Dim horizontalRatio As Single = formAreaWidth / formWidth
                        Dim verticalRatio As Single = formAreaHeight / formHeight
                        ' destination rectangle
                        Dim rect As RectangleF
            
                        ' calculate destination rectanle that is fitted into the specified
                        ' form area with the same width-to-height ratio as the form has
            
                        If horizontalRatio &gt; verticalRatio Then
                            ' calculate actual form area width
                            Dim actualFormAreaWidth As Single = formAreaWidth * (verticalRatio / horizontalRatio)
                            ' calculate the destination rectangle in the right lower corner of the page
                            rect = New RectangleF(cropBox.X, cropBox.Y + 2 * cropBox.Height / 3, actualFormAreaWidth, formAreaHeight)
                        Else
                            ' calculate actual form area height
                            Dim actualFormAreaHeight As Single = formAreaHeight * (horizontalRatio / verticalRatio)
                            ' calculate the destination rectangle in the right lower corner of the page
                            rect = New RectangleF(cropBox.X, cropBox.Y + cropBox.Height - actualFormAreaHeight, formAreaWidth, actualFormAreaHeight)
                        End If
                        ' set clip rectangle
                        pageGraphics.IntersectClip(rect)
                        ' fill a rectangle with white color as a background
                        pageGraphics.FillRectangle(New PdfBrush(Color.White), rect)
                        ' draw red border
                        pageGraphics.DrawRectangle(New PdfPen(Color.Red, 2), rect)
                        ' draw the form on the page
                        pageGraphics.DrawForm(form, rect)
                    End Using
            
                    ' save changes to the source
                    pdfDocument.SaveChanges()
                End Using
            End Sub
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Draws one PDF page in the left upper corner of another PDF page
            /// using Form XObject that represents the page.
            /// &lt;/summary&gt;
            /// &lt;param name="pdfFilename"&gt;The filename of PDF document.&lt;/param&gt;
            /// &lt;remarks&gt;
            /// This method doesn't consider the rotation of the page.
            /// &lt;/remarks&gt;
            public static void DrawingTemplateOnAnotherTemplate(string pdfFilename)
            {
                // open PDF document
                using (PdfDocument pdfDocument = new PdfDocument(pdfFilename))
                {
                    if (pdfDocument.Pages.Count == 1)
                        return;
            
                    // get first page of the document
                    PdfPage firstPage = pdfDocument.Pages[0];
                    // get second page of the document
                    PdfPage secondPage = pdfDocument.Pages[1];
                    // create a form that represents the second page
                    PdfFormXObjectResource form = new PdfFormXObjectResource(pdfDocument, secondPage);
                    // get original dimensions of the form
                    float formWidth = form.BoundingBox.Width;
                    float formHeight = form.BoundingBox.Height;
            
                    // open PdfGraphics from the page
                    using (PdfGraphics pageGraphics = PdfGraphics.FromPage(firstPage))
                    {
                        // get the crop box of the page
                        RectangleF cropBox = firstPage.CropBox;
                        // width of form area on the page
                        float formAreaWidth = cropBox.Width / 3;
                        // height of form area on the page
                        float formAreaHeight = cropBox.Height / 3;
            
                        // calculate ratios of form area dimensions to form dimensions
                        float horizontalRatio = formAreaWidth / formWidth;
                        float verticalRatio = formAreaHeight / formHeight;
                        // destination rectangle
                        RectangleF rect;
            
                        // calculate destination rectanle that is fitted into the specified
                        // form area with the same width-to-height ratio as the form has
            
                        if (horizontalRatio &gt; verticalRatio)
                        {
                            // calculate actual form area width
                            float actualFormAreaWidth = formAreaWidth * (verticalRatio / horizontalRatio);
                            // calculate the destination rectangle in the right lower corner of the page
                            rect = new RectangleF(
                                cropBox.X,
                                cropBox.Y + 2 * cropBox.Height / 3,
                                actualFormAreaWidth,
                                formAreaHeight);
                        }
                        else
                        {
                            // calculate actual form area height
                            float actualFormAreaHeight = formAreaHeight * (horizontalRatio / verticalRatio);
                            // calculate the destination rectangle in the right lower corner of the page
                            rect = new RectangleF(
                                cropBox.X,
                                cropBox.Y + cropBox.Height - actualFormAreaHeight,
                                formAreaWidth,
                                actualFormAreaHeight);
                        }
                        // set clip rectangle
                        pageGraphics.IntersectClip(rect);
                        // fill a rectangle with white color as a background
                        pageGraphics.FillRectangle(new PdfBrush(Color.White), rect);
                        // draw red border
                        pageGraphics.DrawRectangle(new PdfPen(Color.Red, 2), rect);
                        // draw the form on the page
                        pageGraphics.DrawForm(form, rect);
                    }
            
                    // save changes to the source
                    pdfDocument.SaveChanges();
                }
            }
            </code>
            </example>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfFormXObjectResource.BoundingBox">
            <summary>
            Gets or sets a bounding box rectangle of the form.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfFormXObjectResource.Matrix">
            <summary>
            Gets or sets an array of six numbers specifying the form matrix, 
            which maps form space into user space. 
            </summary>
            <value>
            Default value is the identity matrix [ 1 0 0 1 0 0 ].
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfFormXObjectResource.OptionalContentGroup">
            <summary>
            Gets or sets the optional content group specifying 
            the optional content properties for the form XObject.
            </summary>
            <remarks>
            Before the form is processed, its visibility is determined based on this property.
            If it is determined to be invisible, the entire form is skipped, as if 
            there were no <b>Do</b> operator to invoke it.
            </remarks>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.PdfImageResource">
            <summary>
            Provides information about image resource (image XObject) of PDF document.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfImageResource.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.Pdf.PdfCompression,Vintasoft.Imaging.Pdf.PdfCompressionSettings,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfImageResource" /> class.
            </summary>
            <param name="document">Parent document of this image resource.</param>
            <param name="image">Image to be saved in the resource.</param>
            <param name="compression">Compression of the resource.</param>
            <param name="compressionParams">Compression parameters.</param>
            <param name="progressController">Encoding progress controller.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfImageResource.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.Pdf.PdfCompression,Vintasoft.Imaging.Pdf.PdfCompressionSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfImageResource" /> class.
            </summary>
            <param name="document">Parent document of this image resource.</param>
            <param name="image">Image to be saved in the resource.</param>
            <param name="compression">Compression of the resource.</param>
            <param name="compressionParams">Compression parameters.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfImageResource.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.Pdf.PdfCompression)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfImageResource" /> class.
            </summary>
            <param name="document">Parent document of this image resource.</param>
            <param name="image">Image to be saved in the resource.</param>
            <param name="compression">Compression of the resource.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfImageResource.ClearRect(System.Drawing.Rectangle)">
            <summary>
            Clears specified rectangle on the image.
            </summary>
            <param name="rect">The rectangle.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfImageResource.ClearPath(System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Clears specified path on the image.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfImageResource.GetImage">
            <summary>
            Returns an image of the image-resource.
            </summary>
            <returns>Image object associated with this
            image resource.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfImageResource.SetImage(Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.Pdf.PdfCompression,Vintasoft.Imaging.Pdf.PdfCompressionSettings)">
            <summary> 
            Sets an image of the image-resource.
            </summary>
            <param name="image">New image of image-resource.</param>
            <param name="compression">Compression that should be applied to image.</param>
            <param name="compressionSettings">Image compression settings.</param>
            <seealso cref="M:Vintasoft.Imaging.Pdf.Tree.PdfImageResource.SetImage(Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.Pdf.PdfCompression,Vintasoft.Imaging.Pdf.PdfCompressionSettings,Vintasoft.Imaging.Utils.IProgressController)" />
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfImageResource.SetImage(Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.Pdf.PdfCompression,Vintasoft.Imaging.Pdf.PdfCompressionSettings,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Sets an image of the image-resource.
            </summary>
            <param name="image">New image of image-resource.</param>
            <param name="compression">Compression that should be applied to image.</param>
            <param name="compressionSettings">Image compression settings.</param>
            <param name="progressController">Progress controller.</param>
            <seealso cref="M:Vintasoft.Imaging.Pdf.Tree.PdfImageResource.SetImage(Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.Pdf.PdfCompression,Vintasoft.Imaging.Pdf.PdfCompressionSettings)" />
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfImageResource.Compress(Vintasoft.Imaging.Pdf.PdfCompression,Vintasoft.Imaging.Pdf.PdfCompressionSettings)">
            <summary>
            Compress the image-resource.
            </summary>
            <param name="compression">Compression that should be applied to the image-resource.</param>
            <param name="compressionSettings">Compression settings.</param>
            <returns>
            <b>true</b> if compression is applied to the image-resource;
            otherwise, <b>false</b>.
            </returns>
            <seealso cref="M:Vintasoft.Imaging.Pdf.Tree.PdfImageResource.Compress(Vintasoft.Imaging.Pdf.PdfCompression,Vintasoft.Imaging.Pdf.PdfCompressionSettings,System.Double,System.Double)" />
            <seealso cref="M:Vintasoft.Imaging.Pdf.Tree.PdfImageResource.Compress(Vintasoft.Imaging.Pdf.PdfCompression,Vintasoft.Imaging.Pdf.PdfCompressionSettings,System.Double,System.Double,System.Drawing.Drawing2D.InterpolationMode,System.Boolean)" />
            <example>
            Here is an example that demonstrates how to change
            the compression algorithm of all black-white image resources:
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Changes compression of all black-white image-resources of PDF document.
            ''' &lt;/summary&gt;
            ''' &lt;param name="pdfFilename"&gt;The filename of PDF document.&lt;/param&gt;
            Public Shared Sub ChangeCompressionBlackWhiteImages(pdfFilename As String)
                ' open PDF document
                Using document As New PdfDocument(pdfFilename)
                    ' get collection of image-resources
                    Dim images As PdfImageResource() = document.GetImages()
            
                    ' create compression settings
                    Dim compressionSettings As New PdfCompressionSettings()
            
                    ' for each image-resource
                    For Each image As PdfImageResource In images
                        '  if image is black-white
                        If image.PixelFormat = PixelFormat.BlackWhite Then
                            ' change compression of image-resource
                            image.Compress(PdfCompression.CcittFax, compressionSettings)
                        End If
                    Next
            
                    ' save changes to a file
                    document.SaveChanges()
                End Using
            End Sub 
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Changes compression of all black-white image-resources of PDF document.
            /// &lt;/summary&gt;
            /// &lt;param name="pdfFilename"&gt;The filename of PDF document.&lt;/param&gt;
            public static void ChangeCompressionBlackWhiteImages(string pdfFilename)
            {
                // open PDF document
                using (PdfDocument document = new PdfDocument(pdfFilename))
                {
                    // get collection of image-resources
                    PdfImageResource[] images = document.GetImages();
            
                    // create compression settings
                    PdfCompressionSettings compressionSettings = new PdfCompressionSettings();
                    
                    // for each image-resource
                    foreach (PdfImageResource image in images)
                    {
                        //  if image is black-white
                        if (image.PixelFormat == PixelFormat.BlackWhite)
                            // change compression of image-resource
                            image.Compress(PdfCompression.CcittFax, compressionSettings);
                    }
            
                    // save changes to a file
                    document.SaveChanges();
                }
            } 
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfImageResource.Compress(Vintasoft.Imaging.Pdf.PdfCompression,Vintasoft.Imaging.Pdf.PdfCompressionSettings,System.Double,System.Double)">
            <summary>
            Compress the image-resource.
            </summary>
            <param name="compression">Compression that should be applied to the image-resource.</param>
            <param name="compressionSettings">Compression settings.</param>
            <param name="scaleX">Scale factor of X axis.</param>
            <param name="scaleY">Scale factor of Y axis.</param>
            <returns>
            <b>true</b> if compression is applied to the image-resource;
            otherwise, <b>false</b>.
            </returns>
            <seealso cref="M:Vintasoft.Imaging.Pdf.Tree.PdfImageResource.Compress(Vintasoft.Imaging.Pdf.PdfCompression,Vintasoft.Imaging.Pdf.PdfCompressionSettings)" />
            <seealso cref="M:Vintasoft.Imaging.Pdf.Tree.PdfImageResource.Compress(Vintasoft.Imaging.Pdf.PdfCompression,Vintasoft.Imaging.Pdf.PdfCompressionSettings,System.Double,System.Double,System.Drawing.Drawing2D.InterpolationMode,System.Boolean)" />
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfImageResource.Compress(Vintasoft.Imaging.Pdf.PdfCompression,Vintasoft.Imaging.Pdf.PdfCompressionSettings,System.Double,System.Double,System.Drawing.Drawing2D.InterpolationMode,System.Boolean)">
            <summary>
            Compress the image-resource.
            </summary>
            <param name="compression">Compression that should be applied to the image-resource.</param>
            <param name="compressionSettings">Compression settings.</param>
            <param name="scaleX">Scale factor of X axis.</param>
            <param name="scaleY">Scale factor of Y axis.</param>
            <param name="interpolationMode">Interpolation mode that should be used for
            resampling image.</param>
            <param name="compressIfSizeReduced">Indicates that compression must be applied
            to the image-resource only if new size of image-resource is less than
            previous size of image-resource.</param>
            <returns>
            <b>true</b> if compression is applied to the image-resource;
            otherwise, <b>false</b>.
            </returns>
            <seealso cref="M:Vintasoft.Imaging.Pdf.Tree.PdfImageResource.Compress(Vintasoft.Imaging.Pdf.PdfCompression,Vintasoft.Imaging.Pdf.PdfCompressionSettings)" />
            <seealso cref="M:Vintasoft.Imaging.Pdf.Tree.PdfImageResource.Compress(Vintasoft.Imaging.Pdf.PdfCompression,Vintasoft.Imaging.Pdf.PdfCompressionSettings,System.Double,System.Double)" />
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfImageResource.IsInline">
            <summary>
            Gets a value indicating whether the image resource is inlined in content.
            </summary>
            <value>
            <b>true</b> - image is stored as inline image;
            <b>false</b> - image is stored as image-resource.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfImageResource.Width">
            <summary>
            Gets width of image associated with this image resource.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfImageResource.Height">
            <summary>
            Gets height of image associated with this image resource.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfImageResource.ColorSpaceInformation">
            <summary>
            Gets the information about color space of image associated with this image resource.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfImageResource.Compression">
            <summary>
            Gets or sets compression of image associated with this image resource.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfImageResource.ImageMask">
            <summary>
            Gets or sets a value indicating whether the image is to be treated as an image mask.
            </summary>
            <remarks>
            If this flag is <b>true</b>, the value of BitsPerComponent must be 1; 
            unmasked areas are painted using the current nonstroking(brush) color.</remarks>        
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfImageResource.SourceBitPerPixel">
            <summary>
            Gets the number of bits per pixel of image data of this image resource.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfImageResource.SourceBitPerComponent">
            <summary>
            Gets the number of bits per component of image data of this image resource.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfImageResource.SourceComponentCount">
            <summary>
            Gets the number of color components of image data of this image resource.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfImageResource.BitsPerPixel">
            <summary>
            Gets the number of bits per pixel for this image resource.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfImageResource.PixelFormat">
            <summary>
            Gets the pixel format of this image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfImageResource.IsGrayscale">
            <summary>
            Gets a value indicating whether this image resource contains grayscale image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfImageResource.ResourceType">
            <summary>
            Gets the resource type.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfImageResource.SoftMask">
            <summary>
            Gets or sets a soft-mask image which must be used as a source of mask shape or
            mask opacity values in the transparent imaging model. 
            </summary>
            <remarks>
            The alpha source parameter in the
            graphics state determines whether the mask values are interpreted 
            as shape or opacity. If present, this property overrides the current
            soft mask in the graphics state, as well as the image's Mask entry,
            if any.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfImageResource.StencilMask">
            <summary>
            Gets or sets an image mask to be applied to this image.
            </summary>
            <remarks>
            If <see cref="P:Vintasoft.Imaging.Pdf.Tree.PdfImageResource.ImageMask" /> is <b>true</b>, this entry must not be present.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfImageResource.MaskColors">
            <summary>
            Gets or sets an array specifying 
            range of colors to be applied to it as a color key mask. 
            </summary>
            <remarks>
            If <see cref="P:Vintasoft.Imaging.Pdf.Tree.PdfImageResource.ImageMask" /> is <b>true</b>, this entry must not be present.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfImageResource.Decode">
            <summary>
            Gets or sets an array of numbers describing how to map image 
            samples into the range of values appropriate for the image's
            color space. 
            </summary>
            <remarks>
            If ImageMask is true, the array must be either [ 0 1 ] or [ 1 0 ]; otherwise,
            its length must be twice the number of color components required
            by ColorSpace. If the image uses the JPXDecode filter and ImageMask
            is false, Decode is ignored.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfImageResource.OptionalContentGroup">
            <summary>
            Gets or sets the optional content group specifying 
            the optional content properties for the image XObject.
            </summary>
            <remarks>
            Before the image is processed, its visibility is determined based on this property.
            If it is determined to be invisible, the entire image is skipped, as if 
            there were no <b>Do</b> operator to invoke it.
            </remarks>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.PdfMetadataResource">
            <summary>
            Provides information about metadata resource of PDF document.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.Tree.PdfMetadataResource.#ctor(Vintasoft.Imaging.Pdf.PdfDocument,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfMetadataResource" /> class.
            </summary>
            <param name="document">Parent document of this metadata resource.</param>
            <param name="data">Metadata.</param>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.PdfResourceType">
            <summary>
            Specifies available types of PDF resources.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.PdfResourceType.Undefined">
            <summary>
            Undefined.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.PdfResourceType.Stream">
            <summary>
            Data stream.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.PdfResourceType.Image">
            <summary>
            Image resource.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.PdfResourceType.Form">
            <summary>
            Form resource.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.PdfResourceType.Metadata">
            <summary>
            Metadata resource.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.PdfResourceType.VirtualFontProgram">
            <summary>
            Virtual font program resource.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.PdfResourceType.FontProgram">
            <summary>
            Font program resource.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.PdfResourceType.FontToUnicodeMapping">
            <summary>
            To Unicode mapping stream.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.PdfResourceType.FontDescriptorCIDSet">
            <summary>
            Font Descriptor CID Set resource.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.PdfResourceType.ICCProfile">
            <summary>
            ICC profile resource.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.PdfResourceType.PageContent">
            <summary>
            Page content.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.PdfResourceType.Jbig2Globals">
            <summary>
            JBIG2 Globals.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.PdfResourceType.SampledFunction">
            <summary>
            Sampled function data.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.PdfResourceType.PostScriptCalculatorFunction">
            <summary>
            Post Script Calculator function program.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.PdfResourceType.TilingPattern">
            <summary>
            Tiling pattern data.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.Tree.PdfResourceType.EmbeddedFile">
            <summary>
            Embedded file.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.Tree.PdfDocumentInformation">
            <summary>
            Provides information about PDF document.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfDocumentInformation.Title">
            <summary>
            Gets or sets the title of the document.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfDocumentInformation.Author">
            <summary>
            Gets or sets the name of the person who created the document.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfDocumentInformation.Subject">
            <summary>
            Gets or sets the subject of the document.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfDocumentInformation.Keywords">
            <summary>
            Gets or sets keywords associated with the document.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfDocumentInformation.Creator">
            <summary>
            Gets or sets the document creator.
            </summary>
            <remarks>
            If the document was converted to PDF from another format, 
            the name of the application that created the original document
            from which it was converted.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfDocumentInformation.Producer">
            <summary>
            Gets or sets the document producer.
            </summary>
            <remarks>
            If the document was converted to PDF from another format, the
            name of the application that converted it to PDF.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfDocumentInformation.CreationDate">
            <summary>
            Gets or sets the date and time the document was created.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.Tree.PdfDocumentInformation.ModifyDate">
            <summary>
            Gets or sets the date and time the document was most recently modified.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.UI.PdfFontViewerControl">
            <summary>
            Represents a control for displaying the <see cref="P:Vintasoft.Imaging.Pdf.UI.PdfFontViewerControl.PdfFont" />.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.PdfFontViewerControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.UI.PdfFontViewerControl" /> class. 
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.PdfFontViewerControl.GetTextSymbol(System.Drawing.Point)">
            <summary>
            Gets the <see cref="T:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextSymbol" /> at specified location in this control.
            </summary>
            <param name="point">Point in <see cref="T:Vintasoft.Imaging.Pdf.UI.PdfFontViewerControl" /> space to find symbol.</param>
            <returns>
            <see cref="T:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextSymbol" /> if point contains the symbol;
            otherwise, <b>null</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.PdfFontViewerControl.OnSizeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.SizeChanged" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.PdfFontViewerControl.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Paint" /> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.UI.PdfFontViewerControl.CellSize">
            <summary>
            Gets or sets a cell size for font symbol.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.UI.PdfFontViewerControl.PdfFont">
            <summary> 
            Gets or sets the <see cref="P:Vintasoft.Imaging.Pdf.UI.PdfFontViewerControl.PdfFont" /> that is displayed in this control.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.UI.PdfFontViewerControl.FontColor">
            <summary>
            Gets or sets the font color.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.UI.GroupFigureView">
            <summary>
            Determines how user can interact with <see cref="T:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigureGroup" />.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.UI.GraphicsFigureView">
            <summary>
            Provides the base class that determines how to display a <see cref="T:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigure" />
            and how user can interact with <see cref="T:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigure" />.
            </summary>
            <seealso cref="T:Vintasoft.Imaging.Pdf.UI.GraphicsFigureViewFactory" />
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.GraphicsFigureView.#ctor(Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigure)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.UI.GraphicsFigureView" /> class.
            </summary>
            <param name="figure">Object that stores the graphics figure.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.GraphicsFigureView.IsPointOnObject(System.Single,System.Single)">
            <summary>
            Determines that point belongs the graphics figure.
            </summary>
            <param name="x">X coordinate of point in object space.</param>
            <param name="y">Y coordinate of point in object space.</param>
            <returns>
            <b>true</b> if point belongs the graphics figure;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.GraphicsFigureView.GetBoundingBox">
            <summary>
            Returns a bounding box, in the object space, of graphics figure.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.GraphicsFigureView.DrawFigureOnGraphics(Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigure,Vintasoft.Imaging.DrawingSurface,System.Drawing.Graphics,Vintasoft.Imaging.Utils.AffineMatrix,Vintasoft.Imaging.Pdf.Tree.PdfPage)">
            <summary>
            Draws a figure on specified <see cref="T:System.Drawing.Graphics" />.
            </summary>
            <param name="figure">The figure to draw.</param>
            <param name="drawingSurface">The drawing surface.</param>
            <param name="g">Graphics where the figure should be drawn.</param>
            <param name="finalTransform">The final graphics transformation.</param>
            <param name="page">The PDF page.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.GraphicsFigureView.OnStateChanged">
            <summary>
            Invoked when the state of graphics figure is changed.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.UI.GraphicsFigureView.Figure">
            <summary>
            Gets the graphics figure.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.UI.GraphicsFigureView.InteractionController">
            <summary> 
            Gets or sets an interaction controller of graphics figure view.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.UI.GraphicsFigureView.Builder">
            <summary>
            Gets or sets a transformer used for building of the graphics figure.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.UI.GraphicsFigureView.Transformer">
            <summary>
            Gets or sets a transformer used for transforming (moving/resizing/rotating/...)
            of the graphics figure.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.GroupFigureView.#ctor(Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigureGroup)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.UI.GroupFigureView" /> class.
            </summary>
            <param name="figure">The graphics figure.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.GroupFigureView.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Vintasoft.Imaging.Pdf.UI.GroupFigureView" />.
            </summary>
            <returns>An enumerator for the <see cref="T:Vintasoft.Imaging.Pdf.UI.GroupFigureView" />.</returns>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.UI.PointBasedFigureView">
            <summary>
            Determines how user can interact with <see cref="T:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.PointBasedGraphicsFigure" />.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.PointBasedFigureView.#ctor(Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.PointBasedGraphicsFigure)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.UI.PointBasedFigureView" /> class.
            </summary>
            <param name="figure">Object that stores the graphics figure.</param>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.UI.GraphicsFigureViewFactory">
            <summary>
            Provides the ability to create the view (<see cref="T:Vintasoft.Imaging.Pdf.UI.GraphicsFigureView" />) for
            graphics figure (<see cref="T:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigure" />).
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.GraphicsFigureViewFactory.CreateView(Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigure)">
            <summary>
            Creates a view for figure.
            </summary>
            <param name="figure">Graphics figure.</param>
            <returns>View for figure.</returns>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.UI.RectangleBasedFigureView">
            <summary>
            Determines how user can interact with <see cref="T:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.RectangleFigure" />.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.RectangleBasedFigureView.#ctor(Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.RectangleFigure)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.UI.RectangleBasedFigureView" /> class.
            </summary>
            <param name="figure">Object that stores the graphics figure.</param>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.UI.PdfEditorTool">
            <summary>
            Visual tool that allows to edit content of PDF page.
            </summary>
            <example>
            This example shows how to add ellipse to PDF document loaded into image viewer.
            <code lang="VB.NET">
            Public Partial Class FormWithPdfEditorTool
                Inherits Form
                '...
                Private _imageViewer As ImageViewer
                Private _editorTool As PdfEditorTool
                Private _pen As PdfPen
                Private _brush As PdfBrush
                '...
            
                Public Sub New()
                    '...
                    ' create an instance of the PdfEditorTool
                    _editorTool = New PdfEditorTool()
            
                    ' set the editor tool as current tool
                    _imageViewer.VisualTool = _editorTool
                    ' create a pen and brush for figure drawing
            
                    _pen = New PdfPen(Color.Red, 5)
                    _brush = New PdfBrush(Color.Green)
                End Sub
            
                '...
            
                Private Sub drawEllipseToolStripButton_Click(sender As Object, e As EventArgs)
                    ' start building an ellipse
                    _editorTool.StartBuildEllipse(_pen, _brush)
                End Sub
            End Class
            </code>
            <code lang="C#">
            public partial class FormWithPdfEditorTool : Form
            {
                //...
                ImageViewer _imageViewer;
                PdfEditorTool _editorTool;
                PdfPen _pen;
                PdfBrush _brush;
                //...
            
                public FormWithPdfEditorTool()
                {
                    //...
                    // create an instance of the PdfEditorTool
                    _editorTool = new PdfEditorTool();
            
                    // set the editor tool as current tool
                    _imageViewer.VisualTool = _editorTool;
                    // create a pen and brush for figure drawing
            
                    _pen = new PdfPen(Color.Red, 5);
                    _brush = new PdfBrush(Color.Green);
                }
            
                //...
            
                private void drawEllipseToolStripButton_Click(object sender, EventArgs e)
                {
                    // start building an ellipse
                    _editorTool.StartBuildEllipse(_pen, _brush);
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.PdfEditorTool.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.UI.PdfEditorTool" /> class.       
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.PdfEditorTool.StartBuildFigure(Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigure)">
            <summary>
            Starts the building process of a figure.
            </summary>
            <param name="figure">Graphics figure.</param>
            <returns>The <see cref="T:Vintasoft.Imaging.Pdf.UI.GraphicsFigureView" /> of graphics figure.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.PdfEditorTool.StartBuildFigure(Vintasoft.Imaging.Pdf.UI.GraphicsFigureView)">
            <summary>
            Starts the building process of a figure.
            </summary>
            <param name="figureView">Graphics figure.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.PdfEditorTool.AddFigure(Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigure)">
            <summary>
            Adds a <see cref="T:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigure" /> to the <see cref="P:Vintasoft.Imaging.Pdf.UI.PdfEditorTool.FigureViewCollection" />.
            </summary>
            <param name="figure"><see cref="T:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.GraphicsFigure" /> to add.</param>
            <returns>The <see cref="T:Vintasoft.Imaging.Pdf.UI.GraphicsFigureView" /> of graphics figure.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.PdfEditorTool.AddFigure(Vintasoft.Imaging.Pdf.UI.GraphicsFigureView)">
            <summary>
            Adds a <see cref="T:Vintasoft.Imaging.Pdf.UI.GraphicsFigureView" /> to the <see cref="P:Vintasoft.Imaging.Pdf.UI.PdfEditorTool.FigureViewCollection" />.
            </summary>
            <param name="figureView"><see cref="T:Vintasoft.Imaging.Pdf.UI.GraphicsFigureView" /> to add.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.PdfEditorTool.StartBuildRectangle(Vintasoft.Imaging.Pdf.Drawing.PdfPen,Vintasoft.Imaging.Pdf.Drawing.PdfBrush)">
            <summary>
            Starts the building process of a <see cref="T:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.RectangleFigure" />.
            </summary>
            <param name="pen">Pen for drawing the rectangle.</param>
            <param name="brush">Brush for filling the rectangle.</param>
            <returns>The <see cref="T:Vintasoft.Imaging.Pdf.UI.GraphicsFigureView" /> of graphics figure.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.PdfEditorTool.StartBuildTextBox(Vintasoft.Imaging.Pdf.Drawing.PdfPen,Vintasoft.Imaging.Pdf.Drawing.PdfBrush,Vintasoft.Imaging.Pdf.Drawing.PdfBrush,System.String,Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFont,System.Single)">
            <summary>
            Starts the building process of a <see cref="T:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.TextBoxFigure" />.
            </summary>
            <param name="pen">Pen for drawing the rectangle.</param>
            <param name="brush">Brush for filling the rectangle.</param>
            <param name="font">Text font.</param>
            <param name="fontSize">Text font size.</param>
            <param name="text">Text.</param>
            <param name="textBrush">Text brush.</param>
            <returns>The <see cref="T:Vintasoft.Imaging.Pdf.UI.GraphicsFigureView" /> of graphics figure.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.PdfEditorTool.StartBuildEllipse(Vintasoft.Imaging.Pdf.Drawing.PdfPen,Vintasoft.Imaging.Pdf.Drawing.PdfBrush)">
            <summary>
            Starts the building process of an <see cref="T:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.EllipseFigure" />.
            </summary>
            <param name="pen">Pen for drawing the ellipse.</param>
            <param name="brush">Brush for filling the ellipse.</param>
            <returns>The <see cref="T:Vintasoft.Imaging.Pdf.UI.GraphicsFigureView" /> of graphics figure.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.PdfEditorTool.StartBuildImage(Vintasoft.Imaging.Pdf.Tree.PdfImageResource)">
            <summary>
            Starts the building process of an <see cref="T:Vintasoft.Imaging.Pdf.Drawing.GraphicsFigures.ImageFigure" />.
            </summary>
            <param name="imageResource">Image to draw.</param>
            <returns>The <see cref="T:Vintasoft.Imaging.Pdf.UI.GraphicsFigureView" /> of graphics figure.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.PdfEditorTool.StartBuildFreehandLines(Vintasoft.Imaging.Pdf.Drawing.PdfPen)">
            <summary>
            Starts the building process of freehand lines.
            </summary>
            <param name="pen">Pen for drawing the freehand lines.</param>
            <returns>The <see cref="T:Vintasoft.Imaging.Pdf.UI.GraphicsFigureView" /> of graphics figure.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.PdfEditorTool.StartBuildLines(Vintasoft.Imaging.Pdf.Drawing.PdfPen)">
            <summary>
            Starts the building process of lines.
            </summary>
            <param name="pen">Pen for drawing the lines.</param>
            <returns>The <see cref="T:Vintasoft.Imaging.Pdf.UI.GraphicsFigureView" /> of graphics figure.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.PdfEditorTool.StartBuildPolygon(Vintasoft.Imaging.Pdf.Drawing.PdfPen,Vintasoft.Imaging.Pdf.Drawing.PdfBrush)">
            <summary>
            Starts the building process of a polygon.
            </summary>
            <param name="pen">Pen for drawing the polygon.</param>
            <param name="brush">Brush for filling the polygon.</param>
            <returns>The <see cref="T:Vintasoft.Imaging.Pdf.UI.GraphicsFigureView" /> of graphics figure.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.PdfEditorTool.StartBuildCurves(Vintasoft.Imaging.Pdf.Drawing.PdfPen)">
            <summary>
            Starts the building process of curves.
            </summary>
            <param name="pen">Pen for drawing the curves.</param>
            <returns>The <see cref="T:Vintasoft.Imaging.Pdf.UI.GraphicsFigureView" /> of graphics figure.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.PdfEditorTool.StartBuildClosedCurves(Vintasoft.Imaging.Pdf.Drawing.PdfPen,Vintasoft.Imaging.Pdf.Drawing.PdfBrush)">
            <summary>
            Starts the building process of closed curves.
            </summary>
            <param name="pen">Pen for drawing the closed curves.</param>
            <param name="brush">Brush for filling the closed curves.</param>
            <returns>The <see cref="T:Vintasoft.Imaging.Pdf.UI.GraphicsFigureView" /> of graphics figure.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.PdfEditorTool.StartBuildTextLine(System.String,Vintasoft.Imaging.Pdf.Tree.Fonts.PdfFont,System.Single,Vintasoft.Imaging.Pdf.Drawing.PdfBrush)">
            <summary>
            Starts the building process of a text line.
            </summary>
            <param name="text">Text to draw.</param>
            <param name="textFont">Text font.</param>
            <param name="textSize">Text size.</param>
            <param name="textBrush">Text brush.</param>
            <returns>The <see cref="T:Vintasoft.Imaging.Pdf.UI.GraphicsFigureView" /> of graphics figure.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.PdfEditorTool.AbortBuildFigure">
            <summary>
            Aborts the building process of figure and
            removes the figure from <see cref="P:Vintasoft.Imaging.Pdf.UI.PdfEditorTool.FigureViewCollection" /> collection.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.PdfEditorTool.RenderFiguresOnPage">
            <summary>
            Renders the figure collection on current PDF page.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.PdfEditorTool.OnFocusedItemChanged(Vintasoft.Imaging.PropertyChangedEventArgs{Vintasoft.Imaging.UI.VisualTools.UserInteraction.IInteractiveObject})">
            <summary>
            Occurs when selected item is changed.
            </summary>
            <param name="e">An event args that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.PdfEditorTool.FinishInteraction(Vintasoft.Imaging.UI.VisualTools.UserInteraction.IInteractiveObject,System.Boolean)">
            <summary>
            Finishes an active interaction.
            </summary>
            <param name="item">Active item.</param>
            <param name="invalidateItem">Need invalidate active item.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.PdfEditorTool.OnBeginBuilding">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.Pdf.UI.PdfEditorTool.FigureBuildingStarted" /> event.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.PdfEditorTool.OnCancelBuilding">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.Pdf.UI.PdfEditorTool.FigureBuildingCanceled" /> event.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.PdfEditorTool.OnFinishBuilding">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.Pdf.UI.PdfEditorTool.FigureBuildingFinished" /> event.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.PdfEditorTool.OnActivated(System.EventArgs)">
            <summary> 
            Raises the <see cref="E:Vintasoft.Imaging.UI.VisualTools.VisualTool.Activated" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.PdfEditorTool.OnDeactivated(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.UI.VisualTools.VisualTool.Deactivated" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.UI.PdfEditorTool.RenderFiguresWhenImageIndexChanging">
            <summary>
            Gets a value indicating whether the <see cref="M:Vintasoft.Imaging.Pdf.UI.PdfEditorTool.RenderFiguresOnPage" />
            must be executed when current page is changed in image viewer.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.UI.PdfEditorTool.FigureViewCollection">
            <summary>
            Gets the figure view collection that showing in this visual tool.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.UI.PdfEditorTool.CurrentPage">
            <summary>
            Gets the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfPage" /> associated with <see cref="T:Vintasoft.Imaging.UI.ImageViewer" />.FocusedImage.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.UI.PdfEditorTool.SelectedFigure">
            <summary>
            Gets a current graphics figure.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.UI.PdfEditorTool.SelectedFigureView">
            <summary>
            Gets or sets a current graphics figure view.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.UI.PdfEditorTool.SelectedFigurePoints">
            <summary>
            Gets points of selected graphics figure.
            </summary>
            <remarks>
            This property allows to access points of current graphics figure.
            Coordinates of points are specified in coordinate space of the figure.
            </remarks>
        </member>
        <member name="E:Vintasoft.Imaging.Pdf.UI.PdfEditorTool.FigureBuildingStarted">
            <summary>
            Occurs when the figure building is started.
            </summary>
            <remarks>
            This event is thread safe.
            </remarks>
        </member>
        <member name="E:Vintasoft.Imaging.Pdf.UI.PdfEditorTool.FigureBuildingCanceled">
            <summary>
            Occurs when the figure building is canceled.
            </summary>
            <remarks>
            This event is thread safe.
            </remarks>
        </member>
        <member name="E:Vintasoft.Imaging.Pdf.UI.PdfEditorTool.FigureBuildingFinished">
            <summary>
            Occurs when the figure building is finished.
            </summary>
            <remarks>
            This event is thread safe.
            </remarks>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.UI.PdfImageExtractorEventArgs">
            <summary>
            Provides data for 
            <see cref="E:Vintasoft.Imaging.Pdf.UI.PdfImageExtractorTool.ImageMouseEnter" />,
            <see cref="E:Vintasoft.Imaging.Pdf.UI.PdfImageExtractorTool.ImageMouseLeave" />,
            <see cref="E:Vintasoft.Imaging.Pdf.UI.PdfImageExtractorTool.ImageMouseDown" /> and 
            <see cref="E:Vintasoft.Imaging.Pdf.UI.PdfImageExtractorTool.ImageMouseUp" />
            events.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.UI.PdfImageExtractorEventArgs.MouseLocation">
            <summary>
            Gets a mouse location.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.UI.PdfImageExtractorEventArgs.ContentImage">
            <summary>
            Gets the <see cref="P:Vintasoft.Imaging.Pdf.UI.PdfImageExtractorEventArgs.ContentImage" />.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.UI.PdfImageExtractorTool">
            <summary>
            Visual tool that allows to select and extract images on PDF page.
            </summary>
            <example>
            This example shows how to highlight focused image in PDF document loaded into image viewer.
            <code lang="VB.NET">
            Public Partial Class FormWithPdfImageExtractorTool
                Inherits Form
                '...
                Private _imageViewer As ImageViewer
                Private _imageExtractorTool As PdfImageExtractorTool
                '...
                Public Sub New()
                    '...
                    ' create an instance of the PdfImageExtractorTool
                    _imageExtractorTool = New PdfImageExtractorTool()
            
                    ' set a pen and brush for image selection
                    _imageExtractorTool.SelectionBrush = New SolidBrush(Color.FromArgb(32, Color.Blue))
                    _imageExtractorTool.SelectionPen = Pens.Red
            
                    ' subscribe to image extractor events
                    AddHandler _imageExtractorTool.ImageMouseEnter, New EventHandler(Of PdfImageExtractorEventArgs)(AddressOf _pdfImageExtractorTool_ImageMouseEnter)
                    AddHandler _imageExtractorTool.ImageMouseLeave, New EventHandler(Of PdfImageExtractorEventArgs)(AddressOf _pdfImageExtractorTool_ImageMouseLeave)
            
                    ' set the image extractor tool as current tool
                    _imageViewer.VisualTool = _imageExtractorTool
                End Sub
            
                ' Occurs when the mouse pointer enters the image on PDF page.
                Private Sub _pdfImageExtractorTool_ImageMouseEnter(sender As Object, e As PdfImageExtractorEventArgs)
                    ' set the focused image as selected image
                    _imageExtractorTool.SelectedImage = e.ContentImage
                End Sub
            
                ' Occurs when the mouse pointer leaves the the image on PDF page.
                Private Sub _pdfImageExtractorTool_ImageMouseLeave(sender As Object, e As PdfImageExtractorEventArgs)
                    ' remove selected image from image extractor tool
                    _imageExtractorTool.SelectedImage = Nothing
                End Sub
            End Class
            </code>
            <code lang="C#">
            public partial class FormWithPdfImageExtractorTool : Form
            {
                //...
                ImageViewer _imageViewer;
                PdfImageExtractorTool _imageExtractorTool;
                //...
                public FormWithPdfImageExtractorTool()
                {
                    //...
                    // create an instance of the PdfImageExtractorTool
                    _imageExtractorTool = new PdfImageExtractorTool();
            
                    // set a pen and brush for image selection
                    _imageExtractorTool.SelectionBrush = new SolidBrush(Color.FromArgb(32, Color.Blue));
                    _imageExtractorTool.SelectionPen = Pens.Red;
            
                    // subscribe to image extractor events
                    _imageExtractorTool.ImageMouseEnter += new EventHandler&lt;PdfImageExtractorEventArgs&gt;(_pdfImageExtractorTool_ImageMouseEnter);
                    _imageExtractorTool.ImageMouseLeave += new EventHandler&lt;PdfImageExtractorEventArgs&gt;(_pdfImageExtractorTool_ImageMouseLeave);
            
                    // set the image extractor tool as current tool
                    _imageViewer.VisualTool = _imageExtractorTool;
                }
            
                // Occurs when the mouse pointer enters the image on PDF page.
                void _pdfImageExtractorTool_ImageMouseEnter(object sender, PdfImageExtractorEventArgs e)
                {
                    // set the focused image as selected image
                    _imageExtractorTool.SelectedImage = e.ContentImage;
                }
            
                // Occurs when the mouse pointer leaves the the image on PDF page.
                void _pdfImageExtractorTool_ImageMouseLeave(object sender, PdfImageExtractorEventArgs e)
                {
                    // remove selected image from image extractor tool
                    _imageExtractorTool.SelectedImage = null;
                }
            }
            </code>
            </example>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.UI.PdfVisualTool">
            <summary>
            Provides the abstract base class for visual tools which work with PDF document. 
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.PdfVisualTool.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.UI.PdfVisualTool" /> class.       
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.PdfVisualTool.PointFromPageSpaceToViewerSpace(System.Drawing.PointF)">
            <summary>
            Converts point from the PDF page's coordinate space to the image viewer's coordinate space.
            </summary>
            <param name="point">Point, in the PDF page's coordinate space, to convert.</param>
            <returns>The <see cref="T:System.Drawing.PointF" /> in the image viewer's coordinate space.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if
            focused image is not a PDF page.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.PdfVisualTool.PointsFromPageSpaceToViewerSpace(System.Drawing.PointF[])">
            <summary>
            Converts points from the PDF page's coordinate space to the image viewer's coordinate space.
            </summary>
            <param name="points">
            Provides points, in the PDF page's coordinate space, to convert;
            returns the converted points, in the image viewer's coordinate space.
            </param>
            <exception cref="T:System.InvalidOperationException">Thrown if
            focused image is not a PDF page.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.PdfVisualTool.PointsFromPageSpaceToViewerSpace(Vintasoft.Imaging.UI.ImageViewer,System.Drawing.PointF[])">
            <summary>
            Converts points from the PDF page's coordinate space to the image viewer's coordinate space.
            </summary>
            <param name="viewer">Image viewer.</param>
            <param name="points">
            Provides points, in the PDF page's coordinate space, to convert;
            returns the converted points, in the image viewer's coordinate space.
            </param>
            <exception cref="T:System.InvalidOperationException">Thrown if
            focused image is not a PDF page.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.PdfVisualTool.PointsFromPageSpaceToViewerSpace(System.Drawing.PointF[],System.Drawing.PointF[])">
            <summary>
            Converts points from the PDF page's coordinate space to the image viewer's coordinate space.
            </summary>
            <param name="pageSpacePoints">Points, in the PDF page's coordinate space, to convert.</param>
            <param name="viewerSpacePoints">Converted points, in the image viewer's coordinate space.</param>
            <exception cref="T:System.ArgumentException">Thrown if
            <b>viewerSpacePoints</b>.Length != <b>pageSpacePoints</b>.Length.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if
            focused image is not a PDF page.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.PdfVisualTool.PointFromViewerSpaceToPageSpace(System.Drawing.PointF)">
            <summary>
            Converts point from the image viewer's coordinate space to the PDF page's coordinate space.
            </summary>
            <param name="point">Point, in the image viewer's coordinate space, to convert.</param>
            <returns>The <see cref="T:System.Drawing.PointF" />, in the PDF page's coordinate space.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if
            focused image is not a PDF page.</exception>       
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.PdfVisualTool.PointsFromViewerSpaceToPageSpace(System.Drawing.PointF[])">
            <summary>
            Converts points from the image viewer's coordinate space to the PDF page's coordinate space.
            </summary>
            <param name="points">
            Provides points, in the image viewer's coordinate space, to convert;
            returns the converted points, in the PDF page's coordinate space.
            </param>
            <exception cref="T:System.InvalidOperationException">Thrown if
            focused image is not a PDF page.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.PdfVisualTool.PointsFromViewerSpaceToPageSpace(Vintasoft.Imaging.UI.ImageViewer,System.Drawing.PointF[])">
            <summary>
            Converts points from the image viewer's coordinate space to the PDF page's coordinate space.
            </summary>
            <param name="viewer">Image viewer.</param>
            <param name="points">
            Provides points, in the image viewer's coordinate space, to convert;
            returns the converted points, in the PDF page's coordinate space.
            </param>
            <exception cref="T:System.InvalidOperationException">Thrown if
            focused image is not a PDF page.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.PdfVisualTool.PointsFromViewerSpaceToPageSpace(System.Drawing.Point[],System.Drawing.PointF[])">
            <summary>
            Converts points from the image viewer's coordinate space to the PDF page's coordinate space.
            </summary>
            <param name="viewerSpacePoints">Points, in the image viewer's coordinate space, to convert.</param>
            <param name="pageSpacePoints">Converted points, in the PDF page's coordinate space.</param>
            <exception cref="T:System.ArgumentException">Thrown if
            viewerSpacePoints.Length != pageSpacePoints.Length.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if
            focused image is not a PDF page.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.PdfVisualTool.GetPageFromImage(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Returns a <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfPage" /> associated with the <see cref="T:Vintasoft.Imaging.VintasoftImage">image</see>.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.UI.PdfVisualTool.CurrentPage">
            <summary>
            Gets the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfPage" /> associated with <see cref="P:Vintasoft.Imaging.UI.ImageViewer.Image" />.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.PdfImageExtractorTool.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.UI.PdfImageExtractorTool" /> class.       
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.PdfImageExtractorTool.OnDeactivated(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.UI.VisualTools.VisualTool.Deactivated" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.PdfImageExtractorTool.Reset">
            <summary>
            Resets this tool.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.PdfImageExtractorTool.OnMouseMove(Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs)">
            <summary>
            Raises the MouseMove event.
            </summary>
            <param name="e">A <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs" /> that contains the event data.</param>        
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.PdfImageExtractorTool.OnMouseDown(Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs)">
            <summary>
            Raises the MouseDown event.
            </summary>
            <param name="e">A <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.PdfImageExtractorTool.OnMouseUp(Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs)">
            <summary>
            Raises the MouseUp event.
            </summary>
            <param name="e">A <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.PdfImageExtractorTool.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints a content of this tool.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that
            contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.PdfImageExtractorTool.DrawSelectedImageRegion(System.Drawing.Graphics,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Draws the selection region around the selected image.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics" /> that contains the selected image.</param>
            <param name="imageRegion">The graphics path of the selected image.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.PdfImageExtractorTool.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by the <see cref="T:Vintasoft.Imaging.Pdf.UI.PdfImageExtractorTool" /> object.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and
            unmanaged resources; <b>false</b> to release only unmanaged
            resources.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.UI.PdfImageExtractorTool.Name">
            <summary>
            Gets the name of the visual tool.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.UI.PdfImageExtractorTool.SelectedImage">
            <summary>
            Gets or sets the selected image. 
            </summary>
            <seealso cref="P:Vintasoft.Imaging.Pdf.UI.PdfImageExtractorTool.SelectionPen" />
            <seealso cref="P:Vintasoft.Imaging.Pdf.UI.PdfImageExtractorTool.SelectionBrush" />
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.UI.PdfImageExtractorTool.SelectionPen">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Pen" /> which draws the selection around the <see cref="P:Vintasoft.Imaging.Pdf.UI.PdfImageExtractorTool.SelectedImage" />.
            </summary>
            <value>Default value: <b><see cref="P:System.Drawing.Pens.Red" /></b>.</value>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.UI.PdfImageExtractorTool.SelectionBrush">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Brush" /> which draws the selection around
            the <see cref="P:Vintasoft.Imaging.Pdf.UI.PdfImageExtractorTool.SelectedImage" />.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.Pdf.UI.PdfImageExtractorTool.ImageMouseEnter">
            <summary>
            Occurs when the mouse pointer enters the image on PDF page.
            </summary>
            <remarks>
            This event is thread safe.
            </remarks>
        </member>
        <member name="E:Vintasoft.Imaging.Pdf.UI.PdfImageExtractorTool.ImageMouseLeave">
            <summary>
            Occurs when the mouse pointer leaves the the image on PDF page.
            </summary>
            <remarks>
            This event is thread safe.
            </remarks>
        </member>
        <member name="E:Vintasoft.Imaging.Pdf.UI.PdfImageExtractorTool.ImageMouseDown">
            <summary>
            Occurs when the mouse pointer is over the image on PDF page and
            the mouse button is pressed.
            </summary>
            <remarks>
            This event is thread safe.
            </remarks>
        </member>
        <member name="E:Vintasoft.Imaging.Pdf.UI.PdfImageExtractorTool.ImageMouseUp">
            <summary>
            Occurs when the mouse pointer is over the image on PDF page and
            the mouse button is released.
            </summary>
            <remarks>
            This event is thread safe.
            </remarks>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.UI.PdfRemoveContentTool">
            <summary>
            Visual tool that allows to remove and black out content of PDF page.
            </summary>
            <remarks>
            To remove content programmatically use the following fuctions:
            <ul>
            <li><see cref="M:Vintasoft.Imaging.Pdf.Tree.PdfPage.RemoveContentAndBlackOutResources" /> - removes and blacks out page content</li>
            <li><see cref="M:Vintasoft.Imaging.Pdf.Tree.PdfPage.RemoveText(System.Drawing.RectangleF[])" /> - removes text in specified rectangles</li>
            <li><see cref="M:Vintasoft.Imaging.Pdf.Tree.PdfPage.RemoveText(Vintasoft.Imaging.Pdf.Content.TextExtraction.TextRegion[])" /> - removes specified text</li>
            <li><see cref="M:Vintasoft.Imaging.Pdf.Tree.PdfPage.RemoveAnnotations(System.Drawing.RectangleF[])" /> - removes annotations</li>
            <li><see cref="M:Vintasoft.Imaging.Pdf.Tree.PdfPage.ClearImages(System.Drawing.RectangleF[])" /> - blacks out image resources</li>
            <li><see cref="M:Vintasoft.Imaging.Pdf.Tree.PdfPage.RemoveVectorGraphics(System.Drawing.RectangleF[])" /> - removes vector graphics</li>
            <li><see cref="M:Vintasoft.Imaging.Pdf.Tree.PdfImageResource.ClearRect(System.Drawing.Rectangle)" /> - blacks out rectangle on image resource</li>
            <li><see cref="M:Vintasoft.Imaging.Pdf.Tree.PdfImageResource.ClearPath(System.Drawing.Drawing2D.GraphicsPath)" /> - blacks out path on image resource</li>
            </ul>
            <br />
            <b>Important!</b> - PDF document must be packed (<see cref="M:Vintasoft.Imaging.Pdf.PdfDocument.Pack" />)
            after content removal otherwise the removed content can be restored.
            </remarks>
            <example>Plase see example <see cref="P:Vintasoft.Imaging.Pdf.UI.PdfRemoveContentTool.RedactionMarkAppearance">here</see>.</example>
            <seealso cref="T:Vintasoft.Imaging.Pdf.UI.RedactionMark" />
            <seealso cref="P:Vintasoft.Imaging.Pdf.UI.RedactionMark.MarkType" />
            <seealso cref="T:Vintasoft.Imaging.Pdf.UI.PageRedactionMark" />
            <seealso cref="T:Vintasoft.Imaging.Pdf.UI.TextRedactionMark" />
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.PdfRemoveContentTool.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.UI.PdfRemoveContentTool" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.PdfRemoveContentTool.Add(Vintasoft.Imaging.Pdf.UI.RedactionMark)">
            <summary>
            Adds the item to selection of current image.
            </summary>
            <param name="item">Item to add.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.PdfRemoveContentTool.Add(Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.Pdf.UI.RedactionMark)">
            <summary>
            Adds the item to selection of specified image.
            </summary>
            <param name="image">The image.</param>
            <param name="item">Item to add.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.PdfRemoveContentTool.ApplyRedactionMarks(Vintasoft.Imaging.VintasoftImage,System.Collections.Generic.IList{Vintasoft.Imaging.Pdf.UI.RedactionMark})">
            <summary>
            Applies specified redaction marks to specified image of PDF page.
            </summary>
            <param name="image">The image of PDF page.</param>
            <param name="marks">The redaction marks.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.PdfRemoveContentTool.ApplyRedactionMarks">
            <summary>
            Applies the redaction marks to PDF document.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.PdfRemoveContentTool.OnRedactionMarkApplied(Vintasoft.Imaging.Pdf.UI.RedactionMarkEventArgs)">
            <summary>
            Raises the <see cref="E:RedactionMarkApplied" /> event.
            </summary>
            <param name="e">The <see cref="T:Vintasoft.Imaging.Pdf.UI.RedactionMarkEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.PdfRemoveContentTool.DrawRedactionMarkAppearance(Vintasoft.Imaging.Pdf.UI.RedactionMark)">
            <summary>
            Draws the redaction mark appearance on PDF page.
            </summary>
            <param name="redactionMark">The redaction mark.</param>
            <seealso cref="P:Vintasoft.Imaging.Pdf.UI.PdfRemoveContentTool.RedactionMarkAppearance" />
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.UI.PdfRemoveContentTool.RedactionMarkAppearance">
            <summary>
            Gets or sets the redaction mark appearance that will be drawn on PDF page
            after redaction mark is applied.
            </summary>
            <value>
            Default value is <b>null</b>.
            </value>
            <example>
            Here is an example that shows how to define redaction 
            mark appearance and apply redaction marks programmatically:
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Creates the redaction mark with custom appearance and applies the redaction mark
            ''' to PDF page.
            ''' &lt;/summary&gt;
            Public Shared Sub TestRedactionMarkAppearance(viewer As ImageViewer)
                ' if image viewer does not have image
                If viewer.Image Is Nothing Then
                    Throw New InvalidOperationException()
                End If
            
                ' if image viewer contains not PDF page
                Dim page As PdfPage = PdfDocumentController.GetPageAssociatedWithImage(viewer.Image)
                If page Is Nothing Then
                    Throw New InvalidOperationException()
                End If
            
                ' create and set PdfRemoveContentTool as current tool of image viewer
                Dim removeContentTool As New PdfRemoveContentTool()
                viewer.VisualTool = removeContentTool
            
                ' create the redaction mark
                Dim mark As New RedactionMark(viewer.Image)
                ' specify that redaction mark must remove all PDF content
                mark.MarkType = RedactionMarkType.RemoveAll
                ' calculate and specify the redaction mark rectangle
                Dim rect As RectangleF = page.MediaBox
                rect.Inflate(-rect.Width / 4, -rect.Height / 4)
                mark.SelectedRect = rect
            
                ' add the redaction mark to a list of redaction marks of visual tool
                removeContentTool.Add(mark)
            
                ' create redaction mark appearance
                Dim textBox As New TextBoxFigure(New PdfBrush(Color.Red), "TOP SECRET", page.Document.FontManager.GetStandardFont(StandardFontType.Helvetica), 0)
                textBox.TextAlignment = PdfContentAlignment.Center
                textBox.Brush = New PdfBrush(Color.Black)
                textBox.AutoFontSize = True
                removeContentTool.RedactionMarkAppearance = textBox
            
                ' apply redaction marks
                removeContentTool.ApplyRedactionMarks()
            End Sub
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Creates the redaction mark with custom appearance and applies the redaction mark
            /// to PDF page.
            /// &lt;/summary&gt;
            public static void TestRedactionMarkAppearance(ImageViewer viewer)
            {
                // if image viewer does not have image
                if (viewer.Image == null)
                    throw new InvalidOperationException();
                
                // if image viewer contains not PDF page
                PdfPage page = PdfDocumentController.GetPageAssociatedWithImage(viewer.Image);
                if (page == null)
                    throw new InvalidOperationException();
            
                // create and set PdfRemoveContentTool as current tool of image viewer
                PdfRemoveContentTool removeContentTool = new PdfRemoveContentTool();
                viewer.VisualTool = removeContentTool;
            
                // create the redaction mark
                RedactionMark mark = new RedactionMark(viewer.Image);
                // specify that redaction mark must remove all PDF content
                mark.MarkType = RedactionMarkType.RemoveAll;
                // calculate and specify the redaction mark rectangle
                RectangleF rect = page.MediaBox;
                rect.Inflate(-rect.Width / 4, -rect.Height / 4);
                mark.SelectedRect = rect;
                
                // add the redaction mark to a list of redaction marks of visual tool
                removeContentTool.Add(mark);
            
                // create redaction mark appearance
                TextBoxFigure textBox = new TextBoxFigure(
                    new PdfBrush(Color.Red),
                    "TOP SECRET",
                    page.Document.FontManager.GetStandardFont(StandardFontType.Helvetica),
                    0);
                textBox.TextAlignment = PdfContentAlignment.Center;
                textBox.Brush = new PdfBrush(Color.Black);
                textBox.AutoFontSize = true;
                removeContentTool.RedactionMarkAppearance = textBox;
            
                // apply redaction marks
                removeContentTool.ApplyRedactionMarks();
            }
            </code>
            </example>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.UI.PdfRemoveContentTool.Name">
            <summary>
            Gets the name of the visual tool.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.Pdf.UI.PdfRemoveContentTool.RedactionMarkApplied">
            <summary>
            Occurs when redaction mark is applied.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.UI.RedactionMark">
            <summary>
            Represents the redaction mark.
            </summary>
            <remarks>
            Redaction marks are used for removing PDF content using <see cref="T:Vintasoft.Imaging.Pdf.UI.PdfRemoveContentTool" />.
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.Pdf.UI.RedactionMark.MarkType" />
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.RedactionMark.#ctor(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.UI.RedactionMark" /> class.
            </summary>
            <param name="image">The image associated with PDF page.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.RedactionMark.GetPointTransform(Vintasoft.Imaging.UI.ImageViewer)">
            <summary>
            Returns a point transformation of interactive object for specified <see cref="T:Vintasoft.Imaging.UI.ImageViewer" />.
            </summary>
            <param name="viewer">An image viewer.</param>
            <returns>
            An instance of an <see cref="T:Vintasoft.Imaging.Utils.PointFTransform" /> class
            for specified image viewer.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.UI.RedactionMark.MarkType">
            <summary>
            Gets or sets the type of the redaction mark.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.UI.RedactionMark.Page">
            <summary>
            Gets the page associated with this redaction mark.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.UI.RedactionMarkEventArgs">
            <summary>
            Provides data for the <see cref="E:Vintasoft.Imaging.Pdf.UI.PdfRemoveContentTool.RedactionMarkApplied" /> event.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.RedactionMarkEventArgs.#ctor(Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.Pdf.UI.RedactionMark)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.UI.RedactionMarkEventArgs" /> class.
            </summary>
            <param name="image">The image.</param>
            <param name="redactionMark">The redaction mark.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.UI.RedactionMarkEventArgs.Image">
            <summary>
            Gets the image associated with redaction mark.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.UI.RedactionMarkEventArgs.RedactionMark">
            <summary>
            Gets the redaction mark.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.UI.RedactionMarkType">
            <summary>
            Specifies types of redaction marks.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.UI.RedactionMarkType.RemoveRasterGraphics">
            <summary>
            Black out raster graphics (image resources).
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.UI.RedactionMarkType.RemoveVectorGraphics">
            <summary>
            Remove vector graphics (lines, Bezier curves, ...).
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.UI.RedactionMarkType.RemoveText">
            <summary>
            Remove text.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.UI.RedactionMarkType.RemoveAnnotations">
            <summary>
            Remove annotations.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.UI.RedactionMarkType.RemoveAll">
            <summary>
            Remove and black out all content (annotations, images, text, vector graphics).
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.UI.TextRedactionMark">
            <summary>
            Represents redaction mark that is used for removing text from content.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.TextRedactionMark.#ctor(Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.Pdf.Content.TextExtraction.TextRegion)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.UI.TextRedactionMark" /> class.
            </summary>
            <param name="image">The image associated with redaction mark.</param>
            <param name="textRegion">The text region of redaction mark.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.TextRedactionMark.Draw(Vintasoft.Imaging.UI.ImageViewer,System.Drawing.Graphics)">
            <summary>
            Draws the object on specified <see cref="T:System.Drawing.Graphics" />.
            </summary>
            <param name="viewer">An image viewer.</param>
            <param name="g">A graphics where the object must be drawn.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.UI.TextRedactionMark.TextRegion">
            <summary>
            Gets the text region to remove.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.UI.TextRedactionMark.MarkType">
            <summary>
            Gets or sets the type of the redaction mark.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.UI.PageRedactionMark">
            <summary>
            Represents redaction mark that removes all 
            content (images, text, vector graphics) from PDF page. 
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.PageRedactionMark.#ctor(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.UI.PageRedactionMark" /> class.
            </summary>
            <param name="image">The image associated with PDF page.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.UI.PageRedactionMark.MarkType">
            <summary>
            Gets or sets the type of the redaction mark.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.UI.PdfTextSearchingProgressEventArgs">
            <summary>
            Provides data for the <see cref="E:Vintasoft.Imaging.Pdf.UI.PdfViewerTool.TextSearchingProgress" /> event.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.PdfTextSearchingProgressEventArgs.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.UI.PdfTextSearchingProgressEventArgs" /> class.       
            </summary>
            <param name="pageIndex">The page index.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.UI.PdfTextSearchingProgressEventArgs.PageIndex">
            <summary>
            Gets the index of processing page.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.UI.PdfTextSearchingProgressEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether the current text searching process should be canceled.
            </summary>
            <value>
            <b>true</b> - text searching process should be canceled;
            <b>false</b> - text searching process should be continued.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.UI.PdfLinkEventArgs">
            <summary>
            Provides data for the <see cref="E:Vintasoft.Imaging.Pdf.UI.PdfViewerTool.LinkClick" /> 
            and the <see cref="E:Vintasoft.Imaging.Pdf.UI.PdfViewerTool.LinkMouseEnter" /> events.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.PdfLinkEventArgs.#ctor(System.Int32,Vintasoft.Imaging.Pdf.Tree.PdfAction)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.UI.PdfLinkEventArgs" /> class.
            </summary>
            <param name="destinationImageIndex">The index of destination image.</param>
            <param name="action">The link action.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.UI.PdfLinkEventArgs.DestinationImageIndex">
            <summary>
            Gets the destination image index.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.UI.PdfLinkEventArgs.Action">
            <summary>
            Gets the <see cref="T:Vintasoft.Imaging.Pdf.Tree.PdfAction" />.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.UI.PdfViewerTool">
            <summary>
            Visual tool that allows to search and select text on PDF page.
            </summary>
            <example>
            This example shows how to search text in PDF document loaded into image viewer.
            <code lang="VB.NET">
            Public Partial Class FormWithPdfViewerTool
                Inherits Form
                '...
                Private _imageViewer As ImageViewer = Nothing
                Private _viewerTool As PdfViewerTool = Nothing
            
                '...
                Public Sub New()
                    '...
                    ' creates the PdfViewerTool instance
                    _viewerTool = New PdfViewerTool(New SolidBrush(Color.FromArgb(56, Color.Blue)))
                    ' subscribe to viewer tool events
                    AddHandler _viewerTool.SelectionChanged, New EventHandler(AddressOf _pdfViewerTool_SelectionChanged)
                    AddHandler _viewerTool.LinkClick, New EventHandler(Of PdfLinkEventArgs)(AddressOf _pdfViewerTool_LinkClick)
                    ' sets the PDF viewer tool as current tool
                    _imageViewer.VisualTool = _viewerTool
                End Sub
            
                '  Occurs when the _viewerTool.Selection is changed.
                Private Sub _pdfViewerTool_SelectionChanged(sender As Object, e As EventArgs)
                    If _viewerTool.SelectedRegion IsNot Nothing Then
                        ' show selected text
                        MessageBox.Show(_viewerTool.SelectedRegion.TextContent)
                    End If
                End Sub
            
                ' Occurs when the link is clicked. 
                Private Sub _pdfViewerTool_LinkClick(sender As Object, e As PdfLinkEventArgs)
                    Select Case e.Action.ActionType
                        Case PdfActionType.[GoTo]
                            ' go to a destination in the current document
                            _imageViewer.FocusedIndex = e.DestinationImageIndex
                            Exit Select
                        Case PdfActionType.Launch
                            ' launch an application
                            Process.Start(DirectCast(e.Action, PdfLaunchAction).WinCommandLine)
                            Exit Select
                        Case PdfActionType.URI
                            ' resolve a uniform resource identifier (URI)
                            Process.Start(DirectCast(e.Action, PdfUriAction).URI)
                            Exit Select
                    End Select
                End Sub
            End Class
            </code>
            <code lang="C#">
            public partial class FormWithPdfViewerTool : Form
            {
                //...
                ImageViewer _imageViewer = null;
                PdfViewerTool _viewerTool = null;
            
                //...
                public FormWithPdfViewerTool()
                {
                    //...
                    // creates the PdfViewerTool instance
                    _viewerTool = new PdfViewerTool(new SolidBrush(Color.FromArgb(56, Color.Blue)));
                    // subscribe to viewer tool events
                    _viewerTool.SelectionChanged += new EventHandler(_pdfViewerTool_SelectionChanged);
                    _viewerTool.LinkClick += new EventHandler&lt;PdfLinkEventArgs&gt;(_pdfViewerTool_LinkClick);
                    // sets the PDF viewer tool as current tool
                    _imageViewer.VisualTool = _viewerTool;
                }
            
                //  Occurs when the _viewerTool.Selection is changed.
                private void _pdfViewerTool_SelectionChanged(object sender, EventArgs e)
                {
                    if (_viewerTool.SelectedRegion != null)
                        // show selected text
                        MessageBox.Show(_viewerTool.SelectedRegion.TextContent);
                }
            
                // Occurs when the link is clicked. 
                void _pdfViewerTool_LinkClick(object sender, PdfLinkEventArgs e)
                {
                    switch (e.Action.ActionType)
                    {
                        case PdfActionType.GoTo:
                            // go to a destination in the current document
                            _imageViewer.FocusedIndex = e.DestinationImageIndex;
                            break;
                        case PdfActionType.Launch:
                            // launch an application
                            Process.Start(((PdfLaunchAction)e.Action).WinCommandLine);
                            break;
                        case PdfActionType.URI:
                            // resolve a uniform resource identifier (URI)
                            Process.Start(((PdfUriAction)e.Action).URI);
                            break;
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.PdfViewerTool.#ctor(System.Drawing.Brush)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.UI.PdfViewerTool" /> class.       
            </summary>
            <param name="textSelectionBrush">A <see cref="T:System.Drawing.Brush" /> for text selection.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.PdfViewerTool.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.UI.PdfViewerTool" /> class.       
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.PdfViewerTool.SelectAll">
            <summary>
            Selects all text on current PDF page.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.PdfViewerTool.SelectInPageSpace(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Selects text on current PDF page using specified rectangle.
            Rectangle specified in the coordinate space of PDF page.
            </summary>
            <param name="startPoint">Specifies start point for text selection, in the coordinate space
            of PDF page.</param>
            <param name="endPoint">Specifies end point for text selection, in the coordinate space
            of PDF page.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.PdfViewerTool.SelectInControlSpace(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Selects text on current PDF page using specified rectangle.
            Rectangle specified in in the coordinate space of the control.
            </summary>
            <param name="startPoint">Specifies start point for text selection, in the coordinate space
            of this control.</param>
            <param name="endPoint">Specifies end point for text selection, in the coordinate space
            of this control.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.PdfViewerTool.FindText(System.String,Vintasoft.Imaging.Pdf.UI.PdfViewerTool.TextSearchMode,System.Boolean,System.Boolean)">
            <summary>
            Searches the text string starting from current PDF page.
            </summary>
            <param name="text">Text to search.</param>
            <param name="searchMode">Text search mode.</param>
            <param name="searchUp">Indicates that text must be searched
            from current position in document to the beginning of document/page.</param>
            <param name="searchNext">Indicates that text search must be continued.</param>
            <example>
            <code lang="VB.NET">
            Public Partial Class TextSearchForm
                Inherits Form
                '...
                Private _imageViewer As ImageViewer = Nothing
                Private _viewerTool As PdfViewerTool = Nothing
            
                '...
                Public Sub New()
                    '...
                    ' creates the PdfViewerTool instance
                    _viewerTool = New PdfViewerTool(New SolidBrush(Color.FromArgb(56, Color.Blue)))
                    ' subscribe to viewer tool events
                    AddHandler _viewerTool.TextSearched, New EventHandler(Of PdfTextSearchedEventArgs)(AddressOf _viewerTool_TextSearched)
                    ' sets the PDF viewer tool as current tool
                    _imageViewer.VisualTool = _viewerTool
                End Sub
            
                ' Search the text starts with a current page.
                Public Sub SearchText(text As String, newSearch As Boolean)
                    ' non case sensitive text must be searched
                    Dim searchEngine As TextSearchEngine = TextSearchEngine.Create(text, True)
                    ' find text at all pages
                    _viewerTool.FindText(searchEngine, PdfViewerTool.TextSearchMode.AllPages, False, newSearch)
                End Sub
            
                ' PdfViewerTool.FindTextFinished event handler.
                Private Sub _viewerTool_TextSearched(sender As Object, e As PdfTextSearchedEventArgs)
                    If e.FoundTextRegion Is Nothing Then
                        ' text was not found
                        MessageBox.Show(String.Format("The specified text was not found: {0}", e.SearchEngine))
                    Else
                        ' text was found
                        ' set foused page
                        _imageViewer.FocusedIndex = e.PageIndex
                        ' select text region
                        _viewerTool.SelectedRegion = e.FoundTextRegion
                    End If
                End Sub
            End Class
            </code>
            <code lang="C#">
            public partial class TextSearchForm : Form
            {
                //...
                ImageViewer _imageViewer = null;
                PdfViewerTool _viewerTool = null;
            
                //...
                public TextSearchForm()
                {
                    //...
                    // creates the PdfViewerTool instance
                    _viewerTool = new PdfViewerTool(new SolidBrush(Color.FromArgb(56, Color.Blue)));
                    // subscribe to viewer tool events
                    _viewerTool.TextSearched += new EventHandler&lt;PdfTextSearchedEventArgs&gt;(_viewerTool_TextSearched);
                    // sets the PDF viewer tool as current tool
                    _imageViewer.VisualTool = _viewerTool;
                }
            
                // Search the text starts with a current page.
                public void SearchText(string text, bool newSearch)
                {
                    // non case sensitive text must be searched
                    TextSearchEngine searchEngine = TextSearchEngine.Create(text, true);
                    // find text at all pages
                    _viewerTool.FindText(searchEngine, PdfViewerTool.TextSearchMode.AllPages, false, newSearch);
                }
            
                // PdfViewerTool.FindTextFinished event handler.
                void _viewerTool_TextSearched(object sender, PdfTextSearchedEventArgs e)
                {
                    if (e.FoundTextRegion == null)
                    {
                        // text was not found
                        MessageBox.Show(string.Format("The specified text was not found: {0}", e.SearchEngine));
                    }
                    else
                    {
                        // text was found
                        // set foused page
                        _imageViewer.FocusedIndex = e.PageIndex;
                        // select text region
                        _viewerTool.SelectedRegion = e.FoundTextRegion;
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.PdfViewerTool.FindText(System.String,System.Boolean,Vintasoft.Imaging.Pdf.UI.PdfViewerTool.TextSearchMode,System.Boolean,System.Boolean)">
            <summary>
            Searches the text string starting from current PDF page.
            </summary>
            <param name="text">Text to search.</param>
            <param name="ignoreCase">Indicates that the case sensitivity should be ignored.</param>
            <param name="searchMode">Text search mode.</param>
            <param name="searchUp">Indicates that text must be searched
            from current position in document to the beginning of document/page.</param>
            <param name="searchNext">Indicates that text search must be continued.</param>
            <example>
            <code lang="VB.NET">
            Public Partial Class TextSearchForm
                Inherits Form
                '...
                Private _imageViewer As ImageViewer = Nothing
                Private _viewerTool As PdfViewerTool = Nothing
            
                '...
                Public Sub New()
                    '...
                    ' creates the PdfViewerTool instance
                    _viewerTool = New PdfViewerTool(New SolidBrush(Color.FromArgb(56, Color.Blue)))
                    ' subscribe to viewer tool events
                    AddHandler _viewerTool.TextSearched, New EventHandler(Of PdfTextSearchedEventArgs)(AddressOf _viewerTool_TextSearched)
                    ' sets the PDF viewer tool as current tool
                    _imageViewer.VisualTool = _viewerTool
                End Sub
            
                ' Search the text starts with a current page.
                Public Sub SearchText(text As String, newSearch As Boolean)
                    ' non case sensitive text must be searched
                    Dim searchEngine As TextSearchEngine = TextSearchEngine.Create(text, True)
                    ' find text at all pages
                    _viewerTool.FindText(searchEngine, PdfViewerTool.TextSearchMode.AllPages, False, newSearch)
                End Sub
            
                ' PdfViewerTool.FindTextFinished event handler.
                Private Sub _viewerTool_TextSearched(sender As Object, e As PdfTextSearchedEventArgs)
                    If e.FoundTextRegion Is Nothing Then
                        ' text was not found
                        MessageBox.Show(String.Format("The specified text was not found: {0}", e.SearchEngine))
                    Else
                        ' text was found
                        ' set foused page
                        _imageViewer.FocusedIndex = e.PageIndex
                        ' select text region
                        _viewerTool.SelectedRegion = e.FoundTextRegion
                    End If
                End Sub
            End Class
            </code>
            <code lang="C#">
            public partial class TextSearchForm : Form
            {
                //...
                ImageViewer _imageViewer = null;
                PdfViewerTool _viewerTool = null;
            
                //...
                public TextSearchForm()
                {
                    //...
                    // creates the PdfViewerTool instance
                    _viewerTool = new PdfViewerTool(new SolidBrush(Color.FromArgb(56, Color.Blue)));
                    // subscribe to viewer tool events
                    _viewerTool.TextSearched += new EventHandler&lt;PdfTextSearchedEventArgs&gt;(_viewerTool_TextSearched);
                    // sets the PDF viewer tool as current tool
                    _imageViewer.VisualTool = _viewerTool;
                }
            
                // Search the text starts with a current page.
                public void SearchText(string text, bool newSearch)
                {
                    // non case sensitive text must be searched
                    TextSearchEngine searchEngine = TextSearchEngine.Create(text, true);
                    // find text at all pages
                    _viewerTool.FindText(searchEngine, PdfViewerTool.TextSearchMode.AllPages, false, newSearch);
                }
            
                // PdfViewerTool.FindTextFinished event handler.
                void _viewerTool_TextSearched(object sender, PdfTextSearchedEventArgs e)
                {
                    if (e.FoundTextRegion == null)
                    {
                        // text was not found
                        MessageBox.Show(string.Format("The specified text was not found: {0}", e.SearchEngine));
                    }
                    else
                    {
                        // text was found
                        // set foused page
                        _imageViewer.FocusedIndex = e.PageIndex;
                        // select text region
                        _viewerTool.SelectedRegion = e.FoundTextRegion;
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.PdfViewerTool.FindText(System.Text.RegularExpressions.Regex,Vintasoft.Imaging.Pdf.UI.PdfViewerTool.TextSearchMode,System.Boolean,System.Boolean)">
            <summary>
            Searches the text, defined by regular expression, starting from the current PDF page.
            </summary>
            <param name="regex">Regular expression for text searching.</param>
            <param name="searchMode">Text search mode.</param>
            <param name="searchUp">Indicates that text must be searched
            from current position in document to the beginning of document/page.</param>
            <param name="searchNext">Indicates that text search must be continued.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.PdfViewerTool.FindText(Vintasoft.Imaging.Pdf.Content.TextExtraction.TextSearchEngine,Vintasoft.Imaging.Pdf.UI.PdfViewerTool.TextSearchMode,System.Boolean,System.Boolean)">
            <summary>
            Searches the text, defined by <see cref="T:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextSearchEngine" />,
            starting from the current page.
            </summary>
            <param name="searchEngine">Search engine.</param>
            <param name="searchMode">Text search mode.</param>
            <param name="searchUp">Indicates that text must be searched
            from current position in document to the beginning of document/page.</param>
            <param name="searchNext">Indicates that text search must be continued.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.PdfViewerTool.ClearSelection">
            <summary>
            Clears the current selection.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.PdfViewerTool.OnActivated(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.UI.VisualTools.VisualTool.Activated" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.PdfViewerTool.OnDeactivated(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.UI.VisualTools.VisualTool.Deactivated" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.PdfViewerTool.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints a content of this tool.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that
            contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.PdfViewerTool.DrawSelection(System.Drawing.Graphics,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Draws the selection around the selected text.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics" /> to draw the selection.</param>
            <param name="selectionPath">Selection graphics path.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.PdfViewerTool.OnMouseDown(Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs)">
            <summary>
            Raises the MouseDown event.
            </summary>
            <param name="e">A <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.PdfViewerTool.OnMouseMove(Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs)">
            <summary>
            Raises the MouseMove event.
            </summary>
            <param name="e">A <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.PdfViewerTool.OnMouseUp(Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs)">
            <summary>
            Raises the MouseUp event.
            </summary>
            <param name="e">A <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.PdfViewerTool.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by the <see cref="T:Vintasoft.Imaging.Pdf.UI.PdfViewerTool" /> object.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and
            unmanaged resources; <b>false</b> to release only unmanaged
            resources.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.UI.PdfViewerTool.Name">
            <summary>
            Gets the name of the visual tool.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.UI.PdfViewerTool.SelectionBrush">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Brush" /> for text selection.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.UI.PdfViewerTool.SelectionMode">
            <summary>
            Gets the current <see cref="T:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextSelectionMode">text selection mode</see>.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.UI.PdfViewerTool.SelectedRegion">
            <summary>
            Gets or sets the selected <see cref="T:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextRegion">text region</see>.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.UI.PdfViewerTool.SelectionCursor">
            <summary>
            Gets or sets a <see cref="T:System.Windows.Forms.Cursor" /> for text selection.
            </summary>
            <value>Default value: <see cref="P:System.Windows.Forms.Cursors.IBeam" />.</value>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.UI.PdfViewerTool.NavigationCursor">
            <summary>
            Gets or sets a <see cref="T:System.Windows.Forms.Cursor" /> for document navigation.
            </summary>
            <value>Default value: <see cref="P:System.Windows.Forms.Cursors.Hand" />.</value>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.UI.PdfViewerTool.EnableSelection">
            <summary>
            Determines that text selection is enabled.
            </summary>
            <value>
            <b>true</b> - text selection is enabled;
            <b>false</b> - text selection is disabled.<br />
            Default value: <b>true</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.UI.PdfViewerTool.EnableNavigation">
            <summary>
            Determines that text navigation is enabled.
            </summary>
            <value>
            <b>true</b> - text navigation is enabled;
            <b>false</b> - text navigation is disabled.<br />
            Default value: <b>true</b>.
            </value>
        </member>
        <member name="E:Vintasoft.Imaging.Pdf.UI.PdfViewerTool.SelectionChanged">
            <summary>
            Occurs when the <see cref="P:Vintasoft.Imaging.Pdf.UI.PdfViewerTool.SelectedRegion" /> is changed.
            </summary>
            <remarks>
            This event is thread safe.
            </remarks>
        </member>
        <member name="E:Vintasoft.Imaging.Pdf.UI.PdfViewerTool.LinkClick">
            <summary>
            Occurs when the link is clicked. 
            </summary>		
            <remarks>
            This event is thread safe.
            </remarks>
        </member>
        <member name="E:Vintasoft.Imaging.Pdf.UI.PdfViewerTool.LinkMouseEnter">
            <summary>
            Occurs when the mouse pointer enters the link.
            </summary>
            <remarks>
            This event is thread safe.
            </remarks>
        </member>
        <member name="E:Vintasoft.Imaging.Pdf.UI.PdfViewerTool.LinkMouseLeave">
            <summary>
            Occurs when the mouse pointer leaves the link.
            </summary>	
            <remarks>
            This event is thread safe.
            </remarks>
        </member>
        <member name="E:Vintasoft.Imaging.Pdf.UI.PdfViewerTool.TextSearching">
            <summary>
            Occurs when the text searching process is started.
            </summary>
            <remarks>
            This event is thread safe.
            </remarks>
        </member>
        <member name="E:Vintasoft.Imaging.Pdf.UI.PdfViewerTool.TextSearchingProgress">
            <summary>
            Occurs before the text searching process is processed a page.
            </summary>
            <remarks>
            This event is thread safe.
            </remarks>
        </member>
        <member name="E:Vintasoft.Imaging.Pdf.UI.PdfViewerTool.TextSearched">
            <summary>
            Occurs when the text searching process is finished.
            </summary>
            <remarks>
            This event is thread safe.
            </remarks>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.UI.PdfViewerTool.TextSearchMode">
            <summary>
            Specifies available modes of text search only.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.UI.PdfViewerTool.TextSearchMode.CurrentPage">
            <summary>
            Find text on the current page.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.UI.PdfViewerTool.TextSearchMode.AllPages">
            <summary>
            Find text on all pages of PDF document starting from the current page.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.UI.PdfTextSearchedEventArgs">
            <summary>
            Provides data for the <see cref="E:Vintasoft.Imaging.Pdf.UI.PdfViewerTool.TextSearched" /> event.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Pdf.UI.PdfTextSearchedEventArgs.#ctor(Vintasoft.Imaging.Pdf.Content.TextExtraction.TextSearchEngine,System.Int32,Vintasoft.Imaging.Pdf.Tree.PdfPage,Vintasoft.Imaging.Pdf.Content.TextExtraction.TextRegion,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Pdf.UI.PdfTextSearchedEventArgs" /> class.
            </summary>
            <param name="searchEngine">Text search engine.</param>
            <param name="pageIndex">The index of PDF page where text is found.</param>
            <param name="page">The PDF page where text is found.</param>
            <param name="foundRegion">The <see cref="T:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextRegion">region</see> of searched text.</param>
            <param name="canceled">Determines that current text searching process
            is canceled.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.UI.PdfTextSearchedEventArgs.SearchEngine">
            <summary>
            Gets the text search engine.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.UI.PdfTextSearchedEventArgs.PageIndex">
            <summary>
            Gets the index of PDF page where text is found.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.UI.PdfTextSearchedEventArgs.Page">
            <summary>
            Gets the PDF page where text is found.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.UI.PdfTextSearchedEventArgs.FoundTextRegion">
            <summary>
            Gets the <see cref="T:Vintasoft.Imaging.Pdf.Content.TextExtraction.TextRegion">region</see> of searched text.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Pdf.UI.PdfTextSearchedEventArgs.Canceled">
            <summary>
            Determines that current text searching process is canceled.
            </summary>
            <value>
            <b>true</b> - text searching process is canceled;
            <b>false</b> - text searching process is not canceled.
            </value>
        </member>
    </members>
</doc>
