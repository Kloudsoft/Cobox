<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Vintasoft.WpfBarcode</name>
    </assembly>
    <members>
        <member name="T:Vintasoft.WpfBarcode.BarcodeReader">
            <summary>
            Class that allows to read barcodes from the image.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeReader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.BarcodeReader" /> class. 
            </summary>
            <example>
            Please see example <see cref="M:Vintasoft.WpfBarcode.BarcodeReader.ReadBarcodes(System.IO.Stream)">here</see>.
            </example>
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeReader.SetImage(System.String)">
            <summary>
            Sets the current image from specified file.
            </summary>
            <param name="filename">The name of the image file with barcodes.</param>
            <example>
            Please see example <see cref="M:Vintasoft.WpfBarcode.BarcodeReader.ReadBarcodes">here</see>.
            </example>
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeReader.SetImage(System.IO.Stream)">
            <summary>
            Sets the current image from specified stream.
            </summary>
            <param name="stream">The stream that contains image with barcodes.</param>
            <example>
            Please see example <see cref="M:Vintasoft.WpfBarcode.BarcodeReader.ReadBarcodes">here</see>.
            </example>
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeReader.SetImage(System.Windows.Media.Imaging.BitmapSource)">
            <summary>
            Sets the current image from specified image.
            </summary>
            <param name="image">Image with barcodes.</param>
            <example>
            Please see example <see cref="M:Vintasoft.WpfBarcode.BarcodeReader.ReadBarcodes">here</see>.
            </example>
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeReader.ClearImage">
            <summary>
            Clears the current image.
            </summary>
            <example>
            Please see example <see cref="M:Vintasoft.WpfBarcode.BarcodeReader.ReadBarcodes">here</see>.
            </example>
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeReader.ReadBarcodes">
            <summary>
            Reads barcodes from image specified using <see cref="M:Vintasoft.WpfBarcode.BarcodeReader.SetImage(System.IO.Stream)" /> method.
            </summary>
            <example>Here is an example that demonstrates how to detect barcodes in 2 images.
            <code lang="VB.NET">   
            Imports Vintasoft.WpfBarcode   
               
            ''' &lt;summary&gt;   
            ''' Test that shows how to read barcodes from image,   
            ''' the barcode reader searches barcodes using 2 different scan intervals.   
            ''' &lt;/summary&gt;   
            Class ReadBarcodesFromCurrentImageExample   
               
            	''' &lt;summary&gt;   
            	''' Run the test.   
            	''' &lt;/summary&gt;   
            	Public Shared Sub Test()   
            		ReadBarcodes("test1.jpg", "test2.png")   
            	End Sub   
               
            	''' &lt;summary&gt;   
            	''' Read barcodes from images, which are stored in files.   
            	''' Barcode reader will try to recognize barcodes using 2 different scan intervals.   
            	''' &lt;/summary&gt;   
            	Private Shared Sub ReadBarcodes(ParamArray filenames As String())   
            		' create barcode reader   
            		Using reader As New BarcodeReader()   
            			' specify that reader must search for Code39, Code128 and DataMatrix barcodes only   
            			reader.Settings.ScanBarcodeTypes = BarcodeType.Code39 Or BarcodeType.Code128 Or BarcodeType.DataMatrix   
               
            			' specify that reader must search for horizontal and vertical barcodes only   
            			reader.Settings.ScanDirection = ScanDirection.Horizontal Or ScanDirection.Vertical   
               
            			' for each filename   
            			For Each filename As String In filenames   
            				Console.Write(String.Format("{0}: ", filename))   
               
            				' set the reader image   
            				reader.SetImage(filename)   
               
            				' read barcodes from current image with scan interval = 5   
            				Dim infos As IBarcodeInfo() = ReadBarcodes(reader, 5)   
            				' if no barcodes found   
            				If infos.Length = 0 Then   
            					' read barcodes from current image with scan interval = 1   
            					infos = ReadBarcodes(reader, 1)   
            				End If   
               
            				' clear reader image   
            				reader.ClearImage()   
               
            				' show barcode recognition results   
               
            				If infos.Length = 0 Then   
            					Console.WriteLine("No barcodes found.")   
            				Else   
            					Console.WriteLine(String.Format("{0} barcodes found:", infos.Length))   
            					Console.WriteLine()   
            					For i As Integer = 0 To infos.Length - 1   
            						Dim info As IBarcodeInfo = infos(i)   
            						Console.WriteLine(String.Format("[{0}:{1}]", i, info.BarcodeType))   
            						Console.WriteLine(String.Format("Value:      {0}", info.Value))   
            						Console.WriteLine(String.Format("Confidence: {0}%", Math.Round(info.Confidence)))   
            						Console.WriteLine(String.Format("Threshold:  {0}", info.Threshold))   
            						Console.WriteLine(String.Format("Region:     {0}", info.Region))   
            						Console.WriteLine()   
            					Next   
            				End If   
            			Next   
            		End Using   
            	End Sub   
               
            	''' &lt;summary&gt;   
            	''' Read barcodes from current reader image with specified scan interval.   
            	''' &lt;/summary&gt;   
            	Private Shared Function ReadBarcodes(reader As BarcodeReader, scanInterval As Integer) As IBarcodeInfo()   
            		reader.Settings.ScanInterval = scanInterval   
            		Return reader.ReadBarcodes()   
            	End Function   
               
            End Class
            </code>
            <code lang="C#">
            using System;
            
            using Vintasoft.WpfBarcode;
            using Vintasoft.WpfBarcode.SymbologySubsets;
            
            /// &lt;summary&gt;
            /// Test that shows how to read barcodes from image,
            /// the barcode reader searches barcodes using 2 different scan intervals.
            /// &lt;/summary&gt;
            class ReadBarcodesFromCurrentImageExample
            {
            
                /// &lt;summary&gt;
                /// Run the test.
                /// &lt;/summary&gt;
                public static void Test()
                {
                    ReadBarcodes("test1.jpg", "test2.png");
                }
            
                /// &lt;summary&gt;
                /// Read barcodes from images, which are stored in files.
                /// Barcode reader will try to recognize barcodes using 2 different scan intervals.
                /// &lt;/summary&gt;
                static void ReadBarcodes(params string[] filenames)
                {
                    // create barcode reader
                    using (BarcodeReader reader = new BarcodeReader())
                    {
                        // specify that reader must search for Code39, Code39Extended, 
                        // Code128, SSCC18 and DataMatrix barcodes 
                        reader.Settings.ScanBarcodeTypes =
                            BarcodeType.Code39 |
                            BarcodeType.Code128 |
                            BarcodeType.DataMatrix;
                        reader.Settings.ScanBarcodeSubsets.Add(BarcodeSymbologySubsets.Code39Extended);
                        reader.Settings.ScanBarcodeSubsets.Add(BarcodeSymbologySubsets.SSCC18);
            
                        // specify that reader must search for horizontal and vertical barcodes only
                        reader.Settings.ScanDirection = ScanDirection.Horizontal | ScanDirection.Vertical;
            
                        // for each filename
                        foreach (string filename in filenames)
                        {
                            Console.Write(string.Format("{0}: ", filename));
            
                            // set the reader image
                            reader.SetImage(filename);
            
                            // read barcodes from current image with scan interval = 5
                            IBarcodeInfo[] infos = ReadBarcodes(reader, 5);
                            // if no barcodes found
                            if (infos.Length == 0)
                                // read barcodes from current image with scan interval = 1
                                infos = ReadBarcodes(reader, 1);
            
                            // clear reader image
                            reader.ClearImage();
            
                            // show barcode recognition results
            
                            if (infos.Length == 0)
                            {
                                Console.WriteLine("No barcodes found.");
                            }
                            else
                            {
                                Console.WriteLine(string.Format("{0} barcodes found:", infos.Length));
                                Console.WriteLine();
                                for (int i = 0; i &lt; infos.Length; i++)
                                {
                                    IBarcodeInfo info = infos[i];
                                    Console.WriteLine(string.Format("[{0}:{1}]", i, info.BarcodeType));
                                    Console.WriteLine(string.Format("Value:      {0}", info.Value));
                                    Console.WriteLine(string.Format("Confidence: {0}%", Math.Round(info.Confidence)));
                                    Console.WriteLine(string.Format("Threshold:  {0}", info.Threshold));
                                    Console.WriteLine(string.Format("Region:     {0}", info.Region));
                                    Console.WriteLine();
                                }
                            }
                        }
                    }
                }
            
                /// &lt;summary&gt;
                /// Read barcodes from current reader image with specified scan interval.
                /// &lt;/summary&gt;
                private static IBarcodeInfo[] ReadBarcodes(BarcodeReader reader, int scanInterval)
                {
                    reader.Settings.ScanInterval = scanInterval;
                    return reader.ReadBarcodes();
                }
            
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeReader.ReadBarcodes(System.String)">
            <summary>
            Reads barcodes from the specified file.
            </summary>
            <param name="filename">The name of the file with barcodes.</param>
            <returns>An array of <see cref="T:Vintasoft.WpfBarcode.IBarcodeInfo" /> objects which contains
            information about recognized barcodes.</returns>
            <example>Here is a simple example that demonstrates how to detect
            barcodes in an image.
            <code lang="VB.NET">   
            Imports Vintasoft.WpfBarcode   
               
            ''' &lt;summary&gt;   
            ''' Test that shows how read barcodes from image, which is stored in file, using the BarcodeReader class.   
            ''' &lt;/summary&gt;   
            Class ReadBarcodesFromFilesExample   
               
            	''' &lt;summary&gt;   
            	''' Run the test.   
            	''' &lt;/summary&gt;   
            	Public Shared Sub Test()   
            		' read barcodes from image, which is stored in file   
            		ReadBarcodes("test1.jpg")   
            	End Sub   
               
            	''' &lt;summary&gt;   
            	''' Read barcodes from image, which is stored in file.   
            	''' &lt;/summary&gt;   
            	Private Shared Sub ReadBarcodes(filename As String)   
            		' create the barcode reader   
            		Using reader As New BarcodeReader()   
            			' specify that reader must search for Code39, Code128 and DataMatrix barcodes only   
            			reader.Settings.ScanBarcodeTypes = BarcodeType.Code39 Or BarcodeType.Code128 Or BarcodeType.DataMatrix   
               
            			' specify that reader must search for horizontal and vertical barcodes only   
            			reader.Settings.ScanDirection = ScanDirection.LeftToRight Or ScanDirection.RightToLeft   
               
                        ' use Automatic Recognition   
                        reader.Settings.AutomaticRecognition = True   
               
            			' read barcodes from image stored in file   
            			Dim infos As IBarcodeInfo() = reader.ReadBarcodes(filename)   
               
            			' show barcode recognition results   
               
            			Console.WriteLine(String.Format("recognition time {0} ms.", reader.RecognizeTime.TotalMilliseconds))   
               
            			If infos.Length = 0 Then   
            				Console.WriteLine("No barcodes found.")   
            			Else   
            				Console.WriteLine(String.Format("{0} barcodes found:", infos.Length))   
            				Console.WriteLine()   
            				For i As Integer = 0 To infos.Length - 1   
            					Dim info As IBarcodeInfo = infos(i)   
            					Console.WriteLine(String.Format("[{0}:{1}]", i, info.BarcodeType))   
            					Console.WriteLine(String.Format("Value:      {0}", info.Value))   
            					Console.WriteLine(String.Format("Confidence: {0}%", Math.Round(info.Confidence)))   
            					Console.WriteLine(String.Format("Threshold:  {0}", info.Threshold))   
            					Console.WriteLine(String.Format("Region:     {0}", info.Region))   
            					Console.WriteLine()   
            				Next   
            			End If   
            		End Using   
            	End Sub   
               
            End Class
            </code>
            <code lang="C#">
            using System;
            
            using Vintasoft.WpfBarcode;
            using Vintasoft.WpfBarcode.SymbologySubsets;
            
            /// &lt;summary&gt;
            /// Test that shows how read barcodes from image, which is stored in file, using the BarcodeReader class.
            /// &lt;/summary&gt;
            class ReadBarcodesFromFilesExample
            {
            
                /// &lt;summary&gt;
                /// Run the test.
                /// &lt;/summary&gt;
                public static void Test()
                {
                    // read barcodes from image, which is stored in file
                    ReadBarcodes("test1.jpg");
                }
            
                /// &lt;summary&gt;
                /// Read barcodes from image, which is stored in file.
                /// &lt;/summary&gt;
                static void ReadBarcodes(string filename)
                {
                    // create the barcode reader
                    using (BarcodeReader reader = new BarcodeReader())
                    {
                        // specify that reader must search for Code39, Code39Extended, 
                        // Code128, SSCC18 and DataMatrix barcodes 
                        reader.Settings.ScanBarcodeTypes =
                            BarcodeType.Code39 |
                            BarcodeType.Code128 |
                            BarcodeType.DataMatrix;
                        reader.Settings.ScanBarcodeSubsets.Add(BarcodeSymbologySubsets.Code39Extended);
                        reader.Settings.ScanBarcodeSubsets.Add(BarcodeSymbologySubsets.SSCC18);
            
                        // specify that reader must search for horizontal and vertical barcodes only
                        reader.Settings.ScanDirection = ScanDirection.LeftToRight | ScanDirection.RightToLeft;
            
                        // use Automatic Recognition
                        reader.Settings.AutomaticRecognition = true;
            
                        // read barcodes from image stored in file
                        IBarcodeInfo[] infos = reader.ReadBarcodes(filename);
            
                        // show barcode recognition results
            
                        Console.WriteLine(string.Format("recognition time {0} ms.",
                            reader.RecognizeTime.TotalMilliseconds));
            
                        if (infos.Length == 0)
                        {
                            Console.WriteLine("No barcodes found.");
                        }
                        else
                        {
                            Console.WriteLine(string.Format("{0} barcodes found:", infos.Length));
                            Console.WriteLine();
                            for (int i = 0; i &lt; infos.Length; i++)
                            {
                                IBarcodeInfo info = infos[i];
                                Console.WriteLine(string.Format("[{0}:{1}]", i, info.BarcodeType));
                                Console.WriteLine(string.Format("Value:      {0}", info.Value));
                                Console.WriteLine(string.Format("Confidence: {0}%", Math.Round(info.Confidence)));
                                Console.WriteLine(string.Format("Threshold:  {0}", info.Threshold));
                                Console.WriteLine(string.Format("Region:     {0}", info.Region));
                                Console.WriteLine();
                            }
                        }
                    }
                }
            
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeReader.ReadBarcodes(System.IO.Stream)">
            <summary>
            Reads barcodes from the specified stream.
            </summary>
            <param name="stream">The stream that contains image.</param>
            <returns>An array of <see cref="T:Vintasoft.WpfBarcode.IBarcodeInfo" /> objects which contains
            information about recognized barcodes.</returns>
            <example>Here is a simple example that demonstrates how to detect
            barcodes in an image.
            <code lang="VB.NET">   
            Imports System.IO   
            Imports Vintasoft.WpfBarcode   
               
            ''' &lt;summary&gt;   
            ''' Test that shows how read barcodes from image, which is stored in stream, using the BarcodeReader class.   
            ''' &lt;/summary&gt;   
            Class ReadBarcodesFromStreamExample   
            	''' &lt;summary&gt;   
            	''' Run the test.   
            	''' &lt;/summary&gt;   
            	Public Shared Sub Test()   
            		' open the stream   
            		Using barcodeImageStream As Stream = New FileStream("test1.jpg", FileMode.Open, FileAccess.Read)   
            			' read barcodes from image, which is stored in stream   
            			ReadBarcodes(barcodeImageStream)   
            		End Using   
            	End Sub   
               
            	''' &lt;summary&gt;   
            	''' Read barcodes from image, which is stored in stream.   
            	''' &lt;/summary&gt;   
            	Private Shared Sub ReadBarcodes(stream As Stream)   
            		' create barcode reader   
            		Using reader As New BarcodeReader()   
            			' specify that reader must search for Code39, Code128 and DataMatrix barcodes only   
            			reader.Settings.ScanBarcodeTypes = BarcodeType.Code39 Or BarcodeType.Code128 Or BarcodeType.DataMatrix   
               
            			' specify that reader must search for horizontal and vertical barcodes only   
            			reader.Settings.ScanDirection = ScanDirection.LeftToRight Or ScanDirection.RightToLeft   
               
                        ' use Automatic Recognition   
                        reader.Settings.AutomaticRecognition = True   
               
            			' read barcodes from image stored in stream   
            			Dim infos As IBarcodeInfo() = reader.ReadBarcodes(stream)   
               
            			' show barcode recognition results   
               
            			Console.WriteLine(String.Format("Recognition time {0} ms.", reader.RecognizeTime.TotalMilliseconds))   
               
            			If infos.Length = 0 Then   
            				Console.WriteLine("No barcodes found.")   
            			Else   
            				Console.WriteLine(String.Format("{0} barcodes found:", infos.Length))   
            				Console.WriteLine()   
            				For i As Integer = 0 To infos.Length - 1   
            					Dim info As IBarcodeInfo = infos(i)   
            					Console.WriteLine(String.Format("[{0}:{1}]", i, info.BarcodeType))   
            					Console.WriteLine(String.Format("Value:      {0}", info.Value))   
            					Console.WriteLine(String.Format("Confidence: {0}%", Math.Round(info.Confidence)))   
            					Console.WriteLine(String.Format("Threshold:  {0}", info.Threshold))   
            					Console.WriteLine(String.Format("Region:     {0}", info.Region))   
            					Console.WriteLine()   
            				Next   
            			End If   
            		End Using   
            	End Sub   
               
            End Class
            </code>
            <code lang="C#">
            using System;
            using System.IO;
            
            using Vintasoft.WpfBarcode;
            using Vintasoft.WpfBarcode.SymbologySubsets;
            
            /// &lt;summary&gt;
            /// Test that shows how read barcodes from image, which is stored in stream, using the BarcodeReader class.
            /// &lt;/summary&gt;
            class ReadBarcodesFromStreamExample
            {
                /// &lt;summary&gt;
                /// Run the test.
                /// &lt;/summary&gt;
                public static void Test()
                {
                    // open the stream
                    using (Stream barcodeImageStream = new FileStream("test1.jpg", FileMode.Open, FileAccess.Read))
                    {
                        // read barcodes from image, which is stored in stream
                        ReadBarcodes(barcodeImageStream);
                    }
                }
            
                /// &lt;summary&gt;
                /// Read barcodes from image, which is stored in stream.
                /// &lt;/summary&gt;
                static void ReadBarcodes(Stream stream)
                {
                    // create barcode reader
                    using (BarcodeReader reader = new BarcodeReader())
                    {
                        // specify that reader must search for Code39, Code39Extended, 
                        // Code128, SSCC18 and DataMatrix barcodes 
                        reader.Settings.ScanBarcodeTypes =
                            BarcodeType.Code39 |
                            BarcodeType.Code128 |
                            BarcodeType.DataMatrix;
                        reader.Settings.ScanBarcodeSubsets.Add(BarcodeSymbologySubsets.Code39Extended);
                        reader.Settings.ScanBarcodeSubsets.Add(BarcodeSymbologySubsets.SSCC18);
            
                        // specify that reader must search for horizontal and vertical barcodes only
                        reader.Settings.ScanDirection = ScanDirection.LeftToRight | ScanDirection.RightToLeft;
            
                        // use Automatic Recognition
                        reader.Settings.AutomaticRecognition = true;
            
                        // read barcodes from image stored in stream
                        IBarcodeInfo[] infos = reader.ReadBarcodes(stream);
            
                        // show barcode recognition results
            
                        Console.WriteLine(string.Format("Recognition time {0} ms.",
                            reader.RecognizeTime.TotalMilliseconds));
            
                        if (infos.Length == 0)
                        {
                            Console.WriteLine("No barcodes found.");
                        }
                        else
                        {
                            Console.WriteLine(string.Format("{0} barcodes found:", infos.Length));
                            Console.WriteLine();
                            for (int i = 0; i &lt; infos.Length; i++)
                            {
                                IBarcodeInfo info = infos[i];
                                Console.WriteLine(string.Format("[{0}:{1}]", i, info.BarcodeType));
                                Console.WriteLine(string.Format("Value:      {0}", info.Value));
                                Console.WriteLine(string.Format("Confidence: {0}%", Math.Round(info.Confidence)));
                                Console.WriteLine(string.Format("Threshold:  {0}", info.Threshold));
                                Console.WriteLine(string.Format("Region:     {0}", info.Region));
                                Console.WriteLine();
                            }
                        }
                    }
                }
            
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeReader.ReadBarcodes(System.Windows.Media.Imaging.BitmapSource)">
            <summary>
            Reads barcodes from the specified existing image.
            </summary>
            <param name="image">Image with barcodes.</param>
            <returns>An array of <see cref="T:Vintasoft.WpfBarcode.IBarcodeInfo" /> objects which contains
            information about recognized barcodes.</returns>
            <example>Here is a simple example that demonstrates how to detect barcodes
            in an image.
            <code lang="VB.NET">   
            Imports System.IO   
            Imports System.Windows.Media.Imaging   
               
            Imports Vintasoft.WpfBarcode   
               
            ''' &lt;summary&gt;   
            ''' Test that shows how read barcodes from image using the BarcodeReader class.   
            ''' &lt;/summary&gt;   
            Class ReadBarcodesFromImageExample   
               
            	''' &lt;summary&gt;   
            	''' Run the test.   
            	''' &lt;/summary&gt;   
            	Public Shared Sub Test()   
            		' load image from file   
            		Using imageFileStream As Stream = New FileStream("test1.jpg", FileMode.Open, FileAccess.Read)   
            			Dim barcodeImage As New BitmapImage()   
            			barcodeImage.BeginInit()   
            			barcodeImage.StreamSource = imageFileStream   
            			barcodeImage.EndInit()   
            			' read barcodes from image   
            			ReadBarcodes(barcodeImage)   
            		End Using   
            	End Sub   
               
            	''' &lt;summary&gt;   
            	''' Read barcodes from image.   
            	''' &lt;/summary&gt;   
            	Private Shared Sub ReadBarcodes(barcodeImage As BitmapSource)   
            		' create barcode reader   
            		Using reader As New BarcodeReader()   
            			' specify that reader must search for Code39, Code128 and DataMatrix barcodes only   
            			reader.Settings.ScanBarcodeTypes = BarcodeType.Code39 Or BarcodeType.Code128 Or BarcodeType.DataMatrix   
               
            			' specify that reader must search for horizontal and vertical barcodes only   
            			reader.Settings.ScanDirection = ScanDirection.LeftToRight Or ScanDirection.RightToLeft   
               
                        ' use Automatic Recognition   
                        reader.Settings.AutomaticRecognition = True   
               
            			' read barcodes from image   
            			Dim infos As IBarcodeInfo() = reader.ReadBarcodes(barcodeImage)   
               
            			' show barcode recognition results   
               
            			Console.WriteLine(String.Format("Recognition time {0} ms.", reader.RecognizeTime.TotalMilliseconds))   
               
            			If infos.Length = 0 Then   
            				Console.WriteLine("No barcodes found.")   
            			Else   
            				Console.WriteLine(String.Format("{0} barcodes found:", infos.Length))   
            				Console.WriteLine()   
            				For i As Integer = 0 To infos.Length - 1   
            					Dim info As IBarcodeInfo = infos(i)   
            					Console.WriteLine(String.Format("[{0}:{1}]", i, info.BarcodeType))   
            					Console.WriteLine(String.Format("Value:      {0}", info.Value))   
            					Console.WriteLine(String.Format("Confidence: {0}%", Math.Round(info.Confidence)))   
            					Console.WriteLine(String.Format("Threshold:  {0}", info.Threshold))   
            					Console.WriteLine(String.Format("Region:     {0}", info.Region))   
            					Console.WriteLine()   
            				Next   
            			End If   
            		End Using   
            	End Sub   
            End Class
            </code>
            <code lang="C#">
            using System;
            using System.IO;
            using System.Windows.Media.Imaging;
            
            using Vintasoft.WpfBarcode;
            using Vintasoft.WpfBarcode.SymbologySubsets;
            
            /// &lt;summary&gt;
            /// Test that shows how read barcodes from image using the BarcodeReader class.
            /// &lt;/summary&gt;
            class ReadBarcodesFromImageExample
            {
            
                /// &lt;summary&gt;
                /// Run the test.
                /// &lt;/summary&gt;
                public static void Test()
                {
                    // load image from file
                    using (Stream imageFileStream = new FileStream("test1.jpg", FileMode.Open, FileAccess.Read))
                    {
                        BitmapImage barcodeImage = new BitmapImage();
                        barcodeImage.BeginInit();
                        barcodeImage.StreamSource = imageFileStream;
                        barcodeImage.EndInit();
                        // read barcodes from image
                        ReadBarcodes(barcodeImage);
                    }
                }
            
                /// &lt;summary&gt;
                /// Read barcodes from image.
                /// &lt;/summary&gt;
                static void ReadBarcodes(BitmapSource barcodeImage)
                {
                    // create barcode reader
                    using (BarcodeReader reader = new BarcodeReader())
                    {
                        // specify that reader must search for Code39, Code39Extended, 
                        // Code128, SSCC18 and DataMatrix barcodes 
                        reader.Settings.ScanBarcodeTypes =
                            BarcodeType.Code39 |
                            BarcodeType.Code128 |
                            BarcodeType.DataMatrix;
                        reader.Settings.ScanBarcodeSubsets.Add(BarcodeSymbologySubsets.Code39Extended);
                        reader.Settings.ScanBarcodeSubsets.Add(BarcodeSymbologySubsets.SSCC18);
            
                        // specify that reader must search for horizontal and vertical barcodes only
                        reader.Settings.ScanDirection = ScanDirection.LeftToRight | ScanDirection.RightToLeft;
            
                        // use Automatic Recognition
                        reader.Settings.AutomaticRecognition = true;
            
                        // read barcodes from image
                        IBarcodeInfo[] infos = reader.ReadBarcodes(barcodeImage);
            
                        // show barcode recognition results
            
                        Console.WriteLine(string.Format("Recognition time {0} ms.",
                            reader.RecognizeTime.TotalMilliseconds));
            
                        if (infos.Length == 0)
                        {
                            Console.WriteLine("No barcodes found.");
                        }
                        else
                        {
                            Console.WriteLine(string.Format("{0} barcodes found:", infos.Length));
                            Console.WriteLine();
                            for (int i = 0; i &lt; infos.Length; i++)
                            {
                                IBarcodeInfo info = infos[i];
                                Console.WriteLine(string.Format("[{0}:{1}]", i, info.BarcodeType));
                                Console.WriteLine(string.Format("Value:      {0}", info.Value));
                                Console.WriteLine(string.Format("Confidence: {0}%", Math.Round(info.Confidence)));
                                Console.WriteLine(string.Format("Threshold:  {0}", info.Threshold));
                                Console.WriteLine(string.Format("Region:     {0}", info.Region));
                                Console.WriteLine();
                            }
                        }
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeReader.ProcessImage(System.Windows.Media.Imaging.BitmapSource)">
            <summary>
            Allows to process the image before barcode reading.
            </summary>
            <param name="source">Image with barcodes.</param>
            <returns>Processed image.</returns>
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeReader.Dispose">
            <summary>
            Releases all resources used by this <see cref="T:Vintasoft.WpfBarcode.BarcodeReader" />.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeReader.Settings">
            <summary>
            Defines the barcode reader settings.
            </summary>
            <example>
            Please see example <see cref="M:Vintasoft.WpfBarcode.BarcodeReader.ReadBarcodes(System.IO.Stream)">here</see>.
            </example>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeReader.RecognizeTime">
            <summary>
            Gets an information about barcodes read time.
            </summary>
            <example>
            Please see example <see cref="M:Vintasoft.WpfBarcode.BarcodeReader.ReadBarcodes(System.IO.Stream)">here</see>.
            </example>
        </member>
        <member name="E:Vintasoft.WpfBarcode.BarcodeReader.Progress">
            <summary>
            Occurs when progress of barcode reading is changed. 
            </summary>
            <remarks>
            Used only in <see cref="P:Vintasoft.WpfBarcode.ReaderSettings.AutomaticRecognition">Automatic recognition</see>
            and <see cref="P:Vintasoft.WpfBarcode.ReaderSettings.ThresholdIterations">iteration process</see>.
            </remarks>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeReaderProgressEventArgs">
            <summary>
            Provides data for the <see cref="E:Vintasoft.WpfBarcode.BarcodeReader.Progress" /> event.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeReaderProgressEventArgs.Progress">
            <summary>
            Returns the progress, in percent, of current action.
            </summary>
            <value>Value from 0 to 100.</value>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeReaderProgressEventArgs.CanCancel">
            <summary>
            Determines that current action can be canceled.
            </summary>
            <value><b>true</b> if current action can be canceled;
            <b>false</b> otherwise.
            </value>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeReaderProgressEventArgs.Cancel">
            <summary>
            Determines that current action must be canceled.
            </summary>
            <value>
            <b>true</b> if current action must be canceled;
            <b>false</b> otherwise.
            </value>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeReaderProgressEventArgs.FoundBarcodes">
            <summary> 
            Gets the Collection of recognized barcodes.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeCharacteristics">
            <summary>
            Specifies available barcode characteristics.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeCharacteristics.Undefinded">
            <summary>
            Barcode characteristics are undefined.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeCharacteristics.SmallBarcodes">
            <summary>
            Image with small barcodes.
            </summary>
            <remarks>
            This characteristic has effect only with automatic barcode recognition
            (<see cref="P:Vintasoft.WpfBarcode.ReaderSettings.AutomaticRecognition" /> is <b>true</b>).
            </remarks>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeInfo.Code128EncodingMode">
            <summary>
            Specifies available data encodation modes of Code 128 or Code 16K barcode.
            </summary>
            <seealso cref="T:Vintasoft.WpfBarcode.BarcodeInfo.Code128ValueItem" />
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.Code128EncodingMode.Undefined">
            <summary>
            Undefined (auto detect).
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.Code128EncodingMode.ModeA">
            <summary>
            Mode A. Symbols with codes from 0 to 95.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.Code128EncodingMode.ModeB">
            <summary>
            Mode B. Symbols with codes from 32 to 127.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.Code128EncodingMode.ModeC">
            <summary>
            Mode C. Pair of numbers from '00' to '99'.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.Code128EncodingMode.Code16K_Mode3">
            <summary>
            Code 16K Mode B + FNC1 flag (Mode 3). Avalilable only as first encoding mode of a symbol.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.Code128EncodingMode.Code16K_Mode4">
            <summary>
            Code 16K Mode C + FNC1 flag (Mode 4). Avalilable only as first encoding mode of a symbol.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.Code128EncodingMode.Code16K_Mode5">
            <summary>
            Code 16K Mode C + single shift to Mode B (Mode 5). Avalilable only as first encoding mode of a symbol.
            </summary>
            <remarks>
            Can be used for a single leading non-numeric and for all-numeric with an odd number 
            of digits, where the first numeric is represented in Mode B.
            </remarks>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.Code128EncodingMode.Code16K_Mode6">
            <summary>
            Code 16K Mode C + double shift to Mode B (Mode 6). Avalilable only as first encoding mode of a symbol.
            </summary>
            <remarks>
            Can be used for a single non-numeric followed by an odd number of digits.
            </remarks>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeInfo.Code128ValueItem">
            <summary>
            Contains information about value of Code 128 or Code 16K barcode.
            </summary>
            <example>
            <code lang="VB.NET">   
            Imports System.Windows.Media.Imaging   
               
            Imports Vintasoft.WpfBarcode   
            Imports Vintasoft.WpfBarcode.BarcodeInfo   
               
            ''' &lt;summary&gt;   
            ''' Test that shows how to create image with Code128 barcode with multiple value items.   
            ''' &lt;/summary&gt;   
            Class Code128ValueItemExample   
               
            	''' &lt;summary&gt;   
            	''' Run the test.   
            	''' &lt;/summary&gt;   
            	Public Shared Sub TestWriteBCBModes()   
            		' create image with barcode   
            		Dim barcodeImage As BitmapSource = WriteBCBModes("ABC", "12345678", "1234ABC")   
               
            		' create the barcode reader   
            		Using reader As New BarcodeReader()   
            			' specify that reader must search for Code128 barcodes only   
            			reader.Settings.ScanBarcodeTypes = BarcodeType.Code128   
               
            			' read barcode from image   
            			Dim barcodeInfo As IBarcodeInfo = reader.ReadBarcodes(barcodeImage)(0)   
               
            			' print barcode value   
            			Console.WriteLine("Value = {0}", barcodeInfo.Value)   
            			' print value items   
            			Console.WriteLine("ValueItems:")   
            			For Each item As Code128ValueItem In barcodeInfo.ValueItems   
            				Console.WriteLine("[{0}] {1}", item.Mode, item.Value)   
            			Next   
            		End Using   
            	End Sub   
               
            	''' &lt;summary&gt;   
            	''' Write Code128 barcode in B, C, B modes.   
            	''' &lt;/summary&gt;   
            	Public Shared Function WriteBCBModes(part1B As String, part2C As String, part3B As String) As BitmapSource   
            		' create value items   
               
            		Dim part1 As New Code128ValueItem(part1B, Code128EncodingMode.ModeB)   
            		Dim part2 As New Code128ValueItem(part2C, Code128EncodingMode.ModeC)   
            		Dim part3 As New Code128ValueItem(part3B, Code128EncodingMode.ModeB)   
               
            		' create the barcode writer   
            		Dim writer As New BarcodeWriter()   
               
            		' specify that writer must generate Code128 barcode   
            		writer.Settings.Barcode = BarcodeType.Code128   
               
            		' set value items   
            		writer.Settings.ValueItems = New ValueItemBase() {part1, part2, part3}   
               
            		' generate image with barcode   
            		Return writer.GetBarcodeAsBitmapSource()   
            	End Function   
               
            End Class
            </code>
            <code lang="C#">
            using System;
            using System.Windows.Media.Imaging;
            
            using Vintasoft.WpfBarcode;
            using Vintasoft.WpfBarcode.BarcodeInfo;
            
            /// &lt;summary&gt;
            /// Test that shows how to create image with Code128 barcode with multiple value items.
            /// &lt;/summary&gt;
            class Code128ValueItemExample
            {
            
                /// &lt;summary&gt;
                /// Run the test.
                /// &lt;/summary&gt;
                public static void TestWriteBCBModes()
                {
                    // create image with barcode
                    BitmapSource barcodeImage = WriteBCBModes("ABC", "12345678", "1234ABC");
            
                    // create the barcode reader
                    using (BarcodeReader reader = new BarcodeReader())
                    {
                        // specify that reader must search for Code128 barcodes only
                        reader.Settings.ScanBarcodeTypes = BarcodeType.Code128;
            
                        // read barcode from image
                        IBarcodeInfo barcodeInfo = reader.ReadBarcodes(barcodeImage)[0];
            
                        // print barcode value
                        Console.WriteLine("Value = {0}", barcodeInfo.Value);
                        // print value items
                        Console.WriteLine("ValueItems:");
                        foreach (Code128ValueItem item in barcodeInfo.ValueItems)
                            Console.WriteLine("[{0}] {1}", item.Mode, item.Value);
                    }
                }
            
                /// &lt;summary&gt;
                /// Write Code128 barcode in B, C, B modes.
                /// &lt;/summary&gt;
                public static BitmapSource WriteBCBModes(string part1B, string part2C, string part3B)
                {
                    // create value items
            
                    Code128ValueItem part1 = new Code128ValueItem(part1B, Code128EncodingMode.ModeB);
                    Code128ValueItem part2 = new Code128ValueItem(part2C, Code128EncodingMode.ModeC);
                    Code128ValueItem part3 = new Code128ValueItem(part3B, Code128EncodingMode.ModeB);
            
                    // create the barcode writer
                    BarcodeWriter writer = new BarcodeWriter();
            
                    // specify that writer must generate Code128 barcode
                    writer.Settings.Barcode = BarcodeType.Code128;
            
                    // set value items
                    writer.Settings.ValueItems = new ValueItemBase[] { part1, part2, part3 };
            
                    // generate image with barcode
                    return writer.GetBarcodeAsBitmapSource();
                }
            
            }
            </code>
            </example>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeInfo.TextValueItem">
            <summary>
            Contains information about text data of barcode.
            </summary>    
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeInfo.ValueItemBase">
            <summary>
            Specification for a value item of barcode.
            </summary>
            <example>
            <code lang="VB.NET">   
            Imports System.Windows.Media.Imaging   
            Imports System.Text   
               
            Imports Vintasoft.WpfBarcode   
            Imports Vintasoft.WpfBarcode.BarcodeInfo   
               
            ''' &lt;summary&gt;   
            ''' Test that shows how to create image with 2D barcode wih text and binary data.   
            ''' &lt;/summary&gt;   
            Class ValueItemsExample   
               
            	''' &lt;summary&gt;   
            	''' Run the test.   
            	''' &lt;/summary&gt;   
            	Public Shared Sub Test()   
            		' generate binary data   
            		Dim data As Byte() = New Byte(15) {}   
            		For i As Integer = 0 To data.Length - 1   
            			data(i) = CByte(i * 16)   
            		Next   
               
            		' create image with PDF417 barcode   
            		Dim barcodeImage As BitmapSource = CreateBarcodeWithTextAndBinaryData(BarcodeType.PDF417, data)   
            		' read barcode from image   
            		ReadBarcode(barcodeImage, BarcodeType.PDF417)   
               
            		' create image with Aztec barcode   
            		barcodeImage = CreateBarcodeWithTextAndBinaryData(BarcodeType.Aztec, data)   
            		' read barcode from image   
            		ReadBarcode(barcodeImage, BarcodeType.Aztec)   
               
            		' create image with DataMatrix barcode   
            		barcodeImage = CreateBarcodeWithTextAndBinaryData(BarcodeType.DataMatrix, data)   
            		' read barcode from image   
            		ReadBarcode(barcodeImage, BarcodeType.DataMatrix)   
               
            		' create image with QR barcode   
            		barcodeImage = CreateBarcodeWithTextAndBinaryData(BarcodeType.QR, data)   
            		' read barcode from image   
            		ReadBarcode(barcodeImage, BarcodeType.QR)   
            	End Sub   
               
            	''' &lt;summary&gt;   
            	''' Creates image with barcode wih text and binary data.   
            	''' &lt;/summary&gt;   
            	Private Shared Function CreateBarcodeWithTextAndBinaryData(barcodeType As BarcodeType, data As Byte()) As BitmapSource   
            		' create text value item   
            		Dim textData As New TextValueItem("BINARY DATA: ")   
            		' create binary value item   
            		Dim binaryData As New BinaryValueItem(data)   
               
            		' create the barcode writer   
            		Dim writer As New BarcodeWriter()   
               
            		' specify that writer must generate barcode of spefied type   
            		writer.Settings.Barcode = barcodeType   
               
            		' set the barcode value items   
            		writer.Settings.ValueItems = New ValueItemBase() {textData, binaryData}   
               
            		' create image with barcode   
            		Return writer.GetBarcodeAsBitmapSource()   
            	End Function   
               
            	''' &lt;summary&gt;   
            	''' Read barcode from image and show the barcode value items.   
            	''' &lt;/summary&gt;   
            	Private Shared Sub ReadBarcode(image As BitmapSource, barcode As BarcodeType)   
            		' create the barcode reader   
            		Using reader As New BarcodeReader()   
            			' specify that reader must search for barcodes of specified types   
            			reader.Settings.ScanBarcodeTypes = barcode   
               
            			' read barcode from image   
            			Dim barcodeInfo As IBarcodeInfo = reader.ReadBarcodes(image)(0)   
               
            			' for each found barcode   
            			For i As Integer = 0 To barcodeInfo.ValueItems.Length - 1   
            				' show the barcode value tems   
               
            				Dim itemValue As New StringBuilder()   
            				If TypeOf barcodeInfo.ValueItems(i) Is BinaryValueItem Then   
            					Dim data As Byte() = DirectCast(barcodeInfo.ValueItems(i), BinaryValueItem).Value   
            					For j As Integer = 0 To data.Length - 1   
            						itemValue.Append(String.Format("{0} ", data(j)))   
            					Next   
            				Else   
            					itemValue.Append(barcodeInfo.ValueItems(i).ToString())   
            				End If   
            				Console.WriteLine(String.Format("[{0}] {1}", barcodeInfo.ValueItems(i).[GetType]().Name, itemValue))   
            			Next   
            		End Using   
               
            		Console.WriteLine()   
            	End Sub   
               
            End Class
            </code>
            <code lang="C#">
            using System;
            using System.Windows.Media.Imaging;
            using System.Text;
            
            using Vintasoft.WpfBarcode;
            using Vintasoft.WpfBarcode.BarcodeInfo;
            
            /// &lt;summary&gt;
            /// Test that shows how to create image with 2D barcode wih text and binary data.
            /// &lt;/summary&gt;
            class ValueItemsExample
            {
            
                /// &lt;summary&gt;
                /// Run the test.
                /// &lt;/summary&gt;
                public static void Test()
                {
                    // generate binary data
                    byte[] data = new byte[16];
                    for (int i = 0; i &lt; data.Length; i++)
                        data[i] = (byte)(i * 16);
            
                    // create image with PDF417 barcode
                    BitmapSource barcodeImage = CreateBarcodeWithTextAndBinaryData(BarcodeType.PDF417, data);
                    // read barcode from image
                    ReadBarcode(barcodeImage, BarcodeType.PDF417);
            
                    // create image with Aztec barcode
                    barcodeImage = CreateBarcodeWithTextAndBinaryData(BarcodeType.Aztec, data);
                    // read barcode from image
                    ReadBarcode(barcodeImage, BarcodeType.Aztec);
            
                    // create image with DataMatrix barcode
                    barcodeImage = CreateBarcodeWithTextAndBinaryData(BarcodeType.DataMatrix, data);
                    // read barcode from image
                    ReadBarcode(barcodeImage, BarcodeType.DataMatrix);
            
                    // create image with QR barcode
                    barcodeImage = CreateBarcodeWithTextAndBinaryData(BarcodeType.QR, data);
                    // read barcode from image
                    ReadBarcode(barcodeImage, BarcodeType.QR);
                }
            
                /// &lt;summary&gt;
                /// Creates image with barcode wih text and binary data.
                /// &lt;/summary&gt;
                static BitmapSource CreateBarcodeWithTextAndBinaryData(BarcodeType barcodeType, byte[] data)
                {
                    // create text value item
                    TextValueItem textData = new TextValueItem("BINARY DATA: ");
                    // create binary value item
                    BinaryValueItem binaryData = new BinaryValueItem(data);
            
                    // create the barcode writer
                    BarcodeWriter writer = new BarcodeWriter();
            
                    // specify that writer must generate barcode of spefied type
                    writer.Settings.Barcode = barcodeType;
            
                    // set the barcode value items
                    writer.Settings.ValueItems = new ValueItemBase[] { textData, binaryData };
            
                    // create image with barcode
                    return writer.GetBarcodeAsBitmapSource();
                }
            
                /// &lt;summary&gt;
                /// Read barcode from image and show the barcode value items.
                /// &lt;/summary&gt;
                static void ReadBarcode(BitmapSource image, BarcodeType barcode)
                {
                    // create the barcode reader
                    using (BarcodeReader reader = new BarcodeReader())
                    {
                        // specify that reader must search for barcodes of specified types
                        reader.Settings.ScanBarcodeTypes = barcode;
            
                        // read barcode from image
                        IBarcodeInfo barcodeInfo = reader.ReadBarcodes(image)[0];
            
                        // for each found barcode
                        for (int i = 0; i &lt; barcodeInfo.ValueItems.Length; i++)
                        {
                            // show the barcode value tems
            
                            StringBuilder itemValue = new StringBuilder();
                            if (barcodeInfo.ValueItems[i] is BinaryValueItem)
                            {
                                byte[] data = ((BinaryValueItem)barcodeInfo.ValueItems[i]).Value;
                                for (int j = 0; j &lt; data.Length; j++)
                                    itemValue.Append(string.Format("{0} ", data[j]));
                            }
                            else
                            {
                                itemValue.Append(barcodeInfo.ValueItems[i].ToString());
                            }
                            Console.WriteLine(
                                string.Format("[{0}] {1}", barcodeInfo.ValueItems[i].GetType().Name, itemValue));
                        }
                    }
            
                    Console.WriteLine();
                }
            
            }
            </code>
            </example>
            <seealso cref="P:Vintasoft.WpfBarcode.WriterSettings.ValueItems">WriterSettings.ValueItems</seealso>   
            <seealso cref="P:Vintasoft.WpfBarcode.IBarcodeInfo.ValueItems">IBarcodeInfo.ValueItems</seealso>
            <seealso cref="T:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlagValueItem" /> 
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.ValueItemBase.DataType">
            <summary>
            Gets a data type of this value item.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeInfo.TextValueItem.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.TextValueItem" /> class. 
            </summary>
            <param name="value">Value of text data.</param>
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeInfo.TextValueItem.ToString">
            <summary> 
             Converts the value item of this instance to its equivalent string.
             </summary>
             <returns>String representation of this value item.</returns>        
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.TextValueItem.Value">
            <summary>
            Returns a value of text data.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeInfo.Code128ValueItem.#ctor(System.String,Vintasoft.WpfBarcode.BarcodeInfo.Code128EncodingMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.Code128ValueItem" /> class.
            </summary>
            <param name="value">Value of the data.</param>
            <param name="encodingMode">Encoding mode.</param>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.Code128ValueItem.Mode">
            <summary>
            Gets the encoding mode.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeInfo.MSIChecksumType">
            <summary>
            Specifies available checksums in MSI barcode.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.MSIChecksumType.None">
            <summary>
            No checksum.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.MSIChecksumType.Mod10">
            <summary>
            Modulo 10 check digit.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.MSIChecksumType.Mod11">
            <summary>
            Check digit is a Modulo 11 approach.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.MSIChecksumType.Mod10Mod10">
            <summary>
            Two Modulo 10 checksum digits.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.MSIChecksumType.Mod11Mod10">
            <summary>
            Two checksum digits: Modulo 11 and Modulo 10.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeInfo.EANSubtype">
            <summary>
            Specifies available EAN barcode subtypes.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.EANSubtype.Undefined">
            <summary>
            Undefined. 
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.EANSubtype.ISBN">
            <summary>
            ISBN (ISBN-13) symbol is an EAN-13 with prefix 978 for the new ISBN-13 format, used to identify books. 
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.EANSubtype.ISMN">
            <summary>
            ISMN (ISMN-13) symbol is an EAN-13 with prefix 9790 for the new ISMN-13 format, used to identify printed music. 
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.EANSubtype.ISSN">
            <summary>
            ISSN symbol is an EAN-13 with prefix 977 used to identify periodicals. 
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeInfo.PharmacodeInfo">
            <summary>
            Contains information about recognized Pharmacode barcode.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeInfo.BarcodeInfo1D">
            <summary>
            Class that allows to get information about recognized 1D barcode.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeInfo.BarcodeInfoBase">
            <summary>
            An abstract base class that allows to get information about recognized barcode.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.IBarcodeInfo">
            <summary>
            Specification for a barcode information.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.IBarcodeInfo.ToString">
            <summary>
            Converts the information about barcode of this instance to its equivalent
            string.
            </summary>
            <returns>String representation of barcode.</returns>
        </member>
        <member name="P:Vintasoft.WpfBarcode.IBarcodeInfo.ReadingQuality">
            <summary>
            Gets a barcode reading quality.
            </summary>
            <value>
            Possible values:
            <ul>
            <li>value is close to 1 - barcode was read very successful, e.g. it's ideal barcode</li>
            <li>value is less 0,5 - more than a half of scanning lines are damaged</li>
            </ul>
            </value>
            <remarks>
            This property has no relation to the barcode string value.
            <see cref="P:Vintasoft.WpfBarcode.IBarcodeInfo.Confidence" /> property must be used if correctness of recognised
            barcode must be appraised.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.IBarcodeInfo.BarcodeType">
            <summary>
            Gets a barcode type.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.IBarcodeInfo.BarcodeInfoClass">
            <summary>
            Gets a barcode class: 1D or 2D.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.IBarcodeInfo.Value">
            <summary>
            Gets a barcode string.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.IBarcodeInfo.ShowNonDataFlagsInValue">
            <summary>
            Gets or sets a value that indicating whether 
            <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlagValueItem">non-data flags</see>,
            <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.EciCharacterValueItem">ECI character</see> or
            <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.StructuredAppendCharacter">Structured Append character</see> is visible
            in <see cref="P:Vintasoft.WpfBarcode.IBarcodeInfo.Value">barcode value</see>.
            </summary>
            <seealso cref="T:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags" />
        </member>
        <member name="P:Vintasoft.WpfBarcode.IBarcodeInfo.ValueItems">
            <summary>
            Gets an array of value items of barcode.
            </summary>
            <remarks>
            2D barcode can contain data of a three types in a single barcode,
            for example, barcode can contain two sections of text, one section
            of binary data and one section of ASCII data - this property
            allows to access these data.<br />
            </remarks>
            <example>
            Please see example <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.ValueItemBase">here</see>.
            </example>
        </member>
        <member name="P:Vintasoft.WpfBarcode.IBarcodeInfo.Region">
            <summary>
            Gets a barcode region.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.IBarcodeInfo.Direction">
            <summary>
            Gets a barcode direction.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.IBarcodeInfo.Confidence">
            <summary>
            Gets or sets barcode confidence, in percents.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.IBarcodeInfo.Threshold">
            <summary>
            Gets a threshold value of barcode.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.IBarcodeInfo.SymbolComponents">
            <summary>
            Gets an array of  symbol components from which symbol is composed.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeInfo.BarcodeInfoBase.ToString">
            <summary> 
             Converts the information about barcode of this instance to its equivalent
             string.
             </summary>
             <returns>
             String representation of barcode.
             </returns>
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeInfo.BarcodeInfoBase.CompareTo(System.Object)">
            <summary>
            Compare using the <see cref="P:Vintasoft.WpfBarcode.BarcodeInfo.BarcodeInfoBase.Region">Region</see> center.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.BarcodeInfoBase.BarcodeInfoClass">
            <summary>
            Gets a barcode class: 1D or 2D.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.BarcodeInfoBase.Direction">
            <summary>
            Gets a scan direction in which the barcode was found.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.BarcodeInfoBase.BarcodeType">
            <summary>
            Gets a barcode symbolgy type.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.BarcodeInfoBase.Value">
            <summary>
            Gets a barcode string.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.BarcodeInfoBase.ValueItems">
            <summary>
            Gets an array of value items of barcode.
            </summary>
            <remarks>
            Barcode can contain data of a three types in a single barcode,
            for example, barcode can contain one non-data flag, two sections of text an one section
            of binary data - this property allows to access these data.
            </remarks>
            <example>
            Please see example <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.ValueItemBase">here</see>.
            </example>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.BarcodeInfoBase.ShowNonDataFlagsInValue">
            <summary>
            Gets or sets a value that indicating whether 
            <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags">non-data flags</see> or 
            <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.EciCharacterValueItem">ECI character</see> is visible
            in <see cref="P:Vintasoft.WpfBarcode.BarcodeInfo.BarcodeInfoBase.Value">barcode value</see>.
            </summary>
            <value>Default value is <b>true</b>.</value>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.BarcodeInfoBase.Region">
            <summary>
            Gets a barcode region.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.BarcodeInfoBase.Confidence">
            <summary>
            Gets or sets a barcode confidence, in percents.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.BarcodeInfoBase.Threshold">
            <summary>
            Gets a threshold value of barcode.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.BarcodeInfoBase.ReadingQuality">
            <summary>
            Shows what part of barcode scan lines are correct.
            </summary>
            <value>Possible values: from 0 to 1.</value>
            <remarks>
            <b>This property has correct value</b> if value of the
            <see cref="P:Vintasoft.WpfBarcode.ReaderSettings.ScanInterval" /> is set to 1.<br />
            <br />
            Barcode is ideal if value of this property is close to 1.<br />
            Barcode has more than a half of scan lines damaged if value of this
            property is less than 0.5.<br />
            <br />
            This property has no relation to the barcode string value,
            it only shows how many scan lines of barcode are correct.<br />
            Use the <see cref="P:Vintasoft.WpfBarcode.IBarcodeInfo.Confidence" /> property if you want to
            know confidence of barcode.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.BarcodeInfoBase.SymbolComponents">
            <summary>
            Gets an array of symbol components from which the barcode symbol is composed.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.BarcodeInfo1D.NarrowBarCount">
            <summary>
            Gets a narrow bar count.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.BarcodeInfo1D.NarrowBarSize">
            <summary>
            Gets the size, in pixels, of the narrow bar.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.PharmacodeInfo.ReverseReadValue">
            <summary>
            Gets a reversed barcode value.
            </summary>        
            <remarks>
            Since a value of Pharmacode depends on the read direction, 
            this property returns a reversed barcode value.
            </remarks>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeInfo.AustralianPostCustomerInfoFormat">
            <summary>
            Specifies available formats of customer information field in barcode.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.AustralianPostCustomerInfoFormat.None">
            <summary>
            Customer information field will be ignored.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.AustralianPostCustomerInfoFormat.TableC">
            <summary>
            Customer information field contains characters (upper case, lower case,
            numeric and some special characters).
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.AustralianPostCustomerInfoFormat.TableN">
            <summary>
            Customer information field contains digits.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.AustralianPostCustomerInfoFormat.Custom">
            <summary>
            Customer information field has a proprietary format. Customer
            information will be returned as string of bar states. Each bar state
            will be represented as symbol: A - Ascending Bar, D - Decending Bar,
            F - Full Bar, T - Tracking Bar.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.ScanDirection">
            <summary>
            Specifies available direction types for barcode scanning. 
            </summary>
            <remarks>These values may be OR'ed together to form a combination of
            directions.</remarks>
        </member>
        <member name="F:Vintasoft.WpfBarcode.ScanDirection.None">
            <summary>
            Barcodes is not scanned.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.ScanDirection.LeftToRight">
            <summary>
            Horizontally, left to right.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.ScanDirection.TopToBottom">
            <summary>
            Vertically, top to bottom.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.ScanDirection.RightToLeft">
            <summary>
            Horizontally, right to left.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.ScanDirection.BottomToTop">
            <summary>
            Vertically, bottom to top.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.ScanDirection.Angle45and135">
            <summary>
            Top to bottom and bottom to top at 45° and 135° angle. This direction cannot
            be used separately and should should be used along with horizontal or/and
            vertical direction.
            </summary>
            <remarks>
            This scan direction should be used only if image contains low and
            wide barcodes rotated to 30-60 degrees.
            </remarks>
        </member>
        <member name="F:Vintasoft.WpfBarcode.ScanDirection.Horizontal">
            <summary>
            Horizontally, left to right and right to left.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.ScanDirection.Vertical">
            <summary>
            Vertically, bottom to top and top to bottom.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.ThresholdMode">
            <summary>
            Specifies available modes of threshold detection.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.ThresholdMode.Automatic">
            <summary>
            Barcode reader detects the threshold (value of the <see cref="P:Vintasoft.WpfBarcode.ReaderSettings.Threshold" />
            property) automatically. This mode is decreasing speed of barcode
            reading therefore it should be used only if you have many different images
            with barcodes and single threshold value cannot be used.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.ThresholdMode.Manual">
            <summary>
            Barcode reader uses defined threshold (value of the <see cref="P:Vintasoft.WpfBarcode.ReaderSettings.Threshold" /> property).
            Please read more info about this mode
            <see cref="P:Vintasoft.WpfBarcode.ReaderSettings.ThresholdMode">here</see>.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.ThresholdMode.Iterations">
            <summary>
            Barcode reader uses some threshold values.
            Value of the <see cref="P:Vintasoft.WpfBarcode.ReaderSettings.ThresholdMin" />, 
            <see cref="P:Vintasoft.WpfBarcode.ReaderSettings.ThresholdMax" /> and <see cref="P:Vintasoft.WpfBarcode.ReaderSettings.ThresholdIterations" />
            properties used in barcode reading iteration process. 
            Please read more info about this mode <see cref="P:Vintasoft.WpfBarcode.ReaderSettings.ThresholdIterations">here</see>.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.VerifyBarcodeDelegate">
            <summary>
            Represents the method that verifies the information about barcode found by barcode reader.
            </summary>
            <param name="reader">The source of the event.</param>
            <param name="barcodeInfo"><see cref="T:Vintasoft.WpfBarcode.IBarcodeInfo" /> that contains information about found barcode.</param>
            <remarks>
            <see cref="P:Vintasoft.WpfBarcode.IBarcodeInfo.Confidence" /> should be changed after analyzing of <i>barcodeInfo</i>.
            </remarks>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeInfo.UPCEANInfo">
            <summary>
            Contains information about recognized EAN-8/13 barcode.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.UPCEANInfo.Value">
            <summary>
            Returns a barcode value as a string.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.UPCEANInfo.Data">
            <summary>
            Returns a barcode value as an array of integer values.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.UPCEANInfo.PlusData">
            <summary>
            Returns a EANPlus barcode value as an array of integer values.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.UPCEANInfo.UPCEValue">
            <summary>
            Returns a UPCE (6 digits) barcode value as a string.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.UPCEANInfo.UPCAValue">
            <summary>
            Returns a UPCA (12 digits) barcode value as a string.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeInfo.AustralianPostInfo">
            <summary>
            Contains information about recognized AustralianPost barcode.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.AustralianPostInfo.FormatControlCode">
            <summary>
            Format control code (FCC).
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.AustralianPostInfo.DeliveryPointID">
            <summary>
            Delivery Point Identifier (DPID).
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.AustralianPostInfo.CustomerInformation">
            <summary>
            Customer Information (optional information).
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.AustralianPostInfo.Value">
            <summary>
            Returns string concatination of the following values:
            <see cref="P:Vintasoft.WpfBarcode.BarcodeInfo.AustralianPostInfo.FormatControlCode" />, <see cref="P:Vintasoft.WpfBarcode.BarcodeInfo.AustralianPostInfo.DeliveryPointID" />,
            <see cref="P:Vintasoft.WpfBarcode.BarcodeInfo.AustralianPostInfo.CustomerInformation" />.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeInfo.IntelligentMailInfo">
            <summary>
            Contains information about recognized IntelligentMail barcode.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.IntelligentMailInfo.BarcodeID">
            <summary>
            The Barcode Identifier shall be assigned by USPS to encode the presort
            identification that is currently printed in human readable form on the
            optional endorsement line (OEL) as well as for future USPS use.
            </summary>
            <value>
            This shall be two digits, with the second digit in the range of 0-4. The
            allowable encoding ranges shall be 00-04, 10-14, 20-24, 30-34, 40-44,
            50-54, 60-64, 70-74, 80-84, and 90-94.
            </value>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.IntelligentMailInfo.ServiceTypeID">
            <summary>
            The Service Type Identifier shall be assigned by USPS for any
            combination of services requested on the mailpiece.
            </summary>
            <value>
            The allowable encoding range shall be 000-999. Each 3-digit value
            shall correspond to a particular mail class with a particular
            combination of service(s). Each service program, such as OneCode
            Confirm and OneCode ACS, shall provide the list of Service Type
            Identifier values.
            </value>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.IntelligentMailInfo.MailerID">
            <summary>
            The Mailer or Customer Identifier shall be assigned by USPS as a
            unique, 6 or 9 digit number that identifies a business entity.
            </summary>
            <value>
            The allowable encoding range for the 6 digit Mailer ID shall be
            000000-899999, while the allowable encoding range for the 9 digit
            Mailer ID shall be 900000000-999999999.
            </value>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.IntelligentMailInfo.SerialNumber">
            <summary>
            The Serial or Sequence Number shall be assigned by the mailer for
            uniquely identifying and tracking mailpieces.
            </summary>
            <value>
            The allowable encoding range shall be 000000000-999999999 when used
            with a 6 digit Mailer ID and 000000-999999 when used with a 9 digit Mailer ID.
            </value>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.IntelligentMailInfo.RoutingZIPCode">
            <summary>
            The Delivery Point ZIP Code shall be assigned by the mailer for routing
            the mailpiece. This shall replace POSTNET for routing the mailpiece to
            its final delivery point. 
            </summary>
            <value>
            The length may be 0, 5, 9, or 11 digits. The allowable encoding ranges
            can be no ZIP Code, 00000-99999, 000000000-999999999 or
            00000000000-99999999999.
            </value>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.IntelligentMailInfo.Value">
            <summary>
            Returns string concatenation of the following values:
            <see cref="P:Vintasoft.WpfBarcode.BarcodeInfo.IntelligentMailInfo.BarcodeID" />
            <see cref="P:Vintasoft.WpfBarcode.BarcodeInfo.IntelligentMailInfo.ServiceTypeID" />
            <see cref="P:Vintasoft.WpfBarcode.BarcodeInfo.IntelligentMailInfo.MailerID" />
            <see cref="P:Vintasoft.WpfBarcode.BarcodeInfo.IntelligentMailInfo.SerialNumber" />
            <see cref="P:Vintasoft.WpfBarcode.BarcodeInfo.IntelligentMailInfo.RoutingZIPCode" />
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeInfo.Mailmark4StateValueItem">
            <summary>
            Contains information about a decoded value of Mailmark 4-state C/L barcode.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeInfo.Mailmark4StateValueItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.Mailmark4StateValueItem" /> class. 
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeInfo.Mailmark4StateValueItem.ToString">
            <summary>
            Converts the information about value item of this instance to its equivalent
            string.
            </summary>
            <returns>
            String representation of value item.
            </returns>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.Mailmark4StateValueItem.VersionId">
            <summary>
            Gets or sets the barcode version as relevant to each Information Type ID.
            </summary>
            <value>
            <ul>
            <li>"1" – Mailmark barcode</li>
            <li>"0", "2" to "9", "A" to "Z" - spare for future use.</li>
            </ul>
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            value if not equal "1".</exception>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.Mailmark4StateValueItem.Format">
            <summary>
            Gets or sets the format of the item.
            </summary>
            <value>
            <ul>
            <li>"0" – Null or Test</li>
            <li>"1" – Letter</li>
            <li>"2" – Large Letter#</li>
            <li>"3" – Packet (for potential future use)</li>
            <li>"4" – Parcel (for potential future use)</li>
            <li>"5" to "9" – Spare (for potential future use)</li>
            <li>"A" to "Z" – Spare (for potential future use).</li>
            </ul>
            </value>
            <exception cref="T:System.ArgumentException">Thrown if
            value contains less or more than 1 symbol.</exception>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.Mailmark4StateValueItem.Class">
            <summary>
            Gets or sets the class of the item.
            </summary>
            <value>
            <ul>
            <li>"0" - Null or Test</li>
            <li>"1" - 1C (Retail)</li>
            <li>"2" - 2C (Retail)</li>
            <li>"3" - 3C (Retail)</li>
            <li>"4" - Premium (Retail Publishing Mail) (for potential future use)</li>
            <li>"5" - Deferred (Retail)</li>
            <li>"6" - Air (Retail) (for potential future use)</li>
            <li>"7" - Surface (Retail) (for potential future use)</li>
            <li>"8" - Premium (Network Access)</li>
            <li>"9" - Standard (Network Access)</li>
            <li>"A" to "Z" – Spare(for potential future use).</li>
            </ul>
            </value>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.Mailmark4StateValueItem.SupplyChainId">
            <summary>
            Gets or sets the unique chain of customers involved in the mailing.
            </summary>
            <value>
            "00" to "99" for C version, "000000" to "999999" for L version.
            </value>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.Mailmark4StateValueItem.ItemId">
            <summary>
            Gets or sets the unique item within the Supply Chain ID.
            </summary>
            <value>
            "00000000" to "99999999".
            </value>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.Mailmark4StateValueItem.Dps">
            <summary>
            Gets or sets the Destination Post Code plus Delivery Point Suffix (DPS).
            </summary>
            <value>
            The PC and DP must comply with a valid PAF format 
            (see Royal Mail Mailmark® barcode definition document, Appendix A).
            </value>
            <remarks>
            Contains the Postcode of the Delivery Address with DPS.<br />
            <br />
            If inland the Postcode/DP contains the following number of characters:<br />
            <ul>
            <li>Area (1 or 2 characters)</li>
            <li>District (1 or 2 characters)</li>
            <li>Sector (1 character)</li>
            <li>Unit (2 characters)</li>
            <li>DPS (2 characters)</li>
            </ul>
            <br />
            If no destination post code information is available this field shall be filled 
            with 9 space characters.
            </remarks>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeInfo.CodabarInfo">
            <summary>
            Contains information about recognized Codabar barcode.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.CodabarInfo.StartSymbol">
            <summary>
            Gets a barcode start symbol.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.CodabarInfo.StopSymbol">
            <summary>
            Gets a barcode stop symbol.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeInfo.RSSInfo">
            <summary>
            Contains information about recognized RSS barcode.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.RSSInfo.LinkageFlag">
            <summary>
            Gets indicator encoded in an RSS linear component to signal 
            if a 2D component accompanies the linear component.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.RSSInfo.RowsCount">
            <summary>
            Returns a count of rows.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.RSSInfo.SegmentsInRow">
            <summary>
            Returns a count of segments in row.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.RSSInfo.SegmentsCount">
            <summary>
            Returns a count of segments.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.RSSInfo.Value">
            <summary>
            Gets a barcode string.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeInfo.UnknownLinearBarcodeInfo">
            <summary>
            Contains information about unknown linear barcode.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.UnknownLinearBarcodeInfo.NormalizedBarcodeLine">
            <summary>
            Gets a normalized barcode line.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.UnknownLinearBarcodeInfo.BarcodeLine">
            <summary>
            Gets a barcode line.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.UnknownLinearBarcodeInfo.Value">
            <summary>
            Gets a barcode string.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeInfo.AztecEncodingMode">
            <summary>
            Specifies available encoding modes of Aztec barcode.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.AztecEncodingMode.Text">
            <summary>
            Text/Digits data.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.AztecEncodingMode.Byte">
            <summary>
            Binary data (8-bit bytes).
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.AztecEncodingMode.Undefined">
            <summary>
            Undefined.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeInfo.AztecStructuredAppendCharacter">
            <summary>
            Contains information about the Aztec Structured Append non-data character.
            </summary>
            <example>
            Please see example <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.StructuredAppendCharacter">here</see>.
            </example>
            <seealso cref="T:Vintasoft.WpfBarcode.BarcodeInfo.StructuredAppendCharacter" />
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeInfo.StructuredAppendCharacter">
            <summary>
            Contains information about the Structured Append non-data character.
            </summary>
            <remarks>
            To fit a non-square area or to handle larger messages than are practical 
            in a single symbol, a data message can be distributed across several symbols 
            using Structured Append character.<br />
            This character is available only in first position of
            Aztec, Code 16K, DataMatrix, MaxiCode, PDF417, Micro PDF417 and QR barcodes.
            </remarks>
            <example>
            This example shows how to write and read Structured Append character.
            <code lang="VB.NET">   
            Imports System.Windows.Media.Imaging   
            Imports System.Text   
               
            Imports Vintasoft.WpfBarcode   
            Imports Vintasoft.WpfBarcode.BarcodeInfo   
               
            ''' &lt;summary&gt;   
            ''' Test that shows how to use Structure Append feature for distributing data message across   
            ''' several 2D barcodes.   
            ''' &lt;/summary&gt;   
            Class StructureAppendExample   
               
            	''' &lt;summary&gt;   
            	''' Run the test.   
            	''' &lt;/summary&gt;   
            	Public Shared Sub Test()   
            		Dim barcodeType__1 As BarcodeType = BarcodeType.DataMatrix   
               
            		Dim symbolsCount As Integer = 5   
               
            		Dim symbolsValue As String = "In order to fit a non-square area or to handle larger messages than are practical " &amp; "in a single symbol, a data message can be distributed across several symbols. " &amp; "Aztec, Code 16K, DataMatrix, MaxiCode, QR Code, PDF417, Micro PDF417 " &amp; "symbols may be appended in a structured format."   
               
            		' split data and generate barcodes   
            		Dim barcodeImages As BitmapSource() = GenerateBarcodes(barcodeType__1, symbolsValue, symbolsCount)   
               
            		' resort barcode images   
            		Array.Reverse(barcodeImages)   
            		Array.Reverse(barcodeImages, 0, barcodeImages.Length \ 2)   
               
            		' read barcodes and merge data value   
            		Dim readValue As String = ReadBarcodeValue(barcodeImages, barcodeType__1)   
               
            		If readValue = symbolsValue Then   
            			Console.WriteLine("Success")   
            		Else   
            			Throw New ApplicationException()   
            		End If   
            	End Sub   
               
               
            	''' &lt;summary&gt;   
            	''' Split value and generate symbolCount barcodes using Structure Append.   
            	''' &lt;/summary&gt;   
            	Public Shared Function GenerateBarcodes(barcodeType__1 As BarcodeType, value As String, symbolCount As Integer) As BitmapSource()   
            		' create an image array   
            		Dim result As BitmapSource() = New BitmapSource(symbolCount - 1) {}   
               
            		' create the barcode writer   
            		Dim writer As New BarcodeWriter()   
               
            		' specify that writer must generate barcode of specified type   
            		writer.Settings.Barcode = barcodeType__1   
               
            		' create parity data for a QR barcode value   
            		Dim parityData As Byte = 0   
            		If barcodeType__1 = BarcodeType.QR Then   
            			parityData = QRStructuredAppendCharacter.CaluculateParityData(value)   
            		End If   
               
            		' generate symbols(barcodes)   
            		Dim fragmentLength As Integer = value.Length \ symbolCount   
            		For i As Integer = 0 To symbolCount - 1   
            			' create Structure Append character   
               
            			Dim structureAppendCharacter As StructuredAppendCharacter   
            			Select Case barcodeType__1   
            				Case BarcodeType.Aztec   
            					structureAppendCharacter = New AztecStructuredAppendCharacter(i + 1, symbolCount, "")   
            					Exit Select   
               
            				Case BarcodeType.DataMatrix   
            					structureAppendCharacter = New DataMatrixStructuredAppendCharacter(i + 1, symbolCount, 0)   
            					Exit Select   
               
            				Case BarcodeType.QR   
            					structureAppendCharacter = New QRStructuredAppendCharacter(i + 1, symbolCount, parityData)   
            					Exit Select   
               
            				Case BarcodeType.Code16K   
            					structureAppendCharacter = New StructuredAppendCharacter(i + 1, symbolCount)   
            					writer.Settings.Height = 200   
            					Exit Select   
               
            				Case BarcodeType.MaxiCode   
            					structureAppendCharacter = New StructuredAppendCharacter(i + 1, symbolCount)   
            					Exit Select   
               
            				Case BarcodeType.MicroPDF417   
            					structureAppendCharacter = New PDF417StructuredAppendCharacter(i + 1, symbolCount, "123")   
            					Exit Select   
               
            				Case BarcodeType.PDF417   
            					structureAppendCharacter = New PDF417StructuredAppendCharacter(i + 1, symbolCount, "123")   
            					Exit Select   
            				Case Else   
               
            					Throw New NotSupportedException()   
            			End Select   
               
            			' create symbol data   
               
            			Dim symbolTextData As String   
            			If i = symbolCount - 1 Then   
            				symbolTextData = value.Substring(i * fragmentLength)   
            			Else   
            				symbolTextData = value.Substring(i * fragmentLength, fragmentLength)   
            			End If   
               
            			Dim symbolData As New TextValueItem(symbolTextData)   
               
            			' set the barcode value items   
            			writer.Settings.ValueItems = New ValueItemBase() {structureAppendCharacter, symbolData}   
               
            			' create image with barcode   
            			result(i) = writer.GetBarcodeAsBitmapSource()   
            		Next   
               
            		Return result   
            	End Function   
               
            	''' &lt;summary&gt;   
            	''' Read barcodes and merge the results into a single value.   
            	''' &lt;/summary&gt;   
            	Private Shared Function ReadBarcodeValue(barcodeImages As BitmapSource(), barcodeType As BarcodeType) As String   
            		' create the barcode reader   
            		Using reader As New BarcodeReader()   
            			' specify that reader must search for barcodes of specified type   
            			reader.Settings.ScanBarcodeTypes = barcodeType   
               
            			' barcode reading results   
            			Dim readingResults As IBarcodeInfo() = New IBarcodeInfo(barcodeImages.Length - 1) {}   
            			' read barcodes   
            			For i As Integer = 0 To barcodeImages.Length - 1   
            				' read barcode from image   
            				readingResults(i) = reader.ReadBarcodes(barcodeImages(i))(0)   
            			Next   
               
            			' determine symbol count   
            			Dim symbolsCount As Integer = 0   
            			For i As Integer = 0 To readingResults.Length - 1   
            				If TypeOf readingResults(i).ValueItems(0) Is StructuredAppendCharacter Then   
            					symbolsCount = DirectCast(readingResults(i).ValueItems(0), StructuredAppendCharacter).SymbolCount   
            					Exit For   
            				End If   
            			Next   
            			If symbolsCount = 0 Then   
            				Throw New ApplicationException("No structure append symbols.")   
            			End If   
               
            			' create array of string   
            			Dim resultValues As String() = New String(symbolsCount - 1) {}   
            			' fill resultValues   
            			For i As Integer = 0 To readingResults.Length - 1   
            				If TypeOf readingResults(i).ValueItems(0) Is StructuredAppendCharacter Then   
            					Dim structureAppendCharacter As StructuredAppendCharacter = DirectCast(readingResults(i).ValueItems(0), StructuredAppendCharacter)   
            					If structureAppendCharacter.SymbolCount = symbolsCount Then   
            						readingResults(i).ShowNonDataFlagsInValue = False   
            						resultValues(structureAppendCharacter.SymbolPosition - 1) = readingResults(i).Value   
            					End If   
            				End If   
            			Next   
               
            			' build result string   
            			Dim result As New StringBuilder()   
            			For i As Integer = 0 To resultValues.Length - 1   
            				If resultValues(i) IsNot Nothing Then   
            					result.Append(resultValues(i))   
            				Else   
            					Throw New ApplicationException(String.Format("missing symbol at position {0}", i + 1))   
            				End If   
            			Next   
               
            			Return result.ToString()   
            		End Using   
            	End Function   
               
            End Class
            </code>
            <code lang="C#">
            using System;
            using System.Windows.Media.Imaging;
            using System.Text;
            
            using Vintasoft.WpfBarcode;
            using Vintasoft.WpfBarcode.BarcodeInfo;
            
            /// &lt;summary&gt;
            /// Test that shows how to use Structure Append feature for distributing data message across
            /// several 2D barcodes.
            /// &lt;/summary&gt;
            class StructureAppendExample
            {
            
                /// &lt;summary&gt;
                /// Run the test.
                /// &lt;/summary&gt;
                public static void Test()
                {
                    BarcodeType barcodeType = BarcodeType.DataMatrix;
            
                    int symbolsCount = 5;
            
                    string symbolsValue =
                        "In order to fit a non-square area or to handle larger messages than are practical " +
                        "in a single symbol, a data message can be distributed across several symbols. " +
                        "Aztec, Code 16K, DataMatrix, MaxiCode, QR Code, PDF417, Micro PDF417 " +
                        "symbols may be appended in a structured format.";
            
                    // split data and generate barcodes
                    BitmapSource[] barcodeImages = GenerateBarcodes(barcodeType, symbolsValue, symbolsCount);
            
                    // resort barcode images
                    Array.Reverse(barcodeImages);
                    Array.Reverse(barcodeImages, 0, barcodeImages.Length / 2);
            
                    // read barcodes and merge data value
                    string readValue = ReadBarcodeValue(barcodeImages, barcodeType);
            
                    if (readValue == symbolsValue)
                        Console.WriteLine("Success");
                    else
                        throw new ApplicationException();
                }
            
            
                /// &lt;summary&gt;
                /// Split value and generate symbolCount barcodes using Structure Append.
                /// &lt;/summary&gt;
                public static BitmapSource[] GenerateBarcodes(BarcodeType barcodeType, string value, int symbolCount)
                {
                    // create an image array
                    BitmapSource[] result = new BitmapSource[symbolCount];
            
                    // create the barcode writer
                    BarcodeWriter writer = new BarcodeWriter();
            
                    // specify that writer must generate barcode of specified type
                    writer.Settings.Barcode = barcodeType;
            
                    // create parity data for a QR barcode value
                    byte parityData = 0;
                    if (barcodeType == BarcodeType.QR)
                        parityData = QRStructuredAppendCharacter.CaluculateParityData(value);
            
                    // generate symbols(barcodes)
                    int fragmentLength = value.Length / symbolCount;
                    for (int i = 0; i &lt; symbolCount; i++)
                    {
                        // create Structure Append character
            
                        StructuredAppendCharacter structureAppendCharacter;
                        switch (barcodeType)
                        {
                            case BarcodeType.Aztec:
                                structureAppendCharacter =
                                    new AztecStructuredAppendCharacter(i + 1, symbolCount, "");
                                break;
            
                            case BarcodeType.DataMatrix:
                                structureAppendCharacter =
                                    new DataMatrixStructuredAppendCharacter(i + 1, symbolCount, 0);
                                break;
            
                            case BarcodeType.QR:
                                structureAppendCharacter =
                                    new QRStructuredAppendCharacter(i + 1, symbolCount, parityData);
                                break;
            
                            case BarcodeType.Code16K:
                                structureAppendCharacter =
                                    new StructuredAppendCharacter(i + 1, symbolCount);
                                writer.Settings.Height = 200;
                                break;
            
                            case BarcodeType.MaxiCode:
                                structureAppendCharacter =
                                    new StructuredAppendCharacter(i + 1, symbolCount);
                                break;
            
                            case BarcodeType.MicroPDF417:
                                structureAppendCharacter =
                                    new PDF417StructuredAppendCharacter(i + 1, symbolCount, "123");
                                break;
            
                            case BarcodeType.PDF417:
                                structureAppendCharacter =
                                    new PDF417StructuredAppendCharacter(i + 1, symbolCount, "123");
                                break;
            
                            default:
                                throw new NotSupportedException();
                        }
            
                        // create symbol data
            
                        string symbolTextData;
                        if (i == symbolCount - 1)
                            symbolTextData = value.Substring(i * fragmentLength);
                        else
                            symbolTextData = value.Substring(i * fragmentLength, fragmentLength);
            
                        TextValueItem symbolData = new TextValueItem(symbolTextData);
            
                        // set the barcode value items
                        writer.Settings.ValueItems = new ValueItemBase[] { structureAppendCharacter, symbolData };
            
                        // create image with barcode
                        result[i] = writer.GetBarcodeAsBitmapSource();
                    }
            
                    return result;
                }
            
                /// &lt;summary&gt;
                /// Read barcodes and merge the results into a single value.
                /// &lt;/summary&gt;
                private static string ReadBarcodeValue(BitmapSource[] barcodeImages, BarcodeType barcodeType)
                {
                    // create the barcode reader
                    using (BarcodeReader reader = new BarcodeReader())
                    {
                        // specify that reader must search for barcodes of specified type
                        reader.Settings.ScanBarcodeTypes = barcodeType;
            
                        // barcode reading results
                        IBarcodeInfo[] readingResults = new IBarcodeInfo[barcodeImages.Length];
                        // read barcodes
                        for (int i = 0; i &lt; barcodeImages.Length; i++)
                        {
                            // read barcode from image
                            readingResults[i] = reader.ReadBarcodes(barcodeImages[i])[0];
                        }
            
                        // determine symbol count
                        int symbolsCount = 0;
                        for (int i = 0; i &lt; readingResults.Length; i++)
                        {
                            if (readingResults[i].ValueItems[0] is StructuredAppendCharacter)
                            {
                                symbolsCount = ((StructuredAppendCharacter)readingResults[i].ValueItems[0]).SymbolCount;
                                break;
                            }
                        }
                        if (symbolsCount == 0)
                            throw new ApplicationException("No structure append symbols.");
            
                        // create array of string
                        string[] resultValues = new string[symbolsCount];
                        // fill resultValues
                        for (int i = 0; i &lt; readingResults.Length; i++)
                        {
                            if (readingResults[i].ValueItems[0] is StructuredAppendCharacter)
                            {
                                StructuredAppendCharacter structureAppendCharacter =
                                    (StructuredAppendCharacter)readingResults[i].ValueItems[0];
                                if (structureAppendCharacter.SymbolCount == symbolsCount)
                                {
                                    readingResults[i].ShowNonDataFlagsInValue = false;
                                    resultValues[structureAppendCharacter.SymbolPosition - 1] = readingResults[i].Value;
                                }
                            }
                        }
            
                        // build result string
                        StringBuilder result = new StringBuilder();
                        for (int i = 0; i &lt; resultValues.Length; i++)
                        {
                            if (resultValues[i] != null)
                            {
                                result.Append(resultValues[i]);
                            }
                            else
                            {
                                throw new ApplicationException(string.Format("missing symbol at position {0}", i + 1));
                            }
                        }
            
                        return result.ToString();
                    }
                }
            
            }
            </code>
            </example>
            <seealso cref="T:Vintasoft.WpfBarcode.BarcodeInfo.AztecStructuredAppendCharacter" />
            <seealso cref="T:Vintasoft.WpfBarcode.BarcodeInfo.DataMatrixStructuredAppendCharacter" />
            <seealso cref="T:Vintasoft.WpfBarcode.BarcodeInfo.QRStructuredAppendCharacter" />
            <seealso cref="T:Vintasoft.WpfBarcode.BarcodeInfo.PDF417StructuredAppendCharacter" />
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlagValueItem">
            <summary>
            Contains information about non-data flag of barcode.
            </summary>    
            <example>
            Please see example <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags">here</see>.
            </example>
            <seealso cref="P:Vintasoft.WpfBarcode.IBarcodeInfo.ShowNonDataFlagsInValue">IBarcodeInfo.ShowNonDataFlagsInValue</seealso>
            <seealso cref="P:Vintasoft.WpfBarcode.WriterSettings.ProcessSpecialSymbols">WriterSettings.ProcessSpecialSymbols</seealso>
            <seealso cref="T:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags" />
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlagValueItem.ToString">
            <summary> 
             Converts the <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlagValueItem" /> of this instance to its equivalent
             string.
             </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlagValueItem.Name">
            <summary>
            Gets a flag name.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeInfo.StructuredAppendCharacter.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.StructuredAppendCharacter" /> class. 
            </summary>
            <param name="symbolPosition">The position for a symbol in the Structured Append format.</param>
            <param name="symbolCount">The number of symbols in the Structured Append format.</param>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.StructuredAppendCharacter.Name">
            <summary>
            Gets a flag name.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.StructuredAppendCharacter.SymbolCount">
            <summary>
            Gets the number of symbols in the Structured Append format.
            </summary>
            <value>
            Maximal value for Aztec - 26, for DataMatrix and QR - 16, for PDF417 - 99999.
            </value>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.StructuredAppendCharacter.SymbolPosition">
            <summary>
            Gets the position for a symbol in the Structured Append format.
            </summary>
            <value>
            Maximal value for Aztec - 26, for DataMatrix and QR - 16, for PDF417 - 99999.
            </value>
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeInfo.AztecStructuredAppendCharacter.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.AztecStructuredAppendCharacter" /> class. 
            </summary>
            <param name="symbolPosition">The position for a symbol in the Structured Append format.</param>
            <param name="symbolCount">The number of symbols in the Structured Append format.</param>
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeInfo.AztecStructuredAppendCharacter.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.AztecStructuredAppendCharacter" /> class. 
            </summary>
            <param name="messageID">The Message ID.</param>
            <param name="symbolPosition">The position for a symbol in the Structured Append format.</param>
            <param name="symbolCount">The number of symbols in the Structured Append format.</param>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.AztecStructuredAppendCharacter.MessageID">
            <summary>
            Gets a Message Identification.
            </summary>
            <value>Any number of characters (except spaces).</value>
            <remarks>
            The optional message ID field.
            </remarks>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeInfo.DataMatrixEncodingMode">
            <summary>
            Specifies available data encoding modes of DataMatrix barcode.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.DataMatrixEncodingMode.Undefined">
            <summary>
            Undefined.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.DataMatrixEncodingMode.ASCII">
            <summary>
            ASCII mode. Available digits and ASCII values from 0 to 255.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.DataMatrixEncodingMode.C40">
            <summary>
            C40 mode. Available alphanumeric and special characters.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.DataMatrixEncodingMode.Text">
            <summary>
            Text mode. Available alphanumeric and special characters.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.DataMatrixEncodingMode.X12">
            <summary>
            ANSI X12 EDI data set.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.DataMatrixEncodingMode.EDIFACT">
            <summary>
            EDIFACT mode. Available ASCII values from 32 to 94.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.DataMatrixEncodingMode.Byte">
            <summary>
            Byte mode. Available byte values from 0 to 255.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeInfo.DataMatrixSymbolECCType">
            <summary>
            Specifies available ECC symbol types of Data Matrix barcode.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.DataMatrixSymbolECCType.Unknown">
            <summary>
            Unknown type.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.DataMatrixSymbolECCType.ECC200">
            <summary>
            ECC200 symbol.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.DataMatrixSymbolECCType.ECC000to140">
            <summary>
            ECC000-ECC140 symbols (not supported).
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeInfo.DataMatrixSymbolType">
            <summary>
            Specifies available symbol types of Data Matrix barcode.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.DataMatrixSymbolType.Undefined">
            <summary>
            Undefined symbol.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.DataMatrixSymbolType.Row10Col10">
            <summary>
            10x10 symbol.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.DataMatrixSymbolType.Row12Col12">
            <summary>
            12x12 symbol.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.DataMatrixSymbolType.Row14Col14">
            <summary>
            14x14 symbol.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.DataMatrixSymbolType.Row16Col16">
            <summary>
            16x16 symbol.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.DataMatrixSymbolType.Row18Col18">
            <summary>
            18x18 symbol.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.DataMatrixSymbolType.Row20Col20">
            <summary>
            20x20 symbol.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.DataMatrixSymbolType.Row22Col22">
            <summary>
            22x22 symbol.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.DataMatrixSymbolType.Row24Col24">
            <summary>
            24x24 symbol.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.DataMatrixSymbolType.Row26Col26">
            <summary>
            26x26 symbol.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.DataMatrixSymbolType.Row32Col32">
            <summary>
            32x32 symbol.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.DataMatrixSymbolType.Row36Col36">
            <summary>
            36x36 symbol.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.DataMatrixSymbolType.Row40Col40">
            <summary>
            40x40 symbol.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.DataMatrixSymbolType.Row44Col44">
            <summary>
            48x48 symbol.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.DataMatrixSymbolType.Row48Col48">
            <summary>
            48x48 symbol.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.DataMatrixSymbolType.Row52Col52">
            <summary>
            52x52 symbol.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.DataMatrixSymbolType.Row64Col64">
            <summary>
            64x64 symbol.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.DataMatrixSymbolType.Row72Col72">
            <summary>
            72x72 symbol.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.DataMatrixSymbolType.Row80Col80">
            <summary>
            80x80 symbol.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.DataMatrixSymbolType.Row88Col88">
            <summary>
            88x88 symbol.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.DataMatrixSymbolType.Row96Col96">
            <summary>
            96x96 symbol.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.DataMatrixSymbolType.Row104Col104">
            <summary>
            104x104 symbol.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.DataMatrixSymbolType.Row120Col120">
            <summary>
            120x120 symbol.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.DataMatrixSymbolType.Row132Col132">
            <summary>
            132x132 symbol.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.DataMatrixSymbolType.Row144Col144">
            <summary>
            144x144 symbol.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.DataMatrixSymbolType.Row8Col18">
            <summary>
            8x18 symbol.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.DataMatrixSymbolType.Row8Col32">
            <summary>
            8x32 symbol.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.DataMatrixSymbolType.Row12Col26">
            <summary>
            12x26 symbol.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.DataMatrixSymbolType.Row12Col36">
            <summary>
            12x36 symbol.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.DataMatrixSymbolType.Row16Col36">
            <summary>
            16x36 symbol.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.DataMatrixSymbolType.Row16Col48">
            <summary>
            16x48 symbol.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeInfo.DataMatrixStructuredAppendCharacter">
            <summary>
            Contains information about the Data Matrix Structured Append non-data character.
            </summary>
            <remarks>
            A Structured Append character is used to indicate that the symbol is part of a 
            Structured Append sequence.<br />
            Data Matrix Structured Append contains file identificator that allowing 
            64516 different file identifications. The purpose of the file identification
            is to increase the probability that only logically linked symbols are processed
            as part of the same message.<br />
            Up to 16 ECC 200 symbols may be appended in a structured format.
            </remarks>
            <example>
            Please see example <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.StructuredAppendCharacter">here</see>.
            </example>
            <seealso cref="T:Vintasoft.WpfBarcode.BarcodeInfo.StructuredAppendCharacter" />
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeInfo.DataMatrixStructuredAppendCharacter.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.DataMatrixStructuredAppendCharacter" /> class. 
            </summary>
            <param name="symbolPosition">The position for a symbol in the Structured Append format.</param>
            <param name="symbolCount">The number of symbols in the Structured Append format.</param>
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeInfo.DataMatrixStructuredAppendCharacter.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.DataMatrixStructuredAppendCharacter" /> class. 
            </summary>
            <param name="fileID">File identification.</param>
            <param name="symbolPosition">The position for a symbol in the Structured Append format.</param>
            <param name="symbolCount">The number of symbols in the Structured Append format.</param>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.DataMatrixStructuredAppendCharacter.FileID">
            <summary>
            Gets a File Identificator.
            </summary>
            <remarks>
            The purpose of the file identificator is to increase the 
            probability that only logically linked symbols are processed 
            as part of the same message.
            </remarks>
            <value>
            Default value is <b>0</b>.<br />
            Max value is <b>64515</b>.<br />
            Min value is <b>0</b>.
            </value>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeErrorCorrectionLevel">
            <summary>
            Specifies available error correction levels of Han Xin Code barcode.
            </summary>
            <remarks>
            Error correction level 1 is suitable for symbol with high quality or
            symbol denoting length-fixed data with smallest size.
            Level 2 is the standard level and a compromise between small size and reliability. 
            Level 3 is a level with high reliability, suitable for important symbol or symbol
            with poor quality. Level 4 have the realizably highest reliability.
            </remarks>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeErrorCorrectionLevel.L1">
            <summary>
            8% recovery capacity.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeErrorCorrectionLevel.L2">
            <summary>
            15% recovery capacity.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeErrorCorrectionLevel.L3">
            <summary>
            23% recovery capacity.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeErrorCorrectionLevel.L4">
            <summary>
            30% recovery capacity.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeInfo">
            <summary>
            Contains information about recognized Han Xin Code barcode.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeInfo.BarcodeInfo2D">
            <summary>
            Class that allows to get information about recognized 2D barcode.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.BarcodeInfo2D.CorrectedErrors">
            <summary>
            Gets a number of corrected errors.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.BarcodeInfo2D.NotCorrectedErrors">
            <summary>
            Gets a number of uncorrected errors.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.BarcodeInfo2D.ErrorCorrectionCodewordCount">
            <summary>
            Gets a number of error correction codewords.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.BarcodeInfo2D.TotalCodewordCount">
            <summary>
            Gets a number of codewords.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.BarcodeInfo2D.MatrixWidth">
            <summary>
            Gets the width, in modules (cells), of the barcode matrix.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.BarcodeInfo2D.MatrixHeight">
            <summary>
            Gets the height, in modules (cells), of the barcode matrix.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.BarcodeInfo2D.CellWidth">
            <summary>
            Gets the width, in pixels, of barcode matrix cell.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.BarcodeInfo2D.CellHeight">
            <summary>
            Gets the height, in pixels, of barcode matrix cell.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeInfo.Symbol">
            <summary>
            Gets the Han Xin Code symbol.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeInfo.MatrixWidth">
            <summary>
            Gets the width, in modules (cells), of the barcode matrix.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeInfo.MatrixHeight">
            <summary>
            Gets the height, in modules (cells), of the barcode matrix.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbol">
            <summary>
            Contains information about Han Xin Code symbol: size, number of total codewords,
            version number, etc.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbol.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbol.ErrorCorrectionLevel">
            <summary>
            Gets the error correction level.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbol.Version">
            <summary>
            Gets the symbol version.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbol.Size">
            <summary>
            Gets symbol size.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbol.TotalCodewordCount">
            <summary>
            Gets a number of codewords.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbol.DataCodewordCount">
            <summary>
            Gets a number of data codewords.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion">
            <summary>
            Specifies available symbol sizes of Han Xin Code barcode.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Undefined">
            <summary>
            Undefined version.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version1">
            <summary>
            23x23 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version2">
            <summary>
            25x25 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version3">
            <summary>
            27x27 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version4">
            <summary>
            29x29 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version5">
            <summary>
            31x31 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version6">
            <summary>
            33x33 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version7">
            <summary>
            35x35 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version8">
            <summary>
            37x37 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version9">
            <summary>
            39x39 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version10">
            <summary>
            41x41 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version11">
            <summary>
            43x43 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version12">
            <summary>
            45x45 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version13">
            <summary>
            47x47 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version14">
            <summary>
            49x49 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version15">
            <summary>
            51x51 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version16">
            <summary>
            53x53 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version17">
            <summary>
            55x55 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version18">
            <summary>
            57x57 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version19">
            <summary>
            59x59 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version20">
            <summary>
            61x61 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version21">
            <summary>
            63x63 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version22">
            <summary>
            65x65 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version23">
            <summary>
            67x67 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version24">
            <summary>
            69x69 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version25">
            <summary>
            71x71 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version26">
            <summary>
            73x73 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version27">
            <summary>
            75x75 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version28">
            <summary>
            77x77 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version29">
            <summary>
            79x79 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version30">
            <summary>
            81x81 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version31">
            <summary>
            83x83 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version32">
            <summary>
            85x85 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version33">
            <summary>
            87x87 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version34">
            <summary>
            89x89 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version35">
            <summary>
            91x91 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version36">
            <summary>
            93x93 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version37">
            <summary>
            95x95 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version38">
            <summary>
            97x97 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version39">
            <summary>
            99x99 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version40">
            <summary>
            101x101 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version41">
            <summary>
            103x103 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version42">
            <summary>
            105x105 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version43">
            <summary>
            107x107 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version44">
            <summary>
            109x109 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version45">
            <summary>
            111x111 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version46">
            <summary>
            113x113 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version47">
            <summary>
            115x115 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version48">
            <summary>
            117x117 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version49">
            <summary>
            119x119 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version50">
            <summary>
            121x121 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version51">
            <summary>
            123x123 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version52">
            <summary>
            125x125 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version53">
            <summary>
            127x127 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version54">
            <summary>
            129x129 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version55">
            <summary>
            131x131 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version56">
            <summary>
            133x133 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version57">
            <summary>
            135x135 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version58">
            <summary>
            137x137 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version59">
            <summary>
            139x139 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version60">
            <summary>
            141x141 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version61">
            <summary>
            143x143 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version62">
            <summary>
            145x145 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version63">
            <summary>
            147x147 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version64">
            <summary>
            149x149 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version65">
            <summary>
            151x151 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version66">
            <summary>
            153x153 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version67">
            <summary>
            155x155 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version68">
            <summary>
            157x157 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version69">
            <summary>
            159x159 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version70">
            <summary>
            161x161 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version71">
            <summary>
            163x163 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version72">
            <summary>
            165x165 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version73">
            <summary>
            167x167 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version74">
            <summary>
            169x169 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version75">
            <summary>
            171x171 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version76">
            <summary>
            173x173 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version77">
            <summary>
            175x175 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version78">
            <summary>
            177x177 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version79">
            <summary>
            179x179 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version80">
            <summary>
            181x181 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version81">
            <summary>
            183x183 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version82">
            <summary>
            185x185 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version83">
            <summary>
            187x187 modules.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion.Version84">
            <summary>
            189x189 modules.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeEncodingMode">
            <summary>
            Specifies available encoding modes of Han Xin Code barcode.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeEncodingMode.Numeric">
            <summary>
            Numeric mode, 3.3 bits per character.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeEncodingMode.Text">
            <summary>
            Text mode, 6 bits per character.
            </summary>
            <remarks>
            Text mode encodes data from common symbols in ISO 8859-1, i.e. 
            byte values 0x00 to 0x1B and 0x20 to 0x7F.
            </remarks>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeEncodingMode.Byte">
            <summary>
            Binary Byte mode, 8 bits per character.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeEncodingMode.ChineseRegionOne">
            <summary>
            Common Chinese Characters in Region One mode, 12 bits per character.
            </summary>
            <remarks>
            Common Chinese Characters in Region one includes characters,
            when represented in codepage GB18030, whose first byte value is
            in the range of 0xB0 to 0xD7 and second byte value is in the range 
            of 0xA1 to 0xFE (3760 characters), and characters whose first byte 
            value is in the range of 0xA1 to 0xA3, and second byte value is in
            the range of 0xA1 to 0xFE (282 characters), and characters whose byte 
            values are in the range of 0xA8A1 to 0xA8C0 (32 characters). 
            Common Chinese Characters in Region one are 4074 in total.
            </remarks>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeEncodingMode.ChineseRegionTwo">
            <summary>
            Common Chinese Characters in Region Two mode, 12 bits per character.
            </summary>
            <remarks>
            Common Chinese Characters in Region two which includes characters,
            when represented in codepage GB18030, whose first byte value is in the 
            range of 0xD8 to 0xF7, and second byte value is in the range of 0xA1 to 0xFE. 
            Common Chinese Characters in Region two are 3008 in total.
            </remarks>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeEncodingMode.GB18030TwoByte">
            <summary>
            GB18030 2-byte Region mode, 15 bits per character.
            </summary>
            <remarks>
            The GB18030 2-byte region encodes data from all characters 
            (including the common Chinese Characters in Regions one and two) in 
            GB18030 double-byte region, (i.e., Chinese characters whose first 
            byte value is in the range of 0x81 to 0xFE and second byte value is 
            in the range of 0x40 to 0x7E or 0x80 to 0xFE). GB18030 2-byte region 
            has 23940 Chinese characters in total.
            </remarks>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeEncodingMode.GB18030FourByte">
            <summary>
            GB18030 4-byte Region mode, 21 bits per character.
            </summary>
            <remarks>
            GB18030 4-byte region encodes data from all characters in GB18030 four-byte 
            Region (i.e., characters whose first byte value is in the range of 0x81 to 0xFE,
            and second byte value is in the range of 0x30 to 0x39, and third byte value is 
            in the range of 0x81 to 0xFE, and fourth byte value is in the range of 0x30 to 0x39). 
            The GB18030 4-byte region has 1587600 characters in total.
            </remarks>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeEncodingMode.Undefined">
            <summary>
            Undefined.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeGB18030TextValueItem">
            <summary>
            Contains information about text value in GB18030 encoding of Han Xin Code barcode.
            </summary>
            <seealso cref="T:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeEncodingMode" />
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeGB18030TextValueItem.#ctor(System.String,Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeEncodingMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeGB18030TextValueItem" /> class.
            </summary>
            <param name="text">The text value.</param>
            <param name="encodingMode">The encoding mode.</param>
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeGB18030TextValueItem.#ctor(System.Byte[],Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeEncodingMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeGB18030TextValueItem" /> class. 
            </summary>
            <param name="binaryValue">Binary value of text data.</param>
            <param name="encodingMode">Encoding mode.</param>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeGB18030TextValueItem.Mode">
            <summary>
            Gets the an encoding mode.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeGB18030TextValueItem.BinaryValue">
            <summary>
            Gets the text value as binary value.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeGB18030TextValueItem.GB18030Encoding">
            <summary>
            Gets or sets the GB18030 encoding.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeTextValueItem">
            <summary>
            Contains information about text value in text mode of Han Xin Code barcode.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeTextValueItem.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeTextValueItem" /> class.
            </summary>
            <param name="text">The text value.</param>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeInfo.MaxiCodeInfo">
            <summary>
            Contains information about recognized MaxiCode barcode.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.MaxiCodeInfo.MatrixWidth">
            <summary>
            Gets the width, in modules (cells), of the barcode matrix.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.MaxiCodeInfo.MatrixHeight">
            <summary>
            Gets the height, in modules (cells), of the barcode matrix.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.MaxiCodeInfo.CellHeight">
            <summary>
            Gets the height, in pixels, of barcode matrix cell.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.MaxiCodeInfo.EncodingMode">
            <summary>
            Returns a encoding mode used in barcode.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeInfo.MaxiCodeEncodingMode">
            <summary>
            Specifies available encoding modes of MaxiCode barcode.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.MaxiCodeEncodingMode.Mode2">
            <summary>
            Mode2: Structured Carrier Message with Digital Post Code (MaxiCode specification, Annex B).
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.MaxiCodeEncodingMode.Mode3">
            <summary>
            Mode3: Structured Carrier Message with Alphanumeric or Digital Post Code (MaxiCode specification, Annex B).
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.MaxiCodeEncodingMode.Mode4">
            <summary>
            Mode4: Standard symbol with standard error correction.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.MaxiCodeEncodingMode.Mode5">
            <summary>
            Mode5: Standard symbol with extended error correction.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.MaxiCodeEncodingMode.Mode6">
            <summary>
            Mode6: Programmable reader with standard error correction.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeInfo.MaxiCodeStructuredCarrierMessage">
            <summary>
            Contains information about the MaxiCode Structured Carrier Message.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeInfo.MaxiCodeStructuredCarrierMessage.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.MaxiCodeStructuredCarrierMessage" /> class. 
            </summary>
            <param name="postalCode">Postal code.</param>
            <param name="isoCountryCode">ISO Contry code.</param>
            <param name="classOfService">Class of service.</param>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.MaxiCodeStructuredCarrierMessage.PostalCode">
            <summary>
            Gets a postal code.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.MaxiCodeStructuredCarrierMessage.CountryCode">
            <summary>
            Gets a contry code (ISO 3166).
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.MaxiCodeStructuredCarrierMessage.ClassOfService">
            <summary>
            Gets a class of service.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeInfo.MicroPDF417AsCode128EmulationCodeword">
            <summary>
            Specifies available Micro PDF417 function codewords for Code 128 emulation.
            </summary>
            <remarks>
            Refer to the ISO/IEC 24728 specification for information about 
            codewords for Code 128 emulation (5.4.1.5).
            </remarks>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.MicroPDF417AsCode128EmulationCodeword.Codeword903">
            <summary>
            UCC/EAN-128 emulation: transmit ]C1 or ]L3, 
            implied latch to text compaction mode.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.MicroPDF417AsCode128EmulationCodeword.Codeword904">
            <summary>
            UCC/EAN-128 emulation: transmit ]C1 or ]L3,
            implied latch to numeric compaction mode.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.MicroPDF417AsCode128EmulationCodeword.Codeword905">
            <summary>
            UCC/EAN-128 emulation: transmit ]C1 or ]L3,
            implied latch to text compaction mode, 
            followed by implied "01" AI and 14-digit expansion of first 13 digits.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.MicroPDF417AsCode128EmulationCodeword.Codeword906">
            <summary>
            "Linked" UCC/EAN-128: transmit ]C1 or ]L3,
            implied latch to text compaction mode.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.MicroPDF417AsCode128EmulationCodeword.Codeword907">
            <summary>
            "Linked" UCC/EAN-128: transmit ]C1 or ]L3,
            implied latch to numeric compaction mode.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.MicroPDF417AsCode128EmulationCodeword.Codeword908">
            <summary>
            Code 128 emulation: transmit ]C2 or ]L4,
            implied latch to text compaction mode.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.MicroPDF417AsCode128EmulationCodeword.Codeword909">
            <summary>
            Code 128 emulation: transmit ]C2 or ]L4,
            implied latch to numeric compaction mode.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.MicroPDF417AsCode128EmulationCodeword.Codeword910">
            <summary>
            Code 128 emulation: transmit ]C0 or ]L5,
            implied latch to text compaction mode.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.MicroPDF417AsCode128EmulationCodeword.Codeword911">
            <summary>
            Code 128 emulation: transmit ]C0 or ]L5,
            implied latch to numeric compaction mode.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.MicroPDF417AsCode128EmulationCodeword.Codeword912">
            <summary>
            "Linked" UCC/EAN-128, with leading date field: transmit ]C1 or ]L3, 
            implied latch to numeric compaction mode, specially encoded date field.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.MicroPDF417AsCode128EmulationCodeword.Codeword914">
            <summary>
            "Linked" UCC/EAN-128, with lot number: transmit ]C1 or ]L3, 
            implied latch to numeric compaction mode, followed by implied "10" AI.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.MicroPDF417AsCode128EmulationCodeword.Codeword915">
            <summary>
            "Linked" UCC/EAN-128, with serial number: transmit ]C1 or ]L3, 
            implied latch to numeric compaction mode, followed by implied "21" AI.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeInfo.MicroPDF417AsCode128EmulationValueItem">
            <summary>
            Contains information about Micro PDF417 non-data flag for Code 128 emulation.
            </summary>
            <remarks>
            Name: &lt;CODE128EM_nnn&gt;, where nnn: 903-912,914,915. <br />
            <seealso cref="T:Vintasoft.WpfBarcode.BarcodeInfo.MicroPDF417AsCode128EmulationCodeword" />
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.MicroPDF417AsCode128EmulationValueItem.Codeword">
            <summary>
            Gets a codeword number.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.MicroPDF417AsCode128EmulationValueItem.Codeword903">
            <summary>
            Gets the Code128 emulation value item with codeword 903.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.MicroPDF417AsCode128EmulationValueItem.Codeword904">
            <summary>
            Gets the Code128 emulation value item with codeword 904.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.MicroPDF417AsCode128EmulationValueItem.Codeword905">
            <summary>
            Gets the Code128 emulation value item with codeword 905.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.MicroPDF417AsCode128EmulationValueItem.Codeword906">
            <summary>
            Gets the Code128 emulation value item with codeword 906.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.MicroPDF417AsCode128EmulationValueItem.Codeword907">
            <summary>
            Gets the Code128 emulation value item with codeword 907.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.MicroPDF417AsCode128EmulationValueItem.Codeword908">
            <summary>
            Gets the Code128 emulation value item with codeword 908.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.MicroPDF417AsCode128EmulationValueItem.Codeword909">
            <summary>
            Gets the Code128 emulation value item with codeword 909.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.MicroPDF417AsCode128EmulationValueItem.Codeword910">
            <summary>
            Gets the Code128 emulation value item with codeword 910.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.MicroPDF417AsCode128EmulationValueItem.Codeword911">
            <summary>
            Gets the Code128 emulation value item with codeword 911.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.MicroPDF417AsCode128EmulationValueItem.Codeword912">
            <summary>
            Gets the Code128 emulation value item with codeword 912.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.MicroPDF417AsCode128EmulationValueItem.Codeword914">
            <summary>
            Gets the Code128 emulation value item with codeword 914.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.MicroPDF417AsCode128EmulationValueItem.Codeword915">
            <summary>
            Gets the Code128 emulation value item with codeword 915.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeInfo.MicroPDF417Info">
            <summary>
            Contains information about recognized MicroPDF417 barcode.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeInfo.PDF417Info">
            <summary>
            Contains information about recognized PDF417 or PDF417Compact barcode.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.PDF417Info.MatrixWidth">
            <summary>
            Gets the width, in modules (cells), of the barcode matrix.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.PDF417Info.MatrixHeight">
            <summary>
            Gets the height, in modules (cells), of the barcode matrix.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.PDF417Info.ErrorCorrectionLevel">
            <summary>
            Returns a level of error correction used in barcode.
            </summary>
            <value>
            Minimal value is 0, maximal value is 8.<br />
            -1 means that area of error correction is not defined.
            </value>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.PDF417Info.RowCodewordsCount">
            <summary>
            Returns a count of codewords in a row.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.PDF417Info.RowsCount">
            <summary>
            Returns a count of rows.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.MicroPDF417Info.MatrixWidth">
            <summary>
            Gets the width, in modules (cells), of the barcode matrix.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.MicroPDF417Info.SymbolType">
            <summary>
            Gets a MicroPDF417 symbol type.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeInfo.MicroPDF417SymbolType">
            <summary>
            Specifies available symbol types of Micro PDF417 barcode.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.MicroPDF417SymbolType.Undefined">
            <summary>
            Undefined symbol.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.MicroPDF417SymbolType.Col1Row11">
            <summary>
            Symbol containing 1 column and 11 rows.
            </summary>
            <remarks>
            Maximum capacity: 3 bytes OR 6 alpha characters OR 8 digits.
            Error correction codewords (% of codewords): 64.
            </remarks>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.MicroPDF417SymbolType.Col1Row14">
            <summary>
            Symbol containing 1 column and 14 rows.
            </summary>
            <remarks>
            Maximum capacity: 7 bytes OR 12 alpha characters OR 17 digits.
            Error correction codewords (% of codewords): 50.
            </remarks>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.MicroPDF417SymbolType.Col1Row17">
            <summary>
            Symbol containing 1 column and 17 rows.
            </summary>
            <remarks>
            Maximum capacity: 10 bytes OR 18 alpha characters OR 26 digits.
            Error correction codewords (% of codewords): 41.
            </remarks>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.MicroPDF417SymbolType.Col1Row20">
            <summary>
            Symbol containing 1 column and 20 rows.
            </summary>
            <remarks>
            Maximum capacity: 13 bytes OR 22 alpha characters OR 32 digits.
            Error correction codewords (% of codewords): 40.
            </remarks>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.MicroPDF417SymbolType.Col1Row24">
            <summary>
            Symbol containing 1 column and 24 rows.
            </summary>
            <remarks>
            Maximum capacity: 18 bytes OR 30 alpha characters OR 44 digits.
            Error correction codewords (% of codewords): 33.
            </remarks>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.MicroPDF417SymbolType.Col1Row28">
            <summary>
            Symbol containing 1 column and 28 rows.
            </summary>
            <remarks>
            Maximum capacity: 22 bytes OR 38 alpha characters OR 55 digits.
            Error correction codewords (% of codewords): 29.
            </remarks>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.MicroPDF417SymbolType.Col2Row8">
            <summary>
            Symbol containing 2 columns and 8 rows.
            </summary>
            <remarks>
            Maximum capacity: 8 bytes OR 14 alpha characters OR 20 digits.
            Error correction codewords (% of codewords): 50.
            </remarks>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.MicroPDF417SymbolType.Col2Row11">
            <summary>
            Symbol containing 2 columns and 11 rows.
            </summary>
            <remarks>
            Maximum capacity: 14 bytes OR 24 alpha characters OR 35 digits.
            Error correction codewords (% of codewords): 41.
            </remarks>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.MicroPDF417SymbolType.Col2Row14">
            <summary>
            Symbol containing 2 columns and 14 rows.
            </summary>
            <remarks>
            Maximum capacity: 21 bytes OR 36 alpha characters OR 52 digits.
            Error correction codewords (% of codewords): 32.
            </remarks>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.MicroPDF417SymbolType.Col2Row17">
            <summary>
            Symbol containing 2 columns and 17 rows.
            </summary>
            <remarks>
            Maximum capacity: 27 bytes OR 46 alpha characters OR 67 digits.
            Error correction codewords (% of codewords): 29.
            </remarks>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.MicroPDF417SymbolType.Col2Row20">
            <summary>
            Symbol containing 2 columns and 20 rows.
            </summary>
            <remarks>
            Maximum capacity: 33 bytes OR 56 alpha characters OR 82 digits.
            Error correction codewords (% of codewords): 28.
            </remarks>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.MicroPDF417SymbolType.Col2Row23">
            <summary>
            Symbol containing 2 columns and 23 rows.
            </summary>
            <remarks>
            Maximum capacity: 38 bytes OR 64 alpha characters OR 92 digits.
            Error correction codewords (% of codewords): 28.
            </remarks>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.MicroPDF417SymbolType.Col2Row26">
            <summary>
            Symbol containing 2 columns and 26 rows.
            </summary>
            <remarks>
            Maximum capacity: 43 bytes OR 72 alpha characters OR 105 digits.
            Error correction codewords (% of codewords): 29.
            </remarks>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.MicroPDF417SymbolType.Col3Row6">
            <summary>
            Symbol containing 3 columns and 6 rows.
            </summary>
            <remarks>
            Maximum capacity: 6 bytes OR 10 alpha characters OR 14 digits.
            Error correction codewords (% of codewords): 67.
            </remarks>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.MicroPDF417SymbolType.Col3Row8">
            <summary>
            Symbol containing 3 columns and 8 rows.
            </summary>
            <remarks>
            Maximum capacity: 10 bytes OR 18 alpha characters OR 26 digits.
            Error correction codewords (% of codewords): 58.
            </remarks>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.MicroPDF417SymbolType.Col3Row10">
            <summary>
            Symbol containing 3 columns and 10 rows.
            </summary>
            <remarks>
            Maximum capacity: 15 bytes OR 26 alpha characters OR 38 digits.
            Error correction codewords (% of codewords): 53.
            </remarks>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.MicroPDF417SymbolType.Col3Row12">
            <summary>
            Symbol containing 3 columns and 12 rows.
            </summary>
            <remarks>
            Maximum capacity: 20 bytes OR 34 alpha characters OR 49 digits.
            Error correction codewords (% of codewords): 50.
            </remarks>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.MicroPDF417SymbolType.Col3Row15">
            <summary>
            Symbol containing 3 columns and 15 rows.
            </summary>
            <remarks>
            Maximum capacity: 27 bytes OR 46 alpha characters OR 67 digits.
            Error correction codewords (% of codewords): 47.
            </remarks>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.MicroPDF417SymbolType.Col3Row20">
            <summary>
            Symbol containing 3 columns and 20 rows.
            </summary>
            <remarks>
            Maximum capacity: 39 bytes OR 66 alpha characters OR 96 digits.
            Error correction codewords (% of codewords): 43.
            </remarks>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.MicroPDF417SymbolType.Col3Row26">
            <summary>
            Symbol containing 3 columns and 26 rows.
            </summary>
            <remarks>
            Maximum capacity: 54 bytes OR 90 alpha characters OR 132 digits.
            Error correction codewords (% of codewords): 41.
            </remarks>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.MicroPDF417SymbolType.Col3Row32">
            <summary>
            Symbol containing 3 columns and 32 rows.
            </summary>
            <remarks>
            Maximum capacity: 68 bytes OR 114 alpha characters OR 167 digits.
            Error correction codewords (% of codewords): 40.
            </remarks>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.MicroPDF417SymbolType.Col3Row38">
            <summary>
            Symbol containing 3 columns and 38 rows.
            </summary>
            <remarks>
            Maximum capacity: 82 bytes OR 138 alpha characters OR 202 digits.
            Error correction codewords (% of codewords): 39.
            </remarks>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.MicroPDF417SymbolType.Col3Row44">
            <summary>
            Symbol containing 3 columns and 44 rows.
            </summary>
            <remarks>
            Maximum capacity: 97 bytes OR 162 alpha characters OR 237 digits.
            Error correction codewords (% of codewords): 38.
            </remarks>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.MicroPDF417SymbolType.Col4Row4">
            <summary>
            Symbol containing 4 columns and 4 rows.
            </summary>
            <remarks>
            Maximum capacity: 8 bytes OR 14 alpha characters OR 20 digits.
            Error correction codewords (% of codewords): 50.
            </remarks>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.MicroPDF417SymbolType.Col4Row6">
            <summary>
            Symbol containing 4 columns and 6 rows.
            </summary>
            <remarks>
            Maximum capacity: 13 bytes OR 22 alpha characters OR 32 digits.
            Error correction codewords (% of codewords): 50.
            </remarks>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.MicroPDF417SymbolType.Col4Row8">
            <summary>
            Symbol containing 4 columns and 8 rows.
            </summary>
            <remarks>
            Maximum capacity: 20 bytes OR 34 alpha characters OR 49 digits.
            Error correction codewords (% of codewords): 44.
            </remarks>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.MicroPDF417SymbolType.Col4Row10">
            <summary>
            Symbol containing 4 columns and 10 rows.
            </summary>
            <remarks>
            Maximum capacity: 27 bytes OR 46 alpha characters OR 67 digits.
            Error correction codewords (% of codewords): 40.
            </remarks>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.MicroPDF417SymbolType.Col4Row12">
            <summary>
            Symbol containing 4 columns and 12 rows.
            </summary>
            <remarks>
            Maximum capacity: 34 bytes OR 58 alpha characters OR 85 digits.
            Error correction codewords (% of codewords): 38.
            </remarks>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.MicroPDF417SymbolType.Col4Row15">
            <summary>
            Symbol containing 4 columns and 15 rows.
            </summary>
            <remarks>
            Maximum capacity: 45 bytes OR 76 alpha characters OR 111 digits.
            Error correction codewords (% of codewords): 35.
            </remarks>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.MicroPDF417SymbolType.Col4Row20">
            <summary>
            Symbol containing 4 columns and 20 rows.
            </summary>
            <remarks>
            Maximum capacity: 63 bytes OR 106 alpha characters OR 55 digits.
            Error correction codewords (% of codewords): 33.
            </remarks>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.MicroPDF417SymbolType.Col4Row26">
            <summary>
            Symbol containing 4 columns and 26 rows.
            </summary>
            <remarks>
            Maximum capacity: 85 bytes OR 142 alpha characters OR 208 digits.
            Error correction codewords (% of codewords): 31.
            </remarks>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.MicroPDF417SymbolType.Col4Row32">
            <summary>
            Symbol containing 4 columns and 32 rows.
            </summary>
            <remarks>
            Maximum capacity: 106 bytes OR 178 alpha characters OR 261 digits.
            Error correction codewords (% of codewords): 30.
            </remarks>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.MicroPDF417SymbolType.Col4Row38">
            <summary>
            Symbol containing 4 columns and 38 rows.
            </summary>
            <remarks>
            Maximum capacity: 128 bytes OR 214 alpha characters OR 313 digits.
            Error correction codewords (% of codewords): 29.
            </remarks>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.MicroPDF417SymbolType.Col4Row44">
            <summary>
            Symbol containing 4 columns and 44 rows.
            </summary>
            <remarks>
            Maximum capacity: 150 bytes OR 250 alpha characters OR 366 digits.
            Error correction codewords (% of codewords): 28.
            </remarks>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeInfo.PDF417EncodingMode">
            <summary>
            Specifies available data encoding modes of PDF417 barcode.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.PDF417EncodingMode.Undefined">
            <summary>
            Undefined.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.PDF417EncodingMode.Text">
            <summary>
            Text mode.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.PDF417EncodingMode.Byte">
            <summary>
            Byte mode.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.PDF417EncodingMode.Numeric">
            <summary>
            Numeric mode.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeInfo.PDF417ErrorCorrectionLevel">
            <summary>
            Specifies available Error Correction Levels of PDF417 barcode.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.PDF417ErrorCorrectionLevel.Undefined">
            <summary>
            Undefined level.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.PDF417ErrorCorrectionLevel.Level0">
            <summary>
            2 Error Correction Codewords (error detection only).
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.PDF417ErrorCorrectionLevel.Level1">
            <summary>
            4 Error Correction Codewords.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.PDF417ErrorCorrectionLevel.Level2">
            <summary>
            8 Error Correction Codewords.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.PDF417ErrorCorrectionLevel.Level3">
            <summary>
            16 Error Correction Codewords.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.PDF417ErrorCorrectionLevel.Level4">
            <summary>
            32 Error Correction Codewords.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.PDF417ErrorCorrectionLevel.Level5">
            <summary>
            64 Error Correction Codewords.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.PDF417ErrorCorrectionLevel.Level6">
            <summary>
            128 Error Correction Codewords.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.PDF417ErrorCorrectionLevel.Level7">
            <summary>
            256 Error Correction Codewords.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.PDF417ErrorCorrectionLevel.Level8">
            <summary>
            512 Error Correction Codewords.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeInfo.PDF417StructuredAppendCharacter">
            <summary>
            Contains information about the PDF417 (Macro PDF417) and Micro PDF417
            Structured Append non-data character.
            </summary>
            <remarks>
            A Structured Append character is used to indicate that the symbol is part of a 
            Structured Append sequence.<br />
            Structured Append provides a standard mechanism for creating a distributed 
            representation of files too large to be represented by a single PDF417 or Micro PDF417 symbol.
            Using Structured Append, large files are split into several file segments and encoded into 
            individual symbols. The Structured Append character defines the file ID, the concatenation 
            sequence and optionally other information about the file.<br />
            A Structured Append decoder uses the Structured Append character information to 
            reconstruct the file correctly independently of symbol scanning order.<br />
            <br />
            For each related Structured Append symbol, the <see cref="P:Vintasoft.WpfBarcode.BarcodeInfo.PDF417StructuredAppendCharacter.FileID" />
            field contains the same value. The file ID is a variable length field composed of triplets.
            Each triplet in the file ID can have a value between 000 and 899, effectively making the 
            file ID a series of base 900 numbers.<br />
            <br />
            Structured Append character also contain a number of optional fields.
            Each optional field has field designator.
            Field designator defines field type and field encoding mode.<br />
            Pre-defined field designators:
            <ul>
            <li>0 - File Name, variable text (<see cref="P:Vintasoft.WpfBarcode.BarcodeInfo.PDF417StructuredAppendCharacter.FileName" />).</li>
            <li>1 - Segment Count, fixed number 0..99999 (<see cref="P:Vintasoft.WpfBarcode.BarcodeInfo.PDF417StructuredAppendCharacter.SymbolCount" />).</li>
            <li>2 - Time Stamp, fixed number, indicates the time stamp on the source file
            expressed as the elapsed time in seconds since 1970:01:01:00:00:00 GMT (<see cref="P:Vintasoft.WpfBarcode.BarcodeInfo.PDF417StructuredAppendCharacter.TimeStamp" />).</li>
            <li>3 - Sender, variable text (<see cref="P:Vintasoft.WpfBarcode.BarcodeInfo.PDF417StructuredAppendCharacter.Sender" />).</li>
            <li>4 - Addressee, variable text (<see cref="P:Vintasoft.WpfBarcode.BarcodeInfo.PDF417StructuredAppendCharacter.Addressee" />).</li>
            <li>5 - FileSize, variable number (<see cref="P:Vintasoft.WpfBarcode.BarcodeInfo.PDF417StructuredAppendCharacter.FileSize" />).</li>
            <li>6 - Checksum, fiexd number 0..65535 (<see cref="P:Vintasoft.WpfBarcode.BarcodeInfo.PDF417StructuredAppendCharacter.Checksum" />).</li>
            </ul>
            Field designator values greater than 6 are not currently defined. 
            However, decoder and transmit any optional fields encountered with a 
            field designator of 7 to 34 by treating the field data as variable text.<br />
            Additional information about PDF417 Structured Append see in: 
            ISO/IEC 24728, ISO/IEC 15438, Annex H.
            </remarks>
            <example>
            This example shows how to split data files into parts and 
            reconstruct data files using PDF417 Structured Append character:
            <code lang="VB.NET">   
            Imports System.Collections.Generic   
            Imports System.Text   
            Imports System.Windows.Media.Imaging   
               
            Imports Vintasoft.WpfBarcode   
            Imports Vintasoft.WpfBarcode.BarcodeInfo   
               
            Class PDF417StructuredAppendCharacterExample   
            	''' &lt;summary&gt;   
            	''' The barcode type (PDF417, PDF417Compact or MicroPDF417).   
            	''' &lt;/summary&gt;   
            	Shared _barcodeType As BarcodeType = BarcodeType.PDF417   
               
            	''' &lt;summary&gt;   
            	''' Splits 3 files into 9 parts (each file into 3 parts), creates barcodes from 9 parts,   
            	''' reorders barcodes, recognizes barcodes and restores content of 3 files.   
            	''' &lt;/summary&gt;   
            	Public Shared Sub Test()   
            		' count of data files   
            		Dim fileCount As Integer = 3   
               
            		' count of parts in data file   
            		Dim symbolCount As Integer = 3   
               
            		' split data files to symbols   
            		Dim barcodeImages As New List(Of BitmapSource)()   
            		For i As Integer = 0 To fileCount - 1   
            			' file ID - series of triplets 000..899   
            			Dim fileId As String = (i + 1).ToString().PadLeft(3, "0"C)   
               
            			' split each data file to "symbolCount" symbols   
            			For j As Integer = 0 To symbolCount - 1   
            				' create structured append character   
            				Dim structureAppendCharacter As New PDF417StructuredAppendCharacter(j + 1, symbolCount, fileId)   
               
            				' add FileName information to the first symbol of data file   
            				If j = 0 Then   
            					structureAppendCharacter.FileName = String.Format("DataFile{0}", i + 1)   
            				End If   
               
            				' barcode value   
            				Dim symbolValue As String = String.Format("[Part {0} of file {1}]", j + 1, i + 1)   
               
            				' generate barcode image                   
            				barcodeImages.Add(GenerateBarcode(structureAppendCharacter, symbolValue))   
            			Next   
            		Next   
               
               
            		' resort barcode images   
            		barcodeImages.Reverse()   
            		barcodeImages.Reverse(0, barcodeImages.Count \ 2)   
            		barcodeImages.Reverse(barcodeImages.Count \ 3, (barcodeImages.Count \ 3) * 2)   
               
               
            		' recognize all barcodes and reconstruct data files   
            		Dim dataFiles As Dictionary(Of String, String) = ReconstructDataFiles(barcodeImages)   
               
            		' print reconstructed data files   
            		Console.WriteLine("Reconstructed data files:")   
            		For Each fileId As String In dataFiles.Keys   
            			Console.WriteLine(String.Format("File ID  : {0}", fileId))   
            			Console.WriteLine(String.Format("Data File: {0}", dataFiles(fileId)))   
            			Console.WriteLine()   
            		Next   
            	End Sub   
               
            	''' &lt;summary&gt;   
            	''' Generates the barcode image.   
            	''' &lt;/summary&gt;   
            	''' &lt;param name="structuredAppend"&gt;The structured append character.&lt;/param&gt;   
            	''' &lt;param name="barcodeValue"&gt;The barcode value.&lt;/param&gt;   
            	Private Shared Function GenerateBarcode(structuredAppend As PDF417StructuredAppendCharacter, barcodeValue As String) As BitmapSource   
            		Dim writer As New BarcodeWriter()   
            		writer.Settings.Barcode = _barcodeType   
            		writer.Settings.ValueItems = New ValueItemBase() {structuredAppend, New TextValueItem(barcodeValue)}   
            		Return writer.GetBarcodeAsBitmapSource()   
            	End Function   
               
            	''' &lt;summary&gt;   
            	''' Reconstructs the data files.   
            	''' &lt;/summary&gt;   
            	''' &lt;param name="barcodeImages"&gt;The barcode images.&lt;/param&gt;   
            	''' &lt;returns&gt;Dictonary (fileId -&gt; DataFile) that contaions recontructed data files.&lt;/returns&gt;   
            	Private Shared Function ReconstructDataFiles(barcodeImages As List(Of BitmapSource)) As Dictionary(Of String, String)   
            		' create barcode reader   
            		Using reader As New BarcodeReader()   
            			reader.Settings.ScanBarcodeTypes = _barcodeType   
               
            			' Dictionary: FileId -&gt; (symbolPosition -&gt; barcodeValue)   
            			Dim recognizeBarcodes As New Dictionary(Of String, Dictionary(Of Integer, String))()   
               
            			' for each barcode image   
            			For i As Integer = 0 To barcodeImages.Count - 1   
            				' recognize barcode   
            				Console.WriteLine(String.Format("Recognize image {0}...", i + 1))   
            				Dim info As IBarcodeInfo = reader.ReadBarcodes(barcodeImages(i))(0)   
            				Dim valueItems As ValueItemBase() = info.ValueItems   
               
            				' structured append character   
            				Dim saCharacter As PDF417StructuredAppendCharacter = DirectCast(valueItems(0), PDF417StructuredAppendCharacter)   
               
            				' barcode value   
            				info.ShowNonDataFlagsInValue = False   
            				Dim barcodeValue As String = info.Value   
               
            				' show information about recognized barcode   
            				Console.WriteLine(String.Format("  Value   : {0}", barcodeValue))   
            				Console.WriteLine(String.Format("  Symbol  : {0} of {1}", saCharacter.SymbolPosition, saCharacter.SymbolCount))   
            				Console.WriteLine(String.Format("  File ID : {0}", saCharacter.FileID))   
            				If saCharacter.FileName IsNot Nothing Then   
            					Console.WriteLine(String.Format("  FileName: {0}", saCharacter.FileName))   
            				End If   
            				Console.WriteLine()   
               
            				' add barcode value to recognizeBarcodes table   
            				Dim positionsToDataFileParts As Dictionary(Of Integer, String)   
            				If Not recognizeBarcodes.TryGetValue(saCharacter.FileID, positionsToDataFileParts) Then   
            					positionsToDataFileParts = New Dictionary(Of Integer, String)()   
            					recognizeBarcodes(saCharacter.FileID) = positionsToDataFileParts   
            				End If   
            				positionsToDataFileParts.Add(saCharacter.SymbolPosition, barcodeValue)   
            			Next   
               
            			' reconstruct data files   
            			Dim dataFiles As New Dictionary(Of String, String)()   
            			For Each fileId As String In recognizeBarcodes.Keys   
            				Dim positionsToDataFileParts As Dictionary(Of Integer, String) = recognizeBarcodes(fileId)   
               
            				' symbol positions   
            				Dim positions As Integer() = New Integer(positionsToDataFileParts.Count - 1) {}   
            				positionsToDataFileParts.Keys.CopyTo(positions, 0)   
               
            				' data file parts   
            				Dim dataFileParts As String() = New String(positionsToDataFileParts.Count - 1) {}   
            				positionsToDataFileParts.Values.CopyTo(dataFileParts, 0)   
               
            				' sort data file parts by symbol posiotions   
            				Array.Sort(positions, dataFileParts)   
               
            				' merge data file parts   
            				Dim dataFile As New StringBuilder()   
            				For Each dataFilePart As String In dataFileParts   
            					dataFile.Append(dataFilePart)   
            				Next   
            				dataFiles(fileId) = dataFile.ToString()   
            			Next   
               
            			Return dataFiles   
            		End Using   
            	End Function   
            End Class   
               
            ' This code example produces the following output:    
            '   
            'Recognize image 1...   
            '  Value   : [Part 3 of file 2]   
            '  Symbol  : 3 of 3   
            '  File ID : 002   
            '   
            'Recognize image 2...   
            '  Value   : [Part 1 of file 3]   
            '  Symbol  : 1 of 3   
            '  File ID : 003   
            '  FileName: DataFile3   
            '   
            'Recognize image 3...   
            '  Value   : [Part 2 of file 3]   
            '  Symbol  : 2 of 3   
            '  File ID : 003   
            '   
            'Recognize image 4...   
            '  Value   : [Part 1 of file 1]   
            '  Symbol  : 1 of 3   
            '  File ID : 001   
            '  FileName: DataFile1   
            '   
            'Recognize image 5...   
            '  Value   : [Part 2 of file 1]   
            '  Symbol  : 2 of 3   
            '  File ID : 001   
            '   
            'Recognize image 6...   
            '  Value   : [Part 3 of file 1]   
            '  Symbol  : 3 of 3   
            '  File ID : 001   
            '   
            'Recognize image 7...   
            '  Value   : [Part 1 of file 2]   
            '  Symbol  : 1 of 3   
            '  File ID : 002   
            '  FileName: DataFile2   
            '   
            'Recognize image 8...   
            '  Value   : [Part 2 of file 2]   
            '  Symbol  : 2 of 3   
            '  File ID : 002   
            '   
            'Recognize image 9...   
            '  Value   : [Part 3 of file 3]   
            '  Symbol  : 3 of 3   
            '  File ID : 003   
            '   
            'Reconstructed data files:   
            'File ID  : 002   
            'Data File: [Part 1 of file 2][Part 2 of file 2][Part 3 of file 2]   
            '   
            'File ID  : 003   
            'Data File: [Part 1 of file 3][Part 2 of file 3][Part 3 of file 3]   
            '   
            'File ID  : 001   
            'Data File: [Part 1 of file 1][Part 2 of file 1][Part 3 of file 1]   
            '   
               
            
            </code>
            <code lang="C#">
            using System;
            using System.Collections.Generic;
            using System.Text;
            using System.Windows.Media.Imaging;
            
            using Vintasoft.WpfBarcode;
            using Vintasoft.WpfBarcode.BarcodeInfo;
            
            class PDF417StructuredAppendCharacterExample
            {
                /// &lt;summary&gt;
                /// The barcode type (PDF417, PDF417Compact or MicroPDF417).
                /// &lt;/summary&gt;
                static BarcodeType _barcodeType = BarcodeType.PDF417;
            
                /// &lt;summary&gt;
                /// Splits 3 files into 9 parts (each file into 3 parts), creates barcodes from 9 parts,
                /// reorders barcodes, recognizes barcodes and restores content of 3 files.
                /// &lt;/summary&gt;
                public static void Test()
                {
                    // count of data files
                    int fileCount = 3;
            
                    // count of parts in data file
                    int symbolCount = 3;
            
                    // split data files to symbols
                    List&lt;BitmapSource&gt; barcodeImages = new List&lt;BitmapSource&gt;();
                    for (int i = 0; i &lt; fileCount; i++)
                    {
                        // file ID - series of triplets 000..899
                        string fileId = (i + 1).ToString().PadLeft(3, '0');
                        
                        // split each data file to "symbolCount" symbols
                        for (int j = 0; j &lt; symbolCount; j++)
                        {
                            // create structured append character
                            PDF417StructuredAppendCharacter structureAppendCharacter =
                                new PDF417StructuredAppendCharacter(j + 1, symbolCount, fileId);
                            
                            // add FileName information to the first symbol of data file
                            if (j == 0)
                                structureAppendCharacter.FileName = string.Format("DataFile{0}", i + 1);
                            
                            // barcode value
                            string symbolValue = string.Format("[Part {0} of file {1}]", j + 1, i + 1);
            
                            // generate barcode image                
                            barcodeImages.Add(GenerateBarcode(structureAppendCharacter, symbolValue));
                        }
                    }
            
            
                    // resort barcode images
                    barcodeImages.Reverse();
                    barcodeImages.Reverse(0, barcodeImages.Count / 2);
                    barcodeImages.Reverse(barcodeImages.Count / 3, (barcodeImages.Count / 3) * 2);
            
            
                    // recognize all barcodes and reconstruct data files
                    Dictionary&lt;string, string&gt; dataFiles = ReconstructDataFiles(barcodeImages);
            
                    // print reconstructed data files
                    Console.WriteLine("Reconstructed data files:");
                    foreach (string fileId in dataFiles.Keys)
                    {
                        Console.WriteLine(string.Format("File ID  : {0}", fileId));
                        Console.WriteLine(string.Format("Data File: {0}", dataFiles[fileId]));
                        Console.WriteLine();
                    }
                }
            
                /// &lt;summary&gt;
                /// Generates the barcode image.
                /// &lt;/summary&gt;
                /// &lt;param name="structuredAppend"&gt;The structured append character.&lt;/param&gt;
                /// &lt;param name="barcodeValue"&gt;The barcode value.&lt;/param&gt;
                private static BitmapSource GenerateBarcode(
                    PDF417StructuredAppendCharacter structuredAppend,
                    string barcodeValue)
                {
                    BarcodeWriter writer = new BarcodeWriter();
                    writer.Settings.Barcode = _barcodeType;
                    writer.Settings.ValueItems = new ValueItemBase[] { 
                        structuredAppend, new TextValueItem(barcodeValue) };
                    return writer.GetBarcodeAsBitmapSource();
                }
            
                /// &lt;summary&gt;
                /// Reconstructs the data files.
                /// &lt;/summary&gt;
                /// &lt;param name="barcodeImages"&gt;The barcode images.&lt;/param&gt;
                /// &lt;returns&gt;Dictonary (fileId -&gt; DataFile) that contaions recontructed data files.&lt;/returns&gt;
                private static Dictionary&lt;string, string&gt; ReconstructDataFiles(List&lt;BitmapSource&gt; barcodeImages)
                {
                    // create barcode reader
                    using (BarcodeReader reader = new BarcodeReader())
                    {
                        reader.Settings.ScanBarcodeTypes = _barcodeType;
            
                        // Dictionary: FileId -&gt; (symbolPosition -&gt; barcodeValue)
                        Dictionary&lt;string, Dictionary&lt;int, string&gt;&gt; recognizeBarcodes =
                            new Dictionary&lt;string, Dictionary&lt;int, string&gt;&gt;();
            
                        // for each barcode image
                        for (int i = 0; i &lt; barcodeImages.Count; i++)
                        {
                            // recognize barcode
                            Console.WriteLine(string.Format("Recognize image {0}...", i + 1));
                            IBarcodeInfo info = reader.ReadBarcodes(barcodeImages[i])[0];
                            ValueItemBase[] valueItems = info.ValueItems;
            
                            // structured append character
                            PDF417StructuredAppendCharacter saCharacter = (PDF417StructuredAppendCharacter)valueItems[0];
            
                            // barcode value
                            info.ShowNonDataFlagsInValue = false;
                            string barcodeValue = info.Value;
            
                            // show information about recognized barcode
                            Console.WriteLine(string.Format("  Value   : {0}", barcodeValue));
                            Console.WriteLine(string.Format("  Symbol  : {0} of {1}", saCharacter.SymbolPosition, saCharacter.SymbolCount));
                            Console.WriteLine(string.Format("  File ID : {0}", saCharacter.FileID));
                            if (saCharacter.FileName != null)
                                Console.WriteLine(string.Format("  FileName: {0}", saCharacter.FileName));
                            Console.WriteLine();
            
                            // add barcode value to recognizeBarcodes table
                            Dictionary&lt;int, string&gt; positionsToDataFileParts;
                            if (!recognizeBarcodes.TryGetValue(saCharacter.FileID, out positionsToDataFileParts))
                            {
                                positionsToDataFileParts = new Dictionary&lt;int, string&gt;();
                                recognizeBarcodes[saCharacter.FileID] = positionsToDataFileParts;
                            }
                            positionsToDataFileParts.Add(saCharacter.SymbolPosition, barcodeValue);
                        }
            
                        // reconstruct data files
                        Dictionary&lt;string, string&gt; dataFiles = new Dictionary&lt;string, string&gt;();
                        foreach (string fileId in recognizeBarcodes.Keys)
                        {
                            Dictionary&lt;int, string&gt; positionsToDataFileParts = recognizeBarcodes[fileId];
            
                            // symbol positions
                            int[] positions = new int[positionsToDataFileParts.Count];
                            positionsToDataFileParts.Keys.CopyTo(positions, 0);
            
                            // data file parts
                            string[] dataFileParts = new string[positionsToDataFileParts.Count];
                            positionsToDataFileParts.Values.CopyTo(dataFileParts, 0);
            
                            // sort data file parts by symbol posiotions
                            Array.Sort(positions, dataFileParts);
            
                            // merge data file parts
                            StringBuilder dataFile = new StringBuilder();
                            foreach (string dataFilePart in dataFileParts)
                                dataFile.Append(dataFilePart);
                            dataFiles[fileId] = dataFile.ToString();
                        }
            
                        return dataFiles;
                    }
                }
            }
            
            /* This code example produces the following output: 
            
            Recognize image 1...
              Value   : [Part 3 of file 2]
              Symbol  : 3 of 3
              File ID : 002
            
            Recognize image 2...
              Value   : [Part 1 of file 3]
              Symbol  : 1 of 3
              File ID : 003
              FileName: DataFile3
            
            Recognize image 3...
              Value   : [Part 2 of file 3]
              Symbol  : 2 of 3
              File ID : 003
            
            Recognize image 4...
              Value   : [Part 1 of file 1]
              Symbol  : 1 of 3
              File ID : 001
              FileName: DataFile1
            
            Recognize image 5...
              Value   : [Part 2 of file 1]
              Symbol  : 2 of 3
              File ID : 001
            
            Recognize image 6...
              Value   : [Part 3 of file 1]
              Symbol  : 3 of 3
              File ID : 001
            
            Recognize image 7...
              Value   : [Part 1 of file 2]
              Symbol  : 1 of 3
              File ID : 002
              FileName: DataFile2
            
            Recognize image 8...
              Value   : [Part 2 of file 2]
              Symbol  : 2 of 3
              File ID : 002
            
            Recognize image 9...
              Value   : [Part 3 of file 3]
              Symbol  : 3 of 3
              File ID : 003
            
            Reconstructed data files:
            File ID  : 002
            Data File: [Part 1 of file 2][Part 2 of file 2][Part 3 of file 2]
            
            File ID  : 003
            Data File: [Part 1 of file 3][Part 2 of file 3][Part 3 of file 3]
            
            File ID  : 001
            Data File: [Part 1 of file 1][Part 2 of file 1][Part 3 of file 1]
            */
            
            </code>
            </example>
            <seealso cref="T:Vintasoft.WpfBarcode.BarcodeInfo.StructuredAppendCharacter" />
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeInfo.PDF417StructuredAppendCharacter.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.PDF417StructuredAppendCharacter" /> class. 
            </summary>
            <param name="symbolPosition">The position for a symbol in the Structured Append format.</param>
            <param name="symbolCount">The number of symbols in the Structured Append format.</param>
            <param name="fileID">The File ID (series of triplets 000..899).</param>
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeInfo.PDF417StructuredAppendCharacter.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.PDF417StructuredAppendCharacter" /> class. 
            </summary>
            <param name="symbolPosition">The position for a symbol in the Structured Append format.</param>
            <param name="symbolCount">The number of symbols in the Structured Append format.</param>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.PDF417StructuredAppendCharacter.FileID">
            <summary>
            Gets a File Identificator.
            </summary>
            <remarks>
            For each related Structured Append symbol, the file ID field contains the same value.
            This ensures that all reassembled
            symbol data belongs to the same distributed file representation.
            </remarks>
            <value>
            Each word in the file ID can have a value between 000 and 899, effectively making 
            the file ID a series of base 900 numbers. Each codeword of the series is transmitted 
            as the 3-digit ASCII representation of its decimal value.
            </value>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.PDF417StructuredAppendCharacter.SymbolCount">
            <summary>
            Gets the number of symbols in the Structured Append format.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.PDF417StructuredAppendCharacter.FileName">
            <summary>
            Gets or sets the File Name optional field.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.PDF417StructuredAppendCharacter.TimeStamp">
            <summary>
            Gets or sets the Time Stamp optional field.
            </summary>
            <remarks>
            Indicates the time stamp on the source file
            expressed as the elapsed time in seconds since 1970:01:01:00:00:00 GMT.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.PDF417StructuredAppendCharacter.Sender">
            <summary>
            Gets or sets the Sender optional field.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.PDF417StructuredAppendCharacter.Addressee">
            <summary>
            Gets or sets the Addressee optional field.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.PDF417StructuredAppendCharacter.FileSize">
            <summary>
            Gets or sets the File Size optional field.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.PDF417StructuredAppendCharacter.Checksum">
            <summary>
            Gets or sets the Checksum optional field.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.PDF417StructuredAppendCharacter.OptionalFields">
            <summary>
            Gets the optional fields dictionary (field designator to field value)
            of PDF417 Structured Append character.
            </summary>
            <value>
            Available field designators and it values discussed 
            <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.PDF417StructuredAppendCharacter">here</see>.
            </value>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeInfo.QRErrorCorrectionLevel">
            <summary>
            Specifies available error correction levels of QR barcode.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.QRErrorCorrectionLevel.L">
            <summary>
            7% recovery capacity.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.QRErrorCorrectionLevel.M">
            <summary>
            15% recovery capacity.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.QRErrorCorrectionLevel.Q">
            <summary>
            25% recovery capacity.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.QRErrorCorrectionLevel.H">
            <summary>
            30% recovery capacity.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeInfo.QRSymbolVersion">
            <summary>
            Specifies available symbol sizes of QR barcode.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.QRSymbolVersion.Undefined">
            <summary>
            Undefined version.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.QRSymbolVersion.Version1">
            <summary>
            21 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.QRSymbolVersion.Version2">
            <summary>
            25 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.QRSymbolVersion.Version3">
            <summary>
            29 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.QRSymbolVersion.Version4">
            <summary>
            33 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.QRSymbolVersion.Version5">
            <summary>
            37 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.QRSymbolVersion.Version6">
            <summary>
            41 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.QRSymbolVersion.Version7">
            <summary>
            45 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.QRSymbolVersion.Version8">
            <summary>
            49 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.QRSymbolVersion.Version9">
            <summary>
            53 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.QRSymbolVersion.Version10">
            <summary>
            57 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.QRSymbolVersion.Version11">
            <summary>
            61 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.QRSymbolVersion.Version12">
            <summary>
            65 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.QRSymbolVersion.Version13">
            <summary>
            69 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.QRSymbolVersion.Version14">
            <summary>
            73 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.QRSymbolVersion.Version15">
            <summary>
            77 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.QRSymbolVersion.Version16">
            <summary>
            81 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.QRSymbolVersion.Version17">
            <summary>
            85 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.QRSymbolVersion.Version18">
            <summary>
            89 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.QRSymbolVersion.Version19">
            <summary>
            93 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.QRSymbolVersion.Version20">
            <summary>
            97 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.QRSymbolVersion.Version21">
            <summary>
            101 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.QRSymbolVersion.Version22">
            <summary>
            105 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.QRSymbolVersion.Version23">
            <summary>
            109 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.QRSymbolVersion.Version24">
            <summary>
            113 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.QRSymbolVersion.Version25">
            <summary>
            117 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.QRSymbolVersion.Version26">
            <summary>
            121 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.QRSymbolVersion.Version27">
            <summary>
            125 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.QRSymbolVersion.Version28">
            <summary>
            129 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.QRSymbolVersion.Version29">
            <summary>
            133 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.QRSymbolVersion.Version30">
            <summary>
            137 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.QRSymbolVersion.Version31">
            <summary>
            141 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.QRSymbolVersion.Version32">
            <summary>
            145 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.QRSymbolVersion.Version33">
            <summary>
            149 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.QRSymbolVersion.Version34">
            <summary>
            153 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.QRSymbolVersion.Version35">
            <summary>
            157 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.QRSymbolVersion.Version36">
            <summary>
            161 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.QRSymbolVersion.Version37">
            <summary>
            165 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.QRSymbolVersion.Version38">
            <summary>
            169 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.QRSymbolVersion.Version39">
            <summary>
            173 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.QRSymbolVersion.Version40">
            <summary>
            177 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.QRSymbolVersion.VersionM1">
            <summary>
            11 Modules at side (Micro QR).
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.QRSymbolVersion.VersionM2">
            <summary>
            13 Modules at side (Micro QR).
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.QRSymbolVersion.VersionM3">
            <summary>
            15 Modules at side (Micro QR).
            </summary>        
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.QRSymbolVersion.VersionM4">
            <summary>
            17 Modules at side (Micro QR).
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeInfo.IQRValueItem">
            <summary>
            Specification for a value item of QR barcode.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.IQRValueItem.Mode">
            <summary>
            Returns a encoding mode of data.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeInfo.QRBinaryValueItem">
            <summary>
            Contains information about binary value item of QR barcode.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeInfo.BinaryValueItem">
            <summary>
            Contaisn information about the binary(byte) data of 2D barcode.
            </summary>
            <example>
            Please see example <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.ValueItemBase">here</see>.    
            </example>
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeInfo.BinaryValueItem.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.BinaryValueItem" /> class. 
            </summary>
            <param name="value">Binary data as byte array.</param>
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeInfo.BinaryValueItem.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.BinaryValueItem" /> class. 
            </summary>
            <param name="value">Binary data as string. String to byte array converted
            using the <see cref="P:Vintasoft.WpfBarcode.BarcodeInfo.BinaryValueItem.TextEncoding" /> encoding.</param>
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeInfo.BinaryValueItem.ToString">
            <summary> 
             Converts the value item of this instance to its equivalent string.
             </summary>
             <returns>String representation of this value item.</returns>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.BinaryValueItem.Value">
            <summary>
            Returns a value of byte data.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.BinaryValueItem.TextEncoding">
            <summary>
            Gets or sets text encoding which must be used for converting data into the string.
            </summary>
            <value>
            not <b>null</b> - text encoding used for converting string to a binary data;
            <b>null</b> - text encoding is selected automatically.
            </value>
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeInfo.QRBinaryValueItem.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.QRBinaryValueItem" /> class. 
            </summary>
            <param name="value">value of byte data.</param>
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeInfo.QRBinaryValueItem.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.QRBinaryValueItem" /> class. 
            </summary>
            <param name="value">value converts to byte data using <see cref="P:Vintasoft.WpfBarcode.BarcodeInfo.BinaryValueItem.TextEncoding" /> encoding.</param>
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeInfo.QRBinaryValueItem.ToString">
            <summary>
            Converts the value item of this instance to its equivalent string, 
            using encoding <see cref="P:Vintasoft.WpfBarcode.BarcodeInfo.BinaryValueItem.TextEncoding" />.
            </summary>
            <returns>String representation of this value item.</returns>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.QRBinaryValueItem.Mode">
            <summary>
            Returns an encoding mode of data.
            </summary>
            <value>
            This property always returns a <see cref="F:Vintasoft.WpfBarcode.BarcodeInfo.QREncodingMode.Byte" />.
            </value>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.QRBinaryValueItem.TestValueToKanjiEncoding">
            <summary>
            Gets or sets a value indicating whether the barcode reader must detect
            the barcode data value encoded using Kanji(Shift_JIS) encoding.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeInfo.QREncodingMode">
            <summary>
            Specifies available data encoding modes of QR barcode.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.QREncodingMode.Undefined">
            <summary>
            Undefined.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.QREncodingMode.Numeric">
            <summary>
            Numeric mode.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.QREncodingMode.Alphanumeric">
            <summary>
            Alphanumeric mode.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.QREncodingMode.Byte">
            <summary>
            Byte mode.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.QREncodingMode.Kanji">
            <summary>
            Kanji mode.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeInfo.QRStructuredAppendCharacter">
            <summary>
            Contains information about the QR Structured Append non-data character.
            </summary>
            <example>
            Please see example <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.StructuredAppendCharacter">here</see>.
            </example>
            <seealso cref="T:Vintasoft.WpfBarcode.BarcodeInfo.StructuredAppendCharacter" />
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeInfo.QRStructuredAppendCharacter.#ctor(System.Int32,System.Int32,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.QRStructuredAppendCharacter" /> class. 
            </summary>
            <param name="parityData">The Parity Data. Compute Parity Data using method <see cref="M:Vintasoft.WpfBarcode.BarcodeInfo.QRStructuredAppendCharacter.CaluculateParityData(System.String)" />.</param>
            <param name="symbolPosition">The position for a symbol in the Structured Append format.</param>
            <param name="symbolCount">The number of symbols in the Structured Append format.</param>
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeInfo.QRStructuredAppendCharacter.CaluculateParityData(System.String)">
            <summary>
            Calcualtes the parity data.
            </summary>
            <param name="barcodeValue">Original barcode value before division into symbol blocks.</param>
            <returns>The parity data.</returns>
            <remarks>
            The parity data is a value obtained by XORing byte by byte 
            the byte values of all the original input data before division into symbol
            blocks.        
            </remarks>
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeInfo.QRStructuredAppendCharacter.CaluculateParityData(System.Byte[])">
            <summary>
            Calcualtes the parity data.
            </summary>
            <param name="barcodeValue">Original barcode value before division into symbol blocks.</param>
            <returns>The parity data.</returns>
            <remarks>
            The parity data is a value obtained by XORing byte by byte 
            the byte values of all the original input data before division into symbol
            blocks.        
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.QRStructuredAppendCharacter.ParityData">
            <summary>
            Gets a Parity Data.
            </summary>
            <remarks>
            The parity data is a value obtained by XORing byte by byte 
            the byte values of all the original input data before division into symbol
            blocks.        
            </remarks>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeInfo.QRTextValueItem">
            <summary>
            Contains information about text value of QR barcode.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeInfo.QRTextValueItem.#ctor(System.String,Vintasoft.WpfBarcode.BarcodeInfo.QREncodingMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.QRTextValueItem" /> class. 
            </summary>
            <param name="value">value of text data.</param>
            <param name="encodingMode">encoding mode.</param>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.QRTextValueItem.Mode">
            <summary>
            Returns a data mode.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.QRTextValueItem.ShiftJISEncoding">
            <summary>
            Gets or sets the Shift_JIS encoding.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeInfo.BarcodeSubsetInfo">
            <summary>
            Contains information about recognized barcode, which is the barcode symbology subset.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeInfo.BarcodeSubsetInfo.#ctor(Vintasoft.WpfBarcode.IBarcodeInfo,Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubset,Vintasoft.WpfBarcode.BarcodeInfo.ValueItemBase[])">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.BarcodeSubsetInfo" /> class. 
            </summary>
            <param name="sourceInfo">Information about source recognized barcode.</param>
            <param name="barcodeSubset">Barcode symbology subset.</param>
            <param name="value">Barcode value.</param>
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeInfo.BarcodeSubsetInfo.CompareTo(System.Object)">
            <summary>
            Compares using the <see cref="P:Vintasoft.WpfBarcode.BarcodeInfo.BarcodeInfoBase.Region">Region</see> center.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.BarcodeSubsetInfo.BarcodeSubset">
            <summary>
            Gets an information about barcode symbology subset.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.BarcodeSubsetInfo.BaseBarcodeInfo">
            <summary>
            Gets a base barcode info.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.BarcodeSubsetInfo.ReadingQuality">
            <summary>
            Shows what part of barcode scan lines are correct.
            </summary>
            <value>Possible values: from 0 to 1.</value>
            <remarks>
            <b>This property has correct value</b> if value of the
            <see cref="P:Vintasoft.WpfBarcode.ReaderSettings.ScanInterval" /> is set to 1.<br />
            <br />
            Barcode is ideal if value of this property is close to 1.<br />
            Barcode has more than a half of scan lines damaged if value of this
            property is less than 0.5.<br />
            <br />
            This property has no relation to the barcode string value,
            it only shows how many scan lines of barcode are correct.<br />
            Use the <see cref="P:Vintasoft.WpfBarcode.IBarcodeInfo.Confidence" /> property if you want to
            know confidence of barcode.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.BarcodeSubsetInfo.BarcodeType">
            <summary>
            Gets a barcode symbology type.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.BarcodeSubsetInfo.Value">
            <summary>
            Gets a barcode string.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.BarcodeSubsetInfo.ShowNonDataFlagsInValue">
            <summary>
            Gets a value that indicating whether 
            <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags">non-data flags</see> or 
            <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.EciCharacterValueItem">ECI character</see> is visible
            in <see cref="P:Vintasoft.WpfBarcode.BarcodeInfo.BarcodeInfoBase.Value">barcode value</see>.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.BarcodeSubsetInfo.ValueItems">
            <summary>
            Gets an array of value items of decoded barcode.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.BarcodeSubsetInfo.Region">
            <summary>
            Gets a barcode region.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.BarcodeSubsetInfo.Direction">
            <summary>
            Gets a scan direction in which the barcode was found.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.BarcodeSubsetInfo.Confidence">
            <summary>
            Gets or sets a barcode confidence, in percents.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.BarcodeSubsetInfo.Threshold">
            <summary>
            Gets a threshold value of barcode.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.BarcodeSubsetInfo.SymbolComponents">
            <summary>
            Gets an array of symbol components from which the barcode symbol is composed.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubset">
            <summary>
            An abstract base class that defines the barcode symbology subset.
            </summary>
            <remarks>
            This class must be used if it is necessary to define
            the barcode symbology subset of some <see cref="T:Vintasoft.WpfBarcode.BarcodeType">basic barcode type</see>.<br />
            Here are examples of possible barcode symbology subsets:
            <ul>
            <li>Code39 barcodes with checksum modulo 256</li>
            <li>Code128 barcodes, which contain 10 symbols in which 6 first symbols are digits</li>
            <li>Code39 barcodes, which have height more than specified value</li>
            <li>DataMatrix barcodes, which have values coded in specified format</li>
            </ul>
            <br />
            For defining the barcode symbology subset it is necessary to override
            the <see cref="M:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubset.Decode(Vintasoft.WpfBarcode.IBarcodeInfo)" /> method, which defines
            the algorithm for converting the source barcode symbology value into
            the barcode symbology subset value.<br />
            The <see cref="M:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubset.Encode(Vintasoft.WpfBarcode.BarcodeInfo.ValueItemBase,Vintasoft.WpfBarcode.WriterSettings)" /> method
            also can be overriden but this is not obligatory, this method defines the algorithm
            for converting the barcode symbology subset value into the source barcode symbology value.<br />
            <br />
            Usage of the barcode symbology subsets allows to classify the searched barcode as a barcode
            from the barcode symbology subset during the barcode recognition and this can greatly increase
            the barcode recognition speed and allows to use
            the <see cref="P:Vintasoft.WpfBarcode.ReaderSettings.ExpectedBarcodes" /> property for specifying
            the expected barcode count.<br />
            <br />
            VintaSoft Barcode .NET SDK has the following built-in barcode symbology subsets:
            <ul>
            <li><see cref="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.Code39Extended">Code 39 Extended</see></li>
            <li><see cref="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.Code32">Code 32</see></li>
            <li><see cref="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.GS1_128">GS1-128</see></li>
            <li><see cref="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.GS1DataBar">GS1 DataBar</see></li>
            <li><see cref="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.GS1DataBarStacked">GS1 DataBar Stacked</see></li>
            <li><see cref="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.GS1DataBarExpanded">GS1 DataBar Expanded</see></li>
            <li><see cref="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.GS1DataBarExpandedStacked">GS1 DataBar Expanded Stacked</see></li>
            <li><see cref="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.GS1DataBar">GS1 DataBar Limited</see></li>
            <li><see cref="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.GS1QR">GS1 QR</see></li>
            <li><see cref="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.GS1DataMatrix">GS1 DataMatrix</see></li>
            <li><see cref="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.GS1Aztec">GS1 Aztec (value in GS1 System format)</see></li>
            <li><see cref="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.MailmarkCmdmType7">Mailmark CMDM Type 7</see></li>
            <li><see cref="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.MailmarkCmdmType9">Mailmark CMDM Type 9</see></li>
            <li><see cref="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.MailmarkCmdmType29">Mailmark CMDM Type 29</see></li>
            <li><see cref="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.SSCC18">SSCC-18</see></li>
            <li><see cref="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.FedExGround96">FedEx Ground 96</see></li>
            <li><see cref="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.VicsBol">VICS BOL</see></li>
            <li><see cref="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.VicsScacPro">VICS SCAC PRO</see></li>
            <li><see cref="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.ITF14">ITF-14</see></li>
            <li><see cref="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.VIN">VIN</see></li>
            <li><see cref="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.PZN">PZN</see></li>
            <li><see cref="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.PPN">PPN</see></li>
            <li><see cref="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.DhlAwb">DHL AWB</see></li>
            <li><see cref="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.OPC">OPC</see></li>
            <li><see cref="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.DeutschePostIdentcode">Deutsche Post Identcode</see></li>
            <li><see cref="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.DeutschePostLeitcode">Deutsche Post Leitcode</see></li>
            <li><see cref="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.JAN13">JAN-13</see></li>
            <li><see cref="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.JAN13Plus2">JAN-13 +2</see></li>
            <li><see cref="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.JAN13Plus5">JAN-13 +5</see></li>
            <li><see cref="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.JAN8">JAN-8</see></li>
            <li><see cref="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.JAN8Plus2">JAN-8 +2</see></li>
            <li><see cref="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.JAN8Plus5">JAN-8 +5</see></li>
            <li><see cref="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.ISBN">ISBN</see></li>
            <li><see cref="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.ISBNPlus2">ISBN +2</see></li>
            <li><see cref="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.ISBNPlus5">ISBN +5</see></li>
            <li><see cref="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.ISSN">ISSN</see></li>
            <li><see cref="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.ISSNPlus2">ISSN +2</see></li>
            <li><see cref="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.ISSNPlus5">ISSN +5</see></li>
            <li><see cref="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.ISMN">ISMN</see></li>
            <li><see cref="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.ISMNPlus2">ISMN +2</see></li>
            <li><see cref="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.ISMNPlus5">ISMN +5</see></li>
            <li><see cref="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.EANVelocity">EAN-Velocity</see></li>
            <li><see cref="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.SwissPostParcel">Swiss PostParcel</see></li>
            <li><see cref="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.NumlyNumber">Numly Number</see></li>
            <li><see cref="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.XFACompressedAztec">XFA Compressed Aztec</see></li>
            <li><see cref="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.XFACompressedDataMatrix">XFA Compressed DataMatrix</see></li>
            <li><see cref="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.XFACompressedPDF417">XFA Compressed PDF417</see></li>
            <li><see cref="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.XFACompressedQRCode">XFA Compressed QR Code</see></li>
            </ul>
            </remarks>
            <seealso cref="P:Vintasoft.WpfBarcode.ReaderSettings.ScanBarcodeSubsets" />
            <example>
            This example shows how to define a subset of Code39 barcodes with checksum modulo 256.
            <code lang="VB.NET">   
            Imports System.Windows.Media.Imaging   
               
            Imports Vintasoft.WpfBarcode.SymbologySubsets   
            Imports Vintasoft.WpfBarcode   
            Imports Vintasoft.WpfBarcode.BarcodeInfo   
               
            ''' &lt;summary&gt;   
            ''' Test that demonstrates how to generate image with Code39 barcode with checksum modulo 256 and   
            ''' how to recognize Code39 barcode with checksum modulo 256 on the image.   
            ''' &lt;/summary&gt;   
            Public NotInheritable Class Code39Checksum256SymbologyTest   
            	Private Sub New()   
            	End Sub   
               
            	''' &lt;summary&gt;   
            	''' Run the test.   
            	''' &lt;/summary&gt;   
            	Public Shared Sub Test()   
            		Test("TEST12345")   
            		Test("ABCDEF")   
            		Test("AB")   
            		Test("123456789")   
            	End Sub   
               
            	''' &lt;summary&gt;   
            	''' Run the test for a single barcode value.   
            	''' &lt;/summary&gt;   
            	Public Shared Sub Test(value As String)   
            		' create an object that defines Code39 barcodes with checksum modulo 256   
            		Dim code39Checksum256 As New Code39Checksum256Symbology()   
               
            		' create the barcode writer   
            		Dim writer As New BarcodeWriter()   
               
            		' specify that writer must generate Code39 barcode AND   
            		' set the barcode value with checksum   
                    code39Checksum256.Encode(value, writer.Settings)   
               
            		' create image with Code39 barcode with checksum   
            		Dim imageWithCode39BarcodeWithChecksum As BitmapSource = writer.GetBarcodeAsBitmapSource()   
               
            		' specify that writer must generate Code39 barcode   
            		writer.Settings.Barcode = BarcodeType.Code39   
               
            		' set the barcode value without checksum   
            		writer.Settings.Value = value   
               
            		' create image with barcode without checksum   
            		Dim imageWithCode39Barcode As BitmapSource = writer.GetBarcodeAsBitmapSource()   
               
            		' create the barcode reader   
            		Using reader As New BarcodeReader()   
            			' specify that reader must search for Code39 with checksum only   
               
            			reader.Settings.ScanBarcodeTypes = BarcodeType.None   
            			reader.Settings.ScanBarcodeSubsets.Add(code39Checksum256)   
               
            			' read barcode from image with barcode with checksum   
            			Dim infos As IBarcodeInfo() = reader.ReadBarcodes(imageWithCode39BarcodeWithChecksum)   
               
            			' show information about found barcode   
               
            			Dim subsetInfo As BarcodeSubsetInfo = DirectCast(infos(0), BarcodeSubsetInfo)   
            			Console.WriteLine("Detected '{0}' barcode, value = {1}, base value = {2}.", subsetInfo.BarcodeSubset.Name, subsetInfo.Value, subsetInfo.BaseBarcodeInfo.Value)   
               
               
            			' read barcodes from image with barcode without checksum   
            			infos = reader.ReadBarcodes(imageWithCode39Barcode)   
            			' if barcode is found   
            			If infos.Length &lt;&gt; 0 Then   
            				' throw exception   
            				Throw New ApplicationException()   
            			End If   
            		End Using   
            	End Sub   
            End Class   
               
            ''' &lt;summary&gt;   
            ''' Represents the barcode symbology subset that includes Code39 barcodes with checksum modulo 256.   
            ''' &lt;/summary&gt;   
            Public Class Code39Checksum256Symbology   
            	Inherits BarcodeSymbologySubset   
               
            	#Region "Properties"   
               
            	''' &lt;summary&gt;   
            	''' Gets a name of barcode symbology subset.   
            	''' &lt;/summary&gt;   
            	Public Overrides ReadOnly Property Name() As String   
            		Get   
            			Return "Code39 CH256"   
            		End Get   
            	End Property   
               
            	''' &lt;summary&gt;   
            	''' Gets a base barcode symbology type of this barcode symbology subset.   
            	''' &lt;/summary&gt;   
            	Public Overrides ReadOnly Property BaseType() As BarcodeType   
            		Get   
            			Return BarcodeType.Code39   
            		End Get   
            	End Property   
               
            	#End Region   
               
               
               
            	#Region "Methods"   
               
            	''' &lt;summary&gt;   
            	''' Decodes the Code39 barcode value into Code39 barcode value with checksum modulo 256.   
            	''' &lt;/summary&gt;   
            	''' &lt;param name="info"&gt;Code39 barcode value.&lt;/param&gt;   
            	''' &lt;returns&gt;Code39 barcode value with checksum modulo 256.&lt;/returns&gt;   
            	Public Overrides Function Decode(info As IBarcodeInfo) As BarcodeSubsetInfo   
            		If info.Value IsNot Nothing AndAlso info.Value.Length &gt;= 4 Then   
            			' get the barcode checksum   
            			Dim checksum As String = info.Value.Substring(info.Value.Length - 2)   
            			' get the barcode value   
            			Dim value As String = info.Value.Substring(0, info.Value.Length - 2)   
            			' if barcode checksum is correct   
            			If checksum = GenerateChecksum256(value) Then   
            				Dim result As New BarcodeSubsetInfo(info, Me, New TextValueItem(value))   
            				result.Confidence = 100   
            				Return result   
            			End If   
            		End If   
            		Return Nothing   
            	End Function   
               
            	''' &lt;summary&gt;   
            	''' Encodes the Code39 barcode value with checksum modulo 256 into the Code39 barcode value   
            	''' using provided barcode writer settings and   
            	''' saves the source barcode symbology value in the barcode writer settings.   
            	''' &lt;/summary&gt;   
            	''' &lt;param name="value"&gt;Code39 barcode value with checksum modulo 256 to encode.&lt;/param&gt;   
            	''' &lt;param name="settings"&gt;Barcode writer settings.&lt;/param&gt;   
            	Public Overrides Sub Encode(value As ValueItemBase, settings As WriterSettings)   
            		Dim textValue As String = value.ToString()   
            		If textValue.Length &lt; 2 Then   
            			Throw New WriterSettingsException(WriterSettingsExceptionType.ExpectedNSymbolsInBarcodeValue, "minimum two symbols")   
            		End If   
               
            		' specify the barcode symbology type   
            		settings.Barcode = Me.BaseType   
            		' add checksum to the barcode value   
            		settings.Value = String.Format("{0}{1}", textValue, GenerateChecksum256(textValue))   
            	End Sub   
               
            	''' &lt;summary&gt;   
            	''' Calculates simple checksum modulo 256.   
            	''' &lt;/summary&gt;   
            	''' &lt;param name="value"&gt;Text value.&lt;/param&gt;   
            	''' &lt;returns&gt;Checksum in HEX format.&lt;/returns&gt;   
            	Private Shared Function GenerateChecksum256(value As String) As String   
            		Dim checksum As Integer = 0   
            		For i As Integer = 0 To value.Length - 1   
            			Dim symbol As Integer = AscW(value(i)) Mod 39   
            			If i Mod 2 = 0 Then   
            				checksum += symbol   
            			Else   
            				checksum += symbol * 3   
            			End If   
            		Next   
            		checksum = checksum Mod 256   
            		Return checksum.ToString("X2")   
            	End Function   
               
            	#End Region   
               
            End Class   
               
            ' This code example produces the following output:    
            '        
            '   Detected 'Code39 CH256' barcode, value = TEST12345, base value = TEST12345E3.   
            '   Detected 'Code39 CH256' barcode, value = ABCDEF, base value = ABCDEF59.   
            '   Detected 'Code39 CH256' barcode, value = AB, base value = AB6B.   
            '   Detected 'Code39 CH256' barcode, value = 123456789, base value = 123456789EE.   
            '   
            
            </code>
            <code lang="C#">
            using System;
            using System.Windows.Media.Imaging;
            
            using Vintasoft.WpfBarcode.SymbologySubsets;
            using Vintasoft.WpfBarcode;
            using Vintasoft.WpfBarcode.BarcodeInfo;
            
            /// &lt;summary&gt;
            /// Test that demonstrates how to generate image with Code39 barcode with checksum modulo 256 and
            /// how to recognize Code39 barcode with checksum modulo 256 on the image.
            /// &lt;/summary&gt;
            public static class Code39Checksum256SymbologyTest
            {
            
                /// &lt;summary&gt;
                /// Run the test.
                /// &lt;/summary&gt;
                public static void Test()
                {
                    Test("TEST12345");
                    Test("ABCDEF");
                    Test("AB");
                    Test("123456789");
                }
            
                /// &lt;summary&gt;
                /// Run the test for a single barcode value.
                /// &lt;/summary&gt;
                public static void Test(string value)
                {
                    // create an object that defines Code39 barcodes with checksum modulo 256
                    Code39Checksum256Symbology code39Checksum256 = new Code39Checksum256Symbology();
            
                    // create the barcode writer
                    BarcodeWriter writer = new BarcodeWriter();
            
                    // specify that writer must generate Code39 barcode AND
                    // set the barcode value with checksum
                    code39Checksum256.Encode(value, writer.Settings);
            
                    // create image with Code39 barcode with checksum
                    BitmapSource imageWithCode39BarcodeWithChecksum = writer.GetBarcodeAsBitmapSource();
            
                    // specify that writer must generate Code39 barcode
                    writer.Settings.Barcode = BarcodeType.Code39;
            
                    // set the barcode value without checksum
                    writer.Settings.Value = value;
            
                    // create image with barcode without checksum
                    BitmapSource imageWithCode39Barcode = writer.GetBarcodeAsBitmapSource();
            
                    // create the barcode reader
                    using (BarcodeReader reader = new BarcodeReader())
                    {
                        // specify that reader must search for Code39 with checksum only
            
                        reader.Settings.ScanBarcodeTypes = BarcodeType.None;
                        reader.Settings.ScanBarcodeSubsets.Add(code39Checksum256);
            
                        // read barcode from image with barcode with checksum
                        IBarcodeInfo[] infos = reader.ReadBarcodes(imageWithCode39BarcodeWithChecksum);
            
                        // show information about found barcode
            
                        BarcodeSubsetInfo subsetInfo = ((BarcodeSubsetInfo)infos[0]);
                        Console.WriteLine("Detected '{0}' barcode, value = {1}, base value = {2}.",
                            subsetInfo.BarcodeSubset.Name,
                            subsetInfo.Value,
                            subsetInfo.BaseBarcodeInfo.Value);
            
            
                        // read barcodes from image with barcode without checksum
                        infos = reader.ReadBarcodes(imageWithCode39Barcode);
                        // if barcode is found
                        if (infos.Length != 0)
                            // throw exception
                            throw new ApplicationException();
                    }
                }
            }
            
            /// &lt;summary&gt;
            /// Represents the barcode symbology subset that includes Code39 barcodes with checksum modulo 256.
            /// &lt;/summary&gt;
            public class Code39Checksum256Symbology : BarcodeSymbologySubset
            {
            
                #region Properties
            
                /// &lt;summary&gt;
                /// Gets a name of barcode symbology subset.
                /// &lt;/summary&gt;
                public override string Name
                {
                    get
                    {
                        return "Code39 CH256";
                    }
                }
            
                /// &lt;summary&gt;
                /// Gets a base barcode symbology type of this barcode symbology subset.
                /// &lt;/summary&gt;
                public override BarcodeType BaseType
                {
                    get
                    {
                        return BarcodeType.Code39;
                    }
                }
            
                #endregion
            
            
            
                #region Methods
            
                /// &lt;summary&gt;
                /// Decodes the Code39 barcode value into Code39 barcode value with checksum modulo 256.
                /// &lt;/summary&gt;
                /// &lt;param name="info"&gt;Code39 barcode value.&lt;/param&gt;
                /// &lt;returns&gt;Code39 barcode value with checksum modulo 256.&lt;/returns&gt;
                public override BarcodeSubsetInfo Decode(IBarcodeInfo info)
                {
                    if (info.Value != null &amp;&amp; info.Value.Length &gt;= 4)
                    {
                        // get the barcode checksum
                        string checksum = info.Value.Substring(info.Value.Length - 2);
                        // get the barcode value
                        string value = info.Value.Substring(0, info.Value.Length - 2);
                        // if barcode checksum is correct
                        if (checksum == GenerateChecksum256(value))
                        {
                            BarcodeSubsetInfo result = new BarcodeSubsetInfo(info, this, new TextValueItem(value));
                            result.Confidence = 100;
                            return result;
                        }
                    }
                    return null;
                }
            
                /// &lt;summary&gt;
                /// Encodes the Code39 barcode value with checksum modulo 256 into the Code39 barcode value
                /// using provided barcode writer settings and
                /// saves the source barcode symbology value in the barcode writer settings.
                /// &lt;/summary&gt;
                /// &lt;param name="value"&gt;Code39 barcode value with checksum modulo 256 to encode.&lt;/param&gt;
                /// &lt;param name="settings"&gt;Barcode writer settings.&lt;/param&gt;
                public override void Encode(ValueItemBase value, WriterSettings settings)
                {
                    string textValue = value.ToString();
                    if (textValue.Length &lt; 2)
                        throw new WriterSettingsException(
                            WriterSettingsExceptionType.ExpectedNSymbolsInBarcodeValue,
                            "minimum two symbols");
            
                    // specify the barcode symbology type
                    settings.Barcode = this.BaseType;
                    // add checksum to the barcode value
                    settings.Value = string.Format("{0}{1}", textValue, GenerateChecksum256(textValue));
                }
            
                /// &lt;summary&gt;
                /// Calculates simple checksum modulo 256.
                /// &lt;/summary&gt;
                /// &lt;param name="value"&gt;Text value.&lt;/param&gt;
                /// &lt;returns&gt;Checksum in HEX format.&lt;/returns&gt;
                private static string GenerateChecksum256(string value)
                {
                    int checksum = 0;
                    for (int i = 0; i &lt; value.Length; i++)
                    {
                        int symbol = (int)value[i] % 39;
                        if (i % 2 == 0)
                            checksum += symbol;
                        else
                            checksum += symbol * 3;
                    }
                    checksum = checksum % 256;
                    return checksum.ToString("X2");
                }
            
                #endregion
            
            }
            
            /* This code example produces the following output: 
                 
               Detected 'Code39 CH256' barcode, value = TEST12345, base value = TEST12345E3.
               Detected 'Code39 CH256' barcode, value = ABCDEF, base value = ABCDEF59.
               Detected 'Code39 CH256' barcode, value = AB, base value = AB6B.
               Detected 'Code39 CH256' barcode, value = 123456789, base value = 123456789EE.
            */
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubset.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubset" /> class. 
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubset.Decode(Vintasoft.WpfBarcode.IBarcodeInfo)">
            <summary>
            Decodes the source barcode symbology value into the barcode symbology subset value.
            </summary>
            <param name="info">Source barcode symbology value.</param>
            <returns>Barcode symbology subset value.</returns>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubset.Encode(System.String,Vintasoft.WpfBarcode.WriterSettings)">
            <summary>
            Encodes the barcode symbology subset value into the source barcode symbology value
            using provided barcode writer settings and
            saves the source barcode symbology value in the barcode writer settings.
            </summary>
            <param name="value">The barcode symbology subset value to encode.</param>
            <param name="settings">Barcode writer settings.</param>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubset.Encode(Vintasoft.WpfBarcode.BarcodeInfo.ValueItemBase,Vintasoft.WpfBarcode.WriterSettings)">
            <summary>
            Encodes the barcode symbology subset value into the source barcode symbology value
            using provided barcode writer settings and
            saves the source barcode symbology value in the barcode writer settings.
            </summary>
            <param name="value">The barcode symbology subset value to encode.</param>
            <param name="settings">Barcode writer settings.</param>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubset.CreateValue">
            <summary>
            Creates the barcode symbology subset value with default (empty) value.
            </summary>
            <returns>A new barcode symbology subset value with default (empty) value.</returns>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubset.ToString">
            <summary>
            Converts the information about barcode subset of this instance to its equivalent
            string.
            </summary>
            <returns>
            String with information about barcode subset of this instance.
            </returns>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubset.GetSchema">
            <summary>
            Not implemented.
            </summary>
            <returns />
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubset.ReadXml(System.Xml.XmlReader)">
            <summary>
            Deserializes the <see cref="T:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubset" /> from
            a specified <see cref="T:System.Xml.XmlReader" />.
            </summary>
            <param name="reader">The XML reader from which the <see cref="T:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubset" />
            must be serialized.</param>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubset.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Serializes the <see cref="T:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubset" /> to
            a specified <see cref="T:System.Xml.XmlWriter" />.
            </summary>
            <param name="writer">The XML writer to which the <see cref="T:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubset" />
            must be serialized.</param>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubset.Name">
            <summary>
            Gets a name of this barcode symbology subset.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubset.BaseType">
            <summary>
            Gets a base barcode symbology type of this barcode symbology subset.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubset.BaseSubset">
            <summary>
            Gets a base barcode symbology subset of this barcode symbology subset.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets">
            <summary>
            Contains standard barcode symbology subsets.
            </summary>
            <seealso cref="T:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubset" />
            <example>
            Read barcode subsets: please see example <see cref="M:Vintasoft.WpfBarcode.BarcodeReader.ReadBarcodes(System.IO.Stream)">here</see>.<br />
            Write barcode subsets: please see example <see cref="T:Vintasoft.WpfBarcode.BarcodeWriter">here</see>.<br />
            Read and write PPN barcode: please see example <see cref="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.PPN">here</see>.<br />
            <br />
            This example shows how to read GS1-128 barcode from an image:
            <code lang="VB.NET">   
            Public Shared Sub Recognize(image As BitmapSource)   
            	' create the barcode reader   
            	Using reader As New BarcodeReader()   
            		' specify that reader must search for GS1-128 barcodes only   
               
            		reader.Settings.ScanBarcodeTypes = BarcodeType.None   
            		reader.Settings.ScanBarcodeSubsets.Add(BarcodeSymbologySubsets.GS1_128)   
               
            		' recognize barcode on image    
            		Dim infos As IBarcodeInfo() = reader.ReadBarcodes(image)   
               
            		' for each found barcode   
            		For j As Integer = 0 To infos.Length - 1   
            			Dim info As GS1BarcodeInfo = DirectCast(infos(j), GS1BarcodeInfo)   
               
            			' print barcode symbology   
            			Console.WriteLine(info.BarcodeSubset)   
               
            			' print barcode region on image   
            			Console.WriteLine(info.Region.ToString())   
               
            			' print Transmitted data   
            			Console.WriteLine(String.Format("Transmitted data            : {0} ", info.TransmittedData))   
               
            			' print Application identifiers values   
            			Dim printableValue As New StringBuilder()   
            			Dim aiValues As GS1ApplicationIdentifierValue() = info.ApplicationIdentifierValues   
            			For i As Integer = 0 To aiValues.Length - 1   
            				Dim aiValue As GS1ApplicationIdentifierValue = aiValues(i)   
            				Dim ai As GS1ApplicationIdentifier = aiValue.ApplicationIdentifier   
            				Console.WriteLine(String.Format("Application identifier {0}    : {1}", i + 1, ai.ApplicationIdentifier))   
            				Console.WriteLine(String.Format("  Value                     : {0}", aiValue.Value))   
            				Console.WriteLine(String.Format("  Data title                : {0}", ai.DataTitle))   
            				Console.WriteLine(String.Format("  Data content              : {0}", ai.DataContent))   
            				Console.WriteLine(String.Format("  Format                    : {0}", ai.Format))   
            				Console.WriteLine(String.Format("  Is contains decimal point : {0}", ai.IsContainsDecimalPoint))   
            				Console.WriteLine(String.Format("  Is variable length        : {0}", ai.IsVariableLength))   
            				printableValue.Append(aiValue.ToString())   
            			Next   
               
            			' print GS1 printable value   
            			Console.WriteLine("Printable GS1 value: " &amp; printableValue.ToString())   
            			Console.WriteLine()   
            		Next   
            	End Using   
            End Sub
            </code>
            <code lang="C#">
            public static void Recognize(BitmapSource image)
            {
                // create the barcode reader
                using (BarcodeReader reader = new BarcodeReader())
                {
                    // specify that reader must search for GS1-128 barcodes only
            
                    reader.Settings.ScanBarcodeTypes = BarcodeType.None;
                    reader.Settings.ScanBarcodeSubsets.Add(BarcodeSymbologySubsets.GS1_128);
            
                    // recognize barcode on image 
                    IBarcodeInfo[] infos = reader.ReadBarcodes(image);
            
                    // for each found barcode
                    for (int j = 0; j &lt; infos.Length; j++)
                    {
                        GS1BarcodeInfo info = (GS1BarcodeInfo)infos[j];
            
                        // print barcode symbology
                        Console.WriteLine(info.BarcodeSubset);
            
                        // print barcode region on image
                        Console.WriteLine(info.Region.ToString());
            
                        // print Transmitted data
                        Console.WriteLine(string.Format("Transmitted data            : {0} ", info.TransmittedData));
            
                        // print Application identifiers values
                        StringBuilder printableValue = new StringBuilder();
                        GS1ApplicationIdentifierValue[] aiValues = info.ApplicationIdentifierValues;
                        for (int i = 0; i &lt; aiValues.Length; i++)
                        {
                            GS1ApplicationIdentifierValue aiValue = aiValues[i];
                            GS1ApplicationIdentifier ai = aiValue.ApplicationIdentifier;
                            Console.WriteLine(string.Format("Application identifier {0}    : {1}", i + 1, ai.ApplicationIdentifier));
                            Console.WriteLine(string.Format("  Value                     : {0}", aiValue.Value));
                            Console.WriteLine(string.Format("  Data title                : {0}", ai.DataTitle));
                            Console.WriteLine(string.Format("  Data content              : {0}", ai.DataContent));
                            Console.WriteLine(string.Format("  Format                    : {0}", ai.Format));
                            Console.WriteLine(string.Format("  Is contains decimal point : {0}", ai.IsContainsDecimalPoint));
                            Console.WriteLine(string.Format("  Is variable length        : {0}", ai.IsVariableLength));
                            printableValue.Append(aiValue.ToString());
                        }
            
                        // print GS1 printable value
                        Console.WriteLine("Printable GS1 value: " + printableValue.ToString());
                        Console.WriteLine();
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.GS1Aztec">
            <summary>
            Gets the subset of Aztec barcode symbology with value is GS1 System data format.
            </summary>
            <remarks>
            Subset of Aztec barcode symbology.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.GS1_128">
            <summary>
            Gets the GS1-128 (UCC/EAN-128, EAN-128) barcode symbology.
            </summary>
            <remarks>
            Subset of Code 128 barcode symbology.
            </remarks>
            <example>
            Please see example <see cref="T:Vintasoft.WpfBarcode.BarcodeWriter">here</see>.
            </example>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.SSCC18">
            <summary>
            Gets the SSCC-18 barcode symbology.
            </summary>
            <remarks>
            Subset of GS1-128 barcode symbology.
            </remarks>
            <example>
            Please see example <see cref="T:Vintasoft.WpfBarcode.BarcodeWriter">here</see>.
            </example>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.FedExGround96">
            <summary>
            Gets the FedEx Ground 96 barcode symbology.
            </summary>
            <remarks>
            Subset of GS1-128 barcode symbology.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.VicsBol">
            <summary>
            Gets the VICS BOL barcode symbology.
            </summary>
            <remarks>
            Subset of GS1-128 barcode symbology.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.VicsScacPro">
            <summary>
            Gets the VICS SCAC PRO barcode symbology.
            </summary>
            <remarks>
            Subset of GS1-128 barcode symbology.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.GS1DataBar">
            <summary>
            Gets the GS1 DataBar barcode symbology.
            </summary>
            <remarks>
            Subset of RSS-14 barcode symbology.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.ITF14">
            <summary>
            Gets the ITF-14 barcode symbology.
            </summary>
            <remarks>
            Subset of Interlaved 2 of 5 barcode symbology.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.GS1DataBarStacked">
            <summary>
            Gets the GS1 DataBar Stacked barcode symbology.
            </summary>
            <remarks>
            Subset of RSS-14 Stacked barcode symbology.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.GS1DataBarExpanded">
            <summary>
            Gets the GS1 DataBar Expanded barcode symbology.
            </summary>
            <remarks>
            Subset of RSS Expanded barcode symbology.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.GS1DataBarExpandedStacked">
            <summary>
            Gets the GS1 DataBar Expanded Stacked barcode symbology.
            </summary>
            <remarks>
            Subset of RSS Expanded Stacked barcode symbology.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.GS1DataBarLimited">
            <summary>
            Gets the GS1 DataBar Limited barcode symbology.
            </summary>
            <remarks>
            Subset of RSS Limited barcode symbology.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.GS1QR">
            <summary>
            Gets the GS1 QR Code barcode symbology.
            </summary>
            <remarks>
            Subset of QR Code barcode symbology.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.GS1DataMatrix">
            <summary>
            Gets the GS1 DataMatrix barcode symbology.
            </summary>
            <remarks>
            Subset of DataMatrix barcode symbology.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.MailmarkCmdmType7">
            <summary>
            Gets the Royal Mail Mailmark CMDM Type7 2D barcode symbology.
            </summary>
            <remarks>
            Subset of DataMatrix barcode symbology.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.MailmarkCmdmType9">
            <summary>
            Gets the Royal Mail Mailmark CMDM Type9 2D barcode symbology.
            </summary>
            <remarks>
            Subset of DataMatrix barcode symbology.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.MailmarkCmdmType29">
            <summary>
            Gets the Royal Mail Mailmark CMDM Type29 2D barcode symbology.
            </summary>
            <remarks>
            Subset of DataMatrix barcode symbology.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.Code32">
            <summary>
            Gets the Code 32 barcode symbology.
            </summary>
            <remarks>
            Subset of Code 39 barcode symbology.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.VIN">
            <summary>
            Gets the VIN (Vehicle Identification Number) barcode symbology.
            </summary>
            <remarks>
            Subset of Code 39 barcode symbology.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.PZN">
            <summary>
            Gets the PZN (Pharmazentralnummer) barcode symbology.
            </summary>
            <remarks>
            Subset of Code 39 barcode symbology.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.DhlAwb">
            <summary>
            Gets the DHL AWB barcode symbology.
            </summary>
            <remarks>
            Subset of Code 39 barcode symbology.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.Code39Extended">
            <summary>
            Gets the Code 39 Extended barcode symbology.
            </summary>
            <remarks>
            Subset of Code 39 barcode symbology.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.OPC">
            <summary>
            Gets the OPC (Optical Product Code) barcode symbology.
            </summary>
            <remarks>
            Subset of Interlaved 2 of 5 barcode symbology.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.DeutschePostIdentcode">
            <summary>
            Gets the Deutsche Post Identcode barcode symbology.
            </summary>
            <remarks>
            Subset of Interlaved 2 of 5 barcode symbology.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.DeutschePostLeitcode">
            <summary>
            Gets the Deutsche Post Leitcode barcode symbology.
            </summary>
            <remarks>
            Subset of Interlaved 2 of 5 barcode symbology.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.JAN13">
            <summary>
            Gets the JAN-13 barcode symbology.
            </summary>
            <remarks>
            Subset of EAN-13 barcode symbology.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.JAN13Plus5">
            <summary>
            Gets the JAN-13+5 barcode symbology.
            </summary>
            <remarks>
            Subset of EAN-13+5 barcode symbology.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.JAN13Plus2">
            <summary>
            Gets the JAN-13+2 barcode symbology.
            </summary>
            <remarks>
            Subset of EAN-13+2 barcode symbology.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.JAN8">
            <summary>
            Gets the JAN-8 barcode symbology.
            </summary>
            <remarks>
            Subset of EAN-8 barcode symbology.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.JAN8Plus5">
            <summary>
            Gets the JAN-8+5 barcode symbology.
            </summary>
            <remarks>
            Subset of EAN-8+5 barcode symbology.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.JAN8Plus2">
            <summary>
            Gets the JAN-8+2 barcode symbology.
            </summary>
            <remarks>
            Subset of EAN-8+2 barcode symbology.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.ISBN">
            <summary>
            Gets the ISBN barcode symbology.
            </summary>
            <remarks>
            Subset of EAN-13 barcode symbology.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.ISBNPlus2">
            <summary>
            Gets the ISBN+2 barcode symbology.
            </summary>
            <remarks>
            Subset of EAN-13+2 barcode symbology.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.ISBNPlus5">
            <summary>
            Gets the ISBN+5 barcode symbology.
            </summary>
            <remarks>
            Subset of EAN-13+5 barcode symbology.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.ISMN">
            <summary>
            Gets the ISMN barcode symbology.
            </summary>
            <remarks>
            Subset of EAN-13 barcode symbology.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.ISMNPlus2">
            <summary>
            Gets the ISMN+2 barcode symbology.
            </summary>
            <remarks>
            Subset of EAN-13+2 barcode symbology.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.ISMNPlus5">
            <summary>
            Gets the ISMN+5 barcode symbology.
            </summary>
            <remarks>
            Subset of EAN-13+5 barcode symbology.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.ISSN">
            <summary>
            Gets the ISSN barcode symbology.
            </summary>
            <remarks>
            Subset of EAN-13 barcode symbology.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.ISSNPlus2">
            <summary>
            Gets the ISSN+2 barcode symbology.
            </summary>
            <remarks>
            Subset of EAN-13+2 barcode symbology.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.ISSNPlus5">
            <summary>
            Gets the ISSN+5 barcode symbology.
            </summary>
            <remarks>
            Subset of EAN-13+5 barcode symbology.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.SwissPostParcel">
            <summary>
            Gets the Swiss PostParcel barcode symbology.
            </summary>
            <remarks>
            Subset of Code 128 barcode symbology.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.PPN">
            <summary>
            Gets the PPN (IFA PPN-Code, Pharmacy Product Number) barcode symbology.
            </summary>
            <remarks>
            Subset of Data Matrix barcode symbology.
            </remarks>
            <example>This example shows how to generate and recognize PPN barcode.
            <code lang="VB.NET">   
            Imports System.Windows.Media.Imaging   
               
            Imports Vintasoft.WpfBarcode   
            Imports Vintasoft.WpfBarcode.BarcodeInfo   
            Imports Vintasoft.WpfBarcode.SymbologySubsets   
               
            Class PPNExample   
            	''' &lt;summary&gt;   
            	''' Generates and recognizes PPN barcode.   
            	''' &lt;/summary&gt;   
            	Public Shared Sub Test()   
            		' create PPN barcode value   
            		Dim barcodeValue As New PpnBarcodeValue()   
            		' PPN   
            		barcodeValue.PharmacyProductNumber = "110375286414"   
            		' Batch   
            		barcodeValue.BatchNumber = "12345ABCD"   
            		' Expiry Date (YYMMDD)   
            		barcodeValue.ExpiryDate = "150617"   
            		' Serial Number   
            		barcodeValue.SerialNumber = "12345ABCDEF98765"   
               
            		' generate barcode image   
            		Dim barcodeImage As BitmapSource = Generate(barcodeValue)   
               
            		' recognize barcode value   
            		Dim recognizedValue As PpnBarcodeValue = Recognize(barcodeImage)   
               
            		' check value   
            		If barcodeValue.ToString() &lt;&gt; recognizedValue.ToString() Then   
            			Throw New ApplicationException()   
            		End If   
               
            		Console.WriteLine()   
            		Console.WriteLine("PPN Decoded Value:")   
            		If recognizedValue.PharmacyProductNumber IsNot Nothing Then   
            			Console.WriteLine(String.Format("PPN:                 {0}", recognizedValue.PharmacyProductNumber))   
            		End If   
            		If recognizedValue.BatchNumber IsNot Nothing Then   
            			Console.WriteLine(String.Format("Batch:               {0}", recognizedValue.BatchNumber))   
            		End If   
            		If recognizedValue.ExpiryDate IsNot Nothing Then   
            			Console.WriteLine(String.Format("Expiry Date:         {0}", recognizedValue.ExpiryDate))   
            		End If   
            		If recognizedValue.SerialNumber IsNot Nothing Then   
            			Console.WriteLine(String.Format("Serial Number:       {0}", recognizedValue.SerialNumber))   
            		End If   
            		If recognizedValue.DateOfManufacture IsNot Nothing Then   
            			Console.WriteLine(String.Format("Date of Manufacture: {0}", recognizedValue.DateOfManufacture))   
            		End If   
            		If recognizedValue.GTIN IsNot Nothing Then   
            			Console.WriteLine(String.Format("GTIN:                {0}", recognizedValue.GTIN))   
            		End If   
            		Console.WriteLine(String.Format("Is German PPN:       {0}", recognizedValue.IsGermanMarketPpn))   
            	End Sub   
               
            	''' &lt;summary&gt;   
            	''' Generates the PPN barcode image.   
            	''' &lt;/summary&gt;   
            	''' &lt;param name="barcodeValue"&gt;The barcode value.&lt;/param&gt;   
            	Private Shared Function Generate(barcodeValue As PpnBarcodeValue) As BitmapSource   
            		' create barcode writer   
            		Dim writer As New BarcodeWriter()   
               
            		' encode PPN barcode to writer settings   
            		BarcodeSymbologySubsets.PPN.Encode(barcodeValue, writer.Settings)   
               
            		' generate barcode image   
            		Return writer.GetBarcodeAsBitmapSource()   
            	End Function   
               
            	''' &lt;summary&gt;   
            	''' Recognizes the PPN barcode from image.   
            	''' &lt;/summary&gt;   
            	''' &lt;param name="barcodeImage"&gt;The barcode image.&lt;/param&gt;   
            	Private Shared Function Recognize(barcodeImage As BitmapSource) As PpnBarcodeValue   
            		' create barcode reader   
            		Using reader As New BarcodeReader()   
            			' specify that PPN barcode must be recognizeds   
            			reader.Settings.ScanBarcodeSubsets.Add(BarcodeSymbologySubsets.PPN)   
               
            			' recognize barcodes   
            			Dim info As IBarcodeInfo = reader.ReadBarcodes(barcodeImage)(0)   
               
            			Console.WriteLine(String.Format("Encoded PPN value        : {0}", info.Value))   
            			Console.WriteLine(String.Format("Encoded Data Matrix value: {0}", DirectCast(info, BarcodeSubsetInfo).BaseBarcodeInfo.Value))   
               
            			' return PPN value   
            			Return DirectCast(info, PpnBarcodeInfo).PpnValue   
            		End Using   
            	End Function   
            End Class
            </code>
            <code lang="C#">
            using System;
            using System.Windows.Media.Imaging;
            
            using Vintasoft.WpfBarcode;
            using Vintasoft.WpfBarcode.BarcodeInfo;
            using Vintasoft.WpfBarcode.SymbologySubsets;
            
            class PPNExample
            {
                /// &lt;summary&gt;
                /// Generates and recognizes PPN barcode.
                /// &lt;/summary&gt;
                public static void Test()
                {
                    // create PPN barcode value
                    PpnBarcodeValue barcodeValue = new PpnBarcodeValue();
                    // PPN
                    barcodeValue.PharmacyProductNumber = "110375286414";
                    // Batch
                    barcodeValue.BatchNumber = "12345ABCD";
                    // Expiry Date (YYMMDD)
                    barcodeValue.ExpiryDate = "150617";
                    // Serial Number
                    barcodeValue.SerialNumber = "12345ABCDEF98765";
            
                    // generate barcode image
                    BitmapSource barcodeImage = Generate(barcodeValue);
            
                    // recognize barcode value
                    PpnBarcodeValue recognizedValue = Recognize(barcodeImage);
            
                    // check value
                    if (barcodeValue.ToString() != recognizedValue.ToString())
                        throw new ApplicationException();
            
                    Console.WriteLine();
                    Console.WriteLine("PPN Decoded Value:");
                    if (recognizedValue.PharmacyProductNumber != null)
                        Console.WriteLine(string.Format("PPN:                 {0}", recognizedValue.PharmacyProductNumber));
                    if (recognizedValue.BatchNumber != null)
                        Console.WriteLine(string.Format("Batch:               {0}", recognizedValue.BatchNumber));
                    if (recognizedValue.ExpiryDate != null)
                        Console.WriteLine(string.Format("Expiry Date:         {0}", recognizedValue.ExpiryDate));
                    if (recognizedValue.SerialNumber != null)
                        Console.WriteLine(string.Format("Serial Number:       {0}", recognizedValue.SerialNumber));
                    if (recognizedValue.DateOfManufacture != null)
                        Console.WriteLine(string.Format("Date of Manufacture: {0}", recognizedValue.DateOfManufacture));
                    if (recognizedValue.GTIN != null)
                        Console.WriteLine(string.Format("GTIN:                {0}", recognizedValue.GTIN));
                    Console.WriteLine(string.Format("Is German PPN:       {0}", recognizedValue.IsGermanMarketPpn));
                }
            
                /// &lt;summary&gt;
                /// Generates the PPN barcode image.
                /// &lt;/summary&gt;
                /// &lt;param name="barcodeValue"&gt;The barcode value.&lt;/param&gt;
                private static BitmapSource Generate(PpnBarcodeValue barcodeValue)
                {
                    // create barcode writer
                    BarcodeWriter writer = new BarcodeWriter();
            
                    // encode PPN barcode to writer settings
                    BarcodeSymbologySubsets.PPN.Encode(barcodeValue, writer.Settings);
                    
                    // generate barcode image
                    return writer.GetBarcodeAsBitmapSource();
                }
            
                /// &lt;summary&gt;
                /// Recognizes the PPN barcode from image.
                /// &lt;/summary&gt;
                /// &lt;param name="barcodeImage"&gt;The barcode image.&lt;/param&gt;
                private static PpnBarcodeValue Recognize(BitmapSource barcodeImage)
                {
                    // create barcode reader
                    using (BarcodeReader reader = new BarcodeReader())
                    {
                        // specify that PPN barcode must be recognizeds
                        reader.Settings.ScanBarcodeSubsets.Add(BarcodeSymbologySubsets.PPN);
            
                        // recognize barcodes
                        IBarcodeInfo info = reader.ReadBarcodes(barcodeImage)[0];
            
                        Console.WriteLine(string.Format("Encoded PPN value        : {0}",
                            info.Value));
                        Console.WriteLine(string.Format("Encoded Data Matrix value: {0}",
                            ((BarcodeSubsetInfo)info).BaseBarcodeInfo.Value));
            
                        // return PPN value
                        return ((PpnBarcodeInfo)info).PpnValue;
                    }
                }    
            }
            </code>
            </example>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.EANVelocity">
            <summary>
            Gets the EAN-Velocity barcode symbology.
            </summary>
            <remarks>
            Subset of EAN-8 barcode symbology.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.NumlyNumber">
            <summary>
            Gets the Numly Number barcode symbology.
            </summary>
            <remarks>
            Subset of Code 39 barcode symbology.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.XFACompressedPDF417">
            <summary>
            Gets the XFA compressed PDF417 barcode symbology.
            </summary>
            <remarks>
            Subset of PDF417 barcode symbology.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.XFACompressedDataMatrix">
            <summary>
            Gets the XFA compressed DataMatrix barcode symbology.
            </summary>
            <remarks>
            Subset of DataMatrix barcode symbology.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.XFACompressedAztec">
            <summary>
            Gets the XFA compressed Aztec barcode symbology.
            </summary>
            <remarks>
            Subset of Aztec barcode symbology.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.XFACompressedQRCode">
            <summary>
            Gets the XFA compressed QRCode barcode symbology.
            </summary>
            <remarks>
            Subset of QR barcode symbology.
            </remarks>
        </member>
        <member name="T:Vintasoft.WpfBarcode.SymbologySubsets.Code32BarcodeSymbology">
            <summary>
            Defines the Code 32 barcode symbology (Italian Pharmacode, Codice 32 Pharmacode) -
            subset of Code 39 barcode symbology.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.Code32BarcodeSymbology.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.SymbologySubsets.Code32BarcodeSymbology" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.Code32BarcodeSymbology.Decode(Vintasoft.WpfBarcode.IBarcodeInfo)">
            <summary>
            Decodes the source barcode symbology value into the barcode symbology subset value.
            </summary>
            <param name="info">Source barcode symbology value.</param>
            <returns>
            Barcode symbology subset value.
            </returns>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.Code32BarcodeSymbology.Encode(Vintasoft.WpfBarcode.BarcodeInfo.ValueItemBase,Vintasoft.WpfBarcode.WriterSettings)">
            <summary>
            Encodes the barcode symbology subset value into the source barcode symbology value
            using provided barcode writer settings and
            saves the source barcode symbology value in the barcode writer settings.
            </summary>
            <param name="value">The barcode symbology subset value to encode.</param>
            <param name="settings">Barcode writer settings.</param>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.Code32BarcodeSymbology.Name">
            <summary>
            Gets a name of this barcode symbology subset.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.Code32BarcodeSymbology.BaseType">
            <summary>
            Gets a base barcode symbology type of this barcode symbology subset.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.SymbologySubsets.Code39ExtendedBarcodeSymbology">
            <summary>
            Defines the Code39 Extended barcode symbology -
            subset of Code 39 barcode symbology.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.Code39ExtendedBarcodeSymbology.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.SymbologySubsets.Code39ExtendedBarcodeSymbology" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.Code39ExtendedBarcodeSymbology.Decode(Vintasoft.WpfBarcode.IBarcodeInfo)">
            <summary>
            Decodes the source barcode symbology value into the barcode symbology subset value.
            </summary>
            <param name="info">Source barcode symbology value.</param>
            <returns>
            Barcode symbology subset value.
            </returns>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.Code39ExtendedBarcodeSymbology.Encode(Vintasoft.WpfBarcode.BarcodeInfo.ValueItemBase,Vintasoft.WpfBarcode.WriterSettings)">
            <summary>
            Encodes the barcode symbology subset value into the source barcode symbology value
            using provided barcode writer settings and
            saves the source barcode symbology value in the barcode writer settings.
            </summary>
            <param name="value">The barcode symbology subset value to encode.</param>
            <param name="settings">Barcode writer settings.</param>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.Code39ExtendedBarcodeSymbology.Name">
            <summary>
            Gets a name of this barcode symbology subset.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.Code39ExtendedBarcodeSymbology.BaseType">
            <summary>
            Gets a base barcode symbology type of this barcode symbology subset.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.SymbologySubsets.DeutschePost2Of5BaseSymbology">
            <summary>
            Defines the base class of Deutsche Post 2 of 5 barcode symbologies -
            subset of Interlaved 2 of 5 barcode symbology.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.DeutschePost2Of5BaseSymbology.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.SymbologySubsets.DeutschePost2Of5BaseSymbology" /> class.
            </summary>
            <param name="numberOfDigits">Number of digits in barcode.</param>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.DeutschePost2Of5BaseSymbology.Decode(Vintasoft.WpfBarcode.IBarcodeInfo)">
            <summary>
            Decodes the source barcode symbology value into the barcode symbology subset value.
            </summary>
            <param name="info">Source barcode symbology value.</param>
            <returns>
            Barcode symbology subset value.
            </returns>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.DeutschePost2Of5BaseSymbology.Encode(Vintasoft.WpfBarcode.BarcodeInfo.ValueItemBase,Vintasoft.WpfBarcode.WriterSettings)">
            <summary>
            Encodes the barcode symbology subset value into the source barcode symbology value
            using provided barcode writer settings and
            saves the source barcode symbology value in the barcode writer settings.
            </summary>
            <param name="value">The barcode symbology subset value to encode.</param>
            <param name="settings">Barcode writer settings.</param>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.DeutschePost2Of5BaseSymbology.GetPrintableValue(System.String)">
            <summary>
            Gets the printable value.
            </summary>
            <param name="value">The barcode value.</param>
            <returns>Printable value.</returns>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.DeutschePost2Of5BaseSymbology.BaseType">
            <summary>
            Gets a base barcode symbology type of this barcode symbology subset.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.SymbologySubsets.DeutschePostIdentcodeBarcodeSymbology">
            <summary>
            Defines the Deutsche Post Identcode (German Postal 2 of 5 Identcode, 
            Deutsche Post AG Identcode, Deutsche Frachtpost Identcode, Identcode, CodeIdentcode,
            Deutsche Post AG (DHL)) barcode symbology -
            subset of Interlaved 2 of 5 barcode symbology.
            </summary>
            <remarks>
            Identcode barcode Symbology is used by German Post (Deutsche Post AG).
            The Identcode contains a tracking number providing an identification of the 
            customer (sender) and the mail piece.
            </remarks>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.DeutschePostIdentcodeBarcodeSymbology.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.SymbologySubsets.DeutschePostIdentcodeBarcodeSymbology" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.DeutschePostIdentcodeBarcodeSymbology.GetPrintableValue(System.String)">
            <summary>
            Gets the printable value.
            </summary>
            <param name="value">The barcode value.</param>
            <returns>
            Printable value.
            </returns>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.DeutschePostIdentcodeBarcodeSymbology.Name">
            <summary>
            Gets a name of this barcode symbology subset.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.SymbologySubsets.DeutschePostLeitcodeBarcodeSymbology">
            <summary>
            Defines the Deutsche Post Leitcode (German Postal 2 of 5 Leitcode, 
            CodeLeitcode, Leitcode, Deutsche Post AG (DHL)) barcode symbology -
            subset of Interlaved 2 of 5 barcode symbology.
            </summary>
            <remarks>
            Leitcode barcode Symbology is used by German Post (Deutsche Post AG).
            The Leitcode gives an indication of the destination.
            </remarks>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.DeutschePostLeitcodeBarcodeSymbology.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.SymbologySubsets.DeutschePostLeitcodeBarcodeSymbology" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.DeutschePostLeitcodeBarcodeSymbology.GetPrintableValue(System.String)">
            <summary>
            Gets the printable value.
            </summary>
            <param name="value">The barcode value.</param>
            <returns>
            Printable value.
            </returns>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.DeutschePostLeitcodeBarcodeSymbology.Name">
            <summary>
            Gets a name of this barcode symbology subset.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.SymbologySubsets.DhlAwbBarcodeSymbology">
            <summary>
            Defines the DHL AWB (DHL Code 39 AWB) barcode symbology -
            subset of Code 39 barcode symbology.
            </summary>    
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.DhlAwbBarcodeSymbology.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.SymbologySubsets.DhlAwbBarcodeSymbology" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.DhlAwbBarcodeSymbology.Decode(Vintasoft.WpfBarcode.IBarcodeInfo)">
            <summary>
            Decodes the source barcode symbology value into the barcode symbology subset value.
            </summary>
            <param name="info">Source barcode symbology value.</param>
            <returns>
            Barcode symbology subset value.
            </returns>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.DhlAwbBarcodeSymbology.Encode(Vintasoft.WpfBarcode.BarcodeInfo.ValueItemBase,Vintasoft.WpfBarcode.WriterSettings)">
            <summary>
            Encodes the barcode symbology subset value into the source barcode symbology value
            using provided barcode writer settings and
            saves the source barcode symbology value in the barcode writer settings.
            </summary>
            <param name="value">The barcode symbology subset value to encode.</param>
            <param name="settings">Barcode writer settings.</param>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.DhlAwbBarcodeSymbology.Name">
            <summary>
            Gets a name of this barcode symbology subset.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.DhlAwbBarcodeSymbology.BaseType">
            <summary>
            Gets a base barcode symbology type of this barcode symbology subset.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.SymbologySubsets.EanVelocityBarcodeSymbology">
            <summary>
            Defines the EAN-Velocity barcode -
            subset of EAN8 barcode symbology.
            </summary>
            <remarks>
            EAN-Velocity is a special version of EAN-8, with the first digit is 0 (zero)
            which is usually used for internal article numbering.
            </remarks>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.EanVelocityBarcodeSymbology.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.SymbologySubsets.EanVelocityBarcodeSymbology" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.EanVelocityBarcodeSymbology.Decode(Vintasoft.WpfBarcode.IBarcodeInfo)">
            <summary>
            Decodes the source barcode symbology value into the barcode symbology subset value.
            </summary>
            <param name="info">Source barcode symbology value.</param>
            <returns>
            Barcode symbology subset value.
            </returns>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.EanVelocityBarcodeSymbology.Encode(Vintasoft.WpfBarcode.BarcodeInfo.ValueItemBase,Vintasoft.WpfBarcode.WriterSettings)">
            <summary>
            Encodes the barcode symbology subset value into the source barcode symbology value
            using provided barcode writer settings and
            saves the source barcode symbology value in the barcode writer settings.
            </summary>
            <param name="value">The barcode symbology subset value to encode.</param>
            <param name="settings">Barcode writer settings.</param>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.EanVelocityBarcodeSymbology.Name">
            <summary>
            Gets a name of this barcode symbology subset.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.EanVelocityBarcodeSymbology.BaseType">
            <summary>
            Gets a base barcode symbology type of this barcode symbology subset.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.SymbologySubsets.GS1.FedExGround96BarcodeSymbology">
            <summary>
            Defines the FedEx Ground 96 (FedEx Ground "96" Code 128) barcode symbology -
            subset of GS1-128 (UCC/EAN-128) barcode symbology.
            </summary>
            <remarks>
            The data content of the FedEx Ground 96 barcode is as specified below: 
            <ul>
            <li>Application Identifier (AI): two-digit number "96".</li>
            <li>Serial Container Numeric Code (SCNC): two digit (11, 12, 13) that identifies the carrier as "FedEx Ground".</li>
            <li>Class of Service: three-digit number used to identify the FedEx Ground class of service. </li>
            <li>FedEx Ground Shipper ID: seven-digit unique shipper identification number. </li>
            <li>Package Number: seven-digit package serial number. </li>
            <li>Check Digit: one digit, mod-10 data field check 
            (<see cref="M:Vintasoft.WpfBarcode.SymbologySubsets.GS1.FedExGround96BarcodeSymbology.CalculateCheckDigit(System.String)" />). </li>
            </ul>
            </remarks>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.GS1.FedExGround96BarcodeSymbology.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.SymbologySubsets.GS1.FedExGround96BarcodeSymbology" /> class. 
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.GS1.FedExGround96BarcodeSymbology.Decode(Vintasoft.WpfBarcode.IBarcodeInfo)">
            <summary>
            Decodes the source barcode symbology value into the GS1 barcode value.
            </summary>
            <param name="info">Source barcode symbology value.</param>
            <returns>GS1 barcode value.</returns>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.GS1.FedExGround96BarcodeSymbology.Encode(Vintasoft.WpfBarcode.BarcodeInfo.ValueItemBase,Vintasoft.WpfBarcode.WriterSettings)">
            <summary>
            Encodes the GS1 barcode value into the source barcode symbology value
            using provided barcode writer settings and
            saves the source barcode symbology value in the barcode writer settings.
            </summary>
            <param name="value">GS1 barcode value to encode.</param>
            <param name="settings">Barcode writer settings.</param>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.GS1.FedExGround96BarcodeSymbology.BaseType">
            <summary>
            Gets a base barcode symbology type of this barcode symbology subset.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.GS1.FedExGround96BarcodeSymbology.Name">
            <summary>
            Gets a name of barcode subset.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.GS1.FedExGround96BarcodeSymbology.BaseSubset">
            <summary>
            Gets a base barcode symbology subset of this barcode symbology subset.
            </summary>
            <value>Always returns <see cref="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.GS1_128" />.</value>
        </member>
        <member name="T:Vintasoft.WpfBarcode.SymbologySubsets.GS1.GS1AztecBarcodeSymbology">
            <summary>
            Defines the subset of Aztec barcodes with values in GS1 System data format.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.SymbologySubsets.GS1.GS1BarcodeSymbologySubset">
            <summary>
            Base class that defines the barcode symbology subset with barcode values,
            which are stored in GS1 System data format.
            </summary>
            <remarks>
            Barcode value can be specified as printable value using <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.TextValueItem" /> property or
            as value items using the <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.GS1ValueItem" /> property.
            </remarks>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.GS1.GS1BarcodeSymbologySubset.#ctor(Vintasoft.WpfBarcode.BarcodeType,Vintasoft.WpfBarcode.GS1.GS1Codec)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.SymbologySubsets.GS1.GS1BarcodeSymbologySubset" /> class. 
            </summary>
            <param name="baseType">Base barcode type.</param>
            <param name="codec">GS1 Codec.</param>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.GS1.GS1BarcodeSymbologySubset.Decode(Vintasoft.WpfBarcode.IBarcodeInfo)">
            <summary>
            Decodes the source barcode symbology value into the GS1 barcode value.
            </summary>
            <param name="info">Source barcode symbology value.</param>
            <returns>GS1 barcode value.</returns>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.GS1.GS1BarcodeSymbologySubset.ConvertToGS1Value(Vintasoft.WpfBarcode.BarcodeInfo.ValueItemBase)">
            <summary>
            Converts a value item to GS1 value.
            </summary>
            <param name="valueItem">The value item.</param>
            <returns>Instance of <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.GS1ValueItem" /> class.</returns>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.GS1.GS1BarcodeSymbologySubset.Encode(Vintasoft.WpfBarcode.BarcodeInfo.ValueItemBase,Vintasoft.WpfBarcode.WriterSettings)">
            <summary>
            Encodes the GS1 barcode value into the source barcode symbology value
            using provided barcode writer settings and
            saves the source barcode symbology value in the barcode writer settings.
            </summary>
            <param name="value">An instance of <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.TextValueItem" /> class with
            GS1 printable value or instance of <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.GS1ValueItem" /> class.</param>
            <param name="settings">Barcode writer settings.</param>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.GS1.GS1BarcodeSymbologySubset.CreateValue">
            <summary>
            Creates a <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.GS1ValueItem" /> with
            an empty array of <see cref="T:Vintasoft.WpfBarcode.GS1.GS1ApplicationIdentifierValue" /> values.
            </summary>
            <returns>A <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.GS1ValueItem" /> with
            an empty array of <see cref="T:Vintasoft.WpfBarcode.GS1.GS1ApplicationIdentifierValue" /> values.</returns>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.GS1.GS1BarcodeSymbologySubset.Codec">
            <summary>
            Gets a GS1 codec for this barcode subset.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.GS1.GS1BarcodeSymbologySubset.Name">
            <summary>
            Gets a name of barcode subset.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.GS1.GS1BarcodeSymbologySubset.BaseType">
            <summary>
            Gets a base barcode type of barcode subset.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.GS1.GS1AztecBarcodeSymbology.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.SymbologySubsets.GS1.GS1AztecBarcodeSymbology" /> class. 
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeInfo.GS1BarcodeInfo">
            <summary>
            Contains information about recognized GS1 barcode.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.GS1BarcodeInfo.ApplicationIdentifierValues">
            <summary>
            Gets a value of GS1 barcode - array of <see cref="T:Vintasoft.WpfBarcode.GS1.GS1ApplicationIdentifierValue" /> values.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.GS1BarcodeInfo.TransmittedData">
            <summary>
            Gets data transmitted from barcode reader.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.GS1BarcodeInfo.PrintableValue">
            <summary>
            Gets a printable value of this GS1 barcode.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.SymbologySubsets.GS1.GS1DataBarBarcodeSymbology">
            <summary>
            Defines the GS1 DataBar barcode symbology -
            subset of RSS-14 barcode symbology with values in GS1 System data format.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.GS1.GS1DataBarBarcodeSymbology.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.SymbologySubsets.GS1.GS1DataBarBarcodeSymbology" /> class. 
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.GS1.GS1DataBarBarcodeSymbology.Decode(Vintasoft.WpfBarcode.IBarcodeInfo)">
            <summary>
            Decodes the source barcode symbology value into the GS1 barcode value.
            </summary>
            <param name="info">Source barcode symbology value.</param>
            <returns>GS1 barcode value.</returns>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.GS1.GS1DataBarBarcodeSymbology.Encode(Vintasoft.WpfBarcode.BarcodeInfo.ValueItemBase,Vintasoft.WpfBarcode.WriterSettings)">
            <summary>
            Encodes the GS1 barcode value into the source barcode symbology value
            using provided barcode writer settings and
            saves the source barcode symbology value in the barcode writer settings.
            </summary>
            <param name="value">An instance of <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.TextValueItem" /> class with
            GS1 printable value or instance of <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.GS1ValueItem" /> class.</param>
            <param name="settings">Barcode writer settings.</param>
        </member>
        <member name="T:Vintasoft.WpfBarcode.SymbologySubsets.GS1.GS1DataBarExpandedBarcodeSymbology">
            <summary>
            Defines the GS1 DataBar Expanded barcode symbology -
            subset of RSS Expanded barcode symbology with values in GS1 System data format.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.GS1.GS1DataBarExpandedBarcodeSymbology.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.SymbologySubsets.GS1.GS1DataBarExpandedBarcodeSymbology" /> class. 
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.GS1.GS1DataBarExpandedBarcodeSymbology.Name">
            <summary>
            Gets a name of barcode subset.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.SymbologySubsets.GS1.GS1DataBarExpandedStackedBarcodeSymbology">
            <summary>
            Defines the GS1 DataBar Expanded Stacked barcode symbology -
            subset of RSS Expanded Stacked barcode symbology with values in GS1 System data format.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.GS1.GS1DataBarExpandedStackedBarcodeSymbology.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.SymbologySubsets.GS1.GS1DataBarExpandedStackedBarcodeSymbology" /> class. 
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.GS1.GS1DataBarExpandedStackedBarcodeSymbology.Name">
            <summary>
            Gets a name of barcode subset.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.SymbologySubsets.GS1.GS1DataBarLimitedBarcodeSymbology">
            <summary>
            Defines the GS1 DataBar Limited barcode symbology -
            subset of RSS Limited barcode symbology with values in GS1 System data format.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.GS1.GS1DataBarLimitedBarcodeSymbology.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.SymbologySubsets.GS1.GS1DataBarLimitedBarcodeSymbology" /> class. 
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.GS1.GS1DataBarLimitedBarcodeSymbology.Decode(Vintasoft.WpfBarcode.IBarcodeInfo)">
            <summary>
            Decodes the source barcode symbology value into the GS1 barcode value.
            </summary>
            <param name="info">Source barcode symbology value.</param>
            <returns>GS1 barcode value.</returns>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.GS1.GS1DataBarLimitedBarcodeSymbology.Encode(Vintasoft.WpfBarcode.BarcodeInfo.ValueItemBase,Vintasoft.WpfBarcode.WriterSettings)">
            <summary>
            Encodes the GS1 barcode value into the source barcode symbology value
            using provided barcode writer settings and
            saves the source barcode symbology value in the barcode writer settings.
            </summary>
            <param name="value">An instance of <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.TextValueItem" /> class with
            GS1 printable value or instance of <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.GS1ValueItem" /> class.</param>
            <param name="settings">Barcode writer settings.</param>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.GS1.GS1DataBarLimitedBarcodeSymbology.Name">
            <summary>
            Gets a name of barcode subset.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.SymbologySubsets.GS1.GS1DataBarStackedBarcodeSymbology">
            <summary>
            Defines the GS1 DataBar Stacked barcode symbology -
            subset of RSS-14 Stacked barcode symbology with values in GS1 System data format.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.GS1.GS1DataBarStackedBarcodeSymbology.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.SymbologySubsets.GS1.GS1DataBarStackedBarcodeSymbology" /> class. 
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.GS1.GS1DataBarStackedBarcodeSymbology.Decode(Vintasoft.WpfBarcode.IBarcodeInfo)">
            <summary>
            Decodes the source barcode symbology value into the GS1 barcode value.
            </summary>
            <param name="info">Source barcode symbology value.</param>
            <returns>GS1 barcode value.</returns>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.GS1.GS1DataBarStackedBarcodeSymbology.Encode(Vintasoft.WpfBarcode.BarcodeInfo.ValueItemBase,Vintasoft.WpfBarcode.WriterSettings)">
            <summary>
            Encodes the GS1 barcode value into the source barcode symbology value
            using provided barcode writer settings and
            saves the source barcode symbology value in the barcode writer settings.
            </summary>
            <param name="value">An instance of <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.TextValueItem" /> class with
            GS1 printable value or instance of <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.GS1ValueItem" /> class.</param>
            <param name="settings">Barcode writer settings.</param>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.GS1.GS1DataBarStackedBarcodeSymbology.Name">
            <summary>
            Gets a name of barcode subset.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.SymbologySubsets.GS1.GS1DataMatrixBarcodeSymbology">
            <summary>
            Defines the GS1 DataMatrix barcode symbology -
            subset of DataMatrix barcode symbology with values in GS1 System data format.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.GS1.GS1DataMatrixBarcodeSymbology.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.SymbologySubsets.GS1.GS1DataMatrixBarcodeSymbology" /> class. 
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.SymbologySubsets.GS1.GS1QRBarcodeSymbology">
            <summary>
            Defines the GS1 QR barcode symbology -
            subset of QR barcode symbology with values in GS1 System data format.
            </summary>
            <example>This example shows how to generate GS1 QR barcode and read
            generated barcode.
            <code lang="VB.NET">   
            Imports System.Text   
            Imports System.Windows.Media.Imaging   
               
            Imports Vintasoft.WpfBarcode   
            Imports Vintasoft.WpfBarcode.BarcodeInfo   
            Imports Vintasoft.WpfBarcode.SymbologySubsets   
            Imports Vintasoft.WpfBarcode.GS1   
               
            ''' &lt;summary&gt;   
            ''' Test that shows how to encode the barcode data in GS1 format,   
            ''' create image with GS1 QR barcode,   
            ''' read GS1 QR barcode from image and print data stored in GS1 format.   
            ''' &lt;/summary&gt;   
            Class GS1QRExample   
               
            	''' &lt;summary&gt;   
            	''' Run the test.   
            	''' &lt;/summary&gt;   
            	Public Shared Sub TestGS1QR()   
            		' form the GS1 Application identifiers   
            		'   
            		Dim aiValues As GS1ApplicationIdentifierValue() = New GS1ApplicationIdentifierValue(3) {}   
            		Dim ai As GS1ApplicationIdentifier   
            		' 01 - Global Trade Item Number   
            		ai = GS1ApplicationIdentifiers.FindApplicationIdentifier("01")   
            		aiValues(0) = New GS1ApplicationIdentifierValue(ai, "0123456789123C")   
            		' 310 - Net weight, kilograms   
            		ai = GS1ApplicationIdentifiers.FindApplicationIdentifier("310")   
            		aiValues(1) = New GS1ApplicationIdentifierValue(ai, "0012.55")   
            		' 30 - Count of Items   
            		ai = GS1ApplicationIdentifiers.FindApplicationIdentifier("30")   
            		aiValues(2) = New GS1ApplicationIdentifierValue(ai, "10")   
            		' 90 - Company Internal Information   
            		ai = GS1ApplicationIdentifiers.FindApplicationIdentifier("90")   
            		aiValues(3) = New GS1ApplicationIdentifierValue(ai, "ABCabc12345")   
            		' create GS1 value item   
            		Dim gs1Value As New GS1ValueItem(aiValues)   
               
            		' create the barcode writer   
            		Dim writer As New BarcodeWriter()   
               
            		' specify that writer must create output image as 24-bpp image   
            		writer.Settings.PixelFormat = BarcodeImagePixelFormat.Bgr24   
               
            		' encode GS1 QR barcode   
            		BarcodeSymbologySubsets.GS1QR.Encode(gs1Value, writer.Settings)   
               
            		' create image with barcode   
            		Dim barcodeImage As BitmapSource = writer.GetBarcodeAsBitmapSource()   
               
            		' delete aiValues array   
            		aiValues = Nothing   
               
            		' read barcode with GS1 value   
               
            		' create barcode reader   
            		Using reader As New BarcodeReader()   
            			' specify that reader must search for GS1 QR barcodes only   
               
            			reader.Settings.ScanBarcodeTypes = BarcodeType.None   
            			reader.Settings.ScanBarcodeSubsets.Add(BarcodeSymbologySubsets.GS1QR)   
               
            			' read barcode from image   
            			Dim infos As IBarcodeInfo() = reader.ReadBarcodes(barcodeImage)   
               
            			' print reader transmitted value   
            			Console.WriteLine("Transmitted data: {0}", DirectCast(infos(0), GS1BarcodeInfo).TransmittedData)   
            			Console.WriteLine()   
               
            			' gets GS1 value from barcode value         
            			gs1Value = DirectCast(infos(0).ValueItems(0), GS1ValueItem)   
               
            			' gets a GS1 Application identifiers from barcode value               
            			aiValues = gs1Value.ApplicationIdentifierValues   
               
            			Dim printableValue As New StringBuilder()   
            			' print Application identifiers values   
            			For i As Integer = 0 To aiValues.Length - 1   
            				Dim aiValue As GS1ApplicationIdentifierValue = aiValues(i)   
            				ai = aiValue.ApplicationIdentifier   
            				Console.WriteLine(String.Format("[{0}] {1}", i + 1, aiValue))   
            				Console.WriteLine(String.Format("Application identifier   : {0}", ai.ApplicationIdentifier))   
            				Console.WriteLine(String.Format("Value                    : {0}", aiValue.Value))   
            				Console.WriteLine(String.Format("Data title               : {0}", ai.DataTitle))   
            				Console.WriteLine(String.Format("Data content             : {0}", ai.DataContent))   
            				Console.WriteLine(String.Format("Format                   : {0}", ai.Format))   
            				Console.WriteLine(String.Format("Is contains decimal point: {0}", ai.IsContainsDecimalPoint))   
            				Console.WriteLine(String.Format("Is variable length       : {0}", ai.IsVariableLength))   
            				Console.WriteLine()   
            				printableValue.Append(aiValue.ToString())   
            			Next   
               
            			' print GS1 printable value   
            			Console.WriteLine("Printable GS1 value: " &amp; printableValue.ToString())   
            		End Using   
            	End Sub   
            End Class
            </code>
            <code lang="C#">
            using System;
            using System.Text;
            using System.Windows.Media.Imaging;
            
            using Vintasoft.WpfBarcode;
            using Vintasoft.WpfBarcode.BarcodeInfo;
            using Vintasoft.WpfBarcode.SymbologySubsets;
            using Vintasoft.WpfBarcode.GS1;
            
            /// &lt;summary&gt;
            /// Test that shows how to encode the barcode data in GS1 format,
            /// create image with GS1 QR barcode,
            /// read GS1 QR barcode from image and print data stored in GS1 format.
            /// &lt;/summary&gt;
            class GS1QRExample
            {
            
                /// &lt;summary&gt;
                /// Run the test.
                /// &lt;/summary&gt;
                public static void TestGS1QR()
                {
                    // form the GS1 Application identifiers
                    //
                    GS1ApplicationIdentifierValue[] aiValues = new GS1ApplicationIdentifierValue[4];
                    GS1ApplicationIdentifier ai;
                    // 01 - Global Trade Item Number
                    ai = GS1ApplicationIdentifiers.FindApplicationIdentifier("01");
                    aiValues[0] = new GS1ApplicationIdentifierValue(ai, "0123456789123C");
                    // 310 - Net weight, kilograms
                    ai = GS1ApplicationIdentifiers.FindApplicationIdentifier("310");
                    aiValues[1] = new GS1ApplicationIdentifierValue(ai, "0012.55");
                    // 30 - Count of Items
                    ai = GS1ApplicationIdentifiers.FindApplicationIdentifier("30");
                    aiValues[2] = new GS1ApplicationIdentifierValue(ai, "10");
                    // 90 - Company Internal Information
                    ai = GS1ApplicationIdentifiers.FindApplicationIdentifier("90");
                    aiValues[3] = new GS1ApplicationIdentifierValue(ai, "ABCabc12345");
                    // create GS1 value item
                    GS1ValueItem gs1Value = new GS1ValueItem(aiValues);
            
                    // create the barcode writer
                    BarcodeWriter writer = new BarcodeWriter();
            
                    // specify that writer must create output image as 24-bpp image
                    writer.Settings.PixelFormat = BarcodeImagePixelFormat.Bgr24;
            
                    // encode GS1 QR barcode
                    BarcodeSymbologySubsets.GS1QR.Encode(gs1Value, writer.Settings);
            
                    // create image with barcode
                    BitmapSource barcodeImage = writer.GetBarcodeAsBitmapSource();
            
                    // delete aiValues array
                    aiValues = null;
            
                    // read barcode with GS1 value
            
                    // create barcode reader
                    using (BarcodeReader reader = new BarcodeReader())
                    {
                        // specify that reader must search for GS1 QR barcodes only
            
                        reader.Settings.ScanBarcodeTypes = BarcodeType.None;
                        reader.Settings.ScanBarcodeSubsets.Add(BarcodeSymbologySubsets.GS1QR);
            
                        // read barcode from image
                        IBarcodeInfo[] infos = reader.ReadBarcodes(barcodeImage);
            
                        // print reader transmitted value
                        Console.WriteLine("Transmitted data: {0}", ((GS1BarcodeInfo)infos[0]).TransmittedData);
                        Console.WriteLine();
            
                        // gets GS1 value from barcode value      
                        gs1Value = (GS1ValueItem)(infos[0].ValueItems[0]);
            
                        // gets a GS1 Application identifiers from barcode value            
                        aiValues = gs1Value.ApplicationIdentifierValues;
            
                        StringBuilder printableValue = new StringBuilder();
                        // print Application identifiers values
                        for (int i = 0; i &lt; aiValues.Length; i++)
                        {
                            GS1ApplicationIdentifierValue aiValue = aiValues[i];
                            ai = aiValue.ApplicationIdentifier;
                            Console.WriteLine(string.Format("[{0}] {1}", i + 1, aiValue));
                            Console.WriteLine(string.Format("Application identifier   : {0}", ai.ApplicationIdentifier));
                            Console.WriteLine(string.Format("Value                    : {0}", aiValue.Value));
                            Console.WriteLine(string.Format("Data title               : {0}", ai.DataTitle));
                            Console.WriteLine(string.Format("Data content             : {0}", ai.DataContent));
                            Console.WriteLine(string.Format("Format                   : {0}", ai.Format));
                            Console.WriteLine(string.Format("Is contains decimal point: {0}", ai.IsContainsDecimalPoint));
                            Console.WriteLine(string.Format("Is variable length       : {0}", ai.IsVariableLength));
                            Console.WriteLine();
                            printableValue.Append(aiValue.ToString());
                        }
            
                        // print GS1 printable value
                        Console.WriteLine("Printable GS1 value: " + printableValue.ToString());
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.GS1.GS1QRBarcodeSymbology.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.SymbologySubsets.GS1.GS1QRBarcodeSymbology" /> class. 
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeInfo.GS1ValueItem">
            <summary>
            Contains information about a decoded value of GS1 barcode.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeInfo.GS1ValueItem.#ctor(Vintasoft.WpfBarcode.GS1.GS1ApplicationIdentifierValue[])">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.GS1ValueItem" /> class. 
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeInfo.GS1ValueItem.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
            <returns>String representation of this object.</returns>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.GS1ValueItem.ApplicationIdentifierValues">
            <summary>
            Gets or sets a GS1 barcode value - array of <see cref="T:Vintasoft.WpfBarcode.GS1.GS1ApplicationIdentifierValue" /> values.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.GS1ValueItem.PrintableValue">
            <summary>
            Gets a printable value of this value item.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.SymbologySubsets.GS1.GS1_128BarcodeSymbology">
            <summary>
            Defines the GS1-128 (UCC/EAN-128, EAN-128) barcode symbology -
            subset of Code 128 barcode symbology with values in GS1 System data format.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.GS1.GS1_128BarcodeSymbology.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.SymbologySubsets.GS1.GS1_128BarcodeSymbology" /> class. 
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.SymbologySubsets.GS1.Itf14BarcodeSymbology">
            <summary>
            Defines the ITF-14 barcode symbology -
            subset of Interlaved 2 of 5 barcode symbology with value in GS1 System data format.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.GS1.Itf14BarcodeSymbology.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.SymbologySubsets.GS1.Itf14BarcodeSymbology" /> class. 
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.GS1.Itf14BarcodeSymbology.Decode(Vintasoft.WpfBarcode.IBarcodeInfo)">
            <summary>
            Decodes the source barcode symbology value into the GS1 barcode value.
            </summary>
            <param name="info">Source barcode symbology value.</param>
            <returns>GS1 barcode value.</returns>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.GS1.Itf14BarcodeSymbology.Encode(Vintasoft.WpfBarcode.BarcodeInfo.ValueItemBase,Vintasoft.WpfBarcode.WriterSettings)">
            <summary>
            Encodes the GS1 barcode value into the source barcode symbology value
            using provided barcode writer settings and
            saves the source barcode symbology value in the barcode writer settings.
            </summary>
            <param name="value">An instance of <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.TextValueItem" /> class with
            GS1 printable value or instance of <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.GS1ValueItem" /> class.</param>
            <param name="settings">Barcode writer settings.</param>
        </member>
        <member name="T:Vintasoft.WpfBarcode.SymbologySubsets.IsbnBarcodeSymbology">
            <summary>
            Defines the base class of ISBN (ISBN-13, ISBN-10) barcode symbology -
            subset of EAN13 barcode symbology, encodes a unique identifier assigned to each 
            edition of every published book and book-like product.
            </summary>
            <remarks>
            For ISBN barcodes the first three digits must be 978 or 979. 
            </remarks>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.IsbnBarcodeSymbology.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.SymbologySubsets.IsbnBarcodeSymbology" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.IsbnBarcodeSymbology.Decode(Vintasoft.WpfBarcode.IBarcodeInfo)">
            <summary>
            Decodes the source barcode symbology value into the barcode symbology subset value.
            </summary>
            <param name="info">Source barcode symbology value.</param>
            <returns>
            Barcode symbology subset value.
            </returns>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.IsbnBarcodeSymbology.Encode(Vintasoft.WpfBarcode.BarcodeInfo.ValueItemBase,Vintasoft.WpfBarcode.WriterSettings)">
            <summary>
            Encodes the barcode symbology subset value into the source barcode symbology value
            using provided barcode writer settings and
            saves the source barcode symbology value in the barcode writer settings.
            </summary>
            <param name="value">The barcode symbology subset value to encode.</param>
            <param name="settings">Barcode writer settings.</param>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.IsbnBarcodeSymbology.Name">
            <summary>
            Gets a name of this barcode symbology subset.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.IsbnBarcodeSymbology.BaseType">
            <summary>
            Gets a base barcode symbology type of this barcode symbology subset.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.SymbologySubsets.IsbnPlus2BarcodeSymbology">
            <summary>
            Defines the base class of ISBN+2 barcode symbology -
            subset of EAN13+2 barcode symbology.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.IsbnPlus2BarcodeSymbology.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.SymbologySubsets.IsbnPlus2BarcodeSymbology" /> class.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.IsbnPlus2BarcodeSymbology.Name">
            <summary>
            Gets a name of this barcode symbology subset.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.IsbnPlus2BarcodeSymbology.BaseType">
            <summary>
            Gets a base barcode symbology type of this barcode symbology subset.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.SymbologySubsets.IsbnPlus5BarcodeSymbology">
            <summary>
            Defines the base class of ISBN+5 barcode symbology -
            subset of EAN13+5 barcode symbology.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.IsbnPlus5BarcodeSymbology.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.SymbologySubsets.IsbnPlus5BarcodeSymbology" /> class.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.IsbnPlus5BarcodeSymbology.Name">
            <summary>
            Gets a name of this barcode symbology subset.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.IsbnPlus5BarcodeSymbology.BaseType">
            <summary>
            Gets a base barcode symbology type of this barcode symbology subset.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.SymbologySubsets.IsmnBarcodeSymbology">
            <summary>
            Defines the base class of ISMN (ISMN-13) barcode symbology -
            subset of EAN13 barcode symbology, ecodes International Standard Music Number.
            </summary>
            <remarks>
            For ISMN13 barcodes the first three digits must be 9790.<br />
            Barcode value example:<br />
            ISMN13: 979-0-060-11561-5<br />
            ISMN: M-060-11561-5
            </remarks>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.IsmnBarcodeSymbology.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.SymbologySubsets.IsmnBarcodeSymbology" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.IsmnBarcodeSymbology.Decode(Vintasoft.WpfBarcode.IBarcodeInfo)">
            <summary>
            Decodes the source barcode symbology value into the barcode symbology subset value.
            </summary>
            <param name="info">Source barcode symbology value.</param>
            <returns>
            Barcode symbology subset value.
            </returns>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.IsmnBarcodeSymbology.Encode(Vintasoft.WpfBarcode.BarcodeInfo.ValueItemBase,Vintasoft.WpfBarcode.WriterSettings)">
            <summary>
            Encodes the barcode symbology subset value into the source barcode symbology value
            using provided barcode writer settings and
            saves the source barcode symbology value in the barcode writer settings.
            </summary>
            <param name="value">The barcode symbology subset value to encode.</param>
            <param name="settings">Barcode writer settings.</param>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.IsmnBarcodeSymbology.Name">
            <summary>
            Gets a name of this barcode symbology subset.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.IsmnBarcodeSymbology.BaseType">
            <summary>
            Gets a base barcode symbology type of this barcode symbology subset.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.IsmnBarcodeSymbology.BaseSubset">
            <summary>
            Gets a base barcode symbology subset of this barcode symbology subset.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.SymbologySubsets.IsmnPlus2BarcodeSymbology">
            <summary>
            Defines the base class of ISMN+2 barcode symbology -
            subset of EAN13+2 barcode symbology.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.IsmnPlus2BarcodeSymbology.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.SymbologySubsets.IsmnPlus2BarcodeSymbology" /> class.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.IsmnPlus2BarcodeSymbology.Name">
            <summary>
            Gets a name of this barcode symbology subset.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.IsmnPlus2BarcodeSymbology.BaseType">
            <summary>
            Gets a base barcode symbology type of this barcode symbology subset.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.IsmnPlus2BarcodeSymbology.BaseSubset">
            <summary>
            Gets a base barcode symbology subset of this barcode symbology subset.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.SymbologySubsets.IsmnPlus5BarcodeSymbology">
            <summary>
            Defines the base class of ISMN+5 barcode symbology -
            subset of EAN13+5 barcode symbology.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.IsmnPlus5BarcodeSymbology.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.SymbologySubsets.IsmnPlus5BarcodeSymbology" /> class.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.IsmnPlus5BarcodeSymbology.Name">
            <summary>
            Gets a name of this barcode symbology subset.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.IsmnPlus5BarcodeSymbology.BaseType">
            <summary>
            Gets a base barcode symbology type of this barcode symbology subset.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.IsmnPlus5BarcodeSymbology.BaseSubset">
            <summary>
            Gets a base barcode symbology subset of this barcode symbology subset.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.SymbologySubsets.IssnBarcodeSymbology">
            <summary>
            Defines the base class of ISSN barcode symbology -
            subset of EAN13 barcode symbology, encodes International Standard Serial Number (8 digits).
            </summary>
            <remarks>
            For ISSN barcodes the first three digits must be 977. 
            </remarks>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.IssnBarcodeSymbology.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.SymbologySubsets.IssnBarcodeSymbology" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.IssnBarcodeSymbology.Decode(Vintasoft.WpfBarcode.IBarcodeInfo)">
            <summary>
            Decodes the source barcode symbology value into the barcode symbology subset value.
            </summary>
            <param name="info">Source barcode symbology value.</param>
            <returns>
            Barcode symbology subset value.
            </returns>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.IssnBarcodeSymbology.Encode(Vintasoft.WpfBarcode.BarcodeInfo.ValueItemBase,Vintasoft.WpfBarcode.WriterSettings)">
            <summary>
            Encodes the barcode symbology subset value into the source barcode symbology value
            using provided barcode writer settings and
            saves the source barcode symbology value in the barcode writer settings.
            </summary>
            <param name="value">The barcode symbology subset value to encode.</param>
            <param name="settings">Barcode writer settings.</param>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.IssnBarcodeSymbology.Name">
            <summary>
            Gets a name of this barcode symbology subset.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.IssnBarcodeSymbology.BaseType">
            <summary>
            Gets a base barcode symbology type of this barcode symbology subset.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.SymbologySubsets.IssnPlus2BarcodeSymbology">
            <summary>
            Defines the base class of ISSN+2 barcode symbology -
            subset of EAN13+2 barcode symbology.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.IssnPlus2BarcodeSymbology.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.SymbologySubsets.IssnPlus2BarcodeSymbology" /> class.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.IssnPlus2BarcodeSymbology.Name">
            <summary>
            Gets a name of this barcode symbology subset.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.IssnPlus2BarcodeSymbology.BaseType">
            <summary>
            Gets a base barcode symbology type of this barcode symbology subset.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.SymbologySubsets.IssnPlus5BarcodeSymbology">
            <summary>
            Defines the base class of ISSN+5 barcode symbology -
            subset of EAN13+5 barcode symbology.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.IssnPlus5BarcodeSymbology.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.SymbologySubsets.IssnPlus5BarcodeSymbology" /> class.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.IssnPlus5BarcodeSymbology.Name">
            <summary>
            Gets a name of this barcode symbology subset.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.IssnPlus5BarcodeSymbology.BaseType">
            <summary>
            Gets a base barcode symbology type of this barcode symbology subset.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.SymbologySubsets.Jan13BarcodeSymbology">
            <summary>
            Defines the JAN-13 barcode symbology -
            subset of EAN-13 barcode symbology, for JAN barcodes the first two digits 
            must be 45 or 49 which identifies Japan.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.SymbologySubsets.JanBarcodeSymbology">
            <summary>
            Defines the base class of JAN (JAN-13, JAN-8) barcode symbology -
            subset of EAN barcode symbology.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.JanBarcodeSymbology.#ctor(Vintasoft.WpfBarcode.BarcodeType)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.SymbologySubsets.JanBarcodeSymbology" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.JanBarcodeSymbology.Decode(Vintasoft.WpfBarcode.IBarcodeInfo)">
            <summary>
            Decodes the source barcode symbology value into the barcode symbology subset value.
            </summary>
            <param name="info">Source barcode symbology value.</param>
            <returns>
            Barcode symbology subset value.
            </returns>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.JanBarcodeSymbology.Encode(Vintasoft.WpfBarcode.BarcodeInfo.ValueItemBase,Vintasoft.WpfBarcode.WriterSettings)">
            <summary>
            Encodes the barcode symbology subset value into the source barcode symbology value
            using provided barcode writer settings and
            saves the source barcode symbology value in the barcode writer settings.
            </summary>
            <param name="value">The barcode symbology subset value to encode.</param>
            <param name="settings">Barcode writer settings.</param>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.JanBarcodeSymbology.Name">
            <summary>
            Gets a name of this barcode symbology subset.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.JanBarcodeSymbology.BaseType">
            <summary>
            Gets a base barcode symbology type of this barcode symbology subset.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.Jan13BarcodeSymbology.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.SymbologySubsets.Jan13BarcodeSymbology" /> class.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.SymbologySubsets.Jan13Plus2BarcodeSymbology">
            <summary>
            Class that defines the JAN-13+2 barcode symbology -
            subset of EAN-13+2 barcode symbology.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.Jan13Plus2BarcodeSymbology.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.SymbologySubsets.Jan13Plus2BarcodeSymbology" /> class.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.SymbologySubsets.Jan13Plus5BarcodeSymbology">
            <summary>
            Class that defines the JAN-13+5 barcode symbology -
            subset of EAN-13+5 barcode symbology.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.Jan13Plus5BarcodeSymbology.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.SymbologySubsets.Jan13Plus5BarcodeSymbology" /> class.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.SymbologySubsets.Jan8BarcodeSymbology">
            <summary>
            Defines the JAN-8 barcode symbology -
            subset of EAN-8 barcode symbology.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.Jan8BarcodeSymbology.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.SymbologySubsets.Jan8BarcodeSymbology" /> class.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.SymbologySubsets.Jan8Plus2BarcodeSymbology">
            <summary>
            Defines the JAN-8+2 barcode symbology -
            subset of EAN-8+2 barcode symbology.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.Jan8Plus2BarcodeSymbology.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.SymbologySubsets.Jan8Plus2BarcodeSymbology" /> class.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.SymbologySubsets.Jan8Plus5BarcodeSymbology">
            <summary>
            Defines the JAN-8+5 barcode symbology -
            subset of EAN-8+5 barcode symbology.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.Jan8Plus5BarcodeSymbology.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.SymbologySubsets.Jan8Plus5BarcodeSymbology" /> class.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.SymbologySubsets.NumlyNumberBarcodeSymbology">
            <summary>
            Defines the Numly Number (ESN, Electronic Serial Number, 
            Electronic Standard Book Number, ESBN) barcode symbology -
            subset of Code 39 barcode symbology.
            </summary>
            <remarks>
            Numly Number is a unique identifier that allows an author or publisher to assign to content and
            track licensing of each id assignment.
            The Numly Number consists of a 19 digit number generated by an algorithm maintained by Numly.com.
            </remarks>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.NumlyNumberBarcodeSymbology.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.SymbologySubsets.NumlyNumberBarcodeSymbology" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.NumlyNumberBarcodeSymbology.Decode(Vintasoft.WpfBarcode.IBarcodeInfo)">
            <summary>
            Decodes the source barcode symbology value into the barcode symbology subset value.
            </summary>
            <param name="info">Source barcode symbology value.</param>
            <returns>
            Barcode symbology subset value.
            </returns>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.NumlyNumberBarcodeSymbology.Encode(Vintasoft.WpfBarcode.BarcodeInfo.ValueItemBase,Vintasoft.WpfBarcode.WriterSettings)">
            <summary>
            Encodes the barcode symbology subset value into the source barcode symbology value
            using provided barcode writer settings and
            saves the source barcode symbology value in the barcode writer settings.
            </summary>
            <param name="value">The barcode symbology subset value to encode.</param>
            <param name="settings">Barcode writer settings.</param>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.NumlyNumberBarcodeSymbology.Name">
            <summary>
            Gets a name of this barcode symbology subset.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.NumlyNumberBarcodeSymbology.BaseType">
            <summary>
            Gets a base barcode symbology type of this barcode symbology subset.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.SymbologySubsets.OpcBarcodeSymbology">
            <summary>
            Defines the OPC (Optical Product Code) barcode symbology -
            subset of Interlaved 2 of 5 barcode symbology.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.OpcBarcodeSymbology.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.SymbologySubsets.OpcBarcodeSymbology" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.OpcBarcodeSymbology.Decode(Vintasoft.WpfBarcode.IBarcodeInfo)">
            <summary>
            Decodes the source barcode symbology value into the barcode symbology subset value.
            </summary>
            <param name="info">Source barcode symbology value.</param>
            <returns>
            Barcode symbology subset value.
            </returns>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.OpcBarcodeSymbology.Encode(Vintasoft.WpfBarcode.BarcodeInfo.ValueItemBase,Vintasoft.WpfBarcode.WriterSettings)">
            <summary>
            Encodes the barcode symbology subset value into the source barcode symbology value
            using provided barcode writer settings and
            saves the source barcode symbology value in the barcode writer settings.
            </summary>
            <param name="value">The barcode symbology subset value to encode.</param>
            <param name="settings">Barcode writer settings.</param>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.OpcBarcodeSymbology.Name">
            <summary>
            Gets a name of this barcode symbology subset.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.OpcBarcodeSymbology.BaseType">
            <summary>
            Gets a base barcode symbology type of this barcode symbology subset.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeInfo.PpnBarcodeInfo">
            <summary>
            Contains information about recognized PPN barcode.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.PpnBarcodeInfo.PpnValue">
            <summary>
            Gets the PPN barcode value.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.SymbologySubsets.PpnBarcodeSymbology">
            <summary>
            Defines the PPN (IFA PPN-Code, Pharmacy Product Number) barcode symbology -
            subset of DataMatrix barcode symbology.
            </summary>
            <remarks>
            Pharmacy Product Number (PPN) is a globally unique article number for products 
            in the area of health care in which the national article number is embedded. 
            Depending on the type of product, the PPN-Code is made up of different elements 
            either the PPN alone or in combination with additional data elements: 
            Batch Number, Serial Number, Expiry Date, Date of Manufacture, and GTIN. 
            The specification of this application is maintained at 
            Informationsstelle für Arzneispezialitaeten GmbH (IFA).
            </remarks>
            <example>This example shows how to generate and recognize PPN barcode.
            <code lang="VB.NET">   
            Imports System.Windows.Media.Imaging   
               
            Imports Vintasoft.WpfBarcode   
            Imports Vintasoft.WpfBarcode.BarcodeInfo   
            Imports Vintasoft.WpfBarcode.SymbologySubsets   
               
            Class PPNExample   
            	''' &lt;summary&gt;   
            	''' Generates and recognizes PPN barcode.   
            	''' &lt;/summary&gt;   
            	Public Shared Sub Test()   
            		' create PPN barcode value   
            		Dim barcodeValue As New PpnBarcodeValue()   
            		' PPN   
            		barcodeValue.PharmacyProductNumber = "110375286414"   
            		' Batch   
            		barcodeValue.BatchNumber = "12345ABCD"   
            		' Expiry Date (YYMMDD)   
            		barcodeValue.ExpiryDate = "150617"   
            		' Serial Number   
            		barcodeValue.SerialNumber = "12345ABCDEF98765"   
               
            		' generate barcode image   
            		Dim barcodeImage As BitmapSource = Generate(barcodeValue)   
               
            		' recognize barcode value   
            		Dim recognizedValue As PpnBarcodeValue = Recognize(barcodeImage)   
               
            		' check value   
            		If barcodeValue.ToString() &lt;&gt; recognizedValue.ToString() Then   
            			Throw New ApplicationException()   
            		End If   
               
            		Console.WriteLine()   
            		Console.WriteLine("PPN Decoded Value:")   
            		If recognizedValue.PharmacyProductNumber IsNot Nothing Then   
            			Console.WriteLine(String.Format("PPN:                 {0}", recognizedValue.PharmacyProductNumber))   
            		End If   
            		If recognizedValue.BatchNumber IsNot Nothing Then   
            			Console.WriteLine(String.Format("Batch:               {0}", recognizedValue.BatchNumber))   
            		End If   
            		If recognizedValue.ExpiryDate IsNot Nothing Then   
            			Console.WriteLine(String.Format("Expiry Date:         {0}", recognizedValue.ExpiryDate))   
            		End If   
            		If recognizedValue.SerialNumber IsNot Nothing Then   
            			Console.WriteLine(String.Format("Serial Number:       {0}", recognizedValue.SerialNumber))   
            		End If   
            		If recognizedValue.DateOfManufacture IsNot Nothing Then   
            			Console.WriteLine(String.Format("Date of Manufacture: {0}", recognizedValue.DateOfManufacture))   
            		End If   
            		If recognizedValue.GTIN IsNot Nothing Then   
            			Console.WriteLine(String.Format("GTIN:                {0}", recognizedValue.GTIN))   
            		End If   
            		Console.WriteLine(String.Format("Is German PPN:       {0}", recognizedValue.IsGermanMarketPpn))   
            	End Sub   
               
            	''' &lt;summary&gt;   
            	''' Generates the PPN barcode image.   
            	''' &lt;/summary&gt;   
            	''' &lt;param name="barcodeValue"&gt;The barcode value.&lt;/param&gt;   
            	Private Shared Function Generate(barcodeValue As PpnBarcodeValue) As BitmapSource   
            		' create barcode writer   
            		Dim writer As New BarcodeWriter()   
               
            		' encode PPN barcode to writer settings   
            		BarcodeSymbologySubsets.PPN.Encode(barcodeValue, writer.Settings)   
               
            		' generate barcode image   
            		Return writer.GetBarcodeAsBitmapSource()   
            	End Function   
               
            	''' &lt;summary&gt;   
            	''' Recognizes the PPN barcode from image.   
            	''' &lt;/summary&gt;   
            	''' &lt;param name="barcodeImage"&gt;The barcode image.&lt;/param&gt;   
            	Private Shared Function Recognize(barcodeImage As BitmapSource) As PpnBarcodeValue   
            		' create barcode reader   
            		Using reader As New BarcodeReader()   
            			' specify that PPN barcode must be recognizeds   
            			reader.Settings.ScanBarcodeSubsets.Add(BarcodeSymbologySubsets.PPN)   
               
            			' recognize barcodes   
            			Dim info As IBarcodeInfo = reader.ReadBarcodes(barcodeImage)(0)   
               
            			Console.WriteLine(String.Format("Encoded PPN value        : {0}", info.Value))   
            			Console.WriteLine(String.Format("Encoded Data Matrix value: {0}", DirectCast(info, BarcodeSubsetInfo).BaseBarcodeInfo.Value))   
               
            			' return PPN value   
            			Return DirectCast(info, PpnBarcodeInfo).PpnValue   
            		End Using   
            	End Function   
            End Class
            </code>
            <code lang="C#">
            using System;
            using System.Windows.Media.Imaging;
            
            using Vintasoft.WpfBarcode;
            using Vintasoft.WpfBarcode.BarcodeInfo;
            using Vintasoft.WpfBarcode.SymbologySubsets;
            
            class PPNExample
            {
                /// &lt;summary&gt;
                /// Generates and recognizes PPN barcode.
                /// &lt;/summary&gt;
                public static void Test()
                {
                    // create PPN barcode value
                    PpnBarcodeValue barcodeValue = new PpnBarcodeValue();
                    // PPN
                    barcodeValue.PharmacyProductNumber = "110375286414";
                    // Batch
                    barcodeValue.BatchNumber = "12345ABCD";
                    // Expiry Date (YYMMDD)
                    barcodeValue.ExpiryDate = "150617";
                    // Serial Number
                    barcodeValue.SerialNumber = "12345ABCDEF98765";
            
                    // generate barcode image
                    BitmapSource barcodeImage = Generate(barcodeValue);
            
                    // recognize barcode value
                    PpnBarcodeValue recognizedValue = Recognize(barcodeImage);
            
                    // check value
                    if (barcodeValue.ToString() != recognizedValue.ToString())
                        throw new ApplicationException();
            
                    Console.WriteLine();
                    Console.WriteLine("PPN Decoded Value:");
                    if (recognizedValue.PharmacyProductNumber != null)
                        Console.WriteLine(string.Format("PPN:                 {0}", recognizedValue.PharmacyProductNumber));
                    if (recognizedValue.BatchNumber != null)
                        Console.WriteLine(string.Format("Batch:               {0}", recognizedValue.BatchNumber));
                    if (recognizedValue.ExpiryDate != null)
                        Console.WriteLine(string.Format("Expiry Date:         {0}", recognizedValue.ExpiryDate));
                    if (recognizedValue.SerialNumber != null)
                        Console.WriteLine(string.Format("Serial Number:       {0}", recognizedValue.SerialNumber));
                    if (recognizedValue.DateOfManufacture != null)
                        Console.WriteLine(string.Format("Date of Manufacture: {0}", recognizedValue.DateOfManufacture));
                    if (recognizedValue.GTIN != null)
                        Console.WriteLine(string.Format("GTIN:                {0}", recognizedValue.GTIN));
                    Console.WriteLine(string.Format("Is German PPN:       {0}", recognizedValue.IsGermanMarketPpn));
                }
            
                /// &lt;summary&gt;
                /// Generates the PPN barcode image.
                /// &lt;/summary&gt;
                /// &lt;param name="barcodeValue"&gt;The barcode value.&lt;/param&gt;
                private static BitmapSource Generate(PpnBarcodeValue barcodeValue)
                {
                    // create barcode writer
                    BarcodeWriter writer = new BarcodeWriter();
            
                    // encode PPN barcode to writer settings
                    BarcodeSymbologySubsets.PPN.Encode(barcodeValue, writer.Settings);
                    
                    // generate barcode image
                    return writer.GetBarcodeAsBitmapSource();
                }
            
                /// &lt;summary&gt;
                /// Recognizes the PPN barcode from image.
                /// &lt;/summary&gt;
                /// &lt;param name="barcodeImage"&gt;The barcode image.&lt;/param&gt;
                private static PpnBarcodeValue Recognize(BitmapSource barcodeImage)
                {
                    // create barcode reader
                    using (BarcodeReader reader = new BarcodeReader())
                    {
                        // specify that PPN barcode must be recognizeds
                        reader.Settings.ScanBarcodeSubsets.Add(BarcodeSymbologySubsets.PPN);
            
                        // recognize barcodes
                        IBarcodeInfo info = reader.ReadBarcodes(barcodeImage)[0];
            
                        Console.WriteLine(string.Format("Encoded PPN value        : {0}",
                            info.Value));
                        Console.WriteLine(string.Format("Encoded Data Matrix value: {0}",
                            ((BarcodeSubsetInfo)info).BaseBarcodeInfo.Value));
            
                        // return PPN value
                        return ((PpnBarcodeInfo)info).PpnValue;
                    }
                }    
            }
            </code>
            </example>
            <seealso cref="T:Vintasoft.WpfBarcode.BarcodeInfo.PpnBarcodeValue" />
            <seealso cref="T:Vintasoft.WpfBarcode.BarcodeInfo.PpnBarcodeInfo" />
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.PpnBarcodeSymbology.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.SymbologySubsets.PpnBarcodeSymbology" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.PpnBarcodeSymbology.Decode(Vintasoft.WpfBarcode.IBarcodeInfo)">
            <summary>
            Decodes the source barcode symbology value into the barcode symbology subset value.
            </summary>
            <param name="info">Source barcode symbology value.</param>
            <returns>
            Barcode symbology subset value.
            </returns>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.PpnBarcodeSymbology.Encode(Vintasoft.WpfBarcode.BarcodeInfo.ValueItemBase,Vintasoft.WpfBarcode.WriterSettings)">
            <summary>
            Encodes the barcode symbology subset value into the source barcode symbology value
            using provided barcode writer settings and
            saves the source barcode symbology value in the barcode writer settings.
            </summary>
            <param name="value">The barcode symbology subset value to encode.</param>
            <param name="settings">Barcode writer settings.</param>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.PpnBarcodeSymbology.CreateValue">
            <summary>
            Creates the barcode symbology subset value with default (empty) value.
            </summary>
            <returns>
            A new barcode symbology subset value with default (empty) value.
            </returns>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.PpnBarcodeSymbology.Name">
            <summary>
            Gets a name of this barcode symbology subset.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.PpnBarcodeSymbology.BaseType">
            <summary>
            Gets a base barcode symbology type of this barcode symbology subset.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeInfo.PpnBarcodeValue">
            <summary>
            Contains information about a decoded value of PPN barcode.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.PpnBarcodeValue.ProductNumberIdentifier">
            <summary>
            The product number data identifier.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.PpnBarcodeValue.BatchNumberIdentifier">
            <summary>
            The batch number data identifier.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.PpnBarcodeValue.ExpiryDateIdentifier">
            <summary>
            The batch expiry date data identifier.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.PpnBarcodeValue.SerialNumberIdentifier">
            <summary>
            The Serial number data identifier.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.PpnBarcodeValue.DateOfManufactureIdentifier">
            <summary>
            The Date of manufacture data identifier.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.PpnBarcodeValue.GTINIdentifier">
            <summary>
            The GTIN data identifier.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeInfo.PpnBarcodeValue.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.PpnBarcodeValue" /> class. 
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeInfo.PpnBarcodeValue.#ctor(Vintasoft.WpfBarcode.ISO15418.DataField[])">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.PpnBarcodeValue" /> class.
            </summary>
            <param name="dataFields">The data fields.</param>
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeInfo.PpnBarcodeValue.GetDataFields">
            <summary>
            Gets the data fields in ASC MH10.8.2 format.
            </summary>
            <returns>Data fields.</returns>
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeInfo.PpnBarcodeValue.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.PpnBarcodeValue.PharmacyProductNumber">
            <summary>
            Gets or sets the PPN (Pharmacy Product Number).
            </summary>
            <remarks>
            Use '~C' at end of value to calculate checksum autamatically.
            </remarks>
            <seealso cref="P:Vintasoft.WpfBarcode.BarcodeInfo.PpnBarcodeValue.IsGermanMarketPpn" />
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.PpnBarcodeValue.IsGermanMarketPpn">
            <summary>
            Gets a value indicating whether PPN is german market PPN (11+PZN8+~C).
            </summary>
            <value>
            <b>true</b> if PPN is german market PPN; otherwise, <b>false</b>.
            </value>
            <remarks>
            For the German market, the PPN contains the pharmaceutical central number 
            (PZN), prefixed with the "Product Registration Agency Code" "11". The PPN 
            is formed using only the 8-digit PZN (PZN8). The PZN7 (seven-digit PZN) is
            converted into a PZN8 by inserting a leading zero.
            </remarks>
            <seealso cref="T:Vintasoft.WpfBarcode.SymbologySubsets.PznBarcodeSymbology" />
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.PpnBarcodeValue.BatchNumber">
            <summary>
            Gets or sets the Batch number.
            </summary>
            <remarks>
            The batch number is generated by the pharmaceutical
            entrepreneur and forms therefore the relevant data
            element for the code.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.PpnBarcodeValue.ExpiryDate">
            <summary>
            Gets or sets the Expiry date.
            </summary>
            <remarks>
            The expiry date is generated by the pharmaceutical
            entrepreneur and forms therefore the relevant data
            element for the code.
            The expiry date has the format "YYMMDD".
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.PpnBarcodeValue.SerialNumber">
            <summary>
            Gets or sets the Serial number.
            </summary>
            <remarks>
            The serial number is generated by the pharmaceutical
            entrepreneur and forms therefore the relevant data
            element for the code. It is mandatory for the medicinal
            product verification process. For products, where
            verification is not mandated, it is optional. With regard
            to the generation of serial numbers refer to "Coding rules securPharm".
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.PpnBarcodeValue.DateOfManufacture">
            <summary>
            Gets or sets the Date of manufacture.
            </summary>
            <remarks>
            The date of manufacture is generated by the pharmaceutical
            entrepreneur and forms therefore the relevant
            data element for the code.
            Date of manufacture has the format "YYYYMMDD".
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.PpnBarcodeValue.GTIN">
            <summary>
            Gets or sets the GTIN (Global Trade Item Number).
            </summary>
            <remarks>
            The manufacturer generates a GTIN following the GS1
            rules. It is to be used for products where, in addition to
            the PPN a GTIN is given, e.g. for dietary supplements.
            GTIN contain 14 digits.
            </remarks>
        </member>
        <member name="T:Vintasoft.WpfBarcode.SymbologySubsets.PznBarcodeSymbology">
            <summary>
            Defines the PZN (Pharmazentralnummer, Pharma-Zentral-Nummer, Code PZN, CodePZN, PZN7, PZN8) barcode symbology -
            subset of Code 39 barcode symbology.
            </summary>
            <remarks>
            PZN is used for distribution of pharmaceutical or health care products in Germany.
            </remarks>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.PznBarcodeSymbology.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.SymbologySubsets.PznBarcodeSymbology" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.PznBarcodeSymbology.Decode(Vintasoft.WpfBarcode.IBarcodeInfo)">
            <summary>
            Decodes the source barcode symbology value into the barcode symbology subset value.
            </summary>
            <param name="info">Source barcode symbology value.</param>
            <returns>
            Barcode symbology subset value.
            </returns>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.PznBarcodeSymbology.Encode(Vintasoft.WpfBarcode.BarcodeInfo.ValueItemBase,Vintasoft.WpfBarcode.WriterSettings)">
            <summary>
            Encodes the barcode symbology subset value into the source barcode symbology value
            using provided barcode writer settings and
            saves the source barcode symbology value in the barcode writer settings.
            </summary>
            <param name="value">The barcode symbology subset value to encode.</param>
            <param name="settings">Barcode writer settings.</param>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.PznBarcodeSymbology.Name">
            <summary>
            Gets a name of this barcode symbology subset.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.PznBarcodeSymbology.BaseType">
            <summary>
            Gets a base barcode symbology type of this barcode symbology subset.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeInfo.MailmarkCmdmBarcodeInfo">
            <summary>
            Contains information about recognized Mailmark CMDM 2D barcode.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.MailmarkCmdmBarcodeInfo.DecodedValue">
            <summary>
            Gets a decode value of Mailmark CMDM 2D barcode.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.MailmarkCmdmBarcodeInfo.CmdmType">
            <summary>
            Gets a type of Mailmark CMDM 2D barcode.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.SymbologySubsets.RoyalMailMailmark.MailmarkCmdmBarcodeSymbology">
            <summary>
            Defines the Royal Mail Mailmark CMDM 2D barcode symbology -
            subset of DataMatrix barcode symbology.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.RoyalMailMailmark.MailmarkCmdmBarcodeSymbology.#ctor(Vintasoft.WpfBarcode.SymbologySubsets.RoyalMailMailmark.MailmarkCmdmType)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.SymbologySubsets.RoyalMailMailmark.MailmarkCmdmBarcodeSymbology" /> class. 
            </summary>
            <param name="cmdmType">Type of Mailmark CMDM 2D barcode.</param>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.RoyalMailMailmark.MailmarkCmdmBarcodeSymbology.Decode(Vintasoft.WpfBarcode.IBarcodeInfo)">
            <summary>
            Decodes the DataMatrix barcode value into the Mailmark CMDM 2D barcode value.
            </summary>
            <param name="info">DataMatrix barcode value.</param>
            <returns>Mailmark CMDM 2D barcode value.</returns>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.RoyalMailMailmark.MailmarkCmdmBarcodeSymbology.Encode(Vintasoft.WpfBarcode.BarcodeInfo.ValueItemBase,Vintasoft.WpfBarcode.WriterSettings)">
            <summary>
            Encodes the Mailmark CMDM 2D barcode value into the source barcode symbology value
            using provided barcode writer settings and
            saves the source barcode symbology value in the barcode writer settings.
            </summary>
            <param name="value">The Mailmark CMDM 2D barcode value to encode.</param>
            <param name="settings">Barcode writer settings.</param>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.RoyalMailMailmark.MailmarkCmdmBarcodeSymbology.CreateValue">
            <summary>
            Creates a new <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.MailmarkCmdmValueItem" /> object.
            </summary>
            <returns>A new <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.MailmarkCmdmValueItem" /> object.</returns>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.RoyalMailMailmark.MailmarkCmdmBarcodeSymbology.CmdmType">
            <summary>
            Gets a type of Mailmark CMDM 2D barcode.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.RoyalMailMailmark.MailmarkCmdmBarcodeSymbology.Name">
            <summary>
            Gets a name of barcode subset.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.RoyalMailMailmark.MailmarkCmdmBarcodeSymbology.BaseType">
            <summary>
            Gets a base barcode type of barode subset.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.SymbologySubsets.RoyalMailMailmark.MailmarkCmdmType">
            <summary>
            Specifies available types of Mailmark 2D CMDM barcode.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.SymbologySubsets.RoyalMailMailmark.MailmarkCmdmType.CmdmType7">
            <summary>
            2D CMDM type 7 (24 x 24 modules).
            </summary>
            <remarks>
            Total capacity: 51 characters, available for customer use: 6 characters.
            </remarks>
        </member>
        <member name="F:Vintasoft.WpfBarcode.SymbologySubsets.RoyalMailMailmark.MailmarkCmdmType.CmdmType9">
            <summary>
            2D CMDM type 9 (32 x 32 modules).
            </summary>
            <remarks>
            Total capacity: 90 characters, available for customer use: 45 characters.
            </remarks>
        </member>
        <member name="F:Vintasoft.WpfBarcode.SymbologySubsets.RoyalMailMailmark.MailmarkCmdmType.CmdmType29">
            <summary>
            2D CMDM type 29 (16 x 48 modules).
            </summary>
            <remarks>
            Total capacity: 70 characters, available for customer use: 25 characters.
            </remarks>
        </member>
        <member name="T:Vintasoft.WpfBarcode.SymbologySubsets.RoyalMailMailmark.MailmarkCmdmType29BarcodeSymbology">
            <summary>
            Defines the Royal Mail Mailmark CMDM Type29 2D barcode symbology -
            subset of DataMatrix barcode symbology.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.RoyalMailMailmark.MailmarkCmdmType29BarcodeSymbology.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.SymbologySubsets.RoyalMailMailmark.MailmarkCmdmType29BarcodeSymbology" /> class. 
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.SymbologySubsets.RoyalMailMailmark.MailmarkCmdmType7BarcodeSymbology">
            <summary>
            Defines the Royal Mail Mailmark CMDM Type7 2D barcode symbology -
            subset of DataMatrix barcode symbology.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.RoyalMailMailmark.MailmarkCmdmType7BarcodeSymbology.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.SymbologySubsets.RoyalMailMailmark.MailmarkCmdmType7BarcodeSymbology" /> class. 
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.SymbologySubsets.RoyalMailMailmark.MailmarkCmdmType9BarcodeSymbology">
            <summary>
            Defines the Royal Mail Mailmark CMDM Type9 2D barcode symbology -
            subset of DataMatrix barcode symbology.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.RoyalMailMailmark.MailmarkCmdmType9BarcodeSymbology.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.SymbologySubsets.RoyalMailMailmark.MailmarkCmdmType9BarcodeSymbology" /> class. 
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeInfo.MailmarkCmdmValueItem">
            <summary>
            Contains information about a decoded value of Mailmark CMDM 2D barcode.
            </summary>
            <example>Here is a simple example that demonstrates how to 
            generate Mailmark CMDM 2D barcode:
            <code lang="VB.NET">   
            Imports System.Windows.Media.Imaging   
               
            Imports Vintasoft.WpfBarcode   
            Imports Vintasoft.WpfBarcode.BarcodeInfo   
            Imports Vintasoft.WpfBarcode.SymbologySubsets   
               
            ''' &lt;summary&gt;   
            ''' Test that demonstrates how to generate image with Mailmark CMDM Type29 barcode and   
            ''' how to recognize Mailmark CMDM Type29 barcode on the image.   
            ''' &lt;/summary&gt;   
            Class MailmarkCmdmValueItemExample   
               
            	''' &lt;summary&gt;   
            	''' Run the test.   
            	''' &lt;/summary&gt;   
            	Public Shared Sub Test()   
            		' create the Mailmark CMDM 2D barcode value   
            		Dim item As New MailmarkCmdmValueItem()   
            		item.InformationTypeId = "0"   
            		item.VersionId = "1"   
            		item.[Class] = "0"   
            		item.SupplyChainId = "1000009"   
            		item.ItemId = "00009609"   
            		item.Dps = "W1T1HQ9Z "   
            		item.RtsFlag = "0"   
            		item.ReturnToSenderPostCode = "SN35XX "   
            		item.CustomerContent = "ABCDEFGHIJ1234567890A"   
               
            		' create the barcode writer   
            		Dim writer As New BarcodeWriter()   
               
            		' encode Mailmark CMDM Type29 barcode   
            		BarcodeSymbologySubsets.MailmarkCmdmType29.Encode(item, writer.Settings)   
               
            		Dim infos As IBarcodeInfo()   
               
            		' get image with barcode   
            		Dim image As BitmapSource = writer.GetBarcodeAsBitmapSource()   
               
            		' create the barcode reader   
            		Using reader As New BarcodeReader()   
            			' specify that reader must search for Mailmark CMDM Type29 barcodes only   
            			reader.Settings.ScanBarcodeTypes = BarcodeType.None   
            			reader.Settings.ScanBarcodeSubsets.Add(BarcodeSymbologySubsets.MailmarkCmdmType29)   
               
            			' recognize barcode   
            			infos = reader.ReadBarcodes(image)   
            		End Using   
               
            		' get barcode value   
            		Dim readItem As MailmarkCmdmValueItem = DirectCast(infos(0).ValueItems(0), MailmarkCmdmValueItem)   
               
            		' print barcode value   
            		Console.WriteLine("Decoded value =              '{0}'", item.ToString())   
            		Console.WriteLine("Information Type ID =        '{0}'", item.InformationTypeId)   
            		Console.WriteLine("Version ID =                 '{0}'", item.VersionId)   
            		Console.WriteLine("Class =                      '{0}'", item.[Class])   
            		Console.WriteLine("Supply Chain ID =            '{0}'", item.SupplyChainId)   
            		Console.WriteLine("Item ID =                    '{0}'", item.ItemId)   
            		Console.WriteLine("DPS =                        '{0}'", item.Dps)   
            		Console.WriteLine("RTS Flag =                   '{0}'", item.RtsFlag)   
            		Console.WriteLine("Return To Sender Post Code = '{0}'", item.ReturnToSenderPostCode)   
            		Console.WriteLine("Customer Content =           '{0}'", item.CustomerContent)   
               
            		' check recognized barcode value   
            		If item.ToString() &lt;&gt; readItem.ToString() Then   
            			Throw New ApplicationException()   
            		End If   
            	End Sub   
            End Class   
               
            ' This code example produces the following output:    
            '   
            '   Decoded value =              'JGB 010100000900009609W1T1HQ9Z 0SN35XX       ABCDEFGHIJ1234567890A'   
            '   Information Type ID =        '0'   
            '   Version ID =                 '1'   
            '   Class =                      '0'   
            '   Supply Chain ID =            '1000009'   
            '   Item ID =                    '00009609'   
            '   DPS =                        'W1T1HQ9Z '   
            '   RTS Flag =                   '0'   
            '   Return To Sender Post Code = 'SN35XX '   
            '   Customer Content =           'ABCDEFGHIJ1234567890A'   
            '   
            
            </code>
            <code lang="C#">
            using System;
            using System.Windows.Media.Imaging;
            
            using Vintasoft.WpfBarcode;
            using Vintasoft.WpfBarcode.BarcodeInfo;
            using Vintasoft.WpfBarcode.SymbologySubsets;
            
            /// &lt;summary&gt;
            /// Test that demonstrates how to generate image with Mailmark CMDM Type29 barcode and
            /// how to recognize Mailmark CMDM Type29 barcode on the image.
            /// &lt;/summary&gt;
            class MailmarkCmdmValueItemExample
            {
            
                /// &lt;summary&gt;
                /// Run the test.
                /// &lt;/summary&gt;
                public static void Test()
                {
                    // create the Mailmark CMDM 2D barcode value
                    MailmarkCmdmValueItem item = new MailmarkCmdmValueItem();
                    item.InformationTypeId = "0";
                    item.VersionId = "1";
                    item.Class = "0";
                    item.SupplyChainId = "1000009";
                    item.ItemId = "00009609";
                    item.Dps = "W1T1HQ9Z ";
                    item.RtsFlag = "0";
                    item.ReturnToSenderPostCode = "SN35XX ";
                    item.CustomerContent = "ABCDEFGHIJ1234567890A";
            
                    // create the barcode writer
                    BarcodeWriter writer = new BarcodeWriter();
            
                    // encode Mailmark CMDM Type29 barcode
                    BarcodeSymbologySubsets.MailmarkCmdmType29.Encode(item, writer.Settings);
            
                    IBarcodeInfo[] infos;
            
                    // get image with barcode
                    BitmapSource image = writer.GetBarcodeAsBitmapSource();
            
                    // create the barcode reader
                    using (BarcodeReader reader = new BarcodeReader())
                    {
                        // specify that reader must search for Mailmark CMDM Type29 barcodes only
                        reader.Settings.ScanBarcodeTypes = BarcodeType.None;
                        reader.Settings.ScanBarcodeSubsets.Add(BarcodeSymbologySubsets.MailmarkCmdmType29);
            
                        // recognize barcode
                        infos = reader.ReadBarcodes(image);
                    }
            
                    // get barcode value
                    MailmarkCmdmValueItem readItem = (MailmarkCmdmValueItem)infos[0].ValueItems[0];
            
                    // print barcode value
                    Console.WriteLine("Decoded value =              '{0}'", item.ToString());
                    Console.WriteLine("Information Type ID =        '{0}'", item.InformationTypeId);
                    Console.WriteLine("Version ID =                 '{0}'", item.VersionId);
                    Console.WriteLine("Class =                      '{0}'", item.Class);
                    Console.WriteLine("Supply Chain ID =            '{0}'", item.SupplyChainId);
                    Console.WriteLine("Item ID =                    '{0}'", item.ItemId);
                    Console.WriteLine("DPS =                        '{0}'", item.Dps);
                    Console.WriteLine("RTS Flag =                   '{0}'", item.RtsFlag);
                    Console.WriteLine("Return To Sender Post Code = '{0}'", item.ReturnToSenderPostCode);
                    Console.WriteLine("Customer Content =           '{0}'", item.CustomerContent);
            
                    // check recognized barcode value
                    if (item.ToString() != readItem.ToString())
                        throw new ApplicationException();
                }
            }
            
            /* This code example produces the following output: 
            
               Decoded value =              'JGB 010100000900009609W1T1HQ9Z 0SN35XX       ABCDEFGHIJ1234567890A'
               Information Type ID =        '0'
               Version ID =                 '1'
               Class =                      '0'
               Supply Chain ID =            '1000009'
               Item ID =                    '00009609'
               DPS =                        'W1T1HQ9Z '
               RTS Flag =                   '0'
               Return To Sender Post Code = 'SN35XX '
               Customer Content =           'ABCDEFGHIJ1234567890A'
            */
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeInfo.MailmarkCmdmValueItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.MailmarkCmdmValueItem" /> class. 
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeInfo.MailmarkCmdmValueItem.ToString">
            <summary>
            Converts the information about value item of this instance to its equivalent
            string.
            </summary>
            <returns>
            String representation of value item.
            </returns>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.MailmarkCmdmValueItem.UpuCountryId">
            <summary>
            Gets the UPU Country ID.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.MailmarkCmdmValueItem.InformationTypeId">
            <summary>
            Gets or sets the Royal Mail Mailmark barcode payload for each product type.
            </summary>
            <value>
            <ul>
            <li>"0" – Domestic Sorted And Unsorted</li>
            <li>"1" – International Sorted And Unsorted (for potential future use)</li>
            <li>"2" – Response Services (for potential future use)</li>
            <li>"A" – Online Postage</li>
            <li>"B" - Franking</li>
            <li>"C" – Consolidation</li>
            </ul>
            </value>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.MailmarkCmdmValueItem.VersionId">
            <summary>
            Gets or sets the barcode version as relevant to each Information Type ID.
            </summary>
            <value>
            <ul>"
            <li>"1" – For Mailmark barcode</li>
            <li>"0", "2" to "9", "A" to "Z" - spare for future use</li>
            </ul>
            </value>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.MailmarkCmdmValueItem.Class">
            <summary>
            Gets or sets the class of the item.
            </summary>
            <value>
            <ul>
            <li>"0" - Null or Test</li>
            <li>"1" - 1C (Retail)</li>
            <li>"2" - 2C (Retail)</li>
            <li>"3" - 3C (Retail)</li>
            <li>"4" - Premium (Retail Publishing Mail) (for potential future use)</li>
            <li>"5" - Deferred (Retail)</li>
            <li>"6" - Air (Retail) (for potential future use)</li>
            <li>"7" - Surface (Retail) (for potential future use)</li>
            <li>"8" - Premium (Network Access)</li>
            <li>"9" - Standard (Network Access)</li>
            <li>"A" to "Z" – Spare(for potential future use)</li>
            </ul>
            </value>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.MailmarkCmdmValueItem.SupplyChainId">
            <summary>
            Gets or sets the unique chain of customers involved in the mailing.
            </summary>
            <value>
            From "0000000" to "9999999".
            </value>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.MailmarkCmdmValueItem.ItemId">
            <summary>
            Gets or sets the unique item within the Supply Chain ID.
            </summary>
            <value>
            From "00000000" to "99999999".
            </value>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.MailmarkCmdmValueItem.Dps">
            <summary>
            Gets or sets the Destination Post Code plus Delivery Point Suffix (DPS).
            </summary>
            <value>
            The PC and DP must comply with a valid PAF format 
            (see Royal Mail Mailmark® barcode definition document, Appendix A).
            </value>
            <remarks>
            Contains the Postcode of the Delivery Address with DPS.<br />
            If inland the Postcode/DP contains the following number of characters:<br />
            <ul>
            <li>Area (1 or 2 characters)</li>
            <li>District (1 or 2 characters)</li>
            <li>Sector (1 character)</li>
            <li>Unit (2 characters)</li>
            <li>DPS (2 characters).</li>
            </ul>
            If no destination post code information is available this field shall be filled 
            with 9 space characters.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.MailmarkCmdmValueItem.RtsFlag">
            <summary>
            Gets or sets a flag which indicates what level of RTS service is being requested.
            </summary>
            <value>
            <ul>
            <li>"0" – None</li>
            <li>"1" – Response Services Unique (for potential future use)</li>
            </ul>
            </value>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.MailmarkCmdmValueItem.ReturnToSenderPostCode">
            <summary>
            Gets or sets the Return to Sender Post Code but no DPS.
            </summary>
            <value>
            The PC (without DPS) must comply with a PAF® format 
            (see Royal Mail Mailmark® barcode definition document, Appendix A).<br />
            If no RTS post code exists this field shall be filled with 7 space characters.
            </value>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.MailmarkCmdmValueItem.Reserved">
            <summary>
            Gets or sets field reserved by Royal Mail.
            </summary>
            <value>
            Must be filled with space characters until further notice.
            </value>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.MailmarkCmdmValueItem.CustomerContent">
            <summary>
            Gets or sets optional space for use by customer.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.SymbologySubsets.Sscc18BarcodeSymbology">
            <summary>
            Defines the SSCC-18 barcode symbology -
            subset of GS1-128 (UCC/EAN-128) barcode symbology with 
            SSCC (Serial Shipping Container Code) value.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.Sscc18BarcodeSymbology.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.SymbologySubsets.Sscc18BarcodeSymbology" /> class. 
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.Sscc18BarcodeSymbology.Decode(Vintasoft.WpfBarcode.IBarcodeInfo)">
            <summary>
            Decodes the source barcode symbology value into the GS1 barcode value.
            </summary>
            <param name="info">Source barcode symbology value.</param>
            <returns>GS1 barcode value.</returns>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.Sscc18BarcodeSymbology.Encode(Vintasoft.WpfBarcode.BarcodeInfo.ValueItemBase,Vintasoft.WpfBarcode.WriterSettings)">
            <summary>
            Encodes the GS1 barcode value into the source barcode symbology value
            using provided barcode writer settings and
            saves the source barcode symbology value in the barcode writer settings.
            </summary>
            <param name="value">SSCC18 barcode value to encode.</param>
            <param name="settings">Barcode writer settings.</param>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.Sscc18BarcodeSymbology.BaseType">
            <summary>
            Gets a base barcode symbology type of this barcode symbology subset.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.Sscc18BarcodeSymbology.Name">
            <summary>
            Gets a name of barcode subset.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.Sscc18BarcodeSymbology.BaseSubset">
            <summary>
            Gets a base barcode symbology subset of this barcode symbology subset.
            </summary>
            <value>Always returns <see cref="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.GS1_128" />.</value>
        </member>
        <member name="T:Vintasoft.WpfBarcode.SymbologySubsets.SwissPostParcelBarcodeSymbology">
            <summary>
            Defines the Swiss PostParcel barcode symbology -
            subset of Code 128 barcode symbology.
            </summary>
            <remarks>
            The structure of the Swiss Post Parcel barcode is 18 numeric digits.
            </remarks>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.SwissPostParcelBarcodeSymbology.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.SymbologySubsets.SwissPostParcelBarcodeSymbology" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.SwissPostParcelBarcodeSymbology.Decode(Vintasoft.WpfBarcode.IBarcodeInfo)">
            <summary>
            Decodes the source barcode symbology value into the barcode symbology subset value.
            </summary>
            <param name="info">Source barcode symbology value.</param>
            <returns>
            Barcode symbology subset value.
            </returns>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.SwissPostParcelBarcodeSymbology.Encode(Vintasoft.WpfBarcode.BarcodeInfo.ValueItemBase,Vintasoft.WpfBarcode.WriterSettings)">
            <summary>
            Encodes the barcode symbology subset value into the source barcode symbology value
            using provided barcode writer settings and
            saves the source barcode symbology value in the barcode writer settings.
            </summary>
            <param name="value">The barcode symbology subset value to encode.</param>
            <param name="settings">Barcode writer settings.</param>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.SwissPostParcelBarcodeSymbology.Name">
            <summary>
            Gets a name of this barcode symbology subset.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.SwissPostParcelBarcodeSymbology.BaseType">
            <summary>
            Gets a base barcode symbology type of this barcode symbology subset.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.SymbologySubsets.VicsBolBarcodeSymbology">
            <summary>
            Defines the VICS BOL (VICS Bill of Lading, Voluntary Interindustry Commerce 
            Solutions Bill of Lading, BOL Barcode, 17-digit BOL) barcode symbology -
            subset of GS1-128 (UCC/EAN-128) barcode symbology.
            </summary>    
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.VicsBolBarcodeSymbology.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.SymbologySubsets.VicsBolBarcodeSymbology" /> class. 
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.VicsBolBarcodeSymbology.Decode(Vintasoft.WpfBarcode.IBarcodeInfo)">
            <summary>
            Decodes the source barcode symbology value into the VICS BOL barcode value.
            </summary>
            <param name="info">Source barcode symbology value.</param>
            <returns>VIS BOL barcode value.</returns>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.VicsBolBarcodeSymbology.Encode(Vintasoft.WpfBarcode.BarcodeInfo.ValueItemBase,Vintasoft.WpfBarcode.WriterSettings)">
            <summary>
            Encodes the barcode value into the source barcode symbology value
            using provided barcode writer settings and
            saves the source barcode symbology value in the barcode writer settings.
            </summary>
            <param name="value">Barcode value to encode.</param>
            <param name="settings">Barcode writer settings.</param>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.VicsBolBarcodeSymbology.BaseType">
            <summary>
            Gets a base barcode symbology type of this barcode symbology subset.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.VicsBolBarcodeSymbology.Name">
            <summary>
            Gets a name of barcode subset.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.VicsBolBarcodeSymbology.BaseSubset">
            <summary>
            Gets a base barcode symbology subset of this barcode symbology subset.
            </summary>
            <value>Always returns <see cref="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.GS1_128" />.</value>
        </member>
        <member name="T:Vintasoft.WpfBarcode.SymbologySubsets.VicsScacProBarcodeSymbology">
            <summary>
            Defines the VICS SCAC PRO (VICS Bill of Lading SCAC PRO, SCAC/Pro Barcode, 
            Standard Carrier Alpha Code, Carrier SCAC Barcode) barcode symbology -
            subset of GS1-128 (UCC/EAN-128) barcode symbology.
            </summary>    
            <remarks>
            The value of the VICS SCAC/Pro barcode is as specified below: 
            <ul>
            <li>Four alpha characters for SCAC. If the SCAC is less than four characters 
            in length, then a dash character (-) should be used to extend the field to 
            four characters.</li>
            <li>A maximum of 20-digit for PRO Number. Due to space limitations, numeric characters are
            recommended for the PRO number. If alpha characters are used, the number of 
            characters that fit in the available space on the Bill of Lading form is diminished
            considerably.</li>
            </ul>
            <br />
            Barcode value example: SCAC01234567890123456789.
            </remarks>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.VicsScacProBarcodeSymbology.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.SymbologySubsets.VicsScacProBarcodeSymbology" /> class. 
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.VicsScacProBarcodeSymbology.Decode(Vintasoft.WpfBarcode.IBarcodeInfo)">
            <summary>
            Decodes the source barcode symbology value into the VICS SCAC PRO barcode value.
            </summary>
            <param name="info">Source barcode symbology value.</param>
            <returns>VICS SCAC PRO barcode value.</returns>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.VicsScacProBarcodeSymbology.Encode(Vintasoft.WpfBarcode.BarcodeInfo.ValueItemBase,Vintasoft.WpfBarcode.WriterSettings)">
            <summary>
            Encodes the barcode value into the source barcode symbology value
            using provided barcode writer settings and
            saves the source barcode symbology value in the barcode writer settings.
            </summary>
            <param name="value">Barcode value to encode.</param>
            <param name="settings">Barcode writer settings.</param>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.VicsScacProBarcodeSymbology.BaseType">
            <summary>
            Gets a base barcode symbology type of this barcode symbology subset.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.VicsScacProBarcodeSymbology.Name">
            <summary>
            Gets a name of barcode subset.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.VicsScacProBarcodeSymbology.BaseSubset">
            <summary>
            Gets a base barcode symbology subset of this barcode symbology subset.
            </summary>
            <value>Always returns <see cref="P:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets.GS1_128" />.</value>
        </member>
        <member name="T:Vintasoft.WpfBarcode.SymbologySubsets.VinSymbology">
            <summary>
            Defines the VIN (Vehicle Identification Number) barcode symbology -
            subset of Code 39 barcode symbology.
            </summary>
            <remarks>
            Barcode reader checks the control symbol for North America VIN and
            sets confidence to 100 if control symbol is correct;
            otherwise the barcode reader sets confidence to 101 (N/A).<br />
            <br />
            For genetating the check digit for North America VIN use '~C' at 9 position in barcode value.
            </remarks>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.VinSymbology.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.SymbologySubsets.VinSymbology" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.VinSymbology.Decode(Vintasoft.WpfBarcode.IBarcodeInfo)">
            <summary>
            Decodes the source barcode symbology value into the barcode symbology subset value.
            </summary>
            <param name="info">Source barcode symbology value.</param>
            <returns>
            Barcode symbology subset value.
            </returns>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.VinSymbology.Encode(Vintasoft.WpfBarcode.BarcodeInfo.ValueItemBase,Vintasoft.WpfBarcode.WriterSettings)">
            <summary>
            Encodes the barcode symbology subset value into the source barcode symbology value
            using provided barcode writer settings and
            saves the source barcode symbology value in the barcode writer settings.
            </summary>
            <param name="value">The barcode symbology subset value to encode.</param>
            <param name="settings">Barcode writer settings.</param>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.VinSymbology.Name">
            <summary>
            Gets a name of this barcode symbology subset.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.VinSymbology.BaseType">
            <summary>
            Gets a base barcode symbology type of this barcode symbology subset.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.SymbologySubsets.XFACompressed.XFACompressedAztecBarcodeSymbology">
            <summary>
            Defines the Aztec barcode symbology subset with barcode values,
            which are compressed as defined in Adobe XFA Specification.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.SymbologySubsets.XFACompressed.XFACompressedBarcodeSymbologySubset">
            <summary>
            An abstract base class that defines the barcode symbology subset with barcode values,
            which are compressed as defined in Adobe XFA Specification.
            </summary>
            <remarks>
            The data that is placed in the barcode is a byte with a numeric value of 129, followed by
            a byte with a numeric value of 1, followed by the data compressed using the method defined by the
            Internet Engineering Task Force (IETF) in RFC1951 (DEFLATE Compressed Data Format
            Specification version 1.3). No predictor is used. <br />
            For details see: Adobe XML Forms Architecture (XFA) Specification, 12 Using Barcodes,
            Pre-Processing of Barcode Data.
            </remarks>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.XFACompressed.XFACompressedBarcodeSymbologySubset.#ctor(Vintasoft.WpfBarcode.BarcodeType)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.SymbologySubsets.XFACompressed.XFACompressedBarcodeSymbologySubset" /> class. 
            </summary>
            <param name="baseType">Base barcode type.</param>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.XFACompressed.XFACompressedBarcodeSymbologySubset.Decode(Vintasoft.WpfBarcode.IBarcodeInfo)">
            <summary>
            Decodes the source barcode symbology value into the XFACompressed barcode value.
            </summary>
            <param name="info">Source barcode symbology value.</param>
            <returns>Barcode symbology subset value.</returns>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.XFACompressed.XFACompressedBarcodeSymbologySubset.Encode(Vintasoft.WpfBarcode.BarcodeInfo.ValueItemBase,Vintasoft.WpfBarcode.WriterSettings)">
            <summary>
            Encodes the XFA Compressed barcode value into the source barcode symbology value
            using provided barcode writer settings and
            saves the source barcode symbology value in the barcode writer settings.
            </summary>
            <param name="value">An instance of <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.TextValueItem" /> class.</param>
            <param name="settings">Barcode writer settings.</param>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.XFACompressed.XFACompressedBarcodeSymbologySubset.Name">
            <summary>
            Gets a name of barcode subset.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.SymbologySubsets.XFACompressed.XFACompressedBarcodeSymbologySubset.BaseType">
            <summary>
            Gets a base barcode type of barcode subset.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.XFACompressed.XFACompressedAztecBarcodeSymbology.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.SymbologySubsets.XFACompressed.XFACompressedAztecBarcodeSymbology" /> class. 
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.SymbologySubsets.XFACompressed.XFACompressedDataMatrixBarcodeSymbology">
            <summary>
            Defines the DataMatrix barcode symbology subset with barcode values,
            which are compressed as defined in Adobe XFA Specification.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.XFACompressed.XFACompressedDataMatrixBarcodeSymbology.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.SymbologySubsets.XFACompressed.XFACompressedDataMatrixBarcodeSymbology" /> class. 
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.SymbologySubsets.XFACompressed.XFACompressedPDF417BarcodeSymbology">
            <summary>
            Defines the PDF417 barcode symbology subset with barcode values,
            which are compressed as defined in Adobe XFA Specification.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.XFACompressed.XFACompressedPDF417BarcodeSymbology.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.SymbologySubsets.XFACompressed.XFACompressedPDF417BarcodeSymbology" /> class. 
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.SymbologySubsets.XFACompressed.XFACompressedQRCodeBarcodeSymbology">
            <summary>
            Defines the QR barcode symbology subset with barcode values,
            which are compressed as defined in Adobe XFA Specification.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.SymbologySubsets.XFACompressed.XFACompressedQRCodeBarcodeSymbology.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.SymbologySubsets.XFACompressed.XFACompressedQRCodeBarcodeSymbology" /> class. 
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeInfo.AztecInfo">
            <summary>
            Contains information about recognized Aztec barcode.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeInfo.AztecInfo.ToString">
            <summary> 
             Converts the information about barcode of this instance to its equivalent
             string.
             </summary>
             <returns>
             String representation of barcode.
             </returns>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.AztecInfo.MatrixWidth">
            <summary>
            Gets the width, in modules (cells), of the barcode matrix.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.AztecInfo.MatrixHeight">
            <summary>
            Gets the height, in modules (cells), of the barcode matrix.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.AztecInfo.Symbol">
            <summary>
            Returns an Aztec symbol for this barcode info.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeInfo.AztecSymbol">
            <summary>
            Contains information about Aztec symbol: type, size, number of data layers,
            percent of error correction, etc.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeInfo.AztecSymbol.ToString">
            <summary> 
             Converts the Aztec symbol of this instance to its equivalent
             string.
             </summary>
             <returns>
             String representation of symbol.
             </returns>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.AztecSymbol.SymbolType">
            <summary>
            Returns an Aztec symbol type.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.AztecSymbol.DataLayers">
            <summary>
            Returns a number of data layers.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.AztecSymbol.Size">
            <summary>
            Returns a symbol size (in modules).
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.AztecSymbol.ErrorCorrectionData">
            <summary>
            Returns a percent of error correction data in this symbol.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeInfo.AztecSymbolType">
            <summary>
            Aztec symbol type.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.AztecSymbolType.Undefined">
            <summary>
            Undefined.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.AztecSymbolType.Rune">
            <summary>
            Rune - small mark (contains numbers: 0..255). Used Reed-Solomon Error Correction.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.AztecSymbolType.Compact">
            <summary>
            Aztec Compact symbol (1..4 layers). Used Reed-Solomon Error Correction.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.AztecSymbolType.FullRange">
            <summary>
            Aztec Full-Range symbol (1..32 layers). Used Reed-Solomon Error Correction.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeInfo.EciCharacterDecoder">
            <summary>
            Provides methods for decoding of Extended Channel Interpretation (ECI) characters.
            </summary>
            <seealso cref="T:Vintasoft.WpfBarcode.BarcodeInfo.EciCharacterEncoder" />
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeInfo.EciCharacterDecoder.Decode(Vintasoft.WpfBarcode.BarcodeInfo.ValueItemBase[])">
            <summary>
            Decodes ECI characters contained in array of <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.ValueItemBase" />.
            </summary>
            <param name="items">Value items to interpret.</param>
            <returns><see cref="T:System.String" /> that contains interpreted value.</returns>
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeInfo.EciCharacterDecoder.DecodeEciItems(Vintasoft.WpfBarcode.BarcodeInfo.ValueItemBase[])">
            <summary>
            Decodes ECI characters contained in array of <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.ValueItemBase" />.
            </summary>
            <param name="items">Value items to interpret.</param>
            <returns>Array of <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.ValueItemBase" /> that contains interpreted value items.</returns>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeInfo.EciCharacterEncoder">
            <summary>
            Provides methods for encoding of Extended Channel Interpretation (ECI) characters.
            </summary>
            <remarks>
            ECI character in the barcode value specifies the character encoding of text after
            the ECI character and until the end of barcode value or next ECI character.<br />
            Several ECI characters can be used for storing text with different character encodings in
            the single barcode value.<br />
            <br />
            <b>Important</b>: Not all barcode readers support ECI characters!
            Use ECI characters only if your barcode reader supports ECI characters.
            Use text in UTF8 encoding and encode text as bytes (<see cref="M:System.Text.Encoding.GetBytes(System.String)" />)
            if you are not sure about support of ECI characters by your barcode reader.<br />
            <br />
            ECI characters are available only for Aztec, DataMatrix, QR, Han Xin Code, PDF417 or Micro PDF417 barcodes.
            </remarks>
            <example>
            This example shows how to encode and decode text with different encodingss:
            <code lang="VB.NET">   
            Imports System.Windows.Media.Imaging   
            Imports System.Text   
               
            Imports Vintasoft.WpfBarcode   
            Imports Vintasoft.WpfBarcode.BarcodeInfo   
               
            ''' &lt;summary&gt;   
            ''' Class that shows how to create image with barcode Aztec, DataMatrix, QR, Han Xin Code, PDF417 or Micro PDF417,   
            ''' which stores text in different encodings.   
            ''' Barcode value is encoded using the EciCharacterEncoder class.   
            ''' &lt;/summary&gt;   
            Class EciCharacterEncoderExample   
            	''' &lt;summary&gt;   
            	''' Run the test.   
            	''' &lt;/summary&gt;   
            	Public Shared Sub Run()   
            		' ECI characters are available only for Aztec, DataMatrix, QR, PDF417 or Micro PDF417 barcodes   
            		Dim barcodeType__1 As BarcodeType = BarcodeType.DataMatrix   
               
            		' create the encoder of Extended Channel Interpretation (ECI) characters   
            		Dim eciEncoder As New EciCharacterEncoder(barcodeType__1)   
               
            		' create the ECI encoding for encoding text in codepage 28592   
            		Dim cp28592EciEncoding As EciCharacterEncoding = EciCharacterEncoding.GetEciCharacterEncodingForEncoding(Encoding.GetEncoding(28592))   
            		' append text in codepage 28592 to ECI encoder   
            		eciEncoder.AppendText(cp28592EciEncoding, "ążśźęćńółĄŻŚŹĘĆŃÓŁ")   
               
            		' create the ECI encoding for encoding text in codepage 28595   
            		Dim cp28595EciEncoding As EciCharacterEncoding = EciCharacterEncoding.GetEciCharacterEncodingForEncoding(Encoding.GetEncoding(28595))   
            		' append text in codepage 28595 to ECI encoder   
            		eciEncoder.AppendText(cp28595EciEncoding, "АБВГДЕЖЗИЙКЛМНОП")   
               
            		' create the ECI encoding for encoding text in codepage 950   
            		Dim cp950EciEncoding As EciCharacterEncoding = EciCharacterEncoding.GetEciCharacterEncodingForEncoding(Encoding.GetEncoding(950))   
            		' append text in codepage 950 to ECI encoder   
            		eciEncoder.AppendText(cp950EciEncoding, "日月火水木金土")   
               
            		' create the ECI encoding for encoding text in codepage 28591   
            		Dim cp28591EciEncoding As EciCharacterEncoding = EciCharacterEncoding.GetEciCharacterEncodingForEncoding(Encoding.GetEncoding(28591))   
            		' append text in codepage 28591 to ECI encoder   
            		eciEncoder.AppendText(cp28591EciEncoding, "test!")   
               
               
            		' create the barcode writer   
            		Dim writer As New BarcodeWriter()   
               
            		' specify that writer must generate barcode of specified type   
            		writer.Settings.Barcode = barcodeType__1   
               
            		' set the barcode value as value encoded by ECI encoder   
            		writer.Settings.ValueItems = eciEncoder.ToValueItems()   
               
            		' create image with barcode   
            		Dim barcodeImage As BitmapSource = writer.GetBarcodeAsBitmapSource()   
               
            		' create the barcode reader   
            		Using reader As New BarcodeReader()   
            			' specify that reader must search for barcodes of specified type   
            			reader.Settings.ScanBarcodeTypes = barcodeType__1   
               
            			' read barcode from image   
            			Dim decodeItems As ValueItemBase() = reader.ReadBarcodes(barcodeImage)(0).ValueItems   
               
            			' decode the barcode value   
            			Dim decodedString As String = EciCharacterDecoder.Decode(decodeItems)   
               
            			' if decoded value does not match source value   
            			If decodedString &lt;&gt; "ążśźęćńółĄŻŚŹĘĆŃÓŁАБВГДЕЖЗИЙКЛМНОП日月火水木金土test!" Then   
            				' throw exception   
            				Throw New ApplicationException()   
            			End If   
            		End Using   
               
            		Console.WriteLine("OK")   
            	End Sub   
            End Class
            </code>
            <code lang="C#">
            using System;
            using System.Windows.Media.Imaging;
            using System.Text;
            
            using Vintasoft.WpfBarcode;
            using Vintasoft.WpfBarcode.BarcodeInfo;
            
            /// &lt;summary&gt;
            /// Class that shows how to create image with barcode Aztec, DataMatrix, QR, Han Xin Code, PDF417 or Micro PDF417,
            /// which stores text in different encodings.
            /// Barcode value is encoded using the EciCharacterEncoder class.
            /// &lt;/summary&gt;
            class EciCharacterEncoderExample
            {
                /// &lt;summary&gt;
                /// Run the test.
                /// &lt;/summary&gt;
                public static void Run()
                {
                    // ECI characters are available only for Aztec, DataMatrix, QR, PDF417 or Micro PDF417 barcodes
                    BarcodeType barcodeType = BarcodeType.DataMatrix;
            
                    // create the encoder of Extended Channel Interpretation (ECI) characters
                    EciCharacterEncoder eciEncoder = new EciCharacterEncoder(barcodeType);
            
                    // create the ECI encoding for encoding text in codepage 28592
                    EciCharacterEncoding cp28592EciEncoding =
                        EciCharacterEncoding.GetEciCharacterEncodingForEncoding(Encoding.GetEncoding(28592));
                    // append text in codepage 28592 to ECI encoder
                    eciEncoder.AppendText(cp28592EciEncoding, "ążśźęćńółĄŻŚŹĘĆŃÓŁ");
            
                    // create the ECI encoding for encoding text in codepage 28595
                    EciCharacterEncoding cp28595EciEncoding =
                        EciCharacterEncoding.GetEciCharacterEncodingForEncoding(Encoding.GetEncoding(28595));
                    // append text in codepage 28595 to ECI encoder
                    eciEncoder.AppendText(cp28595EciEncoding, "АБВГДЕЖЗИЙКЛМНОП");
            
                    // create the ECI encoding for encoding text in codepage 950
                    EciCharacterEncoding cp950EciEncoding =
                        EciCharacterEncoding.GetEciCharacterEncodingForEncoding(Encoding.GetEncoding(950));
                    // append text in codepage 950 to ECI encoder
                    eciEncoder.AppendText(cp950EciEncoding, "日月火水木金土");
            
                    // create the ECI encoding for encoding text in codepage 28591
                    EciCharacterEncoding cp28591EciEncoding =
                        EciCharacterEncoding.GetEciCharacterEncodingForEncoding(Encoding.GetEncoding(28591));
                    // append text in codepage 28591 to ECI encoder
                    eciEncoder.AppendText(cp28591EciEncoding, "test!");
            
            
                    // create the barcode writer
                    BarcodeWriter writer = new BarcodeWriter();
            
                    // specify that writer must generate barcode of specified type
                    writer.Settings.Barcode = barcodeType;
            
                    // set the barcode value as value encoded by ECI encoder
                    writer.Settings.ValueItems = eciEncoder.ToValueItems();
            
                    // create image with barcode
                    BitmapSource barcodeImage = writer.GetBarcodeAsBitmapSource();
            
                    // create the barcode reader
                    using (BarcodeReader reader = new BarcodeReader())
                    {
                        // specify that reader must search for barcodes of specified type
                        reader.Settings.ScanBarcodeTypes = barcodeType;
            
                        // read barcode from image
                        ValueItemBase[] decodeItems = reader.ReadBarcodes(barcodeImage)[0].ValueItems;
            
                        // decode the barcode value
                        string decodedString = EciCharacterDecoder.Decode(decodeItems);
            
                        // if decoded value does not match source value
                        if (decodedString != "ążśźęćńółĄŻŚŹĘĆŃÓŁАБВГДЕЖЗИЙКЛМНОП日月火水木金土test!")
                            // throw exception
                            throw new ApplicationException();
                    }
            
                    Console.WriteLine("OK");
                }
            }
            </code>
            </example>
            <seealso cref="T:Vintasoft.WpfBarcode.BarcodeInfo.EciCharacterDecoder" />
            <seealso cref="T:Vintasoft.WpfBarcode.BarcodeInfo.EciCharacterValueItem" />
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeInfo.EciCharacterEncoder.#ctor(Vintasoft.WpfBarcode.BarcodeType)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.EciCharacterEncoder" /> class.
            </summary>
            <param name="barcodeType">Barcode type where encoded ECI characters will be used.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <i>barcodeType</i> is not equal to
            BarcodeType.Aztec or BarcodeType.QR or BarcodeType.PDF417 or BarcodeType.MicroPDF417 or
            BarcodeType.PDF417Compact or BarcodeType.DataMatrix.</exception>
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeInfo.EciCharacterEncoder.AppendText(Vintasoft.WpfBarcode.BarcodeInfo.EciCharacterEncoding,System.String)">
            <summary>
            Appends a text with specified encoding.
            </summary>
            <param name="eciCharacterEncoding">ECI character encoding.</param>
            <param name="text">Text to encode.</param>
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeInfo.EciCharacterEncoder.AppendBinaryData(System.Int32,System.Byte[])">
            <summary>
            Appends binary data with specified ECI assignment number.
            </summary>
            <param name="eciAssignmentNumber">ECI assignment number.</param>
            <param name="data">Binary data to encode.</param>
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeInfo.EciCharacterEncoder.ToValueItems">
            <summary>
            Returns an array of encoded value items.
            </summary>
            <returns>An array of encoded value items.</returns>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeInfo.EciCharacterEncoding">
            <summary>
            Represents encoding of Extended Channel Interpretation (ECI) character.
            </summary>
            <seealso cref="T:Vintasoft.WpfBarcode.BarcodeInfo.EciCharacterValueItem" />
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeInfo.EciCharacterEncoding.#ctor(System.Int32,System.Text.Encoding)">
            <summary>
            Initializes a new instance of <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.EciCharacterEncoding" /> class.
            </summary>
            <param name="eciAssignmentNumber">ECI assignment number.</param>
            <param name="encoding">Character encoding associated with the ECI assignment number.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <i>eciAssignmentNumber</i>
            is less or equal 0 or <i>eciAssignmentNumber</i> is more than 999999.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>encoding</i> is <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeInfo.EciCharacterEncoding.Register(Vintasoft.WpfBarcode.BarcodeInfo.EciCharacterEncoding)">
            <summary>
            Registers specified ECI character encoding.
            </summary>
            <param name="eciCharacterEncoding">ECI character encoding to register.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>eciCharacterEncoding</i>
            is <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeInfo.EciCharacterEncoding.GetEciCharacterEncodingForEciAssigmentNumber(System.Int32)">
            <summary>
            Returns <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.EciCharacterEncoding" /> for specified ECI assignment number.
            </summary>
            <param name="eciAssignmentNumber">ECI assignment number.</param>
            <returns><see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.EciCharacterEncoding" /> for specified ECI assignment number.</returns>
            <exception cref="T:System.ArgumentException">Thrown if ECI character encoding with
            specified ECI assignment number is not registered.</exception>
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeInfo.EciCharacterEncoding.GetEciCharacterEncodingForEncoding(System.Text.Encoding)">
            <summary>
            Returns <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.EciCharacterEncoding" /> for specified character encoding.
            </summary>
            <param name="encoding">Character encoding.</param>
            <returns><see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.EciCharacterEncoding" /> for specified character encoding.</returns>
            <exception cref="T:System.ArgumentException">Thrown if ECI character encoding with
            specified encoding is not registered.</exception>
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeInfo.EciCharacterEncoding.GetEciCharacterEncodings">
            <summary>
            Returns an array that contains all registered ECI character encodings.
            </summary>
            <returns>Array of all registered ECI character encodings.</returns>
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeInfo.EciCharacterEncoding.ToString">
            <summary>
            Returns the string representation of this <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.EciCharacterEncoding" />.
            </summary>
            <returns>String representation of this <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.EciCharacterEncoding" />.</returns>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.EciCharacterEncoding.EciAssignmentNumber">
            <summary>
            Gets an ECI assignment number.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.EciCharacterEncoding.Encoding">
            <summary>
            Gets the <see cref="P:Vintasoft.WpfBarcode.BarcodeInfo.EciCharacterEncoding.Encoding" /> associated with the ECI assignment number.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeInfo.EciCharacterValueItem">
            <summary>
            Extended Channel Interpretation (ECI) character.
            </summary>
            <remarks>    
            The Extended Channel Interpretation protocol is fully 
            specified in AIM Inc. International Technical Specification
            – Extended Channel Interpretations Part 1. The protocol
            provides a consistent method to specify particular interpretations
            on byte values before printing and after decoding. 
            The Extended Channel Interpretation is identified by a 6-digit
            number - ECI assignment number.<br />
            <br />
            ECI characters are available only for Aztec, DataMatrix, QR, MaxiCode, Han Xin Code, PDF417, and Micro PDF417 barcodes.
            </remarks>
            <example>
            Please see example <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags">here</see>.
            </example>
            <seealso cref="T:Vintasoft.WpfBarcode.BarcodeInfo.EciCharacterDecoder" />
            <seealso cref="T:Vintasoft.WpfBarcode.BarcodeInfo.EciCharacterEncoder" />
            <seealso cref="P:Vintasoft.WpfBarcode.IBarcodeInfo.ShowNonDataFlagsInValue">IBarcodeInfo.ShowNonDataFlagsInValue</seealso>
            <seealso cref="P:Vintasoft.WpfBarcode.WriterSettings.ProcessSpecialSymbols">WriterSettings.ProcessSpecialSymbols</seealso>   
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeInfo.EciCharacterValueItem.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.EciCharacterValueItem" /> class. 
            </summary>
            <param name="eciAssignmentNumber">ECI assignment number.</param>
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeInfo.EciCharacterValueItem.ToString">
            <summary> 
             Converts the <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.EciCharacterValueItem" /> of this instance to its equivalent
             string.
             </summary>
             <returns>
             String representation of <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.EciCharacterValueItem" />.
             </returns>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.EciCharacterValueItem.EciAssignmentNumber">
            <summary>
            Gets an ECI assignment number.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeInfo.MacroCharacter">
            <summary>
            Contains information about macro character.
            </summary>
            <remarks>
            DataMatrix and Micro PDF417 provides a means of abbreviating an industry
            specific header and trailer in one symbol character. This
            feature exists to reduce the number of symbol characters
            needed to encode data in a symbol using certain structured
            formats. A Macro character must be in the first character 
            position of a symbol.
            </remarks>
            <example>
            Please see example <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags">here</see>.
            </example>
            <seealso cref="P:Vintasoft.WpfBarcode.WriterSettings.ProcessSpecialSymbols" />
            <seealso cref="T:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags" />
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.MacroCharacter.Header">
            <summary>
            Gets a header of this macro symbol.
            </summary>
            <remarks>
            The header transmitted as a prefix to the barcode value.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.MacroCharacter.Trailer">
            <summary>
            Gets a trailer of this macro symbol.
            </summary>
            <remarks>
            The trailer transmitted as a suffix to the barcode value.
            </remarks>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags">
            <summary>
            Contains available non-data flags.
            </summary>
            <example>
            This example shows how to write and read non-data flags in barcode.
            <code lang="VB.NET">   
            Imports System.Collections.Generic   
            Imports System.Windows.Media.Imaging   
               
            Imports Vintasoft.WpfBarcode   
            Imports Vintasoft.WpfBarcode.BarcodeInfo   
               
            ''' &lt;summary&gt;   
            ''' Test that shows how to create barcodes with data flags.   
            ''' &lt;/summary&gt;   
            Class NonDataFlagsExample   
               
            	''' &lt;summary&gt;   
            	''' Run the test.   
            	''' &lt;/summary&gt;   
            	Public Shared Sub Test()   
            		' create image with Code128 barcode with FNC1 flag   
            		Dim image As BitmapSource = WriteFlagUsingValueProperty(BarcodeType.Code128, "", NonDataFlags.Fnc1, "abc")   
               
            		' read barcode from image   
            		ReadBarcode(image, BarcodeType.Code128)   
               
            		' create image with Code128 barcode with FNC1 flag   
            		image = WriteFlagUsingValueItemsProperty(BarcodeType.Code128, "123", NonDataFlags.Fnc1, "456")   
            		' read barcode from image   
            		ReadBarcode(image, BarcodeType.Code128)   
               
            		' create the barcode value with multiple FNC1 flags   
            		Dim barcodeValue As String = NonDataFlags.Fnc1.Name   
            		barcodeValue += "A" + NonDataFlags.Fnc1.Name   
            		barcodeValue += "B" + NonDataFlags.Fnc1.Name   
            		barcodeValue += "C" + NonDataFlags.Fnc1.Name   
               
            		' create the barcode writer   
            		Dim writer As New BarcodeWriter()   
            		' specify that writer must generate Code128 barcode   
            		writer.Settings.Barcode = BarcodeType.Code128   
            		writer.Settings.ProcessSpecialSymbols = True   
            		' set the barcode value   
            		writer.Settings.Value = barcodeValue   
            		' create image with Code128 barcode with  multiple FNC1 flags   
            		image = writer.GetBarcodeAsBitmapSource()   
            		' read barcode from image   
            		ReadBarcode(image, BarcodeType.Code128)   
               
            		' create image with DataMatrix barcode with FNC1 flag   
            		image = WriteFlagUsingValueItemsProperty(BarcodeType.DataMatrix, "DataMatrix", NonDataFlags.Fnc1, "!")   
            		' read barcode from image   
            		ReadBarcode(image, BarcodeType.DataMatrix)   
               
            		' create image with QR barcode with ECI123456 flag   
            		image = WriteFlagUsingValueProperty(BarcodeType.QR, "", NonDataFlags.CreateECICharacter(123456), "QR Test ECI123456")   
            		' read barcode from image   
            		ReadBarcode(image, BarcodeType.QR)   
               
            		' create image with DataMatrix barcode with Macro05 flag   
            		image = WriteFlagUsingValueItemsProperty(BarcodeType.DataMatrix, "", NonDataFlags.Macro05, "BarcodeData")   
            		' read barcode from image   
            		ReadBarcode(image, BarcodeType.DataMatrix)   
            	End Sub   
               
            	''' &lt;summary&gt;   
            	''' Write a data flag to barcode using WriterSettings.Value property.   
            	''' &lt;/summary&gt;   
            	Private Shared Function WriteFlagUsingValueProperty(barcodeType As BarcodeType, leftValuePart As String, flag As NonDataFlagValueItem, rightValuePart As String) As BitmapSource   
            		' create the barcode writer   
            		Dim writer As New BarcodeWriter()   
               
            		' specify that writer must generate barcode of specified type   
            		writer.Settings.Barcode = barcodeType   
               
            		' specify that writer must process special characters in the barcode value   
            		writer.Settings.ProcessSpecialSymbols = True   
               
            		' set the barcode value   
            		writer.Settings.Value = leftValuePart &amp; Convert.ToString(flag.Name) &amp; rightValuePart   
               
            		' create image with barcode   
            		Return writer.GetBarcodeAsBitmapSource()   
            	End Function   
               
            	''' &lt;summary&gt;   
            	''' Write a data flag to barcode using WriterSettings.ValueItems property.   
            	''' &lt;/summary&gt;   
            	Private Shared Function WriteFlagUsingValueItemsProperty(barcodeType As BarcodeType, leftValuePart As String, flag As NonDataFlagValueItem, rightValuePart As String) As BitmapSource   
            		' create the barcode writer   
            		Dim writer As New BarcodeWriter()   
               
            		' specify that writer must generate barcode of specified type   
            		writer.Settings.Barcode = barcodeType   
               
            		' create the barcode value items   
               
            		Dim items As New List(Of ValueItemBase)()   
            		If leftValuePart &lt;&gt; "" Then   
            			items.Add(New TextValueItem(leftValuePart))   
            		End If   
            		items.Add(flag)   
            		If rightValuePart &lt;&gt; "" Then   
            			items.Add(New TextValueItem(rightValuePart))   
            		End If   
               
            		' set the barcode value items   
            		writer.Settings.ValueItems = items.ToArray()   
               
            		' create image with barcode   
            		Return writer.GetBarcodeAsBitmapSource()   
            	End Function   
               
            	''' &lt;summary&gt;   
            	''' Read barcode and show it value.   
            	''' &lt;/summary&gt;   
            	Private Shared Sub ReadBarcode(image As BitmapSource, barcodeType As BarcodeType)   
            		' create the barcode reader   
            		Using reader As New BarcodeReader()   
            			' specify that reader must search for barcodes of specified type   
            			reader.Settings.ScanBarcodeTypes = barcodeType   
               
            			' reader barcode from image   
            			Dim barcodeInfo As IBarcodeInfo = reader.ReadBarcodes(image)(0)   
               
            			barcodeInfo.ShowNonDataFlagsInValue = False   
            			Console.WriteLine("Barcode value without flags: {0}", barcodeInfo.Value)   
               
            			barcodeInfo.ShowNonDataFlagsInValue = True   
            			Console.WriteLine("Barcode value with flags:    {0}", barcodeInfo.Value)   
               
            			Console.WriteLine("Barcode value items:")   
            			For i As Integer = 0 To barcodeInfo.ValueItems.Length - 1   
            				Dim valueItem As ValueItemBase = barcodeInfo.ValueItems(i)   
            				Console.WriteLine("  [{0}]: {1}", valueItem.[GetType]().Name, valueItem)   
            			Next   
            		End Using   
               
            		Console.WriteLine()   
            	End Sub   
            End Class
            </code>
            <code lang="C#">
            using System;
            using System.Collections.Generic;
            using System.Windows.Media.Imaging;
            
            using Vintasoft.WpfBarcode;
            using Vintasoft.WpfBarcode.BarcodeInfo;
            
            /// &lt;summary&gt;
            /// Test that shows how to create barcodes with data flags.
            /// &lt;/summary&gt;
            class NonDataFlagsExample
            {
            
                /// &lt;summary&gt;
                /// Run the test.
                /// &lt;/summary&gt;
                public static void Test()
                {
                    // create image with Code128 barcode with FNC1 flag
                    BitmapSource image = WriteFlagUsingValueProperty(BarcodeType.Code128, "", NonDataFlags.Fnc1, "abc");
            
                    // read barcode from image
                    ReadBarcode(image, BarcodeType.Code128);
            
                    // create image with Code128 barcode with FNC1 flag
                    image = WriteFlagUsingValueItemsProperty(BarcodeType.Code128, "123", NonDataFlags.Fnc1, "456");
                    // read barcode from image
                    ReadBarcode(image, BarcodeType.Code128);
            
                    // create the barcode value with multiple FNC1 flags
                    string barcodeValue = NonDataFlags.Fnc1.Name;
                    barcodeValue += "A" + NonDataFlags.Fnc1.Name;
                    barcodeValue += "B" + NonDataFlags.Fnc1.Name;
                    barcodeValue += "C" + NonDataFlags.Fnc1.Name;
            
                    // create the barcode writer
                    BarcodeWriter writer = new BarcodeWriter();
                    // specify that writer must generate Code128 barcode
                    writer.Settings.Barcode = BarcodeType.Code128;
                    writer.Settings.ProcessSpecialSymbols = true;
                    // set the barcode value
                    writer.Settings.Value = barcodeValue;
                    // create image with Code128 barcode with  multiple FNC1 flags
                    image = writer.GetBarcodeAsBitmapSource();
                    // read barcode from image
                    ReadBarcode(image, BarcodeType.Code128);
            
                    // create image with DataMatrix barcode with FNC1 flag
                    image = WriteFlagUsingValueItemsProperty(
                        BarcodeType.DataMatrix, "DataMatrix", NonDataFlags.Fnc1, "!");
                    // read barcode from image
                    ReadBarcode(image, BarcodeType.DataMatrix);
            
                    // create image with QR barcode with ECI123456 flag
                    image = WriteFlagUsingValueProperty(
                        BarcodeType.QR, "", NonDataFlags.CreateECICharacter(123456), "QR Test ECI123456");
                    // read barcode from image
                    ReadBarcode(image, BarcodeType.QR);
            
                    // create image with DataMatrix barcode with Macro05 flag
                    image = WriteFlagUsingValueItemsProperty(
                        BarcodeType.DataMatrix, "", NonDataFlags.Macro05, "BarcodeData");
                    // read barcode from image
                    ReadBarcode(image, BarcodeType.DataMatrix);
                }
            
                /// &lt;summary&gt;
                /// Write a data flag to barcode using WriterSettings.Value property.
                /// &lt;/summary&gt;
                static BitmapSource WriteFlagUsingValueProperty(
                    BarcodeType barcodeType,
                    string leftValuePart,
                    NonDataFlagValueItem flag,
                    string rightValuePart)
                {
                    // create the barcode writer
                    BarcodeWriter writer = new BarcodeWriter();
            
                    // specify that writer must generate barcode of specified type
                    writer.Settings.Barcode = barcodeType;
            
                    // specify that writer must process special characters in the barcode value
                    writer.Settings.ProcessSpecialSymbols = true;
            
                    // set the barcode value
                    writer.Settings.Value = leftValuePart + flag.Name + rightValuePart;
            
                    // create image with barcode
                    return writer.GetBarcodeAsBitmapSource();
                }
            
                /// &lt;summary&gt;
                /// Write a data flag to barcode using WriterSettings.ValueItems property.
                /// &lt;/summary&gt;
                static BitmapSource WriteFlagUsingValueItemsProperty(
                    BarcodeType barcodeType,
                    string leftValuePart,
                    NonDataFlagValueItem flag,
                    string rightValuePart)
                {
                    // create the barcode writer
                    BarcodeWriter writer = new BarcodeWriter();
            
                    // specify that writer must generate barcode of specified type
                    writer.Settings.Barcode = barcodeType;
            
                    // create the barcode value items
            
                    List&lt;ValueItemBase&gt; items = new List&lt;ValueItemBase&gt;();
                    if (leftValuePart != "")
                        items.Add(new TextValueItem(leftValuePart));
                    items.Add(flag);
                    if (rightValuePart != "")
                        items.Add(new TextValueItem(rightValuePart));
            
                    // set the barcode value items
                    writer.Settings.ValueItems = items.ToArray();
            
                    // create image with barcode
                    return writer.GetBarcodeAsBitmapSource();
                }
            
                /// &lt;summary&gt;
                /// Read barcode and show it value.
                /// &lt;/summary&gt;
                static void ReadBarcode(BitmapSource image, BarcodeType barcodeType)
                {
                    // create the barcode reader
                    using (BarcodeReader reader = new BarcodeReader())
                    {
                        // specify that reader must search for barcodes of specified type
                        reader.Settings.ScanBarcodeTypes = barcodeType;
            
                        // reader barcode from image
                        IBarcodeInfo barcodeInfo = reader.ReadBarcodes(image)[0];
            
                        barcodeInfo.ShowNonDataFlagsInValue = false;
                        Console.WriteLine("Barcode value without flags: {0}", barcodeInfo.Value);
            
                        barcodeInfo.ShowNonDataFlagsInValue = true;
                        Console.WriteLine("Barcode value with flags:    {0}", barcodeInfo.Value);
            
                        Console.WriteLine("Barcode value items:");
                        for (int i = 0; i &lt; barcodeInfo.ValueItems.Length; i++)
                        {
                            ValueItemBase valueItem = barcodeInfo.ValueItems[i];
                            Console.WriteLine("  [{0}]: {1}", valueItem.GetType().Name, valueItem);
                        }
                    }
            
                    Console.WriteLine();
                }
            }
            </code>
            </example>
            <seealso cref="T:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlagValueItem" />   
            <seealso cref="P:Vintasoft.WpfBarcode.IBarcodeInfo.ShowNonDataFlagsInValue">IBarcodeInfo.ShowNonDataFlagsInValue</seealso>
            <seealso cref="P:Vintasoft.WpfBarcode.WriterSettings.ProcessSpecialSymbols">WriterSettings.ProcessSpecialSymbols</seealso>   
            <seealso cref="T:Vintasoft.WpfBarcode.BarcodeInfo.EciCharacterValueItem" />
            <seealso cref="T:Vintasoft.WpfBarcode.BarcodeInfo.AztecStructuredAppendCharacter" />
            <seealso cref="T:Vintasoft.WpfBarcode.BarcodeInfo.DataMatrixStructuredAppendCharacter" />
            <seealso cref="T:Vintasoft.WpfBarcode.BarcodeInfo.PDF417StructuredAppendCharacter" />
            <seealso cref="T:Vintasoft.WpfBarcode.BarcodeInfo.QRStructuredAppendCharacter" />
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags.CreateECICharacter(System.Int32)">
            <summary>
            Creates a new ECI character with specified assignment number.
            </summary>
            <param name="eciAssignmentNumber">ECI assignment number.</param>
            <returns>Instance of the <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.EciCharacterValueItem" /> class.</returns>
            <remarks>
            Name: &lt;ECInnnnnn&gt; n=0..9 <br />
            <br />
            This character can be used in Aztec, DataMatrix, QR, MaxiCode, Han Xin Code, PDF417, and Micro PDF417 barcodes.
            </remarks>
            <seealso cref="T:Vintasoft.WpfBarcode.BarcodeInfo.EciCharacterValueItem" />
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags.CreateDataMatrixStructuredAppendCharacter(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new DataMatrix Structured Append character with 
            specified symbol position, symbol count and file identefication.
            </summary>
            <param name="symbolPosition">The position for a symbol in the Structured Append format.</param>
            <param name="symbolCount">The number of symbols in the Structured Append format.</param>
            <param name="fileID">File identification.</param>
            <returns>Instance of the <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.DataMatrixStructuredAppendCharacter" /> class.</returns>
            <seealso cref="T:Vintasoft.WpfBarcode.BarcodeInfo.DataMatrixStructuredAppendCharacter" />
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags.CreateAztecStructuredAppendCharacter(System.Int32,System.Int32,System.String)">
            <summary>
            Creates a new Aztect Structured Append character with 
            specified symbol position, symbol count and message ID.
            </summary>
            <param name="symbolPosition">The position for a symbol in the Structured Append format.</param>
            <param name="symbolCount">The number of symbols in the Structured Append format.</param>
            <param name="messageID">The Message ID.</param>
            <returns>Instance of the <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.AztecStructuredAppendCharacter" /> class.</returns>
            <seealso cref="T:Vintasoft.WpfBarcode.BarcodeInfo.AztecStructuredAppendCharacter" />
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags.CreateQRStructuredAppendCharacter(System.Int32,System.Int32,System.Byte)">
            <summary>
            Creates a new QR Structured Append character with 
            specified symbol position, symbol count and parity data.
            </summary>
            <param name="symbolPosition">The position for a symbol in the Structured Append format.</param>
            <param name="symbolCount">The number of symbols in the Structured Append format.</param>
            <param name="parityData">The Parity Data. Compute Parity Data using method <see cref="M:Vintasoft.WpfBarcode.BarcodeInfo.QRStructuredAppendCharacter.CaluculateParityData(System.String)" />.</param>
            <returns>Instance of the <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.QRStructuredAppendCharacter" /> class.</returns>
            <seealso cref="T:Vintasoft.WpfBarcode.BarcodeInfo.QRStructuredAppendCharacter" />
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags.CreateMaxiCodeStructuredAppendCharacter(System.Int32,System.Int32)">
            <summary>
            Creates a new MaxiCode Structured Append character with 
            specified symbol position and symbol count.
            </summary>
            <param name="symbolPosition">The position for a symbol in the Structured Append format.</param>
            <param name="symbolCount">The number of symbols in the Structured Append format.</param>
            <returns>Instance of the <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.StructuredAppendCharacter" /> class.</returns>
            <seealso cref="T:Vintasoft.WpfBarcode.BarcodeInfo.StructuredAppendCharacter" />
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags.CreatePDF417StructuredAppendCharacter(System.Int32,System.Int32,System.String)">
            <summary>
            Creates a new PDF417/MicroPDF417 Structured Append character with 
            specified symbol position, symbol count and file ID.
            </summary>
            <param name="symbolPosition">The position for a symbol in the Structured Append format.</param>
            <param name="symbolCount">The number of symbols in the Structured Append format.</param>
            <param name="fileID">The file ID.</param>
            <returns>Instance of the <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.PDF417StructuredAppendCharacter" /> class.</returns>
            <seealso cref="T:Vintasoft.WpfBarcode.BarcodeInfo.PDF417StructuredAppendCharacter" />
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags.CreatePDF417StructuredAppendCharacter(System.Int32,System.Int32)">
            <summary>
            Creates a new PDF417/MicroPDF417 Structured Append character with 
            specified symbol position and symbol count.
            </summary>
            <param name="symbolPosition">The position for a symbol in the Structured Append format.</param>
            <param name="symbolCount">The number of symbols in the Structured Append format.</param>
            <returns>Instance of the <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.PDF417StructuredAppendCharacter" /> class.</returns>
            <seealso cref="M:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags.CreatePDF417StructuredAppendCharacter(System.Int32,System.Int32,System.String)" />
            <seealso cref="T:Vintasoft.WpfBarcode.BarcodeInfo.PDF417StructuredAppendCharacter" />
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags.Pad">
            <summary>
            Gets the Pad Character (PAD). 
            </summary>
            <remarks>
            Name: &lt;PAD&gt; <br />
            <br />
            This flag can be used in Code 16K barcode.<br />
            In Code 16K barcode, PAD character is used as data separator, 
            when it inserted within barcode data.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags.Fnc1">
            <summary> 
            Gets the Function 1 Character (FNC1). 
            </summary>
            <remarks>
            Name: &lt;FNC1&gt; <br />
            <br />
            This flag can be used in Aztec, DataMatrix, Code 128, Code 16K, QR, RSS Expanded,
            RSS Expanded Stacked barcodes.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags.Fnc2">
            <summary> 
            Gets the Function 2 Character (FNC2). 
            </summary>
            <remarks>
            Name: &lt;FNC2&gt; <br />
            <br />
            This flag can be used in Code128 and Code 16K barcodes.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags.Fnc3">
            <summary> 
            Gets the Function 3 Character (FNC3). 
            </summary>
            <remarks>
            Name: &lt;FNC3&gt; <br />
            <br />
            This flag can be used in Code128 and Code 16K barcodes.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags.Fnc4">
            <summary> 
            Gets the Function 4 Character (FNC4). 
            </summary>
            <remarks>
            Name: &lt;FNC4&gt; <br />
            <br />
            This flag can be used in Code128 and Code 16K barcodes.
            <br />
            In Code 128 barcode FNC4 is used to represent an extended ASCII character set
            (byte values from 128 to 255).
            </remarks>
            <seealso cref="P:Vintasoft.WpfBarcode.ReaderSettings.Code128UseFnc4ShiftToExtendedAsciiTable" />
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags.LinkageFlag">
            <summary>
            Gets the linkage flag to associated linear component in a composite symbol.
            </summary>
            <remarks>
            Name: &lt;LINKAGE&gt; <br />
            <br />
            This flag can be used only in PDF417 barcode.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags.EanUccLinkageFlag">
            <summary>
            Gets the linkage flag to associated linear component in an EAN.UCC composite symbol.
            </summary>
            <remarks>
            Name: &lt;LINKAGE_EANUCC&gt; <br />
            <br />
            This flag can be used only in PDF417 barcode.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags.ReaderProgramming">
            <summary>
            Gets the Reader Programming character. 
            </summary>
            <remarks>
            Name: &lt;READER_PROGRAMMING&gt;<br />
            <br />
            This flag can be used in DataMatrix and PDF417 barcodes. <br />
            Reader Programming character can be used only as first character of barcode.
            Reader Programming character indicates that the barcode encodes a message used
            to program the reader system.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags.Macro05">
            <summary>
            Gets the Macro05 character. 
            </summary>
            <remarks>
            Name: &lt;MACRO_05&gt; <br />
            Header: [)&gt;&lt;RS&gt;05&lt;GS&gt; <br />
            Trailer: &lt;RS&gt;&lt;EOT&gt;<br />
            This flag can be used in DataMatrix and Micro PDF417 barcodes. 
            </remarks>
            <seealso cref="T:Vintasoft.WpfBarcode.BarcodeInfo.MacroCharacter" />
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags.Macro06">
            <summary>
            Gets the Macro06 character. 
            </summary>
            <remarks>
            Name: &lt;MACRO_06&gt; <br />
            Header: [)&gt;&lt;RS&gt;06&lt;GS&gt; <br />
            Trailer: &lt;RS&gt;&lt;EOT&gt;<br />
            This flag can be used in DataMatrix and Micro PDF417 barcodes. 
            </remarks>
            <seealso cref="T:Vintasoft.WpfBarcode.BarcodeInfo.MacroCharacter" />
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeInfo.ValueItemDataType">
            <summary>
            Specifies available data types of <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.ValueItemBase" />.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.ValueItemDataType.TextData">
            <summary>
            Text data.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.ValueItemDataType.BinaryData">
            <summary>
            Binary data.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.ValueItemDataType.NumericData">
            <summary>
            Numeric data.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfo.ValueItemDataType.NonDataFlag">
            <summary>
            Non-data flag or special character.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeInfo.DataMatrixInfo">
            <summary>
            Contains information about recognized Data Matrix barcode.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeInfo.DataMatrixInfo.ToString">
            <summary> 
             Converts the information about barcode of this instance to its equivalent
             string.
             </summary>
             <returns>
             String representation of barcode.
             </returns>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.DataMatrixInfo.MatrixWidth">
            <summary>
            Gets the width, in modules (cells), of the barcode matrix.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.DataMatrixInfo.MatrixHeight">
            <summary>
            Gets the height, in modules (cells), of the barcode matrix.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.DataMatrixInfo.Symbol">
            <summary>
            Returns Data Matrix symbol information.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeInfo.DataMatrixSymbol">
            <summary>
            Contains information about DataMatrix symbol: size, number of data codewords,
            number of error correction codewords, etc.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeInfo.DataMatrixSymbol.ToString">
            <summary> 
             Converts the DataMatrix symbol of this instance to its equivalent
             string.
             </summary>
             <returns>
             String representation of symbol.
             </returns>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.DataMatrixSymbol.SymbolWidth">
            <summary>
            Returns a symbol width.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.DataMatrixSymbol.SymbolHeight">
            <summary>
            Returns a symbol height.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.DataMatrixSymbol.SymbolType">
            <summary>
            Returns Data Matrix symbol type.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.DataMatrixSymbol.TotalCodewords">
            <summary>
            Returns a number of total codewords in symbol.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.DataMatrixSymbol.ErrorCorrectionCodewords">
            <summary>
            Returns a number of codewords, a used for Reed-Solomon error detection and
            correction(in ECC200 symbols).
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.DataMatrixSymbol.SymbolECCType">
            <summary>
            Returns the type of DataMatrix symbol.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeInfo.DataMatrixTextValueItem">
            <summary>
            Contains text data of Data Matrix barcode.
            </summary>  
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeInfo.DataMatrixTextValueItem.#ctor(System.String,Vintasoft.WpfBarcode.BarcodeInfo.DataMatrixEncodingMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.DataMatrixTextValueItem" /> class. 
            </summary>
            <param name="value">value of text data.</param>
            <param name="mode">encoding mode.</param>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.DataMatrixTextValueItem.Mode">
            <summary>
            Returns an encoding mode of data.
            </summary>
            <value>
            This property returns a <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.DataMatrixEncodingMode" />.Text,
            <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.DataMatrixEncodingMode" />.C40, <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.DataMatrixEncodingMode" />.X12
            or <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.DataMatrixEncodingMode" />.EDIFACT.
            </value>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeInfo.NumericValueItem">
            <summary>
            Contains information about numeric data of barcode.
            </summary>    
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeInfo.NumericValueItem.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.NumericValueItem" /> class. 
            </summary>
            <param name="value">Numeric value of barcode.</param>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeInfo.QRInfo">
            <summary>
            Contains information about recognized QR barcode.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeInfo.QRInfo.ToString">
            <summary> 
             Converts the information about barcode of this instance to its equivalent
             string.
             </summary>
             <returns>
             String representation of barcode.
             </returns>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.QRInfo.MatrixWidth">
            <summary>
            Gets the width, in modules (cells), of the barcode matrix.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.QRInfo.MatrixHeight">
            <summary>
            Gets the height, in modules (cells), of the barcode matrix.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.QRInfo.Symbol">
            <summary>
            Returns the QR symbol.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.QRInfo.ErrorCorrectionLevel">
            <summary>
            Returns a level of error correction used in barcode.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeInfo.QRSymbol">
            <summary>
            Contains information about QR symbol: size, number of total codewords,
            version number, etc.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeInfo.QRSymbol.ToString">
            <summary> 
             Converts the QRSymbol of this instance to its equivalent
             string.
             </summary>
             <returns>
             String representation of symbol.
             </returns>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.QRSymbol.SymbolSize">
            <summary>
            Returns a symbol size.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.QRSymbol.IsMicroQR">
            <summary>
            Returns true if symbol is MicroQR. 
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.QRSymbol.Version">
            <summary>
            Returns QR symbol version.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeInfo.QRSymbol.TotalCodewords">
            <summary>
            Returns a number of total codewords in symbol.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeInfoClass">
            <summary>
            Specifies available barcode classes: 1D or 2D.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfoClass.Barcode1D">
            <summary>
            1D barcode.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeInfoClass.Barcode2D">
            <summary>
            2D barcode.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeType">
            <summary>
            Specifies available types of barcode symbologies.
            </summary>
            <remarks>
            Optional checksum digit can be managed using <see cref="P:Vintasoft.WpfBarcode.ReaderSettings.OptionalCheckSum" /> and
            <see cref="P:Vintasoft.WpfBarcode.WriterSettings.OptionalCheckSum" /> properties.<br />
            Narrow to wide bar ratio can be managed using <see cref="P:Vintasoft.WpfBarcode.WriterSettings.BarsRatio" /> property.<br />
            List of supported barcode symbology subsets is available
            here: <see cref="T:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets" />.
            </remarks>
            <seealso cref="T:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubset" />
            <seealso cref="T:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets" />
            <seealso cref="P:Vintasoft.WpfBarcode.WriterSettings.Barcode" />
            <seealso cref="P:Vintasoft.WpfBarcode.ReaderSettings.ScanBarcodeTypes" />
            <seealso cref="P:Vintasoft.WpfBarcode.ReaderSettings.ScanBarcodeSubsets" />
            <seealso cref="M:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubset.Encode(Vintasoft.WpfBarcode.BarcodeInfo.ValueItemBase,Vintasoft.WpfBarcode.WriterSettings)" />
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeType.None">
            <summary>
            Barcode symbology is not specified.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeType.Codabar">
            <summary>
            Codabar is a barcode symbology also known as 
            Codeabar, Ames Code, NW-7, Monarch, Code 2 of 7.<br />
            <br />
            Codeabar is a linear, variable length, self-checking symbology that may 
            encode 16 different characters, and an additional four start/stop characters.<br />
            <br />
            Encodable character set: numbers 0-9, '-', '$', ':', '/', '.', '+'. <br />
            Start and Stop characters: A, B, C, D.<br />
            <br />
            The symbology does not have a check digit.<br />
            <br />
            Narrow to wide bar ratio is 1:2.25 to 1:3.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeType.Code11">
            <summary>
            Code 11 is a barcode symbology also known as 
            Code11, USD-8, USD8.<br />
            <br />
            Code 11 is a linear, variable length, high-density numeric-only symbology that may
            encode numbers and the dash symbol.<br />
            <br />
            Encodable character set: numbers 0-9, '-'. <br />
            <br />
            The symbology includes a checksum digit.<br />
            <br />
            Narrow to wide bar ratio is 1:2 to 1:3.5.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeType.Code128">
            <summary>
            Code 128 is a barcode symbology also known as 
            ANSI/AIM Code 128, USS Code 128.<br />
            <br />
            Code 128 is a linear, variable length, very effective high-density symbology that may 
            encode the full 128-character ASCII character set and extended character sets.<br />
            <br />
            Allowable non-data special flags: 
            <ul>
            <li>&lt;FNC1&gt; - <see cref="P:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags.Fnc1" /></li>
            <li>&lt;FNC2&gt; - <see cref="P:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags.Fnc2" /></li> 
            <li>&lt;FNC3&gt; - <see cref="P:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags.Fnc3" /></li> 
            <li>&lt;FNC4&gt; - <see cref="P:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags.Fnc4" /></li>
            </ul>
            <br />
            The symbology includes a checksum digit.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeType.Standard2of5">
            <summary>
            Standard 2 of 5 is a barcode symbology also known as 
            Industrial 2 of 5, Code 2/5.<br />
            <br />
            Standard 2 of 5 is a linear, variable length, low-density numeric-only symbology.<br />
            <br />
            Encodable character set: numbers 0-9.<br />
            <br />
            The symbology optional includes a checksum digit.<br />
            <br />
            Narrow to wide bar ratio is 1:2 to 1:3.5.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeType.Interleaved2of5">
            <summary>
            Interleaved 2 of 5 is a barcode symbology also known as 
            ANSI/AIM ITF 25, USS ITF 2/5, ITF, I-2/5.<br />
            <br />
            Interleaved 2 of 5 is a linear, variable length, high-density numeric-only symbology based 
            upon the Standard 2 of 5 symbology.<br />
            <br />
            Encodable character set: numbers 0-9.<br />
            <br />
            The symbology optional includes a checksum digit.<br />
            <br />
            Narrow to wide bar ratio is 1:2 to 1:3.5.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeType.Code39">
            <summary>
            Code 39 is a barcode symbology also known as 
            Alpha39, Code 3 of 9, Type 39, USS Code 39, USD-3.<br />
            <br />
            Code 39 is a linear, variable length, alpha-numeric symbology,
            encodes 43 different characters.<br />
            <br />
            Encodable character set: '0'..'9', 'A'..'Z', '-', '.', ' ', '$', '/', '%'.<br />
            <br />
            The symbology optional includes a checksum digit.<br />
            <br />
            Narrow to wide bar ratio is 1:2 to 1:3.     
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeType.Code93">
            <summary>
            Code 93 is a barcode symbology also known as 
            USS Code 93, USS-93.<br />
            <br />
            Code 93 is a linear, variable length, alpha-numeric symbology,
            encodes the full 128-character ASCII character set.<br />
            <br />
            The symbology includes a checksum digit.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeType.RSS14Stacked">
            <summary>
            RSS-14 Stacked is a barcode symbology also known as 
            Reduced Space Symbology 14 Stacked.<br />
            <br />
            RSS-14 Stacked is a variation of the RSS-14 symbology that is stacked 
            in two rows and is used when the normal symbol would be too wide for the application.
            Symbology encodes 13-digits, check digit, and linkage flag.<br />
            <br />
            Encodable character set: numbers 0-9. <br />
            <br />
            The symbology includes a checksum digit.<br />
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeType.RSSExpandedStacked">
             <summary>
             RSS Expanded Stacked is a barcode symbology also known as 
             Reduced Space Symbology Expanded Stacked.<br />
             <br />
             RSS Expanded Stacked is a stacked linear, variable length symbology capable of encoding 
             up to 74 numeric or 41 alphabetic characters.
             RSS barcode symbology family is represented by ISO/IEC 24724.<br />
             <br />
             Encodable character set: full 128-character ASCII character set.<br />
            <br />
             Allowable non-data special flag:
             &lt;FNC1&gt; - <see cref="P:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags.Fnc1" />.<br />
             <br />
             The symbology includes a checksum digit.<br />
             <br />
             Minimum symbol height: 71X(2 row) - 404X(11 row).
             </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeType.UPCE">
            <summary>
            UPC-E is a barcode symbology also known as 
            Universal Product Code version E.<br />
            <br />
            UPC-E is a variation of UPC-A symbology which allows to create a more compact barcode 
            by removing "extra" zeros. This is linear, fixed-length 
            numeric-only symbology capable of encoding 6-digits and check digit.<br />
            <br />
            Encodable character set: numbers 0-9.<br /> 
            <br />
            The symbology includes a checksum digit.<br />
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeType.Telepen">
            <summary>
            Telepen is a linear, variable length symbology that may 
            encode the full 128-character ASCII character set.<br />
            <br />
            Encodable character set: full 128-character ASCII character set.<br />
            <br />
            The symbology includes a checksum digit.<br />
            <br />
            Narrow to wide bar ratio is 1:2 to 1:3.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeType.Postnet">
            <summary>
            Postnet is a barcode symbology also known as 
            USPS POSTNET.<br />
            <br />
            Postnet is a linear two-state postal, variable length, numeric-only symbology 
            used by the United States Postal Service to assist in directing mail.<br />
            <br />
            Encodable character set: numbers 0-9.<br /> 
            <br /> 
            The symbology includes a checksum digit.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeType.Planet">
            <summary>
            PLANET is a barcode symbology also known as 
            USPS PLANET, USPS Confirm Service Barcode.<br />
            <br />
            PLANET is a linear two-state postal, variable length, numeric-only symbology 
            used by the United States Postal Service to identify and track pieces of 
            mail during delivery.<br />
            <br />
            Encodable character set: numbers 0-9.<br /> 
            <br /> 
            The symbology includes a checksum digit.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeType.RoyalMail">
            <summary>
            Royal Mail is a barcode symbology also known as 
            RM4SCC, RoyalMail4SCC, British Royal Mail 4-State Customer Code, Singapore 4-State Postal.<br />
            <br />
            Royal Mail is a linear four-state postal, variable length symbology.<br />
            <br />
            Encodable character set: numbers 0-9, letters A-Z (upper case only).<br /> 
            <br /> 
            The symbology includes a checksum digit.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeType.AustralianPost">
            <summary>
            Australian Post is a barcode symbology also known as 
            Australian Post 4-state, Australia Post Customer Barcode.<br />
            <br />
            Australian Post is a linear four-state postal, variable length symbology 
            used by Australia Post for Postal code and automatic mail sorting.<br />
            <br />
            Encodable character set: see specification.<br /> 
            <br /> 
            The symbology includes a checksum digit.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeType.PatchCode">
            <summary>
            Patch Code is a barcode symbology also known as 
            Kodak Patch Code.<br />
            <br />
            Patch Code is a linear, fixed-length symbology that
            encodes one character.<br />
            <br />
            Encodable character set: 1, 2, 3, 4, 6, T.<br />
            <br />
            The symbology does not have a check digit.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeType.PDF417">
            <summary>
            PDF417 is a barcode symbology also known as 
            Portable Data File 417.<br />
            <br />
            PDF417 is a two-dimensional multi-row barcode symbology 
            capable of encoding up to 1108 bytes of data per barcode.
            It is represented by ISO/IEC 15438.<br />
            <br />
            <b>Features:</b>
            <ul>
            <li>Three data compaction mode: text mode (up to 1850 text characters), 
            byte mode (up to 1108 bytes) and 
            numeric mode(up to 2710 numeric characters).</li>
            <li>User-specified dimensions (columns, rows, row height).</li> 
            <li>Reed-Solomon error detection and correction (9 levels).</li>
            <li>Extended Channel Interpretations enables characters from other character 
            sets and other data interpretations.</li>
            <li>Structured Append allows files of data to be represented in up to 
            99999 PDF417 symbols (Macro PDF417).</li>
            </ul>
            <br />
            Allowable non-data special flags: 
            <ul>
            <li>&lt;ECInnnnnn&gt; - <see cref="M:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags.CreateECICharacter(System.Int32)" /></li>
            <li>&lt;SA_n_m&gt; - <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.PDF417StructuredAppendCharacter" /></li>
            <li>&lt;LINKAGE&gt; - <see cref="P:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags.LinkageFlag" /></li>
            <li>&lt;LINKAGE_EANUCC&gt; - <see cref="P:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags.EanUccLinkageFlag" /></li>
            <li>&lt;READER_PROGRAMMING&gt; - <see cref="P:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags.ReaderProgramming" /></li>
            </ul>
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeType.PDF417Compact">
            <summary>
            PDF417 Compact is a variation of PDF417 barcode symbology. 
            It omits the right row indicator and stop pattern in order to save space.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeType.EAN13">
            <summary>
            EAN-13 is a barcode symbology also known as 
            European Article Number 13.<br />
            <br />
            EAN-13 is a superset of the UPC-A symbology that is linear, fixed-length 
            numeric-only symbology capable of encoding 12-digits and check digit.<br />
            <br />
            Encodable character set: numbers 0-9.<br /> 
            <br />
            The symbology includes a checksum digit.<br />
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeType.EAN8">
            <summary>
            EAN-8 is a barcode symbology also known as 
            European Article Number 8.<br />
            <br />
            EAN-8 is a shorted version of EAN-13 symbology that is linear, fixed-length 
            numeric-only symbology capable of encoding 7-digits and check digit.<br />
            <br />
            Encodable character set: numbers 0-9.<br /> 
            <br />
            The symbology includes a checksum digit.<br />
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeType.UPCA">
            <summary>
            UPC-A is a barcode symbology also known as 
            Universal Product Code version A.<br />
            <br />
            UPC-A  is a linear, fixed-length 
            numeric-only symbology capable of encoding 11-digits and check digit.<br />
            <br />
            Encodable character set: numbers 0-9.<br />
            <br />
            The symbology includes a checksum digit.<br />
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeType.Plus5">
            <summary>
            EAN/UPC Add On 5 is a barcode symbology also known as 
            EAN Supplement 5/Five-digit Add-On.<br />
            <br />
            EAN/UPC Add On 5 is a linear, fixed-length symbology capable of encoding 5-digits
            as add on of EAN/UPC barcode symbology.<br />
            <br />
            Encodable character set: numbers 0-9.<br />
            <br />
            The symbology does not have a check digit.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeType.Plus2">
            <summary>
            EAN/UPC Add On 2 is a barcode symbology also known as 
            EAN Supplement 2/Two-digit Add-On.<br />
            <br />
            EAN/UPC Add On 2 is a linear, fixed-length symbology capable of encoding 2-digits
            as add on of EAN/UPC barcode symbology.<br />
            <br />
            Encodable character set: numbers 0-9.<br />
            <br />
            The symbology does not have a check digit.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeType.EAN13Plus5">
            <summary>
            EAN-13 barcode symbology with a 5-digit EAN/UPC Add On.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeType.EAN13Plus2">
            <summary>
            EAN-13 barcode symbology with a 2-digit EAN/UPC Add On.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeType.EAN8Plus5">
            <summary>
            EAN-8 barcode symbology with a 5-digit EAN/UPC Add On.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeType.EAN8Plus2">
            <summary>
            EAN-8 barcode symbology with a 2-digit EAN/UPC Add On.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeType.UPCEPlus5">
            <summary>
            UPC-E barcode symbology with a 5-digit EAN/UPC Add On.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeType.UPCEPlus2">
            <summary>
            UPC-E barcode symbology with a 2-digit EAN/UPC Add On.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeType.UPCAPlus5">
            <summary>
            UPC-A barcode symbology with a 5-digit EAN/UPC Add On.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeType.UPCAPlus2">
            <summary>
            UPC-A barcode symbology with a 2-digit EAN/UPC Add On.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeType.DataMatrix">
            <summary>
            Data Matrix is a two-dimensional matrix barcode symbology 
            which is made up of nominally square modules arranged within a 
            perimeter finder pattern. Data Matrix is represented by ISO/IEC 16022 and
            capable of encoding up to 1555 bytes of data per barcode.<br />
            <br />
            <b>Features:</b>
            <ul>
            <li>Three data compaction mode: alphanumeric mode (up to 2335 text characters), 
            byte mode (up to 1555 bytes) and 
            numeric mode (up to 3116 numeric characters).</li>
            <li>Reed-Solomon error detection and correction.</li>
            <li>Structured Append allows files of data to be represented in 
            up to 16 Data Matrix symbols.</li>
            <li>Extended Channel Interpretations enables characters from other character 
            sets and other data interpretations.</li>
            <li>Supports all ECC200 square (10x10 to 144x144) and rectangular (8x18 to 16x48) 
            symbols.</li>
            </ul>
            <br />
            Allowable non-data special flags: 
            <ul>
            <li>&lt;ECInnnnnn&gt; - <see cref="M:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags.CreateECICharacter(System.Int32)" /></li>
            <li>&lt;SA_n_m&gt; - <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.DataMatrixStructuredAppendCharacter" /></li>
            <li>&lt;MACRO_05&gt; - <see cref="P:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags.Macro05" /></li>
            <li>&lt;MACRO_06&gt; - <see cref="P:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags.Macro06" /></li>
            <li>&lt;READER_PROGRAMMING&gt; - <see cref="P:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags.ReaderProgramming" /></li>
            </ul>
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeType.QR">
            <summary>
            QR Code is a two-dimensional matrix barcode symbology which is made up of
            an array of nominally square modules arranged in an overall square pattern, 
            including a unique finder pattern located at three corners of the symbol.
            QR Code is represented by ISO/IEC 18004 and capable of encoding 
            up to 2953 bytes of data per barcode.<br />
            <br />
            <b>Features:</b>
            <ul>
            <li>Four data compaction mode: alphanumeric mode (up to 4296 text characters), 
            byte mode (up to 2953 bytes), 
            numeric mode (up to 7089 numeric characters) and
            Kanji mode (up to 1817 Kanji characters).</li>
            <li>Reed-Solomon error detection and correction (4 levels).</li>
            <li>Structured Append allows files of data to be represented in 
            up to 16 QR Code symbols.</li>
            <li>Extended Channel Interpretations enables characters from other character 
            sets and other data interpretations.</li>
            </ul>
            <br />
            Allowable non-data special flags: 
            <ul>
            <li>&lt;ECInnnnnn&gt; - <see cref="M:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags.CreateECICharacter(System.Int32)" /></li>
            <li>&lt;SA_n_m&gt; - <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.QRStructuredAppendCharacter" /></li>
            <li>&lt;FNC1&gt; - <see cref="P:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags.Fnc1" /></li>
            </ul>
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeType.IntelligentMail">
            <summary>
            Intelligent Mail is a barcode symbology also known as 
            IM barcode symbology.<br />
            Intelligent Mail is a linear four-state postal numeric-only symbology 
            capable of encoding 20, 25, 29 or 31 digits.
            Intelligent Mail is represented by USPS-B-3200 standard.<br />
            <br />
            Encodable character set: numbers 0-9. <br />
            Second digit must be 0-4.<br />
            <br />
            The symbology includes a checksum digit.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeType.RSS14">
            <summary>
            RSS-14 is a barcode symbology also known as 
            Reduced Space Symbology 14.<br />
            <br />
            RSS-14 is a linear, fixed-length numeric-only symbology 
            capable of encoding 13-digits, check digit, and linkage flag.
            RSS barcode family is represented by ISO/IEC 24724.<br />
            <br />
            Encodable character set: numbers 0-9. <br />
            <br />
            The symbology includes a checksum digit.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeType.RSSLimited">
            <summary>
            RSS Limited is a barcode symbology also known as 
            Reduced Space Symbology Limited.<br />
            <br />
            RSS Limited is a linear, fixed-length numeric-only symbology 
            capable of encoding 13-digits, check digit, and linkage flag.
            RSS barcode symbology family is represented by ISO/IEC 24724.<br />
            <br />
            Encodable character set: numbers 0-9. 
            First digit can be 0 or 1.<br />
            <br />
            The symbology includes a checksum digit.<br />
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeType.RSSExpanded">
            <summary>
            RSS Expanded is a barcode symbology also known as 
            Reduced Space Symbology Expanded.<br />
            <br />
            RSS Expanded is a variable length linear symbology capable of encoding 
            up to 74 numeric or 41 alphabetic characters.
            RSS barcode symbology family is represented by ISO/IEC 24724.<br />
            <br />
            Encodable character set: full 128-character ASCII character set.<br />
            <br />
            Allowable non-data special flag:
            &lt;FNC1&gt; - <see cref="P:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags.Fnc1" />.<br />
            <br />
            The symbology includes a checksum digit.<br />
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeType.Aztec">
            <summary>
            Aztec Code is a two-dimensional matrix barcode symbology whose symbols are
            nominally square, made up of square modules on a square grid, with
            a square bullseye pattern at their center. Aztec Code is represented by 
            ISO/IEC 24778 and capable of encoding up to 1914 bytes of data per barcode.<br />
            <br />
            <b>Features:</b>
            <ul>
            <li>Three data compaction mode: alphanumeric mode (up to 3067 text characters), 
            byte mode (up to 1914 bytes) and numeric mode (up to 3822 numeric characters).</li>
            <li>Reed-Solomon error detection and correction (user-selected percentages of error correction).</li>
            <li>Structured Append allows files of data to be represented in 
            up to 16 Aztec Code symbols.</li>
            <li>No quiet zone is required outside the bounds of the symbol.</li>
            <li>Extended Channel Interpretations enables characters from other character 
            sets and other data interpretations.</li>
            <li>Suports Aztec Runes and Aztec Compact symbols.</li>
            </ul>
            <br />
            Allowable non-data special flags: 
            <ul>
            <li>&lt;ECInnnnnn&gt; - <see cref="M:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags.CreateECICharacter(System.Int32)" /></li>
            <li>&lt;SA_n_m&gt; - <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.AztecStructuredAppendCharacter" /></li>
            <li>&lt;FNC1&gt; - <see cref="P:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags.Fnc1" /></li>
            </ul>
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeType.Pharmacode">
            <summary>
            Pharmacode is a barcode symbology also known as 
            Laetus Pharmacode, Pharmaceutical Binary Code.<br />
            <br />
            Pharmacode is a linear, variable length, numeric-only symbology used 
            in the pharmaceutical industry as a packing control system.<br />
            <br />
            Pharmacode can encodes only a single integer from 16 to 131069. <br />
            <br />
            The symbology does not have a check digit.<br />
            <br />
            Narrow to wide bar ratio is 1:3.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeType.MSI">
            <summary>
            MSI is a barcode symbology also known as 
            MSI/Plessey, Modified Plessey.<br />
            <br />
            MSI is a linear, variable length, numeric-only symbology was developed by the 
            MSI Data Corporation, based on the original Plessey Code.<br />
            <br />
            Encodable character set: numbers 0-9. <br />
            <br />
            The symbology includes a checksum digit.<br />
            <br />
            Narrow to wide bar ratio is 1:2 to 1:3.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeType.UnknownLinear">
            <summary>
            Unknown linear barcode symbology.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeType.MicroQR">
            <summary>
            Micro QR Code is a two-dimensional matrix barcode symbology, 
            compact version of QR Code symbology, which is made up of
            an array of nominally square modules arranged in an overall square pattern, 
            including a unique finder pattern located at a single corner of the symbol.
            Micro QR Code is represented by ISO/IEC 18004 and capable of encoding 
            up to 15 bytes of data per barcode.<br />
            <br />
            <b>Features:</b>
            <ul>
            <li>Four data compaction mode: alphanumeric mode (up to 21 text characters), 
            byte mode (up to 15 bytes), 
            numeric mode (up to 35 numeric characters) and
            Kanji mode (up to 9 Kanji characters).</li>
            <li>Reed-Solomon error detection and correction (3 levels).</li>
            </ul>
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeType.MaxiCode">
            <summary>
            MaxiCode is a two-dimensional fixed-size matrix barcode symbology which is
            made up of offset rows of hexagonal modules arranged around a unique finder pattern. 
            MaxiCode is represented by ISO/IEC 16023 and capable of encoding up to 
            93 alphanumeric characters per barcode.<br />
            <br />
            <b>Features:</b>
            <ul>
            <li>Two data compaction mode: alphanumeric mode (up to 93 text characters)
            and numeric mode (up to 138 numeric characters).</li>
            <li>Reed-Solomon error detection and correction.</li>
            <li>Structured Append allows files of data to be represented in 
            up to 8 MaxiCode symbols.</li>
            <li>Extended Channel Interpretations enables characters from other character 
            sets and other data interpretations.</li>
            <li>The following modes are available: Mode2, Mode3, Mode4, Mode5 and Mode6.</li>
            </ul>
            <br />
            Allowable non-data special flags: 
            <ul>
            <li>&lt;ECInnnnnn&gt; - <see cref="M:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags.CreateECICharacter(System.Int32)" /></li>
            <li>&lt;SA_n_m&gt; - <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.StructuredAppendCharacter" /></li>
            </ul>
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeType.DutchKIX">
            <summary>
            Dutch KIX is a barcode symbology also known as 
            Royal TPG Post KIX.<br />
            <br />
            Dutch KIX is a linear four-state postal, variable length symbology.<br />
            <br />
            Encodable character set: numbers 0-9, letters A-Z (upper case only).<br /> 
            <br /> 
            The symbology does not have a checksum digit.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeType.MicroPDF417">
            <summary>
            Micro PDF417 is a two-dimensional multi-row barcode symbology, 
            derived from and closely based on PDF417 symbology.
            Micro PDF417 is represented by ISO/IEC 24728 and capable of 
            encoding up to 150 bytes of data per barcode.<br />
            <br />
            <b>Features:</b>
            <ul>
            <li>Three data compaction mode: alphanumeric mode (up to 250 text characters), 
            byte mode (up to 150 bytes) and numeric mode (up to 366 numeric characters).</li>
            <li>User-specified dimensions (columns, rows, row height).</li> 
            <li>Reed-Solomon error detection and correction.</li>
            <li>Extended Channel Interpretations enables characters from other character 
            sets and other data interpretations.</li>
            <li>Structured Append allows files of data to be represented in up to 
            99999 Micro PDF417 symbols.</li>        
            </ul>
            <br />
            Allowable non-data special flags: 
            <ul>
            <li>&lt;ECInnnnnn&gt; - <see cref="M:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags.CreateECICharacter(System.Int32)" /></li>
            <li>&lt;SA_n_m&gt; - <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.PDF417StructuredAppendCharacter" /></li>
            <li>&lt;MACRO_05&gt; - <see cref="P:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags.Macro05" /></li>
            <li>&lt;MACRO_06&gt; - <see cref="P:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags.Macro06" /></li>
            <li>&lt;CODE128EM_nnn&gt; - <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.MicroPDF417AsCode128EmulationValueItem" /></li>
            <li>&lt;LINKAGE&gt; - <see cref="P:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags.LinkageFlag" /></li>
            <li>&lt;LINKAGE_EANUCC&gt; - <see cref="P:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags.EanUccLinkageFlag" /></li>
            <li>&lt;READER_PROGRAMMING&gt; - <see cref="P:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags.ReaderProgramming" /></li>
            </ul>
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeType.Code32">
            <summary>
            Code 32 (Italian Pharmacode, Codice 32 Pharmacode).<br />
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeType.Mailmark4StateC">
            <summary>
            Royal Mail Mailmark 4-state barcode C is a barcode symbology also known as 
            Mailmark 4-state barcode C.<br />
            <br />
            Mailmark 4-state barcode C is a linear four-state postal, fixed-size symbology 
            relating to Mailmark barcode family.<br />
            <br />
            Value format see in "Royal Mail Mailmark barcode definition document v3.0".<br /> 
            Value example: '1100000000000XY11     ', '21B2254800659JW5O9QA6Y'.<br /> 
            <br /> 
            The symbology includes a checksum digit.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeType.Mailmark4StateL">
            <summary>
            Royal Mail Mailmark 4-state barcode L is a barcode symbology also known as 
            Mailmark 4-state barcode L.<br />
            <br />
            Mailmark 4-state barcode C is a linear four-state postal, fixed-size symbology 
            relating to Mailmark barcode family.<br />
            <br />
            Value format see in "Royal Mail Mailmark barcode definition document v3.0".<br /> 
            Value example: '11000000000000000XY11     ', '41038422416563762EF61AH8T ', 
            '11224689598765432EC1V9HQ6W'.<br /> 
            <br /> 
            The symbology includes a checksum digit.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeType.IATA2of5">
            <summary>
            IATA 2 of 5 is a barcode symbology also known as 
            2/5 IATA, International Air Transport Association 2 of 5.<br />
            <br />
            IATA 2 of 5 is a linear, variable length, low-density numeric-only symbology that
            used by International Air Transport Assosiation (IATA) for the management of air cargo.<br />
            <br />
            Encodable character set: numbers 0-9. <br />
            <br />
            The symbology does not have a check digit.<br />
            <br />
            Narrow to wide bar ratio is 1:2 to 1:3.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeType.Matrix2of5">
            <summary>
            Matrix 2 of 5 is a barcode symbology also known as 
            2/5 Matrix.<br />
            <br />
            Matrix 2 of 5 is a linear, variable length, numeric-only symbology.<br />
            <br />
            Encodable character set: numbers 0-9. <br />
            <br />
            The symbology optional includes a checksum digit.<br />
            <br />
            Narrow to wide bar ratio is 1:2 to 1:3.
            </summary>        
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeType.Code16K">
            <summary>
            Code 16K is a barcode symbology also known as 
            USS-16K.<br />
            <br />
            Code 16K is a stacked linear, variable length symbology capable of encoding 
            up to 144 numeric or 77 alphabetic characters.<br />
            <br />
            Encodable character set: full 128-character ASCII character set.<br />
            <br />
            <b>Features:</b>
            <ul>
            <li>Structured Append allows data to be represented in 
            up to 9 Code 16K symbols.</li>
            <li>Supports seven encoding modes 0 through 6.</li>
            <li>Supports 2 to 16 row symbols.</li>
            </ul>
            <br />
            Allowable non-data special flag:
            <ul>
            <li>&lt;FNC1&gt; - <see cref="P:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags.Fnc1" /></li>
            <li>&lt;FNC2&gt; - <see cref="P:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags.Fnc2" /></li>
            <li>&lt;FNC3&gt; - <see cref="P:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags.Fnc3" /></li>
            <li>&lt;FNC4&gt; - <see cref="P:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags.Fnc4" /></li>
            <li>&lt;PAD&gt; - <see cref="P:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags.Pad" /></li>
            <li>&lt;SA_n_m&gt; - <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.StructuredAppendCharacter" /></li>
            </ul>
            <br />
            The symbology includes a checksum digit.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeType.HanXinCode">
            <summary>
            Han Xin Code is a two-dimensional barcode matrix symbology which is made up of an array
            of nominally square modules arranged in an overall square pattern, including a 
            Finder Pattern located at four corners of the symbol that are intended to assist 
            in easy location of its position, size and inclination.
            Han Xin Code also known as Chinese Sensible Code.
            Han Xin Code capable of encoding up to 3261 bytes of data per barcode.<br />
            <br />
            <b>Features:</b>
            <ul>
            <li>Seven data compaction modes: text mode (up to 4350 text characters), 
            byte mode (up to 3261 bytes), 
            numeric mode (up to 7827 numeric characters),
            Common Chinese Characters in Region One mode (up to 2174 GB18030 characters),
            Common Chinese Characters in Region Two mode (up to 2174 GB18030 characters),
            GB18030 2-byte Region mode (up to 1739 GB18030 characters) and
            GB18030 4-byte Region mode (up to 1044 GB18030 characters).</li>
            <li>Reed-Solomon error detection and correction (4 levels).</li>
            <li>Extended Channel Interpretations enables characters from other character 
            sets and other data interpretations.</li>
            </ul>
            <br />
            Allowable non-data special flags: 
            <ul>
            <li>&lt;ECInnnnnn&gt; - <see cref="M:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags.CreateECICharacter(System.Int32)" /></li>
            </ul>
            </summary>
            <seealso cref="T:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeEncodingMode" />
        </member>
        <member name="T:Vintasoft.WpfBarcode.Region">
            <summary>
            Contains information about region of barcode.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.Region.GetPoints">
            <summary>
            Returns a Region points.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.Region.ToString">
            <summary>
            Converts this <see cref="T:Vintasoft.WpfBarcode.Region" /> to a human-readable string. 
            </summary>
            <returns>A string that represents this <see cref="T:Vintasoft.WpfBarcode.Region" />.</returns>
        </member>
        <member name="M:Vintasoft.WpfBarcode.Region.IsPointInRegion(System.Windows.Point)">
            <summary>
            Determines if point is located in region.
            </summary>
            <param name="point">Point to test.</param>
            <returns><b>true</b> if point is located in region, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:Vintasoft.WpfBarcode.Region.GetHashCode">
            <summary>
            Returns a hash code for this <see cref="T:Vintasoft.WpfBarcode.Region" />.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.Region.Equals(System.Object)">
            <summary>
            Specifies whether this <see cref="T:Vintasoft.WpfBarcode.Region" /> contains the same coordinates
            as the specified <see cref="T:System.Object" />.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.Region.LeftTop">
            <summary>
            Returns a left-top coordinate of rectangle.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.Region.RightTop">
            <summary>
            Returns a right-top coordinate of rectangle.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.Region.LeftBottom">
            <summary>
            Returns a left-bottom coordinate of rectangle.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.Region.RightBottom">
            <summary>
            Returns a right-bottom coordinate of rectangle.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.Region.Angle">
            <summary>
            Returns an angle relative to vector (1,0).
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.Region.Rectangle">
            <summary>
            Returns a boundary rectangle for this region.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.InternalErrorException">
            <summary>
            The exception that is thrown when an internal error is occured in the library.
            </summary>
            <remarks>
            The <see cref="P:Vintasoft.WpfBarcode.InternalErrorException.Message" /> property contains information about current
            state of the library. You can send this information to VintaSoft's support
            team (support@vintasoft.com) and we will do the best to solve the problem.
            </remarks>
        </member>
        <member name="M:Vintasoft.WpfBarcode.InternalErrorException.ToString">
            <summary>
            Creates and returns a string representation of the current exception. 
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.InternalErrorException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.InternalErrorException.StackTrace">
            <summary>
            Gets a string representation of the frames on the call stack at the time
            the current exception was thrown.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.ReaderSettings">
            <summary>
            Encapsulates the settings for reading barcodes from images.
            </summary>
            <example>
            Please see example <see cref="M:Vintasoft.WpfBarcode.BarcodeReader.ReadBarcodes">here</see>.
            </example>
        </member>
        <member name="F:Vintasoft.WpfBarcode.ReaderSettings.MaxThresholdInterations">
            <summary>
            Define maximum value for the <see cref="P:Vintasoft.WpfBarcode.ReaderSettings.ThresholdIterations" /> property.
            </summary>
            <value>This constant is equal 50.</value>
        </member>
        <member name="F:Vintasoft.WpfBarcode.ReaderSettings.DefaultScanInterval">
            <summary>
            Define default value for the <see cref="P:Vintasoft.WpfBarcode.ReaderSettings.ScanInterval" /> property.
            </summary>
            <value>This constant is equal 5.</value>
        </member>
        <member name="F:Vintasoft.WpfBarcode.ReaderSettings.ConfidenceNotAvailable">
            <summary>
            Value of the <see cref="P:Vintasoft.WpfBarcode.IBarcodeInfo.Confidence" /> property will have this
            value if confidence of barcode cannot be calculated because checksum
            or error correction algorithm are not implemented in the specification
            of barcode type.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.ReaderSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.ReaderSettings" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.ReaderSettings.GetSchema">
            <summary>
            Not implemented.
            </summary>
            <returns />
        </member>
        <member name="M:Vintasoft.WpfBarcode.ReaderSettings.ReadXml(System.Xml.XmlReader)">
            <summary>
            Deserializes the <see cref="T:Vintasoft.WpfBarcode.ReaderSettings" /> from a specified <see cref="T:System.Xml.XmlReader" />.
            </summary>
            <param name="reader">The XML reader to use to deserialize the <see cref="T:Vintasoft.WpfBarcode.ReaderSettings" />.</param>
        </member>
        <member name="M:Vintasoft.WpfBarcode.ReaderSettings.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Serializes the <see cref="T:Vintasoft.WpfBarcode.ReaderSettings" /> to a specified <see cref="T:System.Xml.XmlWriter" />.
            </summary>
            <param name="writer">The XML writer to use to serialize the <see cref="T:Vintasoft.WpfBarcode.ReaderSettings" />.</param>
        </member>
        <member name="M:Vintasoft.WpfBarcode.ReaderSettings.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Vintasoft.WpfBarcode.ReaderSettings.ToString">
            <summary> 
            Converts the reader settings of this instance to its equivalent
            string.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.ReaderSettings.ScanBarcodeTypes">
            <summary>
            Gets or sets the barcode symbology types to search.
            </summary>
            <value>
            Default value is <see cref="T:Vintasoft.WpfBarcode.BarcodeType" />.Code39.
            </value>
            <remarks>Different <see cref="T:Vintasoft.WpfBarcode.BarcodeType" />'s may be logically OR'd
            to search for more than one barcode type.</remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.ReaderSettings.ScanBarcodeSubsets">
            <summary>
            Gets or sets the barcode symbology subsets to search.
            </summary>
            <remarks>
            Standard barcode subsets see in <see cref="T:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubsets" />.
            </remarks>
            Please see example <see cref="M:Vintasoft.WpfBarcode.BarcodeReader.ReadBarcodes(System.IO.Stream)">here</see>.
            <seealso cref="T:Vintasoft.WpfBarcode.SymbologySubsets.BarcodeSymbologySubset" />
        </member>
        <member name="P:Vintasoft.WpfBarcode.ReaderSettings.ScanDirection">
            <summary>
            Gets or sets the direction for barcode search.
            </summary>
            <value>
            Default value is <see cref="P:Vintasoft.WpfBarcode.ReaderSettings.ScanDirection" />.LeftToRight.
            </value>
            <remarks>
            Different <see cref="P:Vintasoft.WpfBarcode.ReaderSettings.ScanDirection" />'s may be logically OR'd to
            search for more in one direction.<br />
            <br />
            The <see cref="P:Vintasoft.WpfBarcode.ReaderSettings.ScanDirection" />.Angle45and135 scan
            direction should be used only if image contains low and wide barcodes
            rotated to 30-60 degrees. Usage of this scan direction increase time
            of recognition.
            </remarks>
            <example>
            Please see example <see cref="M:Vintasoft.WpfBarcode.BarcodeReader.ReadBarcodes">here</see>.
            </example>
        </member>
        <member name="P:Vintasoft.WpfBarcode.ReaderSettings.ScanInterval">
            <summary>
            Gets or sets the scan interval for barcode search.
            </summary>
            <value>
            Minimal value is <b>1</b>, maximal value is <b>255</b>.
            Default value is 5.
            </value>
            <remarks>
            A value of 1 means scan every pixel row or column of the image; 2 means scan every second row or column, and so on.<br />
            <br />
            Increasing the value of this field may result in faster reading of the image, but increases the probablility of not detecting narrow or poorly formed barcodes. Decreasing the value of this field can have the opposite effect: slower reading of the image but better barcode detection.<br />
            </remarks>
            <example>
            Please see example <see cref="M:Vintasoft.WpfBarcode.BarcodeReader.ReadBarcodes">here</see>.
            </example>
        </member>
        <member name="P:Vintasoft.WpfBarcode.ReaderSettings.ScanRectangle">
            <summary>
            Gets or sets the rectangle in the image to search barcodes.
            </summary>
            <value>
            Default value is <see cref="T:System.Windows.Int32Rect" />(0,0,0,0) - entire image.
            </value>
            <remarks>Rectangle with coordinates (0;0) - (0;0) means that value of
            this property will not be used.</remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.ReaderSettings.ExpectedBarcodes">
            <summary>
            Gets or sets the expected number of barcodes to search.
            </summary>
            <value>
            Default value is 1.
            </value>
            <remarks>You must set value of this property to 2 if you want to
            read one EAN Plus or UPC Plus barcode.</remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.ReaderSettings.MinConfidence">
            <summary>
            Gets or sets the minimal value of confidence, in percents.
            </summary>
            <value>
            Minimal value is <b>0</b>, maximal value is <b>100</b>.
            Default value is 95.
            </value>
            <remarks>
            Barcode will be dropped if it's <see cref="P:Vintasoft.WpfBarcode.IBarcodeInfo.Confidence" /> value
            less than MinConfidence.<br />
            <br />
            You should set value of this property to 0 if you want to see all searched
            barcodes.<br />
            You should set value of this property to 95 if you want to see "good"
            barcodes only.<br />
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.ReaderSettings.ThresholdMode">
            <summary>
            Gets or sets a mode of threshold detection.
            </summary>
            <value>
            Default value is <see cref="P:Vintasoft.WpfBarcode.ReaderSettings.ThresholdMode" />.Automatic.
            </value>
            <remarks>
            Color, palette or gray image (Color image) is converted to black-white
            image before barcode reading.<br />
            <br />
            Here is a list of steps of image converting algorithm:<br />
            <ul>
            <li>Calculates the sum of components of color (T) for each pixel by
            following formula: T = R + G + B</li>
            <li>Pixel color is changed to black color if T is less than Threshold value</li>
            <li>Pixel color is changed to white color if T is more or equal than
            Threshold value</li>
            </ul>
            <br />
            Threshold can be:<br />
            <ul>
            <li>Calculated automatically (ThresholdMode = <see cref="P:Vintasoft.WpfBarcode.ReaderSettings.ThresholdMode" />.Automatic). Used by default.</li>
            <li>Set manually (ThresholdMode = <see cref="P:Vintasoft.WpfBarcode.ReaderSettings.ThresholdMode" />.Manual).<br />
            Library converts the Color image to black-white image 
            with <see cref="P:Vintasoft.WpfBarcode.ReaderSettings.Threshold" /> value and reads barcodes from image.</li>
            <li>Range of threshold's values (ThresholdMode = <see cref="P:Vintasoft.WpfBarcode.ReaderSettings.ThresholdMode" />.Iterations).<br />
            Library converts the Color image to N black-white images and reads barcodes from images, where
            N = <see cref="P:Vintasoft.WpfBarcode.ReaderSettings.ThresholdIterations" />, <see cref="P:Vintasoft.WpfBarcode.ReaderSettings.ThresholdMin" /> - left
            bound of range, <see cref="P:Vintasoft.WpfBarcode.ReaderSettings.ThresholdMax" /> - right bound of range. Barcode
            reading process will be interrupted if <see cref="P:Vintasoft.WpfBarcode.ReaderSettings.ExpectedBarcodes" /> value is reached.
            </li>
            </ul>
            <br />
            You should use the <see cref="P:Vintasoft.WpfBarcode.ReaderSettings.ThresholdMode" />.Automatic
            mode only if you read barcodes from many "different" images because this
            feature decreases barcode reading speed.<br />
            You should use the <see cref="P:Vintasoft.WpfBarcode.ReaderSettings.ThresholdMode" />.Manual
            mode if you read barcodes from "similar" images.
            </remarks>
            <example> Here is a simple example that demonstrates how to detect barcodes in a color image with difficult-to-locate threshold.
            <code lang="VB.NET">   
            Imports System.IO   
            Imports System.Windows.Media.Imaging   
               
            Imports Vintasoft.WpfBarcode   
               
               
            ''' &lt;summary&gt;   
            ''' Test that shows how to read barcodes from image using several iterations with different thresholds.   
            ''' &lt;/summary&gt;   
            Class ThresholdModeExample   
               
            	''' &lt;summary&gt;   
            	''' Run the test.   
            	''' &lt;/summary&gt;   
            	Public Shared Sub Test()   
            		Using imageFileStream As Stream = New FileStream("test1.jpg", FileMode.Open, FileAccess.Read)   
            			Dim barcodeImage As New BitmapImage()   
            			barcodeImage.BeginInit()   
            			barcodeImage.StreamSource = imageFileStream   
            			barcodeImage.EndInit()   
               
            			ReadBarcodesUsingIterationsThresholdMode(barcodeImage)   
            		End Using   
            	End Sub   
               
            	''' &lt;summary&gt;   
            	''' Read barcodes from image using several iterations with different thresholds.   
            	''' &lt;/summary&gt;   
            	Private Shared Sub ReadBarcodesUsingIterationsThresholdMode(barcodeImage As BitmapSource)   
            		' create barcode reader   
            		Using reader As New BarcodeReader()   
            			' specify that reader must search for Code39, Code128 and DataMatrix barcodes only   
            			reader.Settings.ScanBarcodeTypes = BarcodeType.Code39 Or BarcodeType.Code128 Or BarcodeType.DataMatrix   
               
            			' specify that reader must search for horizontal and vertical barcodes only   
            			reader.Settings.ScanDirection = ScanDirection.LeftToRight Or ScanDirection.RightToLeft   
               
            			' specify that reader must search for 3 barcodes   
            			reader.Settings.ExpectedBarcodes = 3   
               
            			' specify that reader must use 9 iterations for barcode reading,   
            			' minimum threshold is 200, maximum threashold 600, threshold step is 50   
            			reader.Settings.ThresholdMode = ThresholdMode.Iterations   
            			reader.Settings.ThresholdIterations = 9   
            			reader.Settings.ThresholdMin = 200   
            			reader.Settings.ThresholdMax = 600   
               
            			' read barcodes from image   
            			Dim infos As IBarcodeInfo() = reader.ReadBarcodes(barcodeImage)   
               
            			' show barcode recognition results   
               
            			Console.WriteLine(String.Format("Recognition time {0} ms.", reader.RecognizeTime.TotalMilliseconds))   
               
            			If infos.Length = 0 Then   
            				Console.WriteLine("No barcodes found.")   
            			Else   
            				Console.WriteLine(String.Format("{0} barcodes found:", infos.Length))   
            				Console.WriteLine()   
            				For i As Integer = 0 To infos.Length - 1   
            					Dim info As IBarcodeInfo = infos(i)   
            					Console.WriteLine(String.Format("[{0}:{1}]", i, info.BarcodeType))   
            					Console.WriteLine(String.Format("Value:      {0}", info.Value))   
            					Console.WriteLine(String.Format("Confidence: {0}%", Math.Round(info.Confidence)))   
            					Console.WriteLine(String.Format("Threshold:  {0}", info.Threshold))   
            					Console.WriteLine(String.Format("Region:     {0}", info.Region))   
            					Console.WriteLine()   
            				Next   
            			End If   
            		End Using   
            	End Sub   
            End Class
            </code>
            <code lang="C#">
            using System;
            using System.IO;
            using System.Windows.Media.Imaging;
            
            using Vintasoft.WpfBarcode;
            
            
            /// &lt;summary&gt;
            /// Test that shows how to read barcodes from image using several iterations with different thresholds.
            /// &lt;/summary&gt;
            class ThresholdModeExample
            {
            
                /// &lt;summary&gt;
                /// Run the test.
                /// &lt;/summary&gt;
                public static void Test()
                {
                    using (Stream imageFileStream = new FileStream("test1.jpg", FileMode.Open, FileAccess.Read))
                    {
                        BitmapImage barcodeImage = new BitmapImage();
                        barcodeImage.BeginInit();
                        barcodeImage.StreamSource = imageFileStream;
                        barcodeImage.EndInit();
            
                        ReadBarcodesUsingIterationsThresholdMode(barcodeImage);
                    }
                }
            
                /// &lt;summary&gt;
                /// Read barcodes from image using several iterations with different thresholds.
                /// &lt;/summary&gt;
                static void ReadBarcodesUsingIterationsThresholdMode(BitmapSource barcodeImage)
                {
                    // create barcode reader
                    using (BarcodeReader reader = new BarcodeReader())
                    {
                        // specify that reader must search for Code39, Code128 and DataMatrix barcodes only
                        reader.Settings.ScanBarcodeTypes =
                            BarcodeType.Code39 |
                            BarcodeType.Code128 |
                            BarcodeType.DataMatrix;
            
                        // specify that reader must search for horizontal and vertical barcodes only
                        reader.Settings.ScanDirection = ScanDirection.LeftToRight | ScanDirection.RightToLeft;
            
                        // specify that reader must search for 3 barcodes
                        reader.Settings.ExpectedBarcodes = 3;
            
                        // specify that reader must use 9 iterations for barcode reading,
                        // minimum threshold is 200, maximum threashold 600, threshold step is 50
                        reader.Settings.ThresholdMode = ThresholdMode.Iterations;
                        reader.Settings.ThresholdIterations = 9;
                        reader.Settings.ThresholdMin = 200;
                        reader.Settings.ThresholdMax = 600;
            
                        // read barcodes from image
                        IBarcodeInfo[] infos = reader.ReadBarcodes(barcodeImage);
            
                        // show barcode recognition results
            
                        Console.WriteLine(string.Format("Recognition time {0} ms.",
                            reader.RecognizeTime.TotalMilliseconds));
            
                        if (infos.Length == 0)
                        {
                            Console.WriteLine("No barcodes found.");
                        }
                        else
                        {
                            Console.WriteLine(string.Format("{0} barcodes found:", infos.Length));
                            Console.WriteLine();
                            for (int i = 0; i &lt; infos.Length; i++)
                            {
                                IBarcodeInfo info = infos[i];
                                Console.WriteLine(string.Format("[{0}:{1}]", i, info.BarcodeType));
                                Console.WriteLine(string.Format("Value:      {0}", info.Value));
                                Console.WriteLine(string.Format("Confidence: {0}%", Math.Round(info.Confidence)));
                                Console.WriteLine(string.Format("Threshold:  {0}", info.Threshold));
                                Console.WriteLine(string.Format("Region:     {0}", info.Region));
                                Console.WriteLine();
                            }
                        }
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="P:Vintasoft.WpfBarcode.ReaderSettings.Threshold">
            <summary>
            Gets or sets the threshold value for algorithm of color conversion.
            </summary>
            <value>
            Minimal value is <b>0</b>, maximal value is <b>765</b>.
            Default value is 500.
            </value>
            <example>
            Please see example <see cref="P:Vintasoft.WpfBarcode.ReaderSettings.ThresholdMode">here</see>.
            </example>
        </member>
        <member name="P:Vintasoft.WpfBarcode.ReaderSettings.ThresholdMin">
            <summary>
            Gets or sets the minimal threshold value of algorithm color conversion 
            in the barcode reading iteration process (see <see cref="P:Vintasoft.WpfBarcode.ReaderSettings.ThresholdMode" />.Iterations).
            </summary>
            <value>
            Minimal value is <b>0</b>, maximal value is <b>765</b>.
            Default value is 200.
            </value>
            <example>
            Please see example <see cref="P:Vintasoft.WpfBarcode.ReaderSettings.ThresholdIterations">here</see>.
            </example>
        </member>
        <member name="P:Vintasoft.WpfBarcode.ReaderSettings.ThresholdMax">
            <summary>
            Gets or sets the maximal threshold value of algorithm color conversion 
            in the barcode reading iteration process (see <see cref="P:Vintasoft.WpfBarcode.ReaderSettings.ThresholdMode" />.Iterations).
            </summary>
            <value>
            Minimal value is <b>0</b>, maximal value is <b>765</b>.
            Default value is 600.
            </value>
            <example>
            Please see example <see cref="P:Vintasoft.WpfBarcode.ReaderSettings.ThresholdIterations">here</see>.
            </example>
        </member>
        <member name="P:Vintasoft.WpfBarcode.ReaderSettings.ThresholdIterations">
            <summary>
            Gets or sets the number of steps in barcode reading iteration process.
            </summary>
            <value>
            Possible value:<br />
            <ul>
            <li><b>1</b> - iterative process is disabled,</li>
            <li><b>2..30</b> - iterative process is enabled.</li>
            </ul>
            Minimal value is <b>1</b>, maximal value is <b>32</b>. Default value is <b>1</b>.
            </value>
            <remarks>
            You should set ThresholdMode = <see cref="P:Vintasoft.WpfBarcode.ReaderSettings.ThresholdMode" />.Iterations for using iteration process.<br />
            You should use the <see cref="P:Vintasoft.WpfBarcode.ReaderSettings.ExpectedBarcodes" /> property if you use iteration
            process and you know how many barcodes present in the image - this will
            increase speed of barcode reading process because iteration will be
            interrupted when number of barcodes is found. Confidence of barcodes can
            be set with the <see cref="P:Vintasoft.WpfBarcode.ReaderSettings.MinConfidence" /> property.<br />
            <br />
            Please read more info about iteration process
            <see cref="P:Vintasoft.WpfBarcode.ReaderSettings.ThresholdMode">here</see>.
            </remarks>
            <example>
            Please see example <see cref="P:Vintasoft.WpfBarcode.ReaderSettings.ThresholdMode">here</see>.
            </example>
        </member>
        <member name="P:Vintasoft.WpfBarcode.ReaderSettings.OptionalCheckSum">
            <summary>
            Gets or sets a value indicating whether the barcode reader calculates an optional checksum.
            </summary>
            <value>
            <b>true</b> - optional checksum is calculated,<br />
            <b>false</b> - optional checksum is not calculated.<br />
            Default value is <b>false</b>.
            </value>
            <remarks>The following barcode symbologies have optional checksum: Code 39, Industrial Standard 2 of 5, Interleaved 2 of 5, Matrix 2 of 5.</remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.ReaderSettings.RemovePostnetPlanetCheckSum">
            <summary>
            Gets or sets a value indicating whether the barcode reader 
            removes the checksum digit from the barcode value of Planet or Postnet barcode.
            </summary>
            <value>
            <b>true</b> - remove the checksum digit from the barcode value,<br />
            <b>false</b> - do not remove the checksum digit from the barcode value.<br />
            Default value is <b>true</b>.
            </value>
        </member>
        <member name="P:Vintasoft.WpfBarcode.ReaderSettings.AustralianPostCustomerInfoFormat">
            <summary>
            Gets or sets the format of customer information field of Australia Post 4-state barcode.
            </summary>
            <value>
            Default value is <see cref="P:Vintasoft.WpfBarcode.ReaderSettings.AustralianPostCustomerInfoFormat" />.None.
            </value>
        </member>
        <member name="P:Vintasoft.WpfBarcode.ReaderSettings.Erode">
            <summary>
            Gets or sets a value indicating whether the barcode reader processes the image with
            barcodes using  the "erode" algorithm before barcode search.
            </summary>
            <value>
            Default value is <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.WpfBarcode.ReaderSettings.UnknownLinearMinScanlines">
            <summary>
            Gets or sets the minimum number of scanlines in unknown linear barcode.
            </summary>
            <value>
            Minimal value is <b>4</b>.
            Default value is 8.
            </value>
        </member>
        <member name="P:Vintasoft.WpfBarcode.ReaderSettings.UnknownLinearMaxBarWide">
            <summary>
            Gets or sets the maximum width of bar in unknown linear barcode.
            </summary>
            <value>
            Minimal value is <b>1</b>, maximal value is <b>8</b>.
            Default value is 4.
            </value>
        </member>
        <member name="P:Vintasoft.WpfBarcode.ReaderSettings.UnknownLinearMinBars">
            <summary>
            Gets or sets the minimum number of black bars in unknown linear barcode.
            </summary>
            <value>
            Minimal value is <b>3</b>, maximal value is <see cref="P:Vintasoft.WpfBarcode.ReaderSettings.UnknownLinearMaxBars" />.
            Default value is 16.
            </value>
        </member>
        <member name="P:Vintasoft.WpfBarcode.ReaderSettings.UnknownLinearMaxBars">
            <summary>
            Gets or sets the maximum number of black bars in unknown linear barcode.
            </summary>
            <value>
            Minimal value is <see cref="P:Vintasoft.WpfBarcode.ReaderSettings.UnknownLinearMinBars" />.
            Default value is 128.
            </value>
        </member>
        <member name="P:Vintasoft.WpfBarcode.ReaderSettings.RemovePeas">
            <summary>
            Gets or sets a value indicating whether the barcode reader removes "peas" from the image with
            barcodes before barcode search.
            </summary>
            <value>
            <b>true</b> - enables remove of "peas" from image,<br />
            <b>false</b> - disables remove of "peas" from image.<br />
            Default value is <b>true</b>.
            </value>
            <remarks>
            "Peas" - specific noise in the image.
            <br />
            You should not enable this feature if you have good barcodes because this
            feature can decrease barcode reading speed.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.ReaderSettings.InvertImageColors">
            <summary>
            Gets or sets a value indicating whether the barcode reader inverts the image with
            barcodes before barcode search.
            </summary>
            <value>
            <b>false</b> - pixel with index 0 in color table will be interpreted as black pixel,
            pixel with index 1 in color table will be interpreted as white pixel,<br />
            <b>true</b> - pixel with index 0 in color table will be interpreted as white pixel,
            pixel with index 1 in color table will be interpreted as black pixel.<br />
            Default value is <b>false</b>.
            </value>
            <remarks>.NET Framework loads color table from some TIFF files uncorrectly
            and as a result images will be inverted. This property must be set to
            <b>true</b> for solving this problem and correct barcode reading.</remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.ReaderSettings.MaximalThreadsCount">
            <summary>
            Gets or sets the maximal number of threads the barcode reader can create for barcode search.
            </summary>
            <value>
            Minimal value is <b>1</b>, maximal value is <b>32</b>.
            Default value is a number of processors.
            </value>
        </member>
        <member name="P:Vintasoft.WpfBarcode.ReaderSettings.UseCode39ExtendedDecodeTable">
            <summary>
            Gets or sets a value indicating whether the barcode reader converts Code 39 barcode
            to Code39 Extended barcode if necessary.
            </summary>
            <value>
            Default value is <b>true</b>.
            </value>
        </member>
        <member name="P:Vintasoft.WpfBarcode.ReaderSettings.Code128UseFnc4ShiftToExtendedAsciiTable">
            <summary>
            Gets or sets a value indicating whether the barcode reader interprets FNC4 symbols in
            Code 128 barcode and shifts barcode characters to extended ASCII table (128..255 byte values).
            </summary>
            <value>
            <b>false</b> - if barcode contains FNC4 symbols: FNC4 symbol is not interpreted, barcode
            contains only ASCII symbols (0..127 byte values);<br />
            <b>true</b> - if barcode contains FNC4 symbols: FNC4 symbols interpreted and excluded from
            barcode value, barcode value contains extended ASCII symbols (0..255 byte values).<br />
            Default value is <b>true</b>.
            </value>
            <remarks>
            This function based on FNC4 symbol, see Code128 specification.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.ReaderSettings.SearchDistortedDataMatrixBarcodes">
            <summary>
            Gets or sets a value indicating whether the barcode reader searches "distorted" DataMatrix barcodes.
            </summary>
            <value>
            <b>false</b> - search of "distorted" DataMatrix barcodes is disabled;
            <b>true</b> - search of "distorted" DataMatrix barcodes is enabled.
            Default value is <b>true</b>.
            </value>
            <remarks>
            "Distorted" barcode is not rectangular barcode (trapezoid, etc) which in most cases are
            received from web- or photo camera. 
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.ReaderSettings.SearchDistortedQRBarcodes">
            <summary>
            Gets or sets a value indicating whether the barcode reader searches "distorted" QR barcodes.
            </summary>
            <value>
            <b>false</b> - search of "distorted" QR barcodes is disabled;
            <b>true</b> - search of "distorted" QR barcodes is enabled.
            Default value is <b>true</b>.
            </value>
            <remarks>
            "Distorted" barcode is not rectangular barcode (trapezoid, etc) which in most cases are
            received from web- or photo camera. 
            </remarks>
            <value>Default value is <b>True</b>.</value>
        </member>
        <member name="P:Vintasoft.WpfBarcode.ReaderSettings.DataMatrixMinCellSize">
            <summary>
            Gets or sets the minimal cell size, in pixels, for Data Matrix barcode.
            </summary>
            <value>
            Minimal value is 2, maimal value is 50. Default value is 2.
            </value>
            <remarks>
            Correct (appropriate) value of this property increases barcode reading speed.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.ReaderSettings.DataMatrixLPatternMaxErasures">
            <summary>
            Gets or sets the number of maximum erasures on each side of "L" pattern
            of Data Matrix barcode.
            </summary>
            <value>
            0 - "L" pattern cannot have erasures;<br />
            1 - "L" pattern can have 1 erasure on each side;<br />
            2 - "L" pattern can have 2 erasures on each side;<br />
            N - "L" pattern can have N erasures on each side;<br />
            Default value is 2.
            </value>
            <remarks>
            Increasing value of this property will decrease the recognition speed
            but will allow to read damaged barcodes.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.ReaderSettings.MSIChecksum">
            <summary>
            Gets or sets a checksum type of MSI barcode.
            </summary>
            <value>
            Default value is <b><see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.MSIChecksumType" />.Mod10</b>.
            </value>
        </member>
        <member name="P:Vintasoft.WpfBarcode.ReaderSettings.EnableTelepenNumericMode">
            <summary>
            Gets or sets a value indicating whether the barcode reader enables numeric mode in Telepen barcode.
            </summary>
            <value>
            Default value is <b>true</b>.
            </value>
            <remarks>Numeric mode allows packing two digits into one character.</remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.ReaderSettings.AutomaticRecognition">
            <summary>
            Gets or sets a value indicating whether the barcode reader enables the special automatic
            recognition mode.
            </summary>
            <value>
            <b>false</b> - the special automatic recognition mode is disabled;
            <b>true</b> - the special automatic recognition mode is enabled.
            Default value is <b>false</b>.
            </value>
            <remarks>
            Special automatic recognition mode is combination of some recognition
            algorithms and gives the best quality of recognition and it
            should be used for reading of barcodes with bad quality only.<br />
            <br />
            Correct number of expected barcodes is very important because recognition
            will be stopped when expected number of barcodes is found.<br />
            <br />
            <b>Important:</b> This mode does not have stable speed like the manual mode.
            Speed of recognition in this mode will be from T to 12*T, where T is
            speed of recognition in the manual mode with automatic threshold.
            12*T is the bad case when the expected number of barcodes is not reached.<br />
            <br />
            <see cref="P:Vintasoft.WpfBarcode.ReaderSettings.ThresholdIterations" />, <see cref="P:Vintasoft.WpfBarcode.ReaderSettings.ThresholdMode" />
            and <see cref="P:Vintasoft.WpfBarcode.ReaderSettings.Threshold" /> properties are ignored if value of
            this property is set to <b>true</b>.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.ReaderSettings.BarcodeCharacteristics">
            <summary>
            Gets or sets a barcode characteristics.
            </summary>
            <value>
            Default value is <b><see cref="P:Vintasoft.WpfBarcode.ReaderSettings.BarcodeCharacteristics" />.Undefined</b>.
            </value>
        </member>
        <member name="P:Vintasoft.WpfBarcode.ReaderSettings.VerifyBarcodeMethod">
            <summary>
            Gets or sets method that verifies the information about barcode found by barcode reader.
            </summary>
            <remarks>
            Method that verifies the information about barcode found by barcode reader executes every
            time when the "barcode" is found by the barcode reader.<br />
            <br />
            Application can analyze information about found barcode and change
            <see cref="P:Vintasoft.WpfBarcode.IBarcodeInfo.Confidence" /> if this is necessary.<br />
            <br />
            Method that verifies the information about barcode found can be used
            in automatic or iteration recognition mode and increase quality of recognition.
            </remarks>
            <example>
            This example generates Code 39 barcode with user-defined 
            base 1000 cheksum, and read it using check barcode checksum 
            in verify barcode method. 
            <code lang="VB.NET">   
            Imports System.Windows.Media.Imaging   
               
            Imports Vintasoft.WpfBarcode   
               
            ''' &lt;summary&gt;   
            ''' Test that shows how to use specify delegate to a method for barcode verification and   
            ''' verify found barcode during the barcode recognition process.   
            ''' &lt;/summary&gt;   
            Class UserDefinedChecksumExample   
            	''' &lt;summary&gt;   
            	''' Run the test.   
            	''' &lt;/summary&gt;   
            	Public Shared Sub Run()   
            		Dim value As String = "1234567890AbC"   
               
            		' create the barcode writer   
            		Dim writer As New BarcodeWriter()   
            		' specify that writer must generate Code39 barcode   
            		writer.Settings.Barcode = BarcodeType.Code39   
               
            		' create the barcode reader   
            		Using reader As New BarcodeReader()   
            			' specify that reader must search for Code39 barcodes only   
            			reader.Settings.ScanBarcodeTypes = BarcodeType.Code39   
            			' specify that reader must search for barcode with 100% confidence only   
            			reader.Settings.MinConfidence = 100   
            			' specify that reader must use barcodes in automatic mode   
            			reader.Settings.AutomaticRecognition = True   
            			' specify that reader must search for 1 barcode   
            			reader.Settings.ExpectedBarcodes = 1   
               
            			' set the barcode value without checksum   
            			writer.Settings.Value = value   
            			' create image with barcode without checksum   
            			Dim barcodeNoChecksumImage As BitmapSource = writer.GetBarcodeAsBitmapSource()   
               
            			' set the barcode value with checksum   
            			writer.Settings.Value = value &amp; GenerateChecksum(value)   
            			' create image with barcode with checksum   
            			Dim barcodeWithMyChecksumImage As BitmapSource = writer.GetBarcodeAsBitmapSource()   
               
            			' specify delegate to a method for barcode verification   
            			reader.Settings.VerifyBarcodeMethod = AddressOf VerifyBarcodeMethod   
               
            			' read barcodes from barcode image without checksum,   
            			' barcode reader will not find barcode   
            			Dim infos As IBarcodeInfo() = reader.ReadBarcodes(barcodeNoChecksumImage)   
            			Console.WriteLine("Scan (NoChecksum):")   
            			For i As Integer = 0 To infos.Length - 1   
            				Console.WriteLine(infos(i).Value)   
            			Next   
               
            			' read barcodes from barcode image with checksum,   
            			' barcode reader will find 1 barcode   
            			infos = reader.ReadBarcodes(barcodeWithMyChecksumImage)   
            			Console.WriteLine("Scan (MyChecksum):")   
            			For i As Integer = 0 To infos.Length - 1   
            				Console.WriteLine(infos(i).Value)   
            			Next   
            		End Using   
            	End Sub   
               
            	''' &lt;summary&gt;   
            	''' Generate checksum modulo 1000.   
            	''' &lt;/summary&gt;   
            	Private Shared Function GenerateChecksum(value As String) As String   
            		Dim checkSum As Integer = 0   
            		For i As Integer = 0 To value.Length - 1   
            			checkSum += CByte(AscW(value(i))) * (i + 1)   
            			checkSum = checkSum Mod 1000   
            		Next   
            		' result - [000..999]   
            		Return checkSum.ToString().PadLeft(3, "0"C)   
            	End Function   
               
            	''' &lt;summary&gt;   
            	''' Method that verifies the barcode during the barcode recognition process.   
            	''' &lt;/summary&gt;   
            	Private Shared Sub VerifyBarcodeMethod(reader As BarcodeReader, barcodeInfo As IBarcodeInfo)   
            		If TestChecksum(barcodeInfo.Value) Then   
            			barcodeInfo.Confidence = 100   
            		Else   
            			barcodeInfo.Confidence = 0   
            		End If   
            	End Sub   
               
            	''' &lt;summary&gt;   
            	''' Test checksum in barcode value.   
            	''' &lt;/summary&gt;   
            	Private Shared Function TestChecksum(barcodeValue As String) As Boolean   
            		Dim value As String = barcodeValue.Substring(0, barcodeValue.Length - 3)   
            		Dim readChecksum As String = barcodeValue.Substring(barcodeValue.Length - 3)   
            		Return readChecksum = GenerateChecksum(value)   
            	End Function   
               
            End Class
            </code>
            <code lang="C#">
            using System;
            using System.Windows.Media.Imaging;
            
            using Vintasoft.WpfBarcode;
            
            /// &lt;summary&gt;
            /// Test that shows how to use specify delegate to a method for barcode verification and
            /// verify found barcode during the barcode recognition process.
            /// &lt;/summary&gt;
            class UserDefinedChecksumExample
            {
                /// &lt;summary&gt;
                /// Run the test.
                /// &lt;/summary&gt;
                public static void Run()
                {
                    string value = "1234567890AbC";
            
                    // create the barcode writer
                    BarcodeWriter writer = new BarcodeWriter();
                    // specify that writer must generate Code39 barcode
                    writer.Settings.Barcode = BarcodeType.Code39;
            
                    // create the barcode reader
                    using (BarcodeReader reader = new BarcodeReader())
                    {
                        // specify that reader must search for Code39 barcodes only
                        reader.Settings.ScanBarcodeTypes = BarcodeType.Code39;
                        // specify that reader must search for barcode with 100% confidence only
                        reader.Settings.MinConfidence = 100;
                        // specify that reader must use barcodes in automatic mode
                        reader.Settings.AutomaticRecognition = true;
                        // specify that reader must search for 1 barcode
                        reader.Settings.ExpectedBarcodes = 1;
            
                        // set the barcode value without checksum
                        writer.Settings.Value = value;
                        // create image with barcode without checksum
                        BitmapSource barcodeNoChecksumImage = writer.GetBarcodeAsBitmapSource();
            
                        // set the barcode value with checksum
                        writer.Settings.Value = value + GenerateChecksum(value);
                        // create image with barcode with checksum
                        BitmapSource barcodeWithMyChecksumImage = writer.GetBarcodeAsBitmapSource();
            
                        // specify delegate to a method for barcode verification
                        reader.Settings.VerifyBarcodeMethod = VerifyBarcodeMethod;
            
                        // read barcodes from barcode image without checksum,
                        // barcode reader will not find barcode
                        IBarcodeInfo[] infos = reader.ReadBarcodes(barcodeNoChecksumImage);
                        Console.WriteLine("Scan (NoChecksum):");
                        for (int i = 0; i &lt; infos.Length; i++)
                            Console.WriteLine(infos[i].Value);
            
                        // read barcodes from barcode image with checksum,
                        // barcode reader will find 1 barcode
                        infos = reader.ReadBarcodes(barcodeWithMyChecksumImage);
                        Console.WriteLine("Scan (MyChecksum):");
                        for (int i = 0; i &lt; infos.Length; i++)
                            Console.WriteLine(infos[i].Value);
                    }
                }
            
                /// &lt;summary&gt;
                /// Generate checksum modulo 1000.
                /// &lt;/summary&gt;
                static string GenerateChecksum(string value)
                {
                    int checkSum = 0;
                    for (int i = 0; i &lt; value.Length; i++)
                    {
                        checkSum += ((byte)value[i]) * (i + 1);
                        checkSum %= 1000;
                    }
                    // result - [000..999]
                    return checkSum.ToString().PadLeft(3, '0');
                }
            
                /// &lt;summary&gt;
                /// Method that verifies the barcode during the barcode recognition process.
                /// &lt;/summary&gt;
                static void VerifyBarcodeMethod(BarcodeReader reader, IBarcodeInfo barcodeInfo)
                {
                    if (TestChecksum(barcodeInfo.Value))
                        barcodeInfo.Confidence = 100;
                    else
                        barcodeInfo.Confidence = 0;
                }
            
                /// &lt;summary&gt;
                /// Test checksum in barcode value.
                /// &lt;/summary&gt;
                static bool TestChecksum(string barcodeValue)
                {
                    string value = barcodeValue.Substring(0, barcodeValue.Length - 3);
                    string readChecksum = barcodeValue.Substring(barcodeValue.Length - 3);
                    return readChecksum == GenerateChecksum(value);
                }
            
            }
            </code>
            </example>
            <example>
            This example shows how to remove barcodes with 
            <see cref="P:Vintasoft.WpfBarcode.IBarcodeInfo.ReadingQuality">reading quality</see>&lt;0.2.
            <code lang="VB.NET">   
            ''' &lt;summary&gt;   
            ''' Method that verifies the barcode during the barcode recognition process.   
            ''' &lt;/summary&gt;   
            Private Shared Sub VerifyBarcodeMethod(reader As BarcodeReader, barcodeInfo As IBarcodeInfo)   
            	If barcodeInfo.ReadingQuality &lt; 0.2 Then   
            		barcodeInfo.Confidence = 0   
            	End If   
            End Sub   
               
            ' ...   
            ' reader.Settings.VerifyBarcodeMethod = VerifyBarcodeMethod;   
            ' ...
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Method that verifies the barcode during the barcode recognition process.
            /// &lt;/summary&gt;
            static void VerifyBarcodeMethod(BarcodeReader reader, IBarcodeInfo barcodeInfo)
            {
                if (barcodeInfo.ReadingQuality &lt; 0.2)
                    barcodeInfo.Confidence = 0;
            }
            
            // ...
            // reader.Settings.VerifyBarcodeMethod = VerifyBarcodeMethod;
            // ...
            </code>
            </example>
        </member>
        <member name="P:Vintasoft.WpfBarcode.ReaderSettings.TryTransmitGS1Value">
            <summary>
            Gets a value indicating whether the barcode reader translates barcode value in GS1 format
            (with symbology prefix).
            </summary>
            <value>
            Default value is <b>false</b>.
            </value>
            <remarks>Aviable for barcodes: Aztec, DataMatrix, Code 128, RSS, QR.
            This property is obsolete. Use <see cref="P:Vintasoft.WpfBarcode.ReaderSettings.ScanBarcodeSubsets" /> property instead.</remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.ReaderSettings.CollectTestInformation">
            <summary>
            Gets or sets a value indicating whether the barcode reader collects information for quality test.
            </summary>
            <value>
            Default value is <b>false.</b>
            </value>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeImageChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Vintasoft.WpfBarcode.BarcodeWriterControl.BarcodeImageChanged" /> action.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeImageChangedEventArgs.Image">
            <summary>
            Gets the barcode image.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeWriterControl">
            <summary>
            Represents a viewer control for displaying an image with barcode.
            </summary>
            <summary>
            BarcodeWriterControl
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeWriterControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.BarcodeWriterControl" /> class. 
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeWriterControl.GetBarcodeAsBitmapSource">
            <summary>
            Returns a barcode image as <see cref="T:System.Windows.Media.Imaging.BitmapSource" />.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeWriterControl.BeginInit">
            <summary>
            Signals the object that initialization is starting.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeWriterControl.EndInit">
            <summary>
            Signals the object that initialization is complete.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeWriterControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeWriterControl.BarcodeSymbologySubset">
            <summary>
            Gets or sets the barcode symbology subset to encode.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeWriterControl.Settings">
            <summary>
            Gets the barcode writer settings.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeWriterControl.EncodedValue">
            <summary>
            Gets an encoded value. 
            </summary>
            <remarks>
            This value can not coincide with <see cref="P:Vintasoft.WpfBarcode.WriterSettings.Value" />
            because reader can add checksum or another system info to the initial
            value of barcode.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeWriterControl.BarcodeImage">
            <summary>
            Gets the <see cref="T:System.Windows.Controls.Image">barcode image</see>.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeWriterControl.ScrollViewer">
            <summary>
            Gets the <see cref="P:Vintasoft.WpfBarcode.BarcodeWriterControl.ScrollViewer" /> of this control.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeWriterControl.CatchAndShowWriterSettingsException">
            <summary>
            Gets or sets a flag specifying whether the
            <see cref="T:Vintasoft.WpfBarcode.WriterSettingsException" /> is catches and showing 
            on this <see cref="T:Vintasoft.WpfBarcode.BarcodeWriterControl" />.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeWriterControl.WrongWriterSettings">
            <summary>
            Indicates whether <see cref="P:Vintasoft.WpfBarcode.BarcodeWriterControl.Settings">BarcodeWriterSettings</see> is wrong.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeWriterControl.WrongWriterSettingsMessageFormat">
            <summary>
            Gets or sets the Wrong writer settings message format.
            </summary>
        </member>
        <member name="E:Vintasoft.WpfBarcode.BarcodeWriterControl.BarcodeImageChanged">
            <summary>
            Occurs when barcode image is changed. 
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.GS1.GS1AICharacterSetType">
            <summary>
            Defines available types of character sets.
            </summary>
            <remarks>
            See GS1 General Specification: 7.11. The GS1 Subset of International Standard ISO/IEC 646.
            </remarks>
        </member>
        <member name="F:Vintasoft.WpfBarcode.GS1.GS1AICharacterSetType.CharacterSet82">
            <summary>
            GS1 AI Encodable Character Set 82.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.GS1.GS1AICharacterSetType.CharacterSet39">
            <summary>
            GS1 AI Encodable Character Set 39.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.GS1.GS1Codec">
            <summary>
            Class that allows to encode/decode the GS1 information from barcode.
            </summary>
            <example>This example shows how to generate Code128 barcode with GS1 information (GS1-128) and read
            generated barcode.
            <code lang="VB.NET">   
            Imports System.Text   
            Imports System.Windows.Media.Imaging   
               
            Imports Vintasoft.WpfBarcode   
            Imports Vintasoft.WpfBarcode.GS1   
            Imports Vintasoft.WpfBarcode.SymbologySubsets   
            Imports Vintasoft.WpfBarcode.BarcodeInfo   
               
               
            ''' &lt;summary&gt;   
            ''' Test that shows how to encode the barcode data in GS1 format using the GS1Codec class,   
            ''' create image with GS1-128 barcode,   
            ''' read GS1-128 barcode from image and parse data stored in GS1 format.   
            ''' &lt;/summary&gt;   
            Class GS1CodecExample   
               
            	''' &lt;summary&gt;   
            	''' Run the test.   
            	''' &lt;/summary&gt;   
            	Public Shared Sub TestGS1Codec()   
            		Dim valueVisible As Boolean = True   
               
            		' form the GS1 Application identifiers   
               
            		Dim aiValues As GS1ApplicationIdentifierValue() = New GS1ApplicationIdentifierValue(3) {}   
            		Dim ai As GS1ApplicationIdentifier   
            		' 01 - Global Trade Item Number   
            		ai = GS1ApplicationIdentifiers.FindApplicationIdentifier("01")   
            		aiValues(0) = New GS1ApplicationIdentifierValue(ai, "0123456789123C")   
            		' 310 - Net weight, kilograms   
            		ai = GS1ApplicationIdentifiers.FindApplicationIdentifier("310")   
            		aiValues(1) = New GS1ApplicationIdentifierValue(ai, "0012.55")   
            		' 30 - Count of Items   
            		ai = GS1ApplicationIdentifiers.FindApplicationIdentifier("30")   
            		aiValues(2) = New GS1ApplicationIdentifierValue(ai, "10")   
            		' 90 - Company Internal Information   
            		ai = GS1ApplicationIdentifiers.FindApplicationIdentifier("90")   
            		aiValues(3) = New GS1ApplicationIdentifierValue(ai, "ABCabc12345")   
               
            		' get GS1 printable value   
            		Dim printableValue As New StringBuilder()   
            		For Each value As GS1ApplicationIdentifierValue In aiValues   
            			printableValue.Append(value)   
            		Next   
               
               
            		' create the barcode writer   
            		Dim writer As New BarcodeWriter()   
               
            		' specify that writer must create output image as 24-bpp image   
            		writer.Settings.PixelFormat = BarcodeImagePixelFormat.Bgr24   
               
            		' specify that writer must generate Code128 barcode   
            		writer.Settings.Barcode = BarcodeType.Code128   
               
            		' encode GS1 value in GS1-128 symbology   
            		writer.Settings.Value = GS1Codec.GS1_128.Encode(aiValues, writer.Settings)   
            		' set printable value   
            		If valueVisible Then   
            			writer.Settings.ValueVisible = True   
            			writer.Settings.PrintableValue = printableValue.ToString()   
            		Else   
            			writer.Settings.ValueVisible = False   
            		End If   
               
            		' create image with barcode   
            		Dim barcodeImage As BitmapSource = writer.GetBarcodeAsBitmapSource()   
               
            		' delete aiValues array   
            		aiValues = Nothing   
               
            		' read barcode with GS1 value   
               
            		' create barcode reader   
            		Using reader As New BarcodeReader()   
            			' specify that reader must search for GS1-128 barcodes only   
               
            			reader.Settings.ScanBarcodeTypes = BarcodeType.None   
            			reader.Settings.ScanBarcodeSubsets.Add(BarcodeSymbologySubsets.GS1_128)   
               
            			' read barcode from image   
            			Dim infos As IBarcodeInfo() = reader.ReadBarcodes(barcodeImage)   
               
            			' gets a GS1 Application identifiers from barcode value               
            			aiValues = DirectCast(infos(0), GS1BarcodeInfo).ApplicationIdentifierValues   
               
            			printableValue = New StringBuilder()   
               
            			' print Application identifiers values   
            			For i As Integer = 0 To aiValues.Length - 1   
            				Dim aiValue As GS1ApplicationIdentifierValue = aiValues(i)   
            				ai = aiValue.ApplicationIdentifier   
            				Console.WriteLine(String.Format("[{0}] {1}", i + 1, aiValue))   
            				Console.WriteLine(String.Format("Application identifier   : {0}", ai.ApplicationIdentifier))   
            				Console.WriteLine(String.Format("Value                    : {0}", aiValue.Value))   
            				Console.WriteLine(String.Format("Data title               : {0}", ai.DataTitle))   
            				Console.WriteLine(String.Format("Data content             : {0}", ai.DataContent))   
            				Console.WriteLine(String.Format("Format                   : {0}", ai.Format))   
            				Console.WriteLine(String.Format("Is contains decimal point: {0}", ai.IsContainsDecimalPoint))   
            				Console.WriteLine(String.Format("Is variable length       : {0}", ai.IsVariableLength))   
            				Console.WriteLine()   
            				printableValue.Append(aiValue.ToString())   
            			Next   
               
            			' print GS1 printable value   
            			Console.WriteLine("Printable GS1 value: " &amp; printableValue.ToString())   
            		End Using   
            	End Sub   
            End Class
            </code>
            <code lang="C#">
            using System;
            using System.Text;
            using System.Windows.Media.Imaging;
            
            using Vintasoft.WpfBarcode;
            using Vintasoft.WpfBarcode.GS1;
            using Vintasoft.WpfBarcode.SymbologySubsets;
            using Vintasoft.WpfBarcode.BarcodeInfo;
            
            
            /// &lt;summary&gt;
            /// Test that shows how to encode the barcode data in GS1 format using the GS1Codec class,
            /// create image with GS1-128 barcode,
            /// read GS1-128 barcode from image and parse data stored in GS1 format.
            /// &lt;/summary&gt;
            class GS1CodecExample
            {
            
                /// &lt;summary&gt;
                /// Run the test.
                /// &lt;/summary&gt;
                public static void TestGS1Codec()
                {
                    bool valueVisible = true;
            
                    // form the GS1 Application identifiers
            
                    GS1ApplicationIdentifierValue[] aiValues = new GS1ApplicationIdentifierValue[4];
                    GS1ApplicationIdentifier ai;
                    // 01 - Global Trade Item Number
                    ai = GS1ApplicationIdentifiers.FindApplicationIdentifier("01");
                    aiValues[0] = new GS1ApplicationIdentifierValue(ai, "0123456789123C");
                    // 310 - Net weight, kilograms
                    ai = GS1ApplicationIdentifiers.FindApplicationIdentifier("310");
                    aiValues[1] = new GS1ApplicationIdentifierValue(ai, "0012.55");
                    // 30 - Count of Items
                    ai = GS1ApplicationIdentifiers.FindApplicationIdentifier("30");
                    aiValues[2] = new GS1ApplicationIdentifierValue(ai, "10");
                    // 90 - Company Internal Information
                    ai = GS1ApplicationIdentifiers.FindApplicationIdentifier("90");
                    aiValues[3] = new GS1ApplicationIdentifierValue(ai, "ABCabc12345");
            
                    // get GS1 printable value
                    StringBuilder printableValue = new StringBuilder();
                    foreach (GS1ApplicationIdentifierValue value in aiValues)
                        printableValue.Append(value);
            
            
                    // create the barcode writer
                    BarcodeWriter writer = new BarcodeWriter();
            
                    // specify that writer must create output image as 24-bpp image
                    writer.Settings.PixelFormat = BarcodeImagePixelFormat.Bgr24;
            
                    // specify that writer must generate Code128 barcode
                    writer.Settings.Barcode = BarcodeType.Code128;
            
                    // encode GS1 value in GS1-128 symbology
                    writer.Settings.Value = GS1Codec.GS1_128.Encode(aiValues, writer.Settings);
                    // set printable value
                    if (valueVisible)
                    {
                        writer.Settings.ValueVisible = true;
                        writer.Settings.PrintableValue = printableValue.ToString();
                    }
                    else
                    {
                        writer.Settings.ValueVisible = false;
                    }
            
                    // create image with barcode
                    BitmapSource barcodeImage = writer.GetBarcodeAsBitmapSource();
            
                    // delete aiValues array
                    aiValues = null;
            
                    // read barcode with GS1 value
            
                    // create barcode reader
                    using (BarcodeReader reader = new BarcodeReader())
                    {
                        // specify that reader must search for GS1-128 barcodes only
            
                        reader.Settings.ScanBarcodeTypes = BarcodeType.None;
                        reader.Settings.ScanBarcodeSubsets.Add(BarcodeSymbologySubsets.GS1_128);
            
                        // read barcode from image
                        IBarcodeInfo[] infos = reader.ReadBarcodes(barcodeImage);
            
                        // gets a GS1 Application identifiers from barcode value            
                        aiValues = ((GS1BarcodeInfo)infos[0]).ApplicationIdentifierValues;
            
                        printableValue = new StringBuilder();
            
                        // print Application identifiers values
                        for (int i = 0; i &lt; aiValues.Length; i++)
                        {
                            GS1ApplicationIdentifierValue aiValue = aiValues[i];
                            ai = aiValue.ApplicationIdentifier;
                            Console.WriteLine(string.Format("[{0}] {1}", i + 1, aiValue));
                            Console.WriteLine(string.Format("Application identifier   : {0}", ai.ApplicationIdentifier));
                            Console.WriteLine(string.Format("Value                    : {0}", aiValue.Value));
                            Console.WriteLine(string.Format("Data title               : {0}", ai.DataTitle));
                            Console.WriteLine(string.Format("Data content             : {0}", ai.DataContent));
                            Console.WriteLine(string.Format("Format                   : {0}", ai.Format));
                            Console.WriteLine(string.Format("Is contains decimal point: {0}", ai.IsContainsDecimalPoint));
                            Console.WriteLine(string.Format("Is variable length       : {0}", ai.IsVariableLength));
                            Console.WriteLine();
                            printableValue.Append(aiValue.ToString());
                        }
            
                        // print GS1 printable value
                        Console.WriteLine("Printable GS1 value: " + printableValue.ToString());
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.WpfBarcode.GS1.GS1Codec.ParsePrintableValue(System.String)">
            <summary>
            Parses the specified GS1 printable value.
            </summary>
            <param name="gs1PrintableValue">The GS1 printable value.</param>
            <returns>Array of <see cref="T:Vintasoft.WpfBarcode.GS1.GS1ApplicationIdentifierValue" /> values.</returns>
            <exception cref="T:System.ArgumentException">Thrown if
            <paramref name="gs1PrintableValue" /> has invalid format.</exception>
            <seealso cref="M:Vintasoft.WpfBarcode.GS1.GS1Codec.GetPrintableValue(Vintasoft.WpfBarcode.GS1.GS1ApplicationIdentifierValue[])" />
        </member>
        <member name="M:Vintasoft.WpfBarcode.GS1.GS1Codec.GetPrintableValue(Vintasoft.WpfBarcode.GS1.GS1ApplicationIdentifierValue[])">
            <summary>
            Gets the printable value of GS1 value.
            </summary>
            <param name="aiValues">The GS1 value.</param>
            <returns>Printable GS1 value.</returns>
            <seealso cref="M:Vintasoft.WpfBarcode.GS1.GS1Codec.ParsePrintableValue(System.String)" />
        </member>
        <member name="M:Vintasoft.WpfBarcode.GS1.GS1Codec.Encode(Vintasoft.WpfBarcode.GS1.GS1ApplicationIdentifierValue[],Vintasoft.WpfBarcode.WriterSettings)">
            <summary>
            Encodes an array of <see cref="T:Vintasoft.WpfBarcode.GS1.GS1ApplicationIdentifierValue" /> values to barcode value.
            </summary>
            <param name="applicationIdentifierValues">Array of
            <see cref="T:Vintasoft.WpfBarcode.GS1.GS1ApplicationIdentifierValue" /> values.</param>
            <param name="writerSettings">A writer settings which must be used for
            encoding GS1 value.</param>
            <returns>Encoded value.</returns>
            <example>
            Please see example <see cref="T:Vintasoft.WpfBarcode.GS1.GS1Codec">here</see>.
            </example>
        </member>
        <member name="M:Vintasoft.WpfBarcode.GS1.GS1Codec.Decode(System.String)">
            <summary>
            Decodes GS1 barcode value into array of <see cref="T:Vintasoft.WpfBarcode.GS1.GS1ApplicationIdentifierValue" /> values.
            </summary>
            <param name="barcodeValue">GS1 barcode value.</param>
            <returns>Array of <see cref="T:Vintasoft.WpfBarcode.GS1.GS1ApplicationIdentifierValue" />.</returns>
            <example>
            Please see example <see cref="T:Vintasoft.WpfBarcode.GS1.GS1Codec">here</see>.
            </example>
        </member>
        <member name="M:Vintasoft.WpfBarcode.GS1.GS1Codec.GetSymbologyFormat(System.String)">
            <summary>
            Returns GS1 symbology format for specified GS1 barcode value.
            </summary>
            <param name="barcodeValue">GS1 barcode value.</param>
            <returns>GS1 symbology format.</returns>
        </member>
        <member name="P:Vintasoft.WpfBarcode.GS1.GS1Codec.SymbologyIdentifier">
            <summary>
            Gets a symbology identifier.
            </summary>
            <remarks>
            The symbology identifier is not encoded in the bar code, but is generated by the decoder after
            decoding and is transmitted as a preamble to the data message.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.GS1.GS1Codec.SymbologyFormat">
            <summary>
            Gets a symbology format.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.GS1.GS1Codec.GS1DataMatrix">
            <summary>
            Gets a GS1 DataMatrix codec (for encoding GS1 value in DataMatrix barcode). 
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.GS1.GS1Codec.GS1_128">
            <summary>
            Gets a GS1-128 codec (for encoding GS1 value in Code 128 barcode).
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.GS1.GS1Codec.GS1DataBar">
            <summary>
            Gets a GS1 DataBar codec (for encoding GS1 value in RSS barcodes).
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.GS1.GS1Codec.ITF14">
            <summary>
            Gets a ITF14 codec (for encoding GS1 value in ITF14 barcodes).
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.GS1.GS1Codec.GS1Aztec">
            <summary>
            Gets a GS1 Aztec codec (for encoding GS1 value in Aztec barcodes).
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.GS1.GS1Codec.GS1QR">
            <summary>
            Gets a GS1 QR codec (for encoding GS1 value in QR barcodes).
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.ISO15418.AscMh10Codec">
            <summary>
            Class that allows to encode/decode the data fields in ANSI/ASC MH10.8.2 format.
            </summary>  
        </member>
        <member name="F:Vintasoft.WpfBarcode.ISO15418.AscMh10Codec.GS">
            <summary>
            Field Separator.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.ISO15418.AscMh10Codec.Encode(Vintasoft.WpfBarcode.ISO15418.DataField[])">
            <summary>
            Encodes the specified Data Fields.
            </summary>
            <param name="values">The Data Fields.</param>
            <returns>Encoded Data Fields.</returns>
        </member>
        <member name="M:Vintasoft.WpfBarcode.ISO15418.AscMh10Codec.Decode(System.String)">
            <summary>
            Decodes the specified encoded Data Fields.
            </summary>
            <param name="encodedFields">The encoded Data Fields.</param>
            <returns>Decoded Data Fields.</returns>
        </member>
        <member name="T:Vintasoft.WpfBarcode.ISO15418.DataField">
            <summary>
            Represents ASC MH10.8.2 Data Field.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.ISO15418.DataField.#ctor(Vintasoft.WpfBarcode.ISO15418.DataIdentifier,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.ISO15418.DataField" /> class.
            </summary>
            <param name="dataIdentifier">The data identifier.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Vintasoft.WpfBarcode.ISO15418.DataField.FindDataField(Vintasoft.WpfBarcode.ISO15418.DataField[],Vintasoft.WpfBarcode.ISO15418.DataIdentifier)">
            <summary>
            Finds the data field with specified data identifier.
            </summary>
            <param name="fields">The fields.</param>
            <param name="identifier">The identifier.</param>
            <returns><see cref="T:Vintasoft.WpfBarcode.ISO15418.DataField" /> object instance if found; otherwise <b>null</b>.</returns>
        </member>
        <member name="M:Vintasoft.WpfBarcode.ISO15418.DataField.GetDataFieldValue(Vintasoft.WpfBarcode.ISO15418.DataField[],Vintasoft.WpfBarcode.ISO15418.DataIdentifier)">
            <summary>
            Gets the data field value with specified data identifier.
            </summary>
            <param name="fields">The fields.</param>
            <param name="identifier">The identifier.</param>
            <returns>String that cointains dfata filed value if found; otherwise <b>null</b>.</returns>
        </member>
        <member name="M:Vintasoft.WpfBarcode.ISO15418.DataField.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.ISO15418.DataField.DataIdentifier">
            <summary>
            Gets the data identifier.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.ISO15418.DataField.Value">
            <summary>
            Gets a value of the Data Identifier.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.ISO15418.DataIdentifier">
            <summary>
            Represents ASC MH10.8.2 Data Identifier.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.ISO15418.DataIdentifier.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.ISO15418.DataIdentifier" /> class.
            </summary>
            <param name="identifier">The identifier.</param>
        </member>
        <member name="M:Vintasoft.WpfBarcode.ISO15418.DataIdentifier.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.ISO15418.DataIdentifier.Category">
            <summary>
            Gets the category of Data Identifier.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.ISO15418.DataIdentifier.CategoryNumber">
            <summary>
            Gets the category number of Data Identifier.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.ISO15418.DataIdentifier.Identifier">
            <summary>
            Gets the identifier.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.ISO15434.EnvelopeAscMh10Format">
            <summary>
            Represents an envelope with "06" format identifier (ASC MH10 format).
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.ISO15434.EnvelopeFormat">
            <summary>
            Base class that represents an envelope format that described in ISO/IEC 15434.
            </summary>   
        </member>
        <member name="T:Vintasoft.WpfBarcode.ISO15434.EnvelopeElement">
            <summary>
            Represents an element of envelope that described in ISO/IEC 15434.
            </summary>   
        </member>
        <member name="M:Vintasoft.WpfBarcode.ISO15434.EnvelopeElement.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.ISO15434.EnvelopeElement" /> class.
            </summary>
            <param name="header">The header.</param>
            <param name="trailer">The trailer.</param>
        </member>
        <member name="P:Vintasoft.WpfBarcode.ISO15434.EnvelopeElement.Header">
            <summary>
            Gets the header of envelope element.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.ISO15434.EnvelopeElement.Trailer">
            <summary>
            Gets the header of envelope element.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.ISO15434.EnvelopeFormat.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.ISO15434.EnvelopeFormat" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.ISO15434.EnvelopeFormat.Parse(System.String)">
            <summary>
            Parses the specified data of this envelope format.
            </summary>
            <param name="data">The data.</param>
            <returns><b>true</b> if parsing is success; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.WpfBarcode.ISO15434.EnvelopeFormat.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>Copy of this object instance.</returns>
        </member>
        <member name="P:Vintasoft.WpfBarcode.ISO15434.EnvelopeFormat.Name">
            <summary>
            Gets the printable name of envelope format.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.ISO15434.EnvelopeFormat.FormatId">
            <summary>
            Gets the format identifier.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.ISO15434.EnvelopeFormat.HeaderVariableData">
            <summary>
            Gets the header variable data.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.ISO15434.EnvelopeAscMh10Format.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.ISO15434.EnvelopeAscMh10Format" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.ISO15434.EnvelopeAscMh10Format.#ctor(Vintasoft.WpfBarcode.ISO15418.DataField[])">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.ISO15434.EnvelopeAscMh10Format" /> class.
            </summary>
            <param name="dataFields">Data fields.</param>
        </member>
        <member name="M:Vintasoft.WpfBarcode.ISO15434.EnvelopeAscMh10Format.Parse(System.String)">
            <summary>
            Parses the specified data in ASC MH10 format.
            </summary>
            <param name="data">The data.</param>
            <returns>
              <b>true</b> if parsing is success; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.WpfBarcode.ISO15434.EnvelopeAscMh10Format.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>
            Copy of this object instance.
            </returns>
            <exception cref="T:System.NotImplementedException" />
        </member>
        <member name="M:Vintasoft.WpfBarcode.ISO15434.EnvelopeAscMh10Format.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.ISO15434.EnvelopeAscMh10Format.DataFields">
            <summary>
            Gets or sets the data fields of this envelope.
            </summary>
            <value>
            The data.
            </value>
        </member>
        <member name="T:Vintasoft.WpfBarcode.ISO15434.ISO15434Codec">
            <summary>
            Encodes/decodes the data in ISO 15434 format.
            </summary>  
        </member>
        <member name="F:Vintasoft.WpfBarcode.ISO15434.ISO15434Codec.RS">
            <summary>
            Record Separator.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.ISO15434.ISO15434Codec.GS">
            <summary>
            Field Separator.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.ISO15434.ISO15434Codec.EOT">
            <summary>
            Message Trailer.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.ISO15434.ISO15434Codec.MessageHeader">
            <summary>
            Message Header.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.ISO15434.ISO15434Codec.Encode(Vintasoft.WpfBarcode.ISO15434.MessageEnvelope)">
            <summary>
            Encodes the specified message.
            </summary>
            <param name="message">The message.</param>
            <returns>Encoded message.</returns>
        </member>
        <member name="M:Vintasoft.WpfBarcode.ISO15434.ISO15434Codec.Decode(System.String)">
            <summary>
            Decodes the specified encoded message.
            </summary>
            <param name="encodedMessage">The encoded message.</param>
            <returns>Decoded message envelope.</returns>
        </member>
        <member name="P:Vintasoft.WpfBarcode.ISO15434.ISO15434Codec.AvailableEnvelopeFormats">
            <summary>
            Gets or sets the available envelope formats.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.ISO15434.MessageEnvelope">
            <summary>
            Represents a message envelope that described in ISO/IEC 15434.
            </summary>   
        </member>
        <member name="M:Vintasoft.WpfBarcode.ISO15434.MessageEnvelope.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.ISO15434.MessageEnvelope" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.ISO15434.MessageEnvelope.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.ISO15434.MessageEnvelope.Data">
            <summary>
            Gets or sets the data of message envelope.
            </summary>
            <value>
            The data.
            </value>
        </member>
        <member name="T:Vintasoft.WpfBarcode.ISO15434.UnsupportedEnvelopeFormat">
            <summary>
            Represents an unsupported envelope format.
            </summary>   
        </member>
        <member name="M:Vintasoft.WpfBarcode.ISO15434.UnsupportedEnvelopeFormat.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.ISO15434.EnvelopeAscMh10Format" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.ISO15434.UnsupportedEnvelopeFormat.Parse(System.String)">
            <summary>
            Parses the specified data of this envelope format.
            </summary>
            <param name="data">The data.</param>
            <returns>
              <b>true</b> if parsing is success; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.WpfBarcode.ISO15434.UnsupportedEnvelopeFormat.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.ISO15434.UnsupportedEnvelopeFormat.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>
            Copy of this object instance.
            </returns>
        </member>
        <member name="P:Vintasoft.WpfBarcode.ISO15434.UnsupportedEnvelopeFormat.Data">
            <summary>
            Gets or sets the data of envelope format.
            </summary>
            <value>
            The data.
            </value>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeWriter">
            <summary>
            Class that allows to write barcodes to the image or in vector form.
            </summary>
            <example>This example shows how to generate image with Code128 barcode.
            <code lang="VB.NET">   
            Imports System.Windows.Media.Imaging   
               
            Imports Vintasoft.WpfBarcode   
            Imports Vintasoft.WpfBarcode.SymbologySubsets   
               
            ''' &lt;summary&gt;   
            ''' Test that shows how to create image with barcode using the BarcodeWriter class.   
            ''' &lt;/summary&gt;   
            Class BarcodeWriterExample   
            	''' &lt;summary&gt;   
            	''' Generates Code128 barcode.   
            	''' &lt;/summary&gt;   
            	Public Shared Function TestCode128Barcode() As BitmapSource   
            		' create the barcode writer   
            		Dim writer As New BarcodeWriter()   
               
            		' specify that writer must generate Code128 barcode   
            		writer.Settings.Barcode = BarcodeType.Code128   
               
            		' specify that writer must create output image as 24-bpp image   
            		writer.Settings.PixelFormat = BarcodeImagePixelFormat.Bgr24   
               
            		' specify that single bar width must be 3 pixels   
            		writer.Settings.MinWidth = 3   
               
            		' set the barcode value   
            		writer.Settings.Value = "Test1234567"   
               
            		' create image with barcode   
            		Return writer.GetBarcodeAsBitmapSource()   
            	End Function   
               
            	''' &lt;summary&gt;   
            	''' Generates SSCC-18 barcode.   
            	''' &lt;/summary&gt;      
            	Public Shared Function TestSSCC18Barcode() As BitmapSource   
            		' create the barcode writer   
            		Dim writer As New BarcodeWriter()   
               
            		' specify that writer must create output image as 24-bpp image   
            		writer.Settings.PixelFormat = BarcodeImagePixelFormat.Bgr24   
               
            		' specify that single bar width must be 3 pixels   
            		writer.Settings.MinWidth = 3   
               
            		' encode SSCC-18 barcode   
            		BarcodeSymbologySubsets.SSCC18.Encode("012345678901234560", writer.Settings)   
               
            		' create image with barcode   
            		Return writer.GetBarcodeAsBitmapSource()   
            	End Function   
               
            	''' &lt;summary&gt;   
            	''' Generates GS1-128 barcode.   
            	''' &lt;/summary&gt;      
            	Public Shared Function TestGS1_128Barcode() As BitmapSource   
            		' create the barcode writer   
            		Dim writer As New BarcodeWriter()   
               
            		' specify that writer must create output image as 24-bpp image   
            		writer.Settings.PixelFormat = BarcodeImagePixelFormat.Bgr24   
               
            		' specify that single bar width must be 3 pixels   
            		writer.Settings.MinWidth = 3   
               
            		' encode GS1-128 barcode   
            		' GTIN                : 08699736690061   
            		' SERIAL              : 30000000000720   
            		' USE BY OR EXPIRY    : 110227   
            		' BATCH/LOT           : TEST   
            		BarcodeSymbologySubsets.GS1_128.Encode("(01)08699736690061(21)30000000000720(17)110227(10)TEST", writer.Settings)   
               
            		' create image with barcode   
            		Return writer.GetBarcodeAsBitmapSource()   
            	End Function   
            End Class
            </code>
            <code lang="C#">
            using System.Windows.Media.Imaging;
            
            using Vintasoft.WpfBarcode;
            using Vintasoft.WpfBarcode.SymbologySubsets;
            
            /// &lt;summary&gt;
            /// Test that shows how to create image with barcode using the BarcodeWriter class.
            /// &lt;/summary&gt;
            class BarcodeWriterExample
            {
                /// &lt;summary&gt;
                /// Generates Code128 barcode.
                /// &lt;/summary&gt;
                public static BitmapSource TestCode128Barcode()
                {
                    // create the barcode writer
                    BarcodeWriter writer = new BarcodeWriter();
            
                    // specify that writer must generate Code128 barcode
                    writer.Settings.Barcode = BarcodeType.Code128;
            
                    // specify that writer must create output image as 24-bpp image
                    writer.Settings.PixelFormat = BarcodeImagePixelFormat.Bgr24;
            
                    // specify that single bar width must be 3 pixels
                    writer.Settings.MinWidth = 3;
            
                    // set the barcode value
                    writer.Settings.Value = "Test1234567";
            
                    // create image with barcode
                    return writer.GetBarcodeAsBitmapSource();
                }
            
                /// &lt;summary&gt;
                /// Generates SSCC-18 barcode.
                /// &lt;/summary&gt;   
                public static BitmapSource TestSSCC18Barcode()
                {
                    // create the barcode writer
                    BarcodeWriter writer = new BarcodeWriter();
            
                    // specify that writer must create output image as 24-bpp image
                    writer.Settings.PixelFormat = BarcodeImagePixelFormat.Bgr24;
            
                    // specify that single bar width must be 3 pixels
                    writer.Settings.MinWidth = 3;
            
                    // encode SSCC-18 barcode
                    BarcodeSymbologySubsets.SSCC18.Encode("012345678901234560", writer.Settings);
            
                    // create image with barcode
                    return writer.GetBarcodeAsBitmapSource();
                }
            
                /// &lt;summary&gt;
                /// Generates GS1-128 barcode.
                /// &lt;/summary&gt;   
                public static BitmapSource TestGS1_128Barcode()
                {
                    // create the barcode writer
                    BarcodeWriter writer = new BarcodeWriter();
            
                    // specify that writer must create output image as 24-bpp image
                    writer.Settings.PixelFormat = BarcodeImagePixelFormat.Bgr24;
            
                    // specify that single bar width must be 3 pixels
                    writer.Settings.MinWidth = 3;
            
                    // encode GS1-128 barcode
                    // GTIN                : 08699736690061
                    // SERIAL              : 30000000000720
                    // USE BY OR EXPIRY    : 110227
                    // BATCH/LOT           : TEST
                    BarcodeSymbologySubsets.GS1_128.Encode(
                        "(01)08699736690061(21)30000000000720(17)110227(10)TEST", writer.Settings);
            
                    // create image with barcode
                    return writer.GetBarcodeAsBitmapSource();
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeWriter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.BarcodeWriter" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeWriter.ConvertBarcodeValueToValueItems(System.String)">
            <summary>
            Converts the barcode value to an array with value items.
            </summary>
            <param name="text">The barcode value.</param>
            <returns>An array that contains value items.</returns>
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeWriter.GetBarcodeAsBitmapSource">
            <summary>
            Returns barcode as image.
            </summary>
            <returns>Image with barcode.</returns>
            <example>
            Please see example <see cref="T:Vintasoft.WpfBarcode.BarcodeWriter">here</see>.
            </example>
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeWriter.GetBarcodeAsPathGeometry">
            <summary>
            Returns barcode as <see cref="T:System.Windows.Media.PathGeometry" />.
            </summary>
            <returns>Barcode as <see cref="T:System.Windows.Media.PathGeometry" />.</returns>
            <remarks>
            This method ignores values of properties:
            <ul>
            <li><see cref="P:Vintasoft.WpfBarcode.WriterSettings.Padding" />, always used <b>0</b>.</li>
            <li><see cref="P:Vintasoft.WpfBarcode.WriterSettings.ValueVisible" />, always used <b>false</b>.</li>
            </ul>
            </remarks>
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeWriter.CreateBitmapFromBarcodePath(System.Windows.Media.PathGeometry,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,Vintasoft.WpfBarcode.UnitOfMeasure,System.Windows.Media.Brush,System.Windows.Media.Brush)">
            <summary>
            Creates barcode image with exact physical dimensions from barcode graphics path.
            </summary>
            <param name="barcodePath">Path geometry, which presents the barcode in vector form.</param>
            <param name="barcodeWidth">Barcode width, in units.</param>
            <param name="barcodeHeight">Barcode height, in units.</param>
            <param name="paddingLeft">Left padding, in units.</param>
            <param name="paddingTop">Top padding, in units.</param>
            <param name="paddingRight">Right padding, in units.</param>
            <param name="paddingBottom">Bottom padding, in units.</param>
            <param name="horizontalResolution">Bitmap horizontal resolution, in dpi.</param>
            <param name="verticalResolution">Bitmap vertical resolution, in dpi.</param>
            <param name="units">Units of measure.</param>
            <param name="backgroundBrush">Backgroud brush.</param>
            <param name="barcodeBrush">Barcode brush.</param>
            <returns>Rasterized barcode image with exact physical dimensions.</returns>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeWriter.WriteTime">
            <summary>
            Gets information about barcode write time.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeWriter.EncodedValue">
            <summary>
            Gets encoded value. 
            </summary>
            <remarks>
            This value can not coincide with <see cref="P:Vintasoft.WpfBarcode.WriterSettings.Value" />
            because reader can add checksum or another system info to the initial
            value of barcode.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeWriter.Settings">
            <summary>
            Defines the barcode writer settings.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeImagePixelFormat">
            <summary>
            Specifies the format of the color data for each
            pixel in the barcode image.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeImagePixelFormat.Indexed1">
            <summary>
            Specifies that the pixel format is 1 bit per pixel and that it uses
            indexed color. The color table therefore has two colors in it.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeImagePixelFormat.Bgr24">
            <summary>
            Specifies that the format is 24 bits per pixel; 8 bits each are used for
            the blue, green, and red components. 
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.BarcodeImagePixelFormat.Bgra32">
            <summary>
            Specifies that the format is 32 bits per pixel; 8 bits each are used
            for the blue, green, red and alpha components.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.WriterSettingsExceptionType">
            <summary>
            Specifies available types of exceptions which can occur in <see cref="T:Vintasoft.WpfBarcode.WriterSettings" />.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.WriterSettingsExceptionType.UnexpectedSymbol">
            <summary>
            Unexpected symbol.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.WriterSettingsExceptionType.ExpectedSymbol">
            <summary>
            Expected symbol.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.WriterSettingsExceptionType.DataLengthCanNotBe0">
            <summary>
            Length of data can not be 0.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.WriterSettingsExceptionType.DataRegionTooLarge">
            <summary>
            Data region is too large.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.WriterSettingsExceptionType.UnexpectedValueItem">
            <summary>
            Unexpected value item.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.WriterSettingsExceptionType.ExpectedOneTextValueItem">
            <summary>
            Expected one <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.TextValueItem" />.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.WriterSettingsExceptionType.BarcodeValueCanNotBeEmpty">
            <summary>
            Barcode value can not be empty.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.WriterSettingsExceptionType.PixelFormatNotSuppored">
            <summary>
            <see cref="P:Vintasoft.WpfBarcode.WriterSettings.PixelFormat" /> not supported.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.WriterSettingsExceptionType.BarcodeTypeIsUndefined">
            <summary>
            <see cref="P:Vintasoft.WpfBarcode.WriterSettings.Barcode" /> is undefined.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.WriterSettingsExceptionType.WritingBarcodeUnsupported">
            <summary>
            Writing of this barcode is not supported.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.WriterSettingsExceptionType.ExpectedNSymbolsInBarcodeValue">
            <summary>
            Expected N symbols in barcode value.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.WriterSettingsExceptionType.Expected0InFirstUPCSymbol">
            <summary>
            Expected '0' in first symbol of UPC barcode value.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.WriterSettingsExceptionType.UnableConvertUPCAValueTOUPCEValue">
            <summary>
            Cannot convert UPCA value to UPCE value.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.WriterSettingsExceptionType.WrongBarcodeValue">
            <summary>
            Wrong barcode value.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.WriterSettingsExceptionType.WrongWriterSettings">
            <summary>
            Wrong writer settings.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.UnitOfMeasure">
            <summary>
            Specifies available units of measure.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.UnitOfMeasure.Inches">
            <summary>
            Inches.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.UnitOfMeasure.Centimeters">
            <summary>
            Centimeters.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.UnitOfMeasure.Millimeters">
            <summary>
            Millimeters.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.UnitOfMeasure.Pixels">
            <summary>
            Device pixels.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.WriterSettings">
            <summary>
            Encapsulates the settings for writing barcodes to image.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.WriterSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.WriterSettings" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.WriterSettings.GetSchema">
            <summary>
            Not implemented.
            </summary>
            <returns />
        </member>
        <member name="M:Vintasoft.WpfBarcode.WriterSettings.ReadXml(System.Xml.XmlReader)">
            <summary>
            Deserializes the <see cref="T:Vintasoft.WpfBarcode.WriterSettings" /> from a specified <see cref="T:System.Xml.XmlReader" />.
            </summary>
            <param name="reader">The XML reader to use to deserialize the <see cref="T:Vintasoft.WpfBarcode.WriterSettings" />.</param>
        </member>
        <member name="M:Vintasoft.WpfBarcode.WriterSettings.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Serializes the <see cref="T:Vintasoft.WpfBarcode.WriterSettings" /> to a specified <see cref="T:System.Xml.XmlWriter" />.
            </summary>
            <param name="writer">The XML writer to use to serialize the <see cref="T:Vintasoft.WpfBarcode.WriterSettings" />.</param>
        </member>
        <member name="M:Vintasoft.WpfBarcode.WriterSettings.SetMinWidth(System.Double,Vintasoft.WpfBarcode.UnitOfMeasure)">
            <summary> 
            Sets <see cref="P:Vintasoft.WpfBarcode.WriterSettings.MinWidth" /> property in specified units.
            </summary>
            <param name="value"><see cref="P:Vintasoft.WpfBarcode.WriterSettings.MinWidth" /> value in specified units.</param>
            <param name="units">Unit of measure.</param>
        </member>
        <member name="M:Vintasoft.WpfBarcode.WriterSettings.SetWidth(System.Double,Vintasoft.WpfBarcode.UnitOfMeasure)">
            <summary>
            Sets the desired width of barcode.
            </summary>
            <param name="value">Barcode width is specified units.</param>
            <param name="units">Unit of measure.</param>
            <remarks>
            Parameters of this method are used for calculation of value of <see cref="P:Vintasoft.WpfBarcode.WriterSettings.MinWidth" /> property.<br />
            <br />
            Real width of generated image with barcode can be not equal to desired width.
            Difference between "real" and "desired" width depends from the <see cref="P:Vintasoft.WpfBarcode.WriterSettings.Resolution" />,
            difference is less if resolution is more.<br />
            <br />
            <see cref="P:Vintasoft.WpfBarcode.WriterSettings.MinWidth" /> property contains value used for generation of barcode after
            barcode of barcode.
            </remarks>
            <example>
            <code lang="VB.NET">   
            Imports System.Windows.Media.Imaging   
               
            Imports Vintasoft.WpfBarcode   
               
            ''' &lt;summary&gt;   
            ''' Test that shows how to create image with barcode with desired size and resolution.   
            ''' &lt;/summary&gt;   
            Class SetWidthExample   
            	''' &lt;summary&gt;   
            	''' Run the test.   
            	''' &lt;/summary&gt;   
            	Public Shared Function Test() As BitmapSource   
            		' generate image with 600 dpi resolution and with barcode with size 6x2 cm   
            		Dim barcodeImage As BitmapSource = DrawBarcode(BarcodeType.Code128, "TESTBARCODE", 600, 6, 2, UnitOfMeasure.Centimeters)   
               
            		Return barcodeImage   
            	End Function   
               
            	''' &lt;summary&gt;   
            	''' Create image with barcode with desired size and resolution.   
            	''' &lt;/summary&gt;   
            	Private Shared Function DrawBarcode(barcodeType As BarcodeType, value As String, resolution As Double, width As Double, height As Double, units As UnitOfMeasure) As BitmapSource   
            		' create the barcode writer   
            		Dim writer As New BarcodeWriter()   
               
            		' specify that writer must generate barcode of specified type   
            		writer.Settings.Barcode = barcodeType   
               
            		' set the barcode value   
            		writer.Settings.Value = value   
               
            		' specify the resolution of image with barcode   
            		writer.Settings.Resolution = resolution   
            		' specify the desired width of barcode   
            		writer.Settings.SetWidth(width, units)   
            		' specify the desired height of barcode   
            		writer.Settings.SetHeight(height, units)   
               
            		' create image with barcode   
            		Return writer.GetBarcodeAsBitmapSource()   
            	End Function   
               
            End Class   
            
            </code>
            <code lang="C#">
            using System.Windows.Media.Imaging;
            
            using Vintasoft.WpfBarcode;
            
            /// &lt;summary&gt;
            /// Test that shows how to create image with barcode with desired size and resolution.
            /// &lt;/summary&gt;
            class SetWidthExample
            {
                /// &lt;summary&gt;
                /// Run the test.
                /// &lt;/summary&gt;
                public static BitmapSource Test()
                {
                    // generate image with 600 dpi resolution and with barcode with size 6x2 cm
                    BitmapSource barcodeImage = DrawBarcode(
                        BarcodeType.Code128, "TESTBARCODE",
                        600, 6, 2, UnitOfMeasure.Centimeters);
                    
                    return barcodeImage;
                }
            
                /// &lt;summary&gt;
                /// Create image with barcode with desired size and resolution.
                /// &lt;/summary&gt;
                static BitmapSource DrawBarcode(
                    BarcodeType barcodeType,
                    string value,
                    double resolution,
                    double width,
                    double height,
                    UnitOfMeasure units)
                {
                    // create the barcode writer
                    BarcodeWriter writer = new BarcodeWriter();
            
                    // specify that writer must generate barcode of specified type
                    writer.Settings.Barcode = barcodeType;
            
                    // set the barcode value
                    writer.Settings.Value = value;
            
                    // specify the resolution of image with barcode
                    writer.Settings.Resolution = resolution;
                    // specify the desired width of barcode
                    writer.Settings.SetWidth(width, units);
                    // specify the desired height of barcode
                    writer.Settings.SetHeight(height, units);
            
                    // create image with barcode
                    return writer.GetBarcodeAsBitmapSource();
                }
            
            }
            
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.WpfBarcode.WriterSettings.SetHeight(System.Double,Vintasoft.WpfBarcode.UnitOfMeasure)">
            <summary>
            Sets <see cref="P:Vintasoft.WpfBarcode.WriterSettings.Height" /> property in specified units.
            </summary>
            <param name="value"><see cref="P:Vintasoft.WpfBarcode.WriterSettings.Height" /> value in specified units.</param>
            <param name="units">Unit of measure.</param>
            <example>
            Please see example <see cref="M:Vintasoft.WpfBarcode.WriterSettings.SetWidth(System.Double,Vintasoft.WpfBarcode.UnitOfMeasure)">here</see>.
            </example>         
        </member>
        <member name="M:Vintasoft.WpfBarcode.WriterSettings.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Vintasoft.WpfBarcode.WriterSettings.BeginInit">
            <summary>
            Signals the <see cref="T:Vintasoft.WpfBarcode.WriterSettings" /> that initialization is starting.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.WriterSettings.EndInit">
            <summary>
            Signals the <see cref="T:Vintasoft.WpfBarcode.WriterSettings" /> that initialization is complete.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.WriterSettings.Value">
            <summary>
            Gets or sets the value of the barcode.
            </summary>
            <remarks>
            Optimization algorithm is used for 2D barcodes to reduce matrix size.
            Use <see cref="P:Vintasoft.WpfBarcode.WriterSettings.ValueItems" /> property if optimization must be disabled.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.WriterSettings.PrintableValue">
            <summary>
            Gets or sets text that is showing below barcode.
            </summary>
            <remarks>
            <see cref="P:Vintasoft.WpfBarcode.WriterSettings.Value" /> is showing below barcode if value of this property is empty.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.WriterSettings.ValueItems">
            <summary>
            Gets or sets an array of value items of barcode.
            </summary>
            <remarks>
            <see cref="P:Vintasoft.WpfBarcode.WriterSettings.Value" /> property ignored if value of this property is specified.
            </remarks>
            <example>
            Please see example <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.ValueItemBase">here</see>.
            </example>
        </member>
        <member name="P:Vintasoft.WpfBarcode.WriterSettings.Barcode">
            <summary>
            Gets or sets the type of barcode symbology.
            </summary>
            <value>Default value is <see cref="T:Vintasoft.WpfBarcode.BarcodeType" />.None.</value>
        </member>
        <member name="P:Vintasoft.WpfBarcode.WriterSettings.ForeColor">
            <summary>
            Gets or sets the fore color of barcode.
            </summary>
            <value>Default value is <see cref="T:System.Windows.Media.Color" />.<b>Black</b>.</value>
        </member>
        <member name="P:Vintasoft.WpfBarcode.WriterSettings.BackColor">
            <summary>
            Gets or sets the back color of barcode.
            </summary>
            <value>Default value is <see cref="T:System.Windows.Media.Color" />.<b>White</b>.</value>
        </member>
        <member name="P:Vintasoft.WpfBarcode.WriterSettings.PixelFormat">
            <summary>
            Gets or sets the image pixel format.
            </summary>
            <value>Default value is <b>BarcodeImagePixelFormat.Indexed1</b>.</value>
        </member>
        <member name="P:Vintasoft.WpfBarcode.WriterSettings.MinWidth">
            <summary>
            Gets or sets the width (and height for 2D barcodes), in pixels, of single block.
            </summary>
            <value>Minimal value is 2. Default value is <b>3</b>.</value>
            <remarks>
            Single block for 1D barcodes - single bar.<br />
            Single block for 2D barcodes - single bar or single row.<br />
            </remarks>
            <seealso cref="P:Vintasoft.WpfBarcode.WriterSettings.BarsWidthAdjustment" />
        </member>
        <member name="P:Vintasoft.WpfBarcode.WriterSettings.Resolution">
            <summary>
            Gets or sets image vertical and horizontal resolution, in dots per inch.
            </summary>
            <value>Default value is <b>96</b> DPI.</value>
        </member>
        <member name="P:Vintasoft.WpfBarcode.WriterSettings.Padding">
            <summary>
            Gets or sets the barcode padding.
            </summary>
            <value>Minimal value is 1 <see cref="P:Vintasoft.WpfBarcode.WriterSettings.MinWidth" />. Default value is <b>1</b>.</value>
        </member>
        <member name="P:Vintasoft.WpfBarcode.WriterSettings.BarsRatio">
            <summary>
            Gets or sets the ratio of the wide bar width to the narrow bar width
            (only for barcodes width 1X and 2X bars width).
            </summary>
            <value>Minimal value is 1.5, maximal value is 3.5.<br /> 
            Default value is <b>2</b>.</value>
            <remarks>
            Applicable only to:
            <ul>
            <li>Codabar</li>
            <li>Code 11</li>
            <li>Code 39</li>
            <li>IATA 2 of 5</li>
            <li>Interleaved 2 of 5</li>
            <li>Standard 2 of 5</li>
            <li>Matrix 2 of 5</li>
            <li>MSI</li>
            <li>Telepen</li>
            </ul>
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.WriterSettings.BarsWidthAdjustment">
            <summary>
            Gets or sets the adjustment method of bars width in percentage to the value
            of MinWidth property.
            </summary>
            <value>
            From -0.3 to 0 - white bars will be expanded, black bars will be shrunk,<br />
            0 - no effect,<br />
            from 0 to 0.3 - white bars will be shrunk, black bars will be expanded.
            </value>
            <seealso cref="P:Vintasoft.WpfBarcode.WriterSettings.MinWidth" />
        </member>
        <member name="P:Vintasoft.WpfBarcode.WriterSettings.Code128EncodingMode">
            <summary>
            Gets or sets the Code128 data encoding mode.
            </summary>
            <value>Default value is
            <see cref="P:Vintasoft.WpfBarcode.WriterSettings.Code128EncodingMode" />.<b>Undefined</b> (encoding mode calculated automatically).
            </value>
        </member>
        <member name="P:Vintasoft.WpfBarcode.WriterSettings.Code16KEncodingMode">
            <summary>
            Gets or sets the Code 16K data encoding mode.
            </summary>
            <value>Default value is
            <see cref="P:Vintasoft.WpfBarcode.WriterSettings.Code16KEncodingMode" />.<b>Undefined</b> (encoding mode calculated automatically).
            </value>
        </member>
        <member name="P:Vintasoft.WpfBarcode.WriterSettings.Code16KRows">
            <summary>
            Gets or sets Code 16K row count.
            </summary>
            <value>
            Minimal value is 2, maximal value is 16.
            Default value is <b>0</b> (row count calculated automatically).
            </value>
        </member>
        <member name="P:Vintasoft.WpfBarcode.WriterSettings.EANSubtype">
            <summary>
            Gets or sets the EAN subtype.
            </summary>
            <value>Default value is
            <see cref="P:Vintasoft.WpfBarcode.WriterSettings.EANSubtype" />.<b>Undefined</b>.
            </value>
        </member>
        <member name="P:Vintasoft.WpfBarcode.WriterSettings.PDF417RowHeight">
            <summary>
            Gets or sets the row height of PDF417.
            </summary>
            <value>
            Minimal value is 2, maximal value is 64. Default value is <b>4</b>.
            </value>
            <seealso cref="P:Vintasoft.WpfBarcode.WriterSettings.MinWidth" />
        </member>
        <member name="P:Vintasoft.WpfBarcode.WriterSettings.Height">
            <summary>
            Gets or sets the height, in pixels, of 1D barcode.
            </summary>
            <value>
            Mimimal value is 3, maximal value is 4096.
            Default value is <b>100</b>.
            </value>
        </member>
        <member name="P:Vintasoft.WpfBarcode.WriterSettings.DataMatrixSymbol">
            <summary>
            Gets or sets the Data Matrix symbol size. 
            </summary>
            <value>Default value is 
            <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.DataMatrixSymbolType" />.<b>Undefined</b> (symbol size calculated automatically).
            </value>
        </member>
        <member name="P:Vintasoft.WpfBarcode.WriterSettings.DataMatrixEncodingMode">
            <summary>
            Gets or sets the Data Matrix data encoding mode.
            </summary>
            <value>Default value is
            <see cref="P:Vintasoft.WpfBarcode.WriterSettings.DataMatrixEncodingMode" />.<b>Undefined</b> (encoding mode calculated automatically).
            </value>
            <remarks>
            Only square barcodes are created if encoding mode is set to Undefined.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.WriterSettings.QRSymbol">
            <summary>
            Gets or sets the QR symbol version (symbol size).
            </summary>
            <value>Default value is
            <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.QRSymbolVersion" />.<b>Undefined</b> (symbol version calculated automatically).
            </value>
        </member>
        <member name="P:Vintasoft.WpfBarcode.WriterSettings.QRErrorCorrectionLevel">
            <summary>
            Gets or sets QR error correction level.
            </summary>
            <value>Default value is
            <see cref="P:Vintasoft.WpfBarcode.WriterSettings.QRErrorCorrectionLevel" />.<b>M</b>.</value>
        </member>
        <member name="P:Vintasoft.WpfBarcode.WriterSettings.QREncodingMode">
            <summary>
            Gets or sets QR data encoding mode.
            </summary>
            <value>Default value is <see cref="P:Vintasoft.WpfBarcode.WriterSettings.QREncodingMode" />.<b>Undefined</b>.</value>
            <remarks>
            Parameter will be calculated automatically if value is
            <see cref="P:Vintasoft.WpfBarcode.WriterSettings.QREncodingMode" />.Undefined.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.WriterSettings.HanXinCodeSymbol">
            <summary>
            Gets or sets the Han Xin Code symbol version (symbol size).
            </summary>
            <value>Default value is
            <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.HanXinCodeSymbolVersion" />.<b>Undefined</b> (symbol version calculated automatically).
            </value>
        </member>
        <member name="P:Vintasoft.WpfBarcode.WriterSettings.HanXinCodeErrorCorrectionLevel">
            <summary>
            Gets or sets Han Xin Code error correction level.
            </summary>
            <value>Default value is
            <see cref="P:Vintasoft.WpfBarcode.WriterSettings.HanXinCodeErrorCorrectionLevel" />.<b>L2</b>.</value>
        </member>
        <member name="P:Vintasoft.WpfBarcode.WriterSettings.HanXinCodeEncodingMode">
            <summary>
            Gets or sets Han Xin Code data encoding mode.
            </summary>
            <value>Default value is <see cref="P:Vintasoft.WpfBarcode.WriterSettings.QREncodingMode" />.<b>Undefined</b>.</value>
            <remarks>
            Parameter will be calculated automatically if value is
            <see cref="P:Vintasoft.WpfBarcode.WriterSettings.QREncodingMode" />.Undefined.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.WriterSettings.PDF417Rows">
            <summary>
            Gets or sets PDF417 row count.
            </summary>
            <value>
            Minimal value is 3, maximal value is 90.
            Default value is <b>-1</b> (row count calculated automatically).
            </value>
        </member>
        <member name="P:Vintasoft.WpfBarcode.WriterSettings.PDF417Columns">
            <summary>
            Gets or sets PDF417 column count.
            </summary>        
            <value>
            Minimal value is 1, maximal value is 30.
            Default value is <b>-1</b> (column count calculated automatically).
            </value>
        </member>
        <member name="P:Vintasoft.WpfBarcode.WriterSettings.PDF417ErrorCorrectionLevel">
            <summary>
            Gets or sets PDF417 error correction level.
            </summary>
            <value>Default value is
            <see cref="P:Vintasoft.WpfBarcode.WriterSettings.PDF417ErrorCorrectionLevel" />.<b>Undefined</b> (error correction level
            calculated automatically).
            </value>
            <remarks>
            Parameter will be calculated automatically if value is
            <see cref="P:Vintasoft.WpfBarcode.WriterSettings.PDF417ErrorCorrectionLevel" />.Undefined.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.WriterSettings.PDF417EncodingMode">
            <summary>
            Gets or sets PDF417 data encoding mode. 
            </summary>
            <value>Default value is <see cref="P:Vintasoft.WpfBarcode.WriterSettings.PDF417EncodingMode" />.<b>Undefined</b> (encoding mode
            calculated automatically).</value>
        </member>
        <member name="P:Vintasoft.WpfBarcode.WriterSettings.MicroPDF417Columns">
            <summary>
            Gets or sets MicroPDF417 column count.
            </summary>        
            <value>
            Minimal value is 1, maximal value is 4.
            Default value is <b>0</b> (column count calculated automatically).
            </value>
        </member>
        <member name="P:Vintasoft.WpfBarcode.WriterSettings.MicroPDF417EncodingMode">
            <summary>
            Gets or sets MicroPDF417 data encoding mode. 
            </summary>
            <value>Default value is <see cref="P:Vintasoft.WpfBarcode.WriterSettings.PDF417EncodingMode" />.<b>Undefined</b> (encoding mode
            calculated automatically).</value>
        </member>
        <member name="P:Vintasoft.WpfBarcode.WriterSettings.MicroPDF417Symbol">
            <summary>
            Gets or sets the MicroPDF417 symbol size. 
            </summary>
            <value>Default value is 
            <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.MicroPDF417SymbolType" />.<b>Undefined</b> (symbol size calculated automatically).
            </value>
        </member>
        <member name="P:Vintasoft.WpfBarcode.WriterSettings.MicroPDF417RowHeight">
            <summary>
            Gets or sets the row height of Micro PDF417.
            </summary>
            <value>
            Minimal value is 2, maximal value is 64. Default value is <b>2</b>.
            </value>
            <seealso cref="P:Vintasoft.WpfBarcode.WriterSettings.MinWidth" />
        </member>
        <member name="P:Vintasoft.WpfBarcode.WriterSettings.OptionalCheckSum">
            <summary>
            Gets or sets a value indicating whether the barcode writer calculates an optional checksum.
            </summary>
            <value>
            <b>false</b> - optional checksum will not be calculated;<br />
            <b>true</b> - optional checksum will be calculated.<br />
            Default value is <b>false</b>.
            </value>
            <remarks>The following barcode symbologies have optional checksum:
            <ul>
            <li>Code 39</li>
            <li>Industrial Standard 2 of 5</li>
            <li>Interleaved 2 of 5</li>
            </ul>
            <b>We recommend use checksum!</b>
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.WriterSettings.UseCode39ExtendedEncodeTable">
            <summary>
            Gets or sets a value indicating whether the barcode writer converts Code39 barcode
            to to Code39 Extended barcode if necessary.
            </summary>
            <value>Default value is <b>true</b>.</value>
        </member>
        <member name="P:Vintasoft.WpfBarcode.WriterSettings.ValueFontTypeface">
            <summary>
            Gets or sets the font of the barcode value written as text.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.WriterSettings.ValueFontEmSize">
            <summary>
            Gets or sets the em-size of the value font.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.WriterSettings.ValueGap">
            <summary>
            Gets or sets the amount of gap between the text and the barcode when
            creating a barcode, in pixels. 
            </summary>
            <value>Default value is <b>0</b>.</value>
        </member>
        <member name="P:Vintasoft.WpfBarcode.WriterSettings.ValueVisible">
            <summary>
            Gets or sets a value indicating whether the barcode writer draws the 1D barcode value on
            the barcode image.
            </summary>
            <value>Default value is <b>true</b>.</value>
        </member>
        <member name="P:Vintasoft.WpfBarcode.WriterSettings.Value2DVisible">
            <summary>
            Gets or sets a value indicating whether the barcode writer draws the 2D barcode value on
            the barcode image.
            </summary>
            <value>Default value is <b>false</b>.</value>
        </member>
        <member name="P:Vintasoft.WpfBarcode.WriterSettings.ValueAutoLetterSpacing">
            <summary>
            Gets or sets a value indicating whether the barcode writer draws the barcode value on
            the barcode image using the automatic letter spacing.
            </summary>
            <value>Default value is <b>true</b>.</value>
        </member>
        <member name="P:Vintasoft.WpfBarcode.WriterSettings.EnableTelepenNumericMode">
            <summary>
            Gets or sets a value indicating whether the barcode writer enables the numeric mode
            in Telepen barcodes.
            </summary>
            <value>Default value is <b>false</b>.
            </value>
            <remarks>Numeric mode allows packing two digits into one character.</remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.WriterSettings.PostBarcodesADMultiplier">
            <summary>
            Gets or sets the Post barcodes Ascender/Descender height multiplier.
            </summary>
            <value>
            Default value is <b>1</b>. Minimal value is 0.5, maximal value is 1.7.
            </value>
        </member>
        <member name="P:Vintasoft.WpfBarcode.WriterSettings.AustralianPostCustomerInfoFormat">
            <summary>
            Gets or sets the format of customer information field of Australia Post 4-state barcode.
            </summary>
            <value>Default value is
            <see cref="P:Vintasoft.WpfBarcode.WriterSettings.AustralianPostCustomerInfoFormat" />.None.
            </value>
            <example>
            Please see example <see cref="M:Vintasoft.WpfBarcode.BarcodeReader.ReadBarcodes">here</see>.
            </example>         
        </member>
        <member name="P:Vintasoft.WpfBarcode.WriterSettings.RSS14StackedOmnidirectional">
            <summary>
            Gets or sets a value indicating whether the barcode writer writes RSS-14 Stacked Omnidirectional
            barcode.
            </summary>
            <value>Default value is <b>false</b>.</value>
        </member>
        <member name="P:Vintasoft.WpfBarcode.WriterSettings.RSSExpandedStackedSegmentPerRow">
            <summary>
            Gets or sets the number of segments per row to be used in RSS
            Expanded Stacked barcode.
            </summary>
            <value>Possible values from 2 to 20. Default value is <b>4</b>.</value>
        </member>
        <member name="P:Vintasoft.WpfBarcode.WriterSettings.RSSLinkageFlag">
            <summary>
            Gets or sets a value indicating whether the RSS linear component has linked 2D component.
            </summary>
            <value>
            <b>false</b> - RSS component does not have linked 2D component;<br />
            <b>true</b> - RSS component has linked 2D component, i.e. RSS barcode is composite barcode.<br />
            Default value is <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.WpfBarcode.WriterSettings.MaxiCodeResolution">
            <summary>
            Gets or sets the MaxiCode barcode resolution.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.WriterSettings.MaxiCodeEncodingMode">
            <summary>
            Gets or sets the MaxiCode encoding mode.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.WriterSettings.AztecSymbol">
            <summary>
            Gets or sets Aztec symbol type.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.WriterSettings.AztecErrorCorrectionDataPercent">
            <summary>
            Gets or sets a percent of error correction data in aztec symbol.
            </summary>
            <value>Default value is <b>25</b>.</value>
        </member>
        <member name="P:Vintasoft.WpfBarcode.WriterSettings.AztecDataLayers">
            <summary>
            Gets or sets number of data layers in aztec symbol.
            </summary>
            <value>
            Default value is <b>0</b> (number of data layers calculated automatically).
            </value>
        </member>
        <member name="P:Vintasoft.WpfBarcode.WriterSettings.AztecEncodingMode">
            <summary>
            Gets or sets Aztec data encoding mode.
            </summary>
            <value>Default value is <b><see cref="P:Vintasoft.WpfBarcode.WriterSettings.AztecEncodingMode" />.Undefined</b>.</value>
        </member>
        <member name="P:Vintasoft.WpfBarcode.WriterSettings.MSIChecksum">
            <summary>
            Gets or sets a checksum type of MSI barcode.
            </summary>
            <value>
            Default value is <b><see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.MSIChecksumType" />.Mod10</b>.
            </value>
        </member>
        <member name="P:Vintasoft.WpfBarcode.WriterSettings.ProcessSpecialSymbols">
            <summary>
            Gets or sets a value indicating whether the barcode writer processes the special symbols
            in <see cref="P:Vintasoft.WpfBarcode.WriterSettings.Value">barcode value</see>.
            </summary>
            <value>
            <b>false</b> - barcode writer does not process the special characters in barcode value;<br />
            <b>true</b> - barcode writer processes the special characters in barcode value.<br />
            Default value is <b>true</b>.
            </value>
            <remarks>
            Avaiable special symbols for barcodes:<br />
            <ul>
            <li>
            <b>Aztec</b>: 
            <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.EciCharacterValueItem">&lt;ECInnnnnn&gt;</see>, 
            <see cref="P:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags.Fnc1">&lt;FNC1&gt;</see>,
            <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.AztecStructuredAppendCharacter">&lt;SA_n_m&gt;</see>.
            </li>
            <li>
            <b>MaxiCode</b>: 
            <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.EciCharacterValueItem">&lt;ECInnnnnn&gt;</see>, 
            <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.AztecStructuredAppendCharacter">&lt;SA_n_m&gt;</see>.
            </li>
            <li>
            <b>DataMatrix</b>:
            <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.EciCharacterValueItem">&lt;ECInnnnnn&gt;</see>, 
            <see cref="P:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags.Fnc1">&lt;FNC1&gt;</see>,
            <see cref="P:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags.Macro05">&lt;MACRO_05&gt;</see>, 
            <see cref="P:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags.Macro06">&lt;MACRO_06&gt;</see>, 
            <see cref="P:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags.ReaderProgramming">&lt;READER_PROGRAMMING&gt;</see>,
            <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.DataMatrixStructuredAppendCharacter">&lt;SA_n_m&gt;</see>.
            </li>
            <li>
            <b>Code 128</b>: 
            <see cref="P:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags.Fnc1">&lt;FNC1&gt;</see>,
            <see cref="P:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags.Fnc2">&lt;FNC2&gt;</see>,
            <see cref="P:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags.Fnc3">&lt;FNC3&gt;</see>,
            <see cref="P:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags.Fnc4">&lt;FNC4&gt;</see>.
            </li>
            <li>
            <b>Code 16K</b>: 
            <see cref="P:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags.Fnc1">&lt;FNC1&gt;</see>,
            <see cref="P:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags.Fnc2">&lt;FNC2&gt;</see>,
            <see cref="P:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags.Fnc3">&lt;FNC3&gt;</see>,
            <see cref="P:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags.Fnc4">&lt;FNC4&gt;</see>,
            <see cref="P:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags.Pad">&lt;PAD&gt;</see>,
            <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.StructuredAppendCharacter">&lt;SA_n_m&gt;</see>.
            </li>
            <li>
            <b>QR</b>:
            <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.EciCharacterValueItem">&lt;ECInnnnnn&gt;</see>, 
            <see cref="P:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags.Fnc1">&lt;FNC1&gt;</see>,
            <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.QRStructuredAppendCharacter">&lt;SA_n_m&gt;</see>.
            </li>
            <li>
            <b>PDF417, PDF417 Compact</b>: 
            <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.EciCharacterValueItem">&lt;ECInnnnnn&gt;</see>, 
            <see cref="P:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags.LinkageFlag">&lt;LINKAGE&gt;</see>,
            <see cref="P:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags.EanUccLinkageFlag">&lt;LINKAGE_EANUCC&gt;</see>,
            <see cref="P:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags.ReaderProgramming">&lt;READER_PROGRAMMING&gt;</see>,
            <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.PDF417StructuredAppendCharacter">&lt;SA_n_m&gt;</see>.
            </li>
            <li>
            <b>Micro PDF417</b>: 
            <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.EciCharacterValueItem">&lt;ECInnnnnn&gt;</see>, 
            <see cref="P:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags.LinkageFlag">&lt;LINKAGE&gt;</see>,
            <see cref="P:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags.EanUccLinkageFlag">&lt;LINKAGE_EANUCC&gt;</see>,
            <see cref="P:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags.ReaderProgramming">&lt;READER_PROGRAMMING&gt;</see>,
            <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.PDF417StructuredAppendCharacter">&lt;SA_n_m&gt;</see>,
            <see cref="P:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags.Macro05">&lt;MACRO_05&gt;</see>, 
            <see cref="P:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags.Macro06">&lt;MACRO_06&gt;</see>, 
            <see cref="P:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags.LinkageFlag">&lt;LINKAGE&gt;</see>,
            <see cref="P:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags.EanUccLinkageFlag">&lt;LINKAGE_EANUCC&gt;</see>,
            <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.MicroPDF417AsCode128EmulationValueItem">&lt;CODE128EM_nnn&gt;</see>.
            </li>
            <li>
            <b>RSS Expanded, RSS Expanded Stacked</b>:
            <see cref="P:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags.Fnc1">&lt;FNC1&gt;</see>.
            </li>
            </ul>
            </remarks>
            <example>
            Please see example <see cref="T:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags">here</see>.<br />
            </example>
            <seealso cref="T:Vintasoft.WpfBarcode.BarcodeInfo.NonDataFlags" />
        </member>
        <member name="E:Vintasoft.WpfBarcode.WriterSettings.Changed">
            <summary>
            Occurs after writer settings is changed.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.WriterSettingsException">
            <summary>
            The exception that is thrown when an <see cref="P:Vintasoft.WpfBarcode.BarcodeWriter.Settings" /> is incorrect.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.WriterSettingsException.#ctor(Vintasoft.WpfBarcode.WriterSettingsExceptionType)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.WriterSettingsException" /> class. 
            </summary>
            <param name="exceptionType">Exectpion type.</param>
        </member>
        <member name="M:Vintasoft.WpfBarcode.WriterSettingsException.#ctor(Vintasoft.WpfBarcode.WriterSettingsExceptionType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.WriterSettingsException" /> class. 
            </summary>
            <param name="exceptionType">Exectpion type.</param>
            <param name="textContent">Exception text content.</param>
        </member>
        <member name="P:Vintasoft.WpfBarcode.WriterSettingsException.ExceptionType">
            <summary>
            Gets a exception type.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.WriterSettingsException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.GS1.GS1ApplicationIdentifier">
            <summary>
            Class that contains information about GS1 Application Identifier.
            </summary>
            <example>
            Please see example <see cref="T:Vintasoft.WpfBarcode.GS1.GS1Codec">here</see>.
            </example>
        </member>
        <member name="M:Vintasoft.WpfBarcode.GS1.GS1ApplicationIdentifier.CalculateStandardCheckDigit(System.String)">
            <summary>
            Calculates the standard check digit for specified value.
            </summary>
            <param name="value">Value for which check digit must be calculated.</param>
        </member>
        <member name="P:Vintasoft.WpfBarcode.GS1.GS1ApplicationIdentifier.ApplicationIdentifier">
            <summary>
            Gets the application identifier.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.GS1.GS1ApplicationIdentifier.DataContent">
            <summary>
            Gets the data content.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.GS1.GS1ApplicationIdentifier.DataTitle">
            <summary>
            Gets the data title.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.GS1.GS1ApplicationIdentifier.Format">
            <summary>
            Gets the data format.
            </summary>
            <value>
            'Nk' - k numeric digits, fixed length<br />
            'NkC' - k numeric digits + check digit, fixed length<br />
            'N..k' - up to k numeric digits<br />
            'X..k' - up to k characters ISO646
            </value>
        </member>
        <member name="P:Vintasoft.WpfBarcode.GS1.GS1ApplicationIdentifier.IsVariableLength">
            <summary>
            Determines that Application Identifier has variable length.
            </summary>
            <value>
            <b>true</b> if the Application Identifier has variable length, otherwise <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.WpfBarcode.GS1.GS1ApplicationIdentifier.IsContainsDecimalPoint">
            <summary>
            Determines that Application Identifier can contains a decimal point.
            </summary>
            <value>
            <b>true</b> if the Application Identifier can contains a decimal point, otherwise <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.WpfBarcode.GS1.GS1ApplicationIdentifier.ValueLength">
            <summary>
            Gets the length of the Application Identifier value.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.GS1.GS1ApplicationIdentifier.TotalLength">
            <summary>
            Gets the total length of the Application Identifier.
            </summary>
            <value>
            Maximal length of the Application Identifier if the Application Identifier has variable length,
            otherwise the total length of the Application Identifier.
            </value>
        </member>
        <member name="P:Vintasoft.WpfBarcode.GS1.GS1ApplicationIdentifier.CharacterSet">
            <summary>
            Gets a character set type of application indentifier.
            </summary>
            <remarks>
            See GS1 General Specification: 7.11. The GS1 Subset of International Standard ISO/IEC 646.
            </remarks>
        </member>
        <member name="T:Vintasoft.WpfBarcode.GS1.GS1ApplicationIdentifiers">
            <summary>
            Class that stores information about available GS1 Application Identifiers.
            </summary>
            <remarks>
            Class contains information about GS1 Application Identifiers compatible
            with GS1 General Specifications version 14.
            </remarks>
            <example>
            Please see example <see cref="T:Vintasoft.WpfBarcode.GS1.GS1Codec">here</see>.
            </example>
        </member>
        <member name="M:Vintasoft.WpfBarcode.GS1.GS1ApplicationIdentifiers.FindApplicationIdentifier(System.String)">
            <summary>
            Searches for an application identifier at specified number. 
            </summary>
            <param name="aiNumber">Application identifier number.</param>
            <returns><see cref="T:Vintasoft.WpfBarcode.GS1.GS1ApplicationIdentifier" /> instance if application identifier
            with specified number exists, otherwise <b>null</b>.</returns>
        </member>
        <member name="M:Vintasoft.WpfBarcode.GS1.GS1ApplicationIdentifiers.IndexOfApplicationIdentifier(System.String)">
            <summary>
            Searches for the specified application identifier and returns 
            the index in the <see cref="P:Vintasoft.WpfBarcode.GS1.GS1ApplicationIdentifiers.ApplicationIdentifiers" /> array.
            </summary>
            <param name="aiNumber">Application identifier number.</param>
            <returns>Index in <see cref="P:Vintasoft.WpfBarcode.GS1.GS1ApplicationIdentifiers.ApplicationIdentifiers" /> array if application identifier
            with specified number exists, otherwise <b>-1</b>.</returns>
        </member>
        <member name="P:Vintasoft.WpfBarcode.GS1.GS1ApplicationIdentifiers.ApplicationIdentifiers">
            <summary>
            Gets a list of application identifiers.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.GS1.GS1ApplicationIdentifierValue">
            <summary>
            Class that contains information about the Application Identifier value.
            </summary>
            <example>
            Please see example <see cref="T:Vintasoft.WpfBarcode.GS1.GS1Codec">here</see>.
            </example>
        </member>
        <member name="M:Vintasoft.WpfBarcode.GS1.GS1ApplicationIdentifierValue.#ctor(Vintasoft.WpfBarcode.GS1.GS1ApplicationIdentifier,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.GS1.GS1ApplicationIdentifierValue" /> class. 
            </summary>
            <param name="applicationIdentifier">Application identifier.</param>
            <param name="value">Application identifier value.</param>
        </member>
        <member name="M:Vintasoft.WpfBarcode.GS1.GS1ApplicationIdentifierValue.ToString">
            <summary>
            Converts the <see cref="T:Vintasoft.WpfBarcode.GS1.GS1ApplicationIdentifierValue" /> of this instance 
            to its equivalent printable string.
            </summary>
            <returns>Printable string of this <see cref="T:Vintasoft.WpfBarcode.GS1.GS1ApplicationIdentifierValue" />.</returns>
        </member>
        <member name="P:Vintasoft.WpfBarcode.GS1.GS1ApplicationIdentifierValue.ApplicationIdentifier">
            <summary>
            Gets the Application Identifier.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.GS1.GS1ApplicationIdentifierValue.Value">
            <summary>
            Gets a value of the Application Identifier.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.BarcodeGlobalSettings">
            <summary>
            Class that contains global information about SDK.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeGlobalSettings.RegisterBarcodeReader(System.String,System.String,System.String)">
            <summary>
            Registers barcode reader.
            </summary>
            <param name="user">User name.</param>
            <param name="email">Email or server name.</param>
            <param name="regCode">Registration code.</param>
        </member>
        <member name="M:Vintasoft.WpfBarcode.BarcodeGlobalSettings.RegisterBarcodeWriter(System.String,System.String,System.String)">
            <summary>
            Registers barcode writer.
            </summary>
            <param name="user">User name.</param>
            <param name="email">Email or server name.</param>
            <param name="regCode">Registration code.</param>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeGlobalSettings.ProductVersion">
            <summary>
            Gets the product version.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeGlobalSettings.AssemblyVersion">
            <summary>
            Gets the assembly version.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeGlobalSettings.IsDemoVersion">
            <summary>
            Gets a value indicating whether SDK is used in demo mode.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeGlobalSettings.SDKPackage">
            <summary>
            Gets the version of SDK package.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeGlobalSettings.IsRemoteDesktop">
            <summary>
            Gets or sets a value indicating whether the application is executing on remote desktop.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeGlobalSettings.ServerName">
            <summary>
            Gets the name of the server where SDK is used.
            </summary>
            <value>
            Null - SDK is used in non server environment;
            not empty string (name of the server) - SDK is used in server environment.
            </value>
        </member>
        <member name="P:Vintasoft.WpfBarcode.BarcodeGlobalSettings.Url">
            <summary>
            Gets the application URL.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.SDKPackage">
            <summary>
            Specifies available packages of SDK.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.SDKPackage.Reader1D">
            <summary>
            Can read 1D and postal barcodes.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.SDKPackage.Reader2D">
            <summary>
            Can read 2D barcodes.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.SDKPackage.Writer1D">
            <summary>
            Can write 1D and postal barcodes.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.SDKPackage.Writer2D">
            <summary>
            Can write 2D barcodes.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityTest">
            <summary>
            ISO/IEC 15415 barcode print quality test for 2D barcodes. 
            </summary>
            <remarks>
            Test can be used for testing the print quality of 2D matrix barcodes (Aztec,
            DataMatrix, QR Code, Micro QR Code). The algorithm of test is based on ISO/IEC 15415.
            Test allows to evaluate the barcode's print quality using the following parameters:<br />
            <ul>
            <li><see cref="P:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityTest.DecodeGrade">Decode</see></li>
            <li><see cref="P:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityTest.MaxReflectance">Max Reflectance (Rmax)</see></li>
            <li><see cref="P:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityTest.MinReflectance">Min Reflectance (Rmin)</see></li>
            <li><see cref="P:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityTest.SymbolContrast">Symbol Contrast (SC)</see></li>
            <li><see cref="P:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityTest.ModulationGrade">Modulation (MOD)</see></li>
            <li><see cref="P:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityTest.ReflectanceMarginGrade">Reflectance Margin</see></li>
            <li><see cref="P:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityTest.FixedPatternDamageGrade">Fixed Pattern Damage</see></li>
            <li><see cref="P:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityTest.AxialNonuniformityGrade">Axial Nonuniformity</see></li>
            <li><see cref="P:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityTest.GridNonuniformityGrade">Grid Nonuniformity</see></li>
            <li><see cref="P:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityTest.UnusedErrorCorrection">Unused Error Correction (UEC)</see></li>
            <li><see cref="P:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityTest.QuietZone">Quiet zone</see></li>
            <li><see cref="P:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityTest.AdditionalGrades">Additional grades (depends from barcode symbology)</see></li>
            <li><see cref="P:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityTest.DistortionAngle">Distortion angle (informative)</see></li>
            </ul>
            <br />
            Also test can be used for testing the print quality of 2D multi-row barcodes with
            cross-row scanning ability (PDF417, PDF417Compact, MicroPDF417).
            The algorithm of test is based on ISO/IEC 15415.
            Test allows to evaluate the barcode's print quality using the following parameters:<br />
            <ul>
            <li><see cref="P:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityTest.DecodeGrade">Decode</see></li>
            <li><see cref="P:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityTest.StartPatternTestGrade">ISO15416 Start/RAP pattern test</see></li>
            <li><see cref="P:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityTest.CenterPatternTestGrade">ISO15416 Center (RAP) pattern test</see></li>
            <li><see cref="P:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityTest.StopPatternTestGrade">ISO15416 Stop/RAP pattern test</see></li>
            <li><see cref="P:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityTest.UnusedErrorCorrection">Unused Error Correction (UEC)</see></li>
            <li><see cref="P:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityTest.CodewordYieldGrade">Codeword Yield</see></li>
            <li><see cref="P:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityTest.CodewordPrintQualityGrade">Codeword Print Quality</see></li>
            <li><see cref="P:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityTest.QuietZone">Quiet zone</see></li>
            <li><see cref="P:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityTest.DistortionAngle">Distortion angle (informative)</see></li>
            </ul>
            <br />
            </remarks>
            <example>
            Here is an example that demonstrates how to test print quality of 
            matrix 2D barcodes (Aztec, DataMatrix, QR and MicroQR) and 
            multi-row 2D barcodes (PDF417, PDF417Compact and MicroPDF417):
            <code lang="VB.NET">   
            Imports System.IO   
            Imports System.Windows.Media.Imaging   
               
            Imports Vintasoft.WpfBarcode   
            Imports Vintasoft.WpfBarcode.BarcodeInfo   
            Imports Vintasoft.WpfBarcode.QualityTests   
               
            ''' &lt;summary&gt;   
            ''' Test that shows how to test print quality of matrix 2D barcodes    
            ''' (Aztec, DataMatrix, QR and MicroQR).   
            ''' &lt;/summary&gt;   
            Class ISO15415QualityTestMatrixExample   
            	''' &lt;summary&gt;   
            	''' Run the test.   
            	''' &lt;/summary&gt;   
            	Public Shared Sub Test()   
            		' load image with barcode from file   
            		Using imageFileStream As Stream = New FileStream("test1.jpg", FileMode.Open, FileAccess.Read)   
            			Dim barcodeImage As New BitmapImage()   
            			barcodeImage.BeginInit()   
            			barcodeImage.StreamSource = imageFileStream   
            			barcodeImage.EndInit()   
            			' read barcodes from image and test print quality of 2D barcodes   
               
            			TestBarcodePrintQuality(barcodeImage)   
            		End Using   
            	End Sub   
               
            	''' &lt;summary&gt;   
            	''' Read barcodes from image and test print quality of 2D barcodes.   
            	''' &lt;/summary&gt;   
            	Private Shared Sub TestBarcodePrintQuality(imageWithBarcodes As BitmapSource)   
            		' create the barcode reader   
            		Using reader As New BarcodeReader()   
            			' specify that reader must collect information for quality test   
            			reader.Settings.CollectTestInformation = True   
               
            			' specify that reader must search for Aztec, DataMatrix, QR and MicroQR barcodes only   
            			reader.Settings.ScanBarcodeTypes = BarcodeType.Aztec Or BarcodeType.DataMatrix Or BarcodeType.QR Or BarcodeType.MicroQR   
               
            			' read barcodes   
            			Dim barcodeInfos As IBarcodeInfo() = reader.ReadBarcodes(imageWithBarcodes)   
               
            			' for each found barcode   
            			For i As Integer = 0 To barcodeInfos.Length - 1   
            				' test print quality of barcode using ISO 15415 test   
            				Dim test As New ISO15415QualityTest(DirectCast(barcodeInfos(i), BarcodeInfo2D), imageWithBarcodes)   
               
            				' print results of ISO 15415 test   
               
            				Console.WriteLine(String.Format("[{0}] {1}", barcodeInfos(i).BarcodeType, barcodeInfos(i).Value))   
            				Console.WriteLine(String.Format("Decode                                  : {0}", GradeToString(test.DecodeGrade)))   
            				Console.WriteLine(String.Format("Unused error correction                 : {0} ({1}%)", GradeToString(test.UnusedErrorCorrectionGrade), test.UnusedErrorCorrection))   
            				Console.WriteLine(String.Format("Symbol contrast                         : {0} ({1}%)", GradeToString(test.SymbolContrastGrade), test.SymbolContrast))   
            				Console.WriteLine(String.Format("Axial nonuniformity                     : {0} ({1})", GradeToString(test.AxialNonuniformityGrade), test.AxialNonuniformity))   
            				Console.WriteLine(String.Format("Grid nonuniformity                      : {0} ({1} cell)", GradeToString(test.GridNonuniformityGrade), test.GridNonuniformity))   
            				Console.WriteLine(String.Format("Modulation                              : {0}", GradeToString(test.ModulationGrade)))   
            				Console.WriteLine(String.Format("Reflectance margin                      : {0}", GradeToString(test.ReflectanceMarginGrade)))   
            				Console.WriteLine(String.Format("Fixed pattern damage                    : {0}", GradeToString(test.FixedPatternDamageGrade)))   
            				For Each name As String In test.AdditionalGrades.Keys   
            					Console.WriteLine(String.Format("{0}: {1}", name.PadRight(40, " "C), GradeToString(test.AdditionalGrades(name))))   
            				Next   
            				If test.QuietZone &gt;= 0 Then   
            					Console.WriteLine(String.Format("Quiet zone                              : {0} ({1} %)", GradeToString(test.QuietZoneGrade), test.QuietZone))   
            				End If   
            				Console.WriteLine(String.Format("Distortion angle (informative)          : {0}°", test.DistortionAngle))   
            				Console.WriteLine(String.Format("-------------Scan grade                 : {0}", GradeToString(test.ScanGrade)))   
            				Console.WriteLine()   
            			Next   
            		End Using   
            	End Sub   
               
            	''' &lt;summary&gt;   
            	''' Converts ISO15415 quality grade into string value.   
            	''' &lt;/summary&gt;   
            	Private Shared Function GradeToString(grade As ISO15415QualityGrade) As String   
            		Return String.Format("{0}({1})", CInt(grade).ToString(), grade)   
            	End Function   
            End Class   
            
            </code>
            <code lang="VB.NET">   
            Imports System.IO   
            Imports System.Windows.Media.Imaging   
               
            Imports Vintasoft.WpfBarcode   
            Imports Vintasoft.WpfBarcode.BarcodeInfo   
            Imports Vintasoft.WpfBarcode.QualityTests   
               
            ''' &lt;summary&gt;   
            ''' Test that shows how to test print quality of multi-row 2D barcodes   
            ''' (PDF417, PDF417Compact and MicroPDF417).   
            ''' &lt;/summary&gt;   
            Class ISO15415QualityTestMultiRowExample   
            	''' &lt;summary&gt;   
            	''' Run the test.   
            	''' &lt;/summary&gt;   
            	Public Shared Sub Test()   
            		' load image with barcode from file   
            		Using imageFileStream As Stream = New FileStream("test1.jpg", FileMode.Open, FileAccess.Read)   
            			Dim barcodeImage As New BitmapImage()   
            			barcodeImage.BeginInit()   
            			barcodeImage.StreamSource = imageFileStream   
            			barcodeImage.EndInit()   
            			' read barcodes from image and test print quality of 2D barcodes   
               
            			TestBarcodePrintQuality(barcodeImage)   
            		End Using   
            	End Sub   
               
            	''' &lt;summary&gt;   
            	''' Read barcodes from image and test print quality of 2D barcodes.   
            	''' &lt;/summary&gt;   
            	Private Shared Sub TestBarcodePrintQuality(imageWithBarcodes As BitmapSource)   
            		' create the barcode reader   
            		Using reader As New BarcodeReader()   
            			' specify that reader must collect information for quality test   
            			reader.Settings.CollectTestInformation = True   
               
            			' specify that reader must search for PDF417, PDF417Compact and MicroPDF417 barcodes only   
            			reader.Settings.ScanBarcodeTypes = BarcodeType.PDF417 Or BarcodeType.PDF417Compact Or BarcodeType.MicroPDF417   
               
            			' read barcodes   
            			Dim barcodeInfos As IBarcodeInfo() = reader.ReadBarcodes(imageWithBarcodes)   
               
            			' for each found barcode   
            			For i As Integer = 0 To barcodeInfos.Length - 1   
            				' test print quality of barcode using ISO 15415 test   
            				Dim test As New ISO15415QualityTest(DirectCast(barcodeInfos(i), BarcodeInfo2D), imageWithBarcodes)   
               
            				' print results of ISO 15415 test   
               
            				Console.WriteLine(String.Format("[{0}] {1}", barcodeInfos(i).BarcodeType, barcodeInfos(i).Value))   
            				Console.WriteLine(String.Format("Decode                 : {0}", GradeToString(test.DecodeGrade)))   
            				Console.WriteLine(String.Format("Unused error correction: {0} ({1}%)", GradeToString(test.UnusedErrorCorrectionGrade), test.UnusedErrorCorrection))   
            				If test.StartPatternTestGrade &lt;&gt; ISO15415QualityGrade.Unavailable Then   
            					Console.WriteLine(String.Format("Start pattern test:      {0}", GradeToString(test.StartPatternTestGrade), test.StartPatternTestGrade))   
            				End If   
            				If test.CenterPatternTestGrade &lt;&gt; ISO15415QualityGrade.Unavailable Then   
            					Console.WriteLine(String.Format("Center pattern test:     {0}", GradeToString(test.CenterPatternTestGrade), test.CenterPatternTest))   
            				End If   
            				If test.CenterPatternTestGrade &lt;&gt; ISO15415QualityGrade.Unavailable Then   
            					Console.WriteLine(String.Format("Stop pattern test:       {0}", GradeToString(test.CenterPatternTestGrade), test.CenterPatternTestGrade))   
            				End If   
            				Console.WriteLine(String.Format("Codeword yield:          {0}", GradeToString(test.CodewordYieldGrade), test.CodewordYieldGrade))   
            				Console.WriteLine(String.Format("Codeword print quality:  {0}", GradeToString(test.CodewordPrintQualityGrade), test.CodewordPrintQualityGrade))   
            				If test.QuietZone &gt;= 0 Then   
            					Console.WriteLine(String.Format("Quiet zone:              {0} ({1} %)", GradeToString(test.QuietZoneGrade), test.QuietZone))   
            				End If   
            				Console.WriteLine(String.Format("Distortion angle:        {0}°", test.DistortionAngle))   
            				Console.WriteLine(String.Format("-------------Scan grade: {0}", GradeToString(test.ScanGrade)))   
            				Console.WriteLine()   
            			Next   
            		End Using   
            	End Sub   
               
            	''' &lt;summary&gt;   
            	''' Converts ISO15415 quality grade into string value.   
            	''' &lt;/summary&gt;   
            	Private Shared Function GradeToString(grade As ISO15415QualityGrade) As String   
            		Return String.Format("{0}({1})", CInt(grade).ToString(), grade)   
            	End Function   
            End Class   
            
            </code>
            <code lang="C#">
            using System;
            using System.IO;
            using System.Windows.Media.Imaging;
            
            using Vintasoft.WpfBarcode;
            using Vintasoft.WpfBarcode.BarcodeInfo;
            using Vintasoft.WpfBarcode.QualityTests;
            
            /// &lt;summary&gt;
            /// Test that shows how to test print quality of matrix 2D barcodes 
            /// (Aztec, DataMatrix, QR and MicroQR).
            /// &lt;/summary&gt;
            class ISO15415QualityTestMatrixExample
            {
                /// &lt;summary&gt;
                /// Run the test.
                /// &lt;/summary&gt;
                public static void Test()
                {
                    // load image with barcode from file
                    using (Stream imageFileStream = new FileStream("test1.jpg", FileMode.Open, FileAccess.Read))
                    {
                        BitmapImage barcodeImage = new BitmapImage();
                        barcodeImage.BeginInit();
                        barcodeImage.StreamSource = imageFileStream;
                        barcodeImage.EndInit();
                        // read barcodes from image and test print quality of 2D barcodes
            
                        TestBarcodePrintQuality(barcodeImage);
                    }
                }
                
                /// &lt;summary&gt;
                /// Read barcodes from image and test print quality of 2D barcodes.
                /// &lt;/summary&gt;
                static void TestBarcodePrintQuality(BitmapSource imageWithBarcodes)
                {
                    // create the barcode reader
                    using (BarcodeReader reader = new BarcodeReader())
                    {
                        // specify that reader must collect information for quality test
                        reader.Settings.CollectTestInformation = true;
            
                        // specify that reader must search for Aztec, DataMatrix, QR and MicroQR barcodes only
                        reader.Settings.ScanBarcodeTypes =
                            BarcodeType.Aztec | BarcodeType.DataMatrix |
                            BarcodeType.QR | BarcodeType.MicroQR;
            
                        // read barcodes
                        IBarcodeInfo[] barcodeInfos = reader.ReadBarcodes(imageWithBarcodes);
            
                        // for each found barcode
                        for (int i = 0; i &lt; barcodeInfos.Length; i++)
                        {
                            // test print quality of barcode using ISO 15415 test
                            ISO15415QualityTest test =
                                new ISO15415QualityTest((BarcodeInfo2D)barcodeInfos[i], imageWithBarcodes);
            
                            // print results of ISO 15415 test
            
                            Console.WriteLine(string.Format("[{0}] {1}",
                                barcodeInfos[i].BarcodeType, barcodeInfos[i].Value));
                            Console.WriteLine(string.Format("Decode                                  : {0}",
                                GradeToString(test.DecodeGrade)));
                            Console.WriteLine(string.Format("Unused error correction                 : {0} ({1}%)",
                                GradeToString(test.UnusedErrorCorrectionGrade), test.UnusedErrorCorrection));
                            Console.WriteLine(string.Format("Symbol contrast                         : {0} ({1}%)",
                                GradeToString(test.SymbolContrastGrade), test.SymbolContrast));
                            Console.WriteLine(string.Format("Axial nonuniformity                     : {0} ({1})",
                                GradeToString(test.AxialNonuniformityGrade), test.AxialNonuniformity));
                            Console.WriteLine(string.Format("Grid nonuniformity                      : {0} ({1} cell)",
                                GradeToString(test.GridNonuniformityGrade), test.GridNonuniformity));
                            Console.WriteLine(string.Format("Modulation                              : {0}",
                                GradeToString(test.ModulationGrade)));
                            Console.WriteLine(string.Format("Reflectance margin                      : {0}",
                                GradeToString(test.ReflectanceMarginGrade)));
                            Console.WriteLine(string.Format("Fixed pattern damage                    : {0}",
                                GradeToString(test.FixedPatternDamageGrade)));
                            foreach (string name in test.AdditionalGrades.Keys)
                                Console.WriteLine(string.Format("{0}: {1}",
                                    name.PadRight(40, ' '), GradeToString(test.AdditionalGrades[name])));
                            if (test.QuietZone &gt;= 0)
                                Console.WriteLine(string.Format("Quiet zone                              : {0} ({1} %)",
                                    GradeToString(test.QuietZoneGrade), test.QuietZone));
                            Console.WriteLine(string.Format("Distortion angle (informative)          : {0}°",
                                test.DistortionAngle));
                            Console.WriteLine(string.Format("-------------Scan grade                 : {0}",
                                GradeToString(test.ScanGrade)));
                            Console.WriteLine();
                        }
                    }
                }
            
                /// &lt;summary&gt;
                /// Converts ISO15415 quality grade into string value.
                /// &lt;/summary&gt;
                static string GradeToString(ISO15415QualityGrade grade)
                {
                    return string.Format("{0}({1})", ((int)grade).ToString(), grade);
                }
            }
            
            </code>
            <code lang="C#">
            using System;
            using System.IO;
            using System.Windows.Media.Imaging;
            
            using Vintasoft.WpfBarcode;
            using Vintasoft.WpfBarcode.BarcodeInfo;
            using Vintasoft.WpfBarcode.QualityTests;
            
            /// &lt;summary&gt;
            /// Test that shows how to test print quality of multi-row 2D barcodes
            /// (PDF417, PDF417Compact and MicroPDF417).
            /// &lt;/summary&gt;
            class ISO15415QualityTestMultiRowExample
            {
                /// &lt;summary&gt;
                /// Run the test.
                /// &lt;/summary&gt;
                public static void Test()
                {
                    // load image with barcode from file
                    using (Stream imageFileStream = new FileStream("test1.jpg", FileMode.Open, FileAccess.Read))
                    {
                        BitmapImage barcodeImage = new BitmapImage();
                        barcodeImage.BeginInit();
                        barcodeImage.StreamSource = imageFileStream;
                        barcodeImage.EndInit();
                        // read barcodes from image and test print quality of 2D barcodes
            
                        TestBarcodePrintQuality(barcodeImage);
                    }
                }
                
                /// &lt;summary&gt;
                /// Read barcodes from image and test print quality of 2D barcodes.
                /// &lt;/summary&gt;
                static void TestBarcodePrintQuality(BitmapSource imageWithBarcodes)
                {
                    // create the barcode reader
                    using (BarcodeReader reader = new BarcodeReader())
                    {
                        // specify that reader must collect information for quality test
                        reader.Settings.CollectTestInformation = true;
            
                        // specify that reader must search for PDF417, PDF417Compact and MicroPDF417 barcodes only
                        reader.Settings.ScanBarcodeTypes =
                            BarcodeType.PDF417 | BarcodeType.PDF417Compact | BarcodeType.MicroPDF417;
            
                        // read barcodes
                        IBarcodeInfo[] barcodeInfos = reader.ReadBarcodes(imageWithBarcodes);
            
                        // for each found barcode
                        for (int i = 0; i &lt; barcodeInfos.Length; i++)
                        {
                            // test print quality of barcode using ISO 15415 test
                            ISO15415QualityTest test =
                                new ISO15415QualityTest((BarcodeInfo2D)barcodeInfos[i], imageWithBarcodes);
            
                            // print results of ISO 15415 test
            
                            Console.WriteLine(string.Format("[{0}] {1}",
                                barcodeInfos[i].BarcodeType, barcodeInfos[i].Value));
                            Console.WriteLine(string.Format("Decode                 : {0}",
                                GradeToString(test.DecodeGrade)));
                            Console.WriteLine(string.Format("Unused error correction: {0} ({1}%)",
                                GradeToString(test.UnusedErrorCorrectionGrade), test.UnusedErrorCorrection));
                            if (test.StartPatternTestGrade != ISO15415QualityGrade.Unavailable)
                                Console.WriteLine(string.Format("Start pattern test:      {0}",
                                    GradeToString(test.StartPatternTestGrade), test.StartPatternTestGrade));
                            if (test.CenterPatternTestGrade != ISO15415QualityGrade.Unavailable)
                                Console.WriteLine(string.Format("Center pattern test:     {0}",
                                    GradeToString(test.CenterPatternTestGrade), test.CenterPatternTest));
                            if (test.CenterPatternTestGrade != ISO15415QualityGrade.Unavailable)
                                Console.WriteLine(string.Format("Stop pattern test:       {0}",
                                    GradeToString(test.CenterPatternTestGrade), test.CenterPatternTestGrade));
                            Console.WriteLine(string.Format("Codeword yield:          {0}",
                                GradeToString(test.CodewordYieldGrade), test.CodewordYieldGrade));
                            Console.WriteLine(string.Format("Codeword print quality:  {0}",
                                GradeToString(test.CodewordPrintQualityGrade), test.CodewordPrintQualityGrade));
                            if (test.QuietZone &gt;= 0)
                                Console.WriteLine(string.Format("Quiet zone:              {0} ({1} %)",
                                    GradeToString(test.QuietZoneGrade), test.QuietZone));
                            Console.WriteLine(string.Format("Distortion angle:        {0}°",
                                test.DistortionAngle));
                            Console.WriteLine(string.Format("-------------Scan grade: {0}",
                                GradeToString(test.ScanGrade)));
                            Console.WriteLine();
                        }
                    }
                }
            
                /// &lt;summary&gt;
                /// Converts ISO15415 quality grade into string value.
                /// &lt;/summary&gt;
                static string GradeToString(ISO15415QualityGrade grade)
                {
                    return string.Format("{0}({1})", ((int)grade).ToString(), grade);
                }
            }
            
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityTest.#ctor(Vintasoft.WpfBarcode.BarcodeInfo.BarcodeInfo2D,System.Windows.Media.Imaging.BitmapSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityTest" /> class. 
            </summary>
            <param name="barcodeInfo">Information about barcode.</param>
            <param name="barcodeImage">Image with barcodes.</param>
            <example>
            Please see example <see cref="T:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityTest">here</see>.
            </example>
        </member>
        <member name="M:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityTest.#ctor(Vintasoft.WpfBarcode.BarcodeInfo.BarcodeInfo2D,System.Windows.Media.Imaging.BitmapSource,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityTest" /> class. 
            </summary>
            <param name="barcodeInfo">Information about barcode.</param>
            <param name="barcodeImage">Image with barcodes.</param>
            <param name="invertBarcodeImage">Indicates whether the quality test must invert image colors.</param>        
            <example>
            Please see example <see cref="T:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityTest">here</see>.
            </example>
        </member>
        <member name="P:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityTest.ScanGrade">
            <summary>
            Gets a grade of Scan.
            </summary>
            <remarks>The grade of scan calculates as the lowest grade from all calculated grades.</remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityTest.DecodeGrade">
            <summary>
            Gets a grade of Decode.
            </summary>
            <remarks>
            The Decode parameter tests, on a Pass/Fail basis, whether the symbol has all its
            features sufficiently correct to be readable.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityTest.MaxReflectance">
            <summary>
            Gets a max reflectance, in percents of reflectance.
            </summary>
            <remarks>
            Highest reflectance of any sample area in a two-dimensional matrix symbol.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityTest.MinReflectance">
            <summary>
            Gets a min reflectance, in percents of reflectance.
            </summary>
            <remarks>
            Lowest reflectance of any sample area in a two-dimensional matrix symbol.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityTest.GlobalThreshold">
            <summary>
            Gets a global threshold (GT), in percents of reflectance.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityTest.SymbolContrast">
            <summary>
            Gets a Symbol contrast.
            </summary>
            <remarks>
            Difference between the highest and lowest reflectance
            value in the symbol region.</remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityTest.SymbolContrastGrade">
            <summary>
            Gets a grade of <see cref="P:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityTest.SymbolContrast" />.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityTest.ModulationGrade">
            <summary>
            Gets a grade of Modulation.
            </summary>
            <remarks>
            Modulation is a measure of the uniformity of reflectance of 
            the dark and light modules respectively. Factors such as print growth
            (or loss), misplacement of a module relative to the grid intersection,
            the optical characteristics of the substrate and uneven printing may 
            reduce the difference between the reflectance of a module and the 
            <see cref="P:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityTest.GlobalThreshold" />. A low Modulation may
            increase the probability of a module being incorrectly identified as dark 
            or light.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityTest.ContrastUniformity">
            <summary>
            Gets the contrast uniformity.
            </summary>
            <value>
            Contrast Uniformity is defined as the minimum MOD value found in 
            any module contained in the data region of the symbol.
            </value>
            <remarks>
            Contrast Uniformity is an optional parameter that can be a useful 
            process control tool for measuring localized contrast variations.
            Contrast Uniformity does not affect the overall grade.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityTest.ReflectanceMarginGrade">
            <summary>
            Gets a grade of Reflectance Margin.
            </summary>
            <remarks>
            Reflectance Margin is a measure of how well each module 
            is correctly distinguishable as light or dark in comparison
            to the global threshold. Factors such as print growth (or loss),
            misplacement of a module relative to the grid intersection, the 
            optical characteristics of the substrate, uneven printing, or 
            encodation errors, may reduce or even eliminate the margin for 
            error between the reflectance of a module and the <see cref="P:Vintasoft.WpfBarcode.IBarcodeInfo.Threshold">Threshold</see>. 
            A low Reflectance Margin may increase the probability of a module 
            being incorrectly identified as dark or light.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityTest.FixedPatternDamageGrade">
            <summary>
            Gets a grade of Fixed Pattern Damage.
            </summary>
            <remarks>
            This parameter tests that damage to the finder pattern, 
            quiet zone, timing, navigation and other fixed patterns in 
            a symbol does not reduce unacceptably the ability of the reference 
            decode algorithm to locate and identify the symbol within the field 
            of view, by inverting the apparent state of one or more modules from 
            light to dark or vice versa.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityTest.AxialNonuniformity">
            <summary>
            Gets an Axial Nonuniformity.
            </summary>
            <remarks>
            Axial Nonuniformity measures the spacing
            of the mapping centres, i.e. the sampling points, or 
            intersections of the grid obtained by applying the reference 
            decode algorithm to the binarized image, in the direction of 
            each of the grid’s major axes. Axial Nonuniformity tests for
            uneven scaling of the symbol which would hinder readability at 
            some non-normal viewing angles more than at others.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityTest.AxialNonuniformityGrade">
            <summary>
            Gets a grade of <see cref="P:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityTest.AxialNonuniformity" />.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityTest.GridNonuniformity">
            <summary>
            Gets a Grid Nonuniformity.
            </summary>
            <remarks>
            Grid Nonuniformity measures the largest vector 
            deviation of the grid intersections, determined by the reference
            decode algorithm from the binarized image of a given symbol,
            from their ideal theoretical position.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityTest.GridNonuniformityGrade">
            <summary>
            Gets a grade of <see cref="P:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityTest.GridNonuniformity" />.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityTest.UnusedErrorCorrection">
            <summary>
            Gets an Unused Error Correction.
            </summary>
            <remarks>
            The Unused Error Correction parameter tests the extent to which regional 
            or spot damage in the symbol has eroded the reading safety margin that error
            correction provides.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityTest.UnusedErrorCorrectionGrade">
            <summary>
            Gets a grade of <see cref="P:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityTest.UnusedErrorCorrection" />.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityTest.StartPatternTest">
            <summary>
            Gets a ISO15516 Start/RAP pattern test for multi-row symbologies (PDF417/MicroPDF417). 
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityTest.StartPatternTestGrade">
            <summary>
            Gets a grade of <see cref="P:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityTest.StartPatternTest" />.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityTest.StopPatternTest">
            <summary>
            Gets a ISO15516 Stop/RAP pattern test for multi-row symbologies (PDF417/MicroPDF417). 
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityTest.StopPatternTestGrade">
            <summary>
            Gets a grade of <see cref="P:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityTest.StopPatternTest" />.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityTest.CenterPatternTest">
            <summary>
            Gets a ISO15516 Center/RAP pattern test for multi-row symbologies (MicroPDF417). 
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityTest.CenterPatternTestGrade">
            <summary>
            Gets a grade of <see cref="P:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityTest.CenterPatternTest" />.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityTest.CodewordYield">
            <summary>
            Gets the efficiency with which linear scans can recover data from a two-dimensional
            multi-row symbol.
            </summary>
            <remarks>
            The Codeword Yield is the number of validly decoded codewords expressed as a
            percentage of the maximum number of codewords that could have been decoded
            (after adjusting for tilt). A poor Codeword Yield, for a symbol whose other measurements
            are good, may indicate a Y-axis print quality problem.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityTest.CodewordYieldGrade">
            <summary>
            Gets a grade of <see cref="P:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityTest.CodewordYield" />.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityTest.CodewordPrintQualityModulationGrade">
            <summary>
            Gets a Codeword Print Quality Grade based on codeword modulation
            for a two-dimensional multi-row symbol.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityTest.CodewordPrintQualityDefectsGrade">
            <summary>
            Gets a Codeword Print Quality Grade based on codeword defects
            for a two-dimensional multi-row symbol.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityTest.CodewordPrintQualityDecodabilityGrade">
            <summary>
            Gets a Codeword Print Quality Grade based on codeword decodability
            for a two-dimensional multi-row symbol.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityTest.CodewordPrintQualityGrade">
            <summary>
            Gets a Codeword Print Quality Grade for a two-dimensional multi-row symbol.
            </summary>
            <value>
            Value of this grade is minimum of 
            <see cref="P:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityTest.CodewordPrintQualityModulationGrade" />, 
            <see cref="P:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityTest.CodewordPrintQualityDefectsGrade" /> and
            <see cref="P:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityTest.CodewordPrintQualityDecodabilityGrade" />.
            </value>
        </member>
        <member name="P:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityTest.SymbolIso15416QualityTest">
            <summary>
            Gets an informative ISO15416 Quality Test for a two-dimensional multi-row symbol.
            </summary>
            <remarks>
            The results of this test are not included in the overall assessment.
            This test can be used by user for information about
            the properties Rmin, Rmax, Modulation and Defects.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityTest.QuietZone">
            <summary>
            Gets the quiet zone, in percents, that requires barcode symbology specification.
            </summary>
            <value>
            <ul>
            <li><b>100</b> - quiet zone is fully conform the specification</li>
            <li>X - quiet zone is NOT fully conform the specification</li>
            <li><b>0</b> - quiet zone is absent completely</li>
            </ul>
            </value>
            <remarks>
            Different barcode symbologies require different quiet zone size, in single modules:
            <ul>
            <li>DataMatrix - 1X</li>
            <li>QR Code - 4X</li>
            <li>Micro QR Code - 2X</li>
            <li>PDF417 - 2X</li>
            <li>PDF417 Compact - 2X</li>
            <li>Micro PDF417 - 1X</li>
            <li>Aztec - not required.</li>
            </ul>
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityTest.QuietZoneGrade">
            <summary>
            Gets a grade of <see cref="P:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityTest.QuietZone" />.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityTest.DistortionAngle">
            <summary>
            Gets the distortion angle of barcode matrix.
            </summary>
            <remarks>
            <b>This parameter is informative.</b>
            The angle of distortion is the amount of deviation from a 90° 
            relation between row and column of barcode matrix, or X and Y axes.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityTest.AdditionalGrades">
            <summary>
            Gets the additional grades that depends from barcode symbology.
            </summary>
            <remarks>
            Additional grades for Data Matrix barcode (defined in ISO 16022 Annex M):
            <ul>
            <li><b>FixedPatternDamage.L1</b> - Grade of segment L1 (see below).</li>
            <li><b>FixedPatternDamage.L2</b> - Grade of segment L2 (see below).</li>
            <li><b>FixedPatternDamage.QZL1</b> - Grade of segment QZL1 (see below).</li>
            <li><b>FixedPatternDamage.QZL2</b> - Grade of segment QZL2 (see below).</li>
            <li><b>FixedPatternDamage.Segment_X_Y_Top</b> - Grade of top alignment 
            patterns (clock track and solid area) of data region located by specified indexes (X, Y).</li>
            <li><b>FixedPatternDamage.Segment_X_Y_Right</b> - Grade of right alignment 
            patterns (clock track and solid area) of data region located by specified indexes (X, Y).</li>
            <li><b>FixedPatternDamage.ClockAndSolidArea</b> - Grade of all alignment patterns of data regions.</li>
            <li><b>FixedPatternDamage.AG</b> - Grade of average grade of L1, L2, QZL1, QZL2, ClockAndSolidArea.</li>
            </ul>
            <br />
            Segment L1 is the vertical portion of the L and extends to the module in 
            the quiet zone adjacent to the L corner. Segment L2 is the horizontal
            portion of the L and extends to the module in the quiet zone adjacent to 
            the L corner. Segments QZL1 and QZL2 are the portions of the quiet zone 
            adjacent to L1 and L2 respectively and extend one module beyond
            the end of L1 and L2 respectively, furthest from the corner.
            <br />
            <br />
            Additional grades for Han Xin Code Matrix barcode (defined in specification):
            <ul>
            <li><b>FixedPatternDamage.A1</b> - Grade of 11x11 in
            symbol left top corner (finder pattern and quiet zone).</li>
            <li><b>FixedPatternDamage.A2</b> - Grade of 11x11 in
            symbol right top corner (finder pattern and quiet zone).</li>
            <li><b>FixedPatternDamage.A3</b> - Grade of 11x11 in
            symbol right bottom corner (finder pattern and quiet zone).</li>
            <li><b>FixedPatternDamage.A4</b> - Grade of 11x11 in
            symbol left bottom corner (finder pattern and quiet zone).</li>
            <li><b>FixedPatternDamage.B</b> - Grade of Alignment Pattern and
            Assistant Alignment Pattern.</li>
            <li><b>StructuralInformationRegion.Region1</b> - Grade of Structural
            Information Region 1 (left top and right top).</li>
            <li><b>StructuralInformationRegion.Region2</b> - Grade of Structural
            Information Region 1 (left bottom and right bottom).</li>
            <li><b>StructuralInformationRegion.Region</b> - Grade of Structural
            Information Region 1 and Region 2.</li>
            </ul>
            </remarks>
            <example>
            Here is an example that demonstrates how to test print quality of 
            matrix 2D barcodes (Aztec, DataMatrix, QR and MicroQR):
            <code lang="VB.NET">   
            Imports System.IO   
            Imports System.Windows.Media.Imaging   
               
            Imports Vintasoft.WpfBarcode   
            Imports Vintasoft.WpfBarcode.BarcodeInfo   
            Imports Vintasoft.WpfBarcode.QualityTests   
               
            ''' &lt;summary&gt;   
            ''' Test that shows how to test print quality of matrix 2D barcodes    
            ''' (Aztec, DataMatrix, QR and MicroQR).   
            ''' &lt;/summary&gt;   
            Class ISO15415QualityTestMatrixExample   
            	''' &lt;summary&gt;   
            	''' Run the test.   
            	''' &lt;/summary&gt;   
            	Public Shared Sub Test()   
            		' load image with barcode from file   
            		Using imageFileStream As Stream = New FileStream("test1.jpg", FileMode.Open, FileAccess.Read)   
            			Dim barcodeImage As New BitmapImage()   
            			barcodeImage.BeginInit()   
            			barcodeImage.StreamSource = imageFileStream   
            			barcodeImage.EndInit()   
            			' read barcodes from image and test print quality of 2D barcodes   
               
            			TestBarcodePrintQuality(barcodeImage)   
            		End Using   
            	End Sub   
               
            	''' &lt;summary&gt;   
            	''' Read barcodes from image and test print quality of 2D barcodes.   
            	''' &lt;/summary&gt;   
            	Private Shared Sub TestBarcodePrintQuality(imageWithBarcodes As BitmapSource)   
            		' create the barcode reader   
            		Using reader As New BarcodeReader()   
            			' specify that reader must collect information for quality test   
            			reader.Settings.CollectTestInformation = True   
               
            			' specify that reader must search for Aztec, DataMatrix, QR and MicroQR barcodes only   
            			reader.Settings.ScanBarcodeTypes = BarcodeType.Aztec Or BarcodeType.DataMatrix Or BarcodeType.QR Or BarcodeType.MicroQR   
               
            			' read barcodes   
            			Dim barcodeInfos As IBarcodeInfo() = reader.ReadBarcodes(imageWithBarcodes)   
               
            			' for each found barcode   
            			For i As Integer = 0 To barcodeInfos.Length - 1   
            				' test print quality of barcode using ISO 15415 test   
            				Dim test As New ISO15415QualityTest(DirectCast(barcodeInfos(i), BarcodeInfo2D), imageWithBarcodes)   
               
            				' print results of ISO 15415 test   
               
            				Console.WriteLine(String.Format("[{0}] {1}", barcodeInfos(i).BarcodeType, barcodeInfos(i).Value))   
            				Console.WriteLine(String.Format("Decode                                  : {0}", GradeToString(test.DecodeGrade)))   
            				Console.WriteLine(String.Format("Unused error correction                 : {0} ({1}%)", GradeToString(test.UnusedErrorCorrectionGrade), test.UnusedErrorCorrection))   
            				Console.WriteLine(String.Format("Symbol contrast                         : {0} ({1}%)", GradeToString(test.SymbolContrastGrade), test.SymbolContrast))   
            				Console.WriteLine(String.Format("Axial nonuniformity                     : {0} ({1})", GradeToString(test.AxialNonuniformityGrade), test.AxialNonuniformity))   
            				Console.WriteLine(String.Format("Grid nonuniformity                      : {0} ({1} cell)", GradeToString(test.GridNonuniformityGrade), test.GridNonuniformity))   
            				Console.WriteLine(String.Format("Modulation                              : {0}", GradeToString(test.ModulationGrade)))   
            				Console.WriteLine(String.Format("Reflectance margin                      : {0}", GradeToString(test.ReflectanceMarginGrade)))   
            				Console.WriteLine(String.Format("Fixed pattern damage                    : {0}", GradeToString(test.FixedPatternDamageGrade)))   
            				For Each name As String In test.AdditionalGrades.Keys   
            					Console.WriteLine(String.Format("{0}: {1}", name.PadRight(40, " "C), GradeToString(test.AdditionalGrades(name))))   
            				Next   
            				If test.QuietZone &gt;= 0 Then   
            					Console.WriteLine(String.Format("Quiet zone                              : {0} ({1} %)", GradeToString(test.QuietZoneGrade), test.QuietZone))   
            				End If   
            				Console.WriteLine(String.Format("Distortion angle (informative)          : {0}°", test.DistortionAngle))   
            				Console.WriteLine(String.Format("-------------Scan grade                 : {0}", GradeToString(test.ScanGrade)))   
            				Console.WriteLine()   
            			Next   
            		End Using   
            	End Sub   
               
            	''' &lt;summary&gt;   
            	''' Converts ISO15415 quality grade into string value.   
            	''' &lt;/summary&gt;   
            	Private Shared Function GradeToString(grade As ISO15415QualityGrade) As String   
            		Return String.Format("{0}({1})", CInt(grade).ToString(), grade)   
            	End Function   
            End Class   
            
            </code>
            <code lang="C#">
            using System;
            using System.IO;
            using System.Windows.Media.Imaging;
            
            using Vintasoft.WpfBarcode;
            using Vintasoft.WpfBarcode.BarcodeInfo;
            using Vintasoft.WpfBarcode.QualityTests;
            
            /// &lt;summary&gt;
            /// Test that shows how to test print quality of matrix 2D barcodes 
            /// (Aztec, DataMatrix, QR and MicroQR).
            /// &lt;/summary&gt;
            class ISO15415QualityTestMatrixExample
            {
                /// &lt;summary&gt;
                /// Run the test.
                /// &lt;/summary&gt;
                public static void Test()
                {
                    // load image with barcode from file
                    using (Stream imageFileStream = new FileStream("test1.jpg", FileMode.Open, FileAccess.Read))
                    {
                        BitmapImage barcodeImage = new BitmapImage();
                        barcodeImage.BeginInit();
                        barcodeImage.StreamSource = imageFileStream;
                        barcodeImage.EndInit();
                        // read barcodes from image and test print quality of 2D barcodes
            
                        TestBarcodePrintQuality(barcodeImage);
                    }
                }
                
                /// &lt;summary&gt;
                /// Read barcodes from image and test print quality of 2D barcodes.
                /// &lt;/summary&gt;
                static void TestBarcodePrintQuality(BitmapSource imageWithBarcodes)
                {
                    // create the barcode reader
                    using (BarcodeReader reader = new BarcodeReader())
                    {
                        // specify that reader must collect information for quality test
                        reader.Settings.CollectTestInformation = true;
            
                        // specify that reader must search for Aztec, DataMatrix, QR and MicroQR barcodes only
                        reader.Settings.ScanBarcodeTypes =
                            BarcodeType.Aztec | BarcodeType.DataMatrix |
                            BarcodeType.QR | BarcodeType.MicroQR;
            
                        // read barcodes
                        IBarcodeInfo[] barcodeInfos = reader.ReadBarcodes(imageWithBarcodes);
            
                        // for each found barcode
                        for (int i = 0; i &lt; barcodeInfos.Length; i++)
                        {
                            // test print quality of barcode using ISO 15415 test
                            ISO15415QualityTest test =
                                new ISO15415QualityTest((BarcodeInfo2D)barcodeInfos[i], imageWithBarcodes);
            
                            // print results of ISO 15415 test
            
                            Console.WriteLine(string.Format("[{0}] {1}",
                                barcodeInfos[i].BarcodeType, barcodeInfos[i].Value));
                            Console.WriteLine(string.Format("Decode                                  : {0}",
                                GradeToString(test.DecodeGrade)));
                            Console.WriteLine(string.Format("Unused error correction                 : {0} ({1}%)",
                                GradeToString(test.UnusedErrorCorrectionGrade), test.UnusedErrorCorrection));
                            Console.WriteLine(string.Format("Symbol contrast                         : {0} ({1}%)",
                                GradeToString(test.SymbolContrastGrade), test.SymbolContrast));
                            Console.WriteLine(string.Format("Axial nonuniformity                     : {0} ({1})",
                                GradeToString(test.AxialNonuniformityGrade), test.AxialNonuniformity));
                            Console.WriteLine(string.Format("Grid nonuniformity                      : {0} ({1} cell)",
                                GradeToString(test.GridNonuniformityGrade), test.GridNonuniformity));
                            Console.WriteLine(string.Format("Modulation                              : {0}",
                                GradeToString(test.ModulationGrade)));
                            Console.WriteLine(string.Format("Reflectance margin                      : {0}",
                                GradeToString(test.ReflectanceMarginGrade)));
                            Console.WriteLine(string.Format("Fixed pattern damage                    : {0}",
                                GradeToString(test.FixedPatternDamageGrade)));
                            foreach (string name in test.AdditionalGrades.Keys)
                                Console.WriteLine(string.Format("{0}: {1}",
                                    name.PadRight(40, ' '), GradeToString(test.AdditionalGrades[name])));
                            if (test.QuietZone &gt;= 0)
                                Console.WriteLine(string.Format("Quiet zone                              : {0} ({1} %)",
                                    GradeToString(test.QuietZoneGrade), test.QuietZone));
                            Console.WriteLine(string.Format("Distortion angle (informative)          : {0}°",
                                test.DistortionAngle));
                            Console.WriteLine(string.Format("-------------Scan grade                 : {0}",
                                GradeToString(test.ScanGrade)));
                            Console.WriteLine();
                        }
                    }
                }
            
                /// &lt;summary&gt;
                /// Converts ISO15415 quality grade into string value.
                /// &lt;/summary&gt;
                static string GradeToString(ISO15415QualityGrade grade)
                {
                    return string.Format("{0}({1})", ((int)grade).ToString(), grade);
                }
            }
            
            </code>
            </example>
        </member>
        <member name="T:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityGrade">
            <summary>
            Specifies available grades of quality (ISO 15415).
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityGrade.Unavailable">
            <summary>
            Grade is unavailable.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityGrade.A">
            <summary>
            Grade A (highest).
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityGrade.B">
            <summary>
            Grade B.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityGrade.C">
            <summary>
            Grade C.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityGrade.D">
            <summary>
            Grade D.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.QualityTests.ISO15415QualityGrade.F">
            <summary>
            Grade F (least).
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.QualityTests.ISO15416QualityGrade">
            <summary>
            Specifies available grades of quality (ISO 15416).
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.QualityTests.ISO15416QualityGrade.Unavailable">
            <summary>
            Grade is unavailable.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.QualityTests.ISO15416QualityGrade.A">
            <summary>
            Grade A (highest).
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.QualityTests.ISO15416QualityGrade.B">
            <summary>
            Grade B.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.QualityTests.ISO15416QualityGrade.C">
            <summary>
            Grade C.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.QualityTests.ISO15416QualityGrade.D">
            <summary>
            Grade D.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.QualityTests.ISO15416QualityGrade.F">
            <summary>
            Grade F (least).
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.QualityTests.ISO15416QualityTest">
            <summary>
            ISO/IEC 15416 barcode print quality test for 1D linear barcodes.
            </summary>
            <remarks>
            The algorithm of test is based on ISO/IEC 15416.
            Test allows to evaluate the barcode's print quality using the following parameters:<br />
            <ul>
            <li><see cref="P:Vintasoft.WpfBarcode.QualityTests.ISO15416ScanReflectanceProfile.DecodeGrade">Decode</see></li>
            <li><see cref="P:Vintasoft.WpfBarcode.QualityTests.ISO15416ScanReflectanceProfile.MaxReflectance">Max Reflectance (Rmax)</see></li>
            <li><see cref="P:Vintasoft.WpfBarcode.QualityTests.ISO15416ScanReflectanceProfile.MinReflectanceGrade">Min Reflectance (Rmin)</see></li>
            <li><see cref="P:Vintasoft.WpfBarcode.QualityTests.ISO15416ScanReflectanceProfile.SymbolContrastGrade">Symbol Contrast (SC)</see></li>
            <li><see cref="P:Vintasoft.WpfBarcode.QualityTests.ISO15416ScanReflectanceProfile.MinEdgeContrastGrade">Min Edge Contrast (ECmin)</see></li>
            <li><see cref="P:Vintasoft.WpfBarcode.QualityTests.ISO15416ScanReflectanceProfile.ModulationGrade">Modulation (MOD)</see></li>
            <li><see cref="P:Vintasoft.WpfBarcode.QualityTests.ISO15416ScanReflectanceProfile.MaxElementReflectanceNonUniformity">Max Element Reflectance Non-uniformity (ERNmax)</see></li>
            <li><see cref="P:Vintasoft.WpfBarcode.QualityTests.ISO15416ScanReflectanceProfile.DefectsGrade">Defects</see></li>
            <li><see cref="P:Vintasoft.WpfBarcode.QualityTests.ISO15416ScanReflectanceProfile.DecodabilityGrade">Decodability</see></li>
            </ul>
            </remarks>
            <example>
            <code lang="VB.NET">   
            Imports System.IO   
            Imports System.Windows.Media.Imaging   
               
            Imports Vintasoft.WpfBarcode   
            Imports Vintasoft.WpfBarcode.BarcodeInfo   
            Imports Vintasoft.WpfBarcode.QualityTests   
               
            ''' &lt;summary&gt;   
            ''' Test that shows how to test print quality of 1D barcodes.   
            ''' &lt;/summary&gt;   
            Class ISO15416QualityTestExample   
               
            	''' &lt;summary&gt;   
            	''' Run the test.   
            	''' &lt;/summary&gt;   
            	Public Shared Sub Test()   
            		' load image with barcode from file   
            		Using imageFileStream As Stream = New FileStream("test1.jpg", FileMode.Open, FileAccess.Read)   
            			Dim barcodeImage As New BitmapImage()   
            			barcodeImage.BeginInit()   
            			barcodeImage.StreamSource = imageFileStream   
            			barcodeImage.EndInit()   
               
            			' read barcodes from image and test print quality of 1D barcodes   
            			TestBarcodePrintQuality(barcodeImage)   
            		End Using   
            	End Sub   
               
            	''' &lt;summary&gt;   
            	''' Read barcodes from image and test print quality of 1D barcodes.   
            	''' &lt;/summary&gt;   
            	Private Shared Sub TestBarcodePrintQuality(imageWithBarcodes As BitmapSource)   
            		' create the barcode reader   
            		Using reader As New BarcodeReader()   
            			' specify that reader must collect information for quality test   
            			reader.Settings.CollectTestInformation = True   
               
            			' specify that reader must search for Code39 and Code128 barcodes only   
            			reader.Settings.ScanBarcodeTypes = BarcodeType.Code39 Or BarcodeType.Code128   
               
            			' read barcodes   
            			Dim barcodeInfos As IBarcodeInfo() = reader.ReadBarcodes(imageWithBarcodes)   
               
            			' for each found barcode   
            			For i As Integer = 0 To barcodeInfos.Length - 1   
            				' test print quality of barcode using ISO 15416 test   
            				Dim test As New ISO15416QualityTest(DirectCast(barcodeInfos(i), BarcodeInfo1D), imageWithBarcodes)   
               
            				' print results of ISO 15416 test   
               
            				Console.WriteLine(String.Format("[{0}] {1}", barcodeInfos(i).BarcodeType, barcodeInfos(i).Value))   
            				Console.WriteLine(String.Format("Overall symbol grade:            {0} ({1:f2})", test.OverallSymbolGrade, test.OverallSymbolGradeValue))   
            				If test.DifferentDecodedValues Then   
            					Console.WriteLine("Scan profiles has different barcode decode values!")   
            				End If   
            				If test.SymbolComponentQualityTests.Length = 1 Then   
            					Dim qualityTest As ISO15416SymbolComponentQualityTest = test.SymbolComponentQualityTests(0)   
            					Console.WriteLine(String.Format("Scan reflectance profiles:       {0}", qualityTest.ScanReflectanceProfiles.Length))   
            					Console.WriteLine("Scan reflectance profile grades:")   
            					For j As Integer = 0 To qualityTest.ScanReflectanceProfiles.Length - 1   
            						Console.Write(qualityTest.ScanReflectanceProfiles(j).ScanGrade)   
            					Next   
            				Else   
            					For k As Integer = 0 To test.SymbolComponentQualityTests.Length - 1   
            						Console.WriteLine(String.Format("Symbol component:                {0}", k + 1))   
            						Dim qualityTest As ISO15416SymbolComponentQualityTest = test.SymbolComponentQualityTests(k)   
            						Console.WriteLine(String.Format("Scan reflectance profiles:       {0}", qualityTest.ScanReflectanceProfiles.Length))   
            						Console.WriteLine("Scan reflectance profile grades:")   
            						For j As Integer = 0 To qualityTest.ScanReflectanceProfiles.Length - 1   
            							Console.Write(qualityTest.ScanReflectanceProfiles(j).ScanGrade)   
            						Next   
            					Next   
            				End If   
            				Console.WriteLine()   
            				Console.WriteLine()   
            			Next   
            		End Using   
            	End Sub   
               
            End Class
            </code>
            <code lang="C#">
            using System;
            using System.IO;
            using System.Windows.Media.Imaging;
            
            using Vintasoft.WpfBarcode;
            using Vintasoft.WpfBarcode.BarcodeInfo;
            using Vintasoft.WpfBarcode.QualityTests;
            
            /// &lt;summary&gt;
            /// Test that shows how to test print quality of 1D barcodes.
            /// &lt;/summary&gt;
            class ISO15416QualityTestExample
            {
            
                /// &lt;summary&gt;
                /// Run the test.
                /// &lt;/summary&gt;
                public static void Test()
                {
                    // load image with barcode from file
                    using (Stream imageFileStream = new FileStream("test1.jpg", FileMode.Open, FileAccess.Read))
                    {
                        BitmapImage barcodeImage = new BitmapImage();
                        barcodeImage.BeginInit();
                        barcodeImage.StreamSource = imageFileStream;
                        barcodeImage.EndInit();
            
                        // read barcodes from image and test print quality of 1D barcodes
                        TestBarcodePrintQuality(barcodeImage);
                    }
                }
            
                /// &lt;summary&gt;
                /// Read barcodes from image and test print quality of 1D barcodes.
                /// &lt;/summary&gt;
                static void TestBarcodePrintQuality(BitmapSource imageWithBarcodes)
                {
                    // create the barcode reader
                    using (BarcodeReader reader = new BarcodeReader())
                    {
                        // specify that reader must collect information for quality test
                        reader.Settings.CollectTestInformation = true;
            
                        // specify that reader must search for Code39 and Code128 barcodes only
                        reader.Settings.ScanBarcodeTypes = BarcodeType.Code39 | BarcodeType.Code128;
            
                        // read barcodes
                        IBarcodeInfo[] barcodeInfos = reader.ReadBarcodes(imageWithBarcodes);
            
                        // for each found barcode
                        for (int i = 0; i &lt; barcodeInfos.Length; i++)
                        {
                            // test print quality of barcode using ISO 15416 test
                            ISO15416QualityTest test =
                                new ISO15416QualityTest((BarcodeInfo1D)barcodeInfos[i], imageWithBarcodes);
            
                            // print results of ISO 15416 test
            
                            Console.WriteLine(string.Format("[{0}] {1}",
                                barcodeInfos[i].BarcodeType, barcodeInfos[i].Value));
                            Console.WriteLine(string.Format("Overall symbol grade:            {0} ({1:f2})",
                                test.OverallSymbolGrade, test.OverallSymbolGradeValue));
                            if (test.DifferentDecodedValues)
                                Console.WriteLine("Scan profiles has different barcode decode values!");
                            if (test.SymbolComponentQualityTests.Length == 1)
                            {
                                ISO15416SymbolComponentQualityTest qualityTest = test.SymbolComponentQualityTests[0];
                                Console.WriteLine(string.Format("Scan reflectance profiles:       {0}",
                                    qualityTest.ScanReflectanceProfiles.Length));
                                Console.WriteLine("Scan reflectance profile grades:");
                                for (int j = 0; j &lt; qualityTest.ScanReflectanceProfiles.Length; j++)
                                    Console.Write(qualityTest.ScanReflectanceProfiles[j].ScanGrade);
                            }
                            else
                            {
                                for (int k = 0; k &lt; test.SymbolComponentQualityTests.Length; k++)
                                {
                                    Console.WriteLine(string.Format("Symbol component:                {0}", k + 1));
                                    ISO15416SymbolComponentQualityTest qualityTest = test.SymbolComponentQualityTests[k];
                                    Console.WriteLine(string.Format("Scan reflectance profiles:       {0}",
                                        qualityTest.ScanReflectanceProfiles.Length));
                                    Console.WriteLine("Scan reflectance profile grades:");
                                    for (int j = 0; j &lt; qualityTest.ScanReflectanceProfiles.Length; j++)
                                        Console.Write(qualityTest.ScanReflectanceProfiles[j].ScanGrade);
                                }
                            }
                            Console.WriteLine();
                            Console.WriteLine();
                        }
                    }
                }
            
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.WpfBarcode.QualityTests.ISO15416QualityTest.#ctor(Vintasoft.WpfBarcode.BarcodeInfo.BarcodeInfo1D,System.Windows.Media.Imaging.BitmapSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.QualityTests.ISO15416QualityTest" /> class. 
            </summary>
            <param name="barcodeInfo">Information about barcode.</param>
            <param name="barcodeImage">Image with barcodes.</param>
            <example>
            Please see example <see cref="T:Vintasoft.WpfBarcode.QualityTests.ISO15416QualityTest">here</see>.
            </example>
        </member>
        <member name="M:Vintasoft.WpfBarcode.QualityTests.ISO15416QualityTest.#ctor(Vintasoft.WpfBarcode.BarcodeInfo.BarcodeInfo1D,System.Windows.Media.Imaging.BitmapSource,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.QualityTests.ISO15416QualityTest" /> class. 
            </summary>
            <param name="barcodeInfo">Information about barcode.</param>
            <param name="barcodeImage">Image with barcodes.</param>
            <param name="scanlineCount">Number of scanlines.</param>
            <example>
            Please see example <see cref="T:Vintasoft.WpfBarcode.QualityTests.ISO15416QualityTest">here</see>.
            </example>
        </member>
        <member name="M:Vintasoft.WpfBarcode.QualityTests.ISO15416QualityTest.#ctor(Vintasoft.WpfBarcode.BarcodeInfo.BarcodeInfo1D,System.Windows.Media.Imaging.BitmapSource,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.QualityTests.ISO15416QualityTest" /> class. 
            </summary>
            <param name="barcodeInfo">Information about barcode.</param>
            <param name="barcodeImage">Image with barcodes.</param>
            <param name="invertImageColors">Indicates whether the quality test must invert image colors.</param>
            <example>
            Please see example <see cref="T:Vintasoft.WpfBarcode.QualityTests.ISO15416QualityTest">here</see>.
            </example>
        </member>
        <member name="M:Vintasoft.WpfBarcode.QualityTests.ISO15416QualityTest.#ctor(Vintasoft.WpfBarcode.BarcodeInfo.BarcodeInfo1D,System.Windows.Media.Imaging.BitmapSource,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.QualityTests.ISO15416QualityTest" /> class. 
            </summary>
            <param name="barcodeInfo">Information about barcode.</param>
            <param name="barcodeImage">Image with barcodes.</param>
            <param name="scanlineCount">Number of scanlines.</param>
            <param name="invertImageColors">Indicates whether the quality test must invert image colors.</param>
            <example>
            Please see example <see cref="T:Vintasoft.WpfBarcode.QualityTests.ISO15416QualityTest">here</see>.
            </example>
        </member>
        <member name="P:Vintasoft.WpfBarcode.QualityTests.ISO15416QualityTest.OverallSymbolGradeValue">
            <summary>
            Gets an overall symbol grade value as double value.
            </summary>
            <value>
            Possible values are from 0 to 4.
            </value>
            <remarks>
            The overall symbol grade is calculated as the average from grades of all reflectance profiles.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.QualityTests.ISO15416QualityTest.OverallSymbolGrade">
            <summary>
            Gets a grade of <see cref="P:Vintasoft.WpfBarcode.QualityTests.ISO15416QualityTest.OverallSymbolGradeValue" />.
            </summary>
            <value>
            ISO15416QualityGrade.A if <see cref="P:Vintasoft.WpfBarcode.QualityTests.ISO15416QualityTest.OverallSymbolGradeValue" /> &gt; 3.5;
            ISO15416QualityGrade.B if <see cref="P:Vintasoft.WpfBarcode.QualityTests.ISO15416QualityTest.OverallSymbolGradeValue" /> &gt; 2.5;
            ISO15416QualityGrade.C if <see cref="P:Vintasoft.WpfBarcode.QualityTests.ISO15416QualityTest.OverallSymbolGradeValue" /> &gt; 1.5;
            ISO15416QualityGrade.D if <see cref="P:Vintasoft.WpfBarcode.QualityTests.ISO15416QualityTest.OverallSymbolGradeValue" /> &gt; 0.5;
            ISO15416QualityGrade.F, otherwise.
            </value>
        </member>
        <member name="P:Vintasoft.WpfBarcode.QualityTests.ISO15416QualityTest.DifferentDecodedValues">
            <summary>
            Gets a value indicating whether the decoded scanlines have different barcode values.
            </summary>
            <value>
            <b>true</b> - at least one scan line has barcode value different from barcode value
            of other lines;
            <b>false</b> - all scan lines have the same barcode value.
            </value>
            <remarks>
            Value of the <see cref="P:Vintasoft.WpfBarcode.QualityTests.ISO15416QualityTest.OverallSymbolGradeValue" /> is set to 0 automatically
            if value of this property is set to <b>true</b>.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.QualityTests.ISO15416QualityTest.SymbolComponentQualityTests">
            <summary>
            Gets an array of executed quality tests for symbol components of the barcode symbol.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.QualityTests.ISO15416ScanReflectanceProfile">
            <summary>
            Represents an information about the ISO15416 scan reflectance profile.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.QualityTests.ISO15416ScanReflectanceProfile.ReflectanceData">
            <summary>
            Gets an array that contains RAW reflectance data of this profile.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.QualityTests.ISO15416ScanReflectanceProfile.ScanGrade">
            <summary>
            Gets a grade of scan profile.
            </summary>
            <remarks>The grade of scan is calculated as the lowest grade from
            all calculated grades.</remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.QualityTests.ISO15416ScanReflectanceProfile.GlobalThreshold">
            <summary>
            Gets a global threshold (GT), in percents of reflectance.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.QualityTests.ISO15416ScanReflectanceProfile.DecodeValue">
            <summary>
            Gets a decoded barcode value.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.QualityTests.ISO15416ScanReflectanceProfile.Decode">
            <summary>
            Gets a value indicating whether the barcode value is decoded successfully.
            </summary>
            <value>
            <b>true</b> - barcode value is decoded successfully;
            <b>false</b> - barcode value is not decoded.
            </value>
            <remarks>
            This property will be set to <b>false</b> if quiet zone around the barcode does
            not conform the specification. Different barcode symbologies require different quiet zone
            size, in single modules:
            <ul>
            <li>Code 128 - Left: 10X; Right - 10X</li>
            <li>Interleaved 2 of 5, Matrix 2 of 5, Standartd 2 of 5, IATA 2 of 5 - Left: 10X; Right 10X</li>
            <li>EAN-13 - Left: 11X; Right - 7X</li>
            <li>EAN-8 - Left: 7X; Right - 7X</li>
            <li>UPCE - Left: 9X; Right - 7X</li>
            <li>UPCA - Left: 9X; Right - 9X</li>
            </ul>
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.QualityTests.ISO15416ScanReflectanceProfile.DecodeGrade">
            <summary>
            Gets a grade of <see cref="P:Vintasoft.WpfBarcode.QualityTests.ISO15416ScanReflectanceProfile.Decode" />.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.QualityTests.ISO15416ScanReflectanceProfile.MaxReflectance">
            <summary>
            Gets a max reflectance (Rmax), in percents of reflectance.
            </summary>
            <remarks>
            Highest reflectance in any element or quiet zone in a scan reflectance profile.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.QualityTests.ISO15416ScanReflectanceProfile.MinReflectance">
            <summary>
            Gets a min reflectance (Rmin), in percents of reflectance.
            </summary>
            <remarks>
            Lowest reflectance in any element in a scan reflectance profile.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.QualityTests.ISO15416ScanReflectanceProfile.MinReflectanceGrade">
            <summary>
            Gets a grade of <see cref="P:Vintasoft.WpfBarcode.QualityTests.ISO15416ScanReflectanceProfile.MinReflectance" />.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.QualityTests.ISO15416ScanReflectanceProfile.SymbolContrast">
            <summary>
            Gets a symbol contrast (SC), in percents of reflectance.
            </summary>
            <remarks>Symbol contrast is the difference between the highest and lowest reflectance
            value in the symbol region.</remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.QualityTests.ISO15416ScanReflectanceProfile.SymbolContrastGrade">
            <summary>
            Gets a grade of <see cref="P:Vintasoft.WpfBarcode.QualityTests.ISO15416ScanReflectanceProfile.SymbolContrast" />.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.QualityTests.ISO15416ScanReflectanceProfile.MinEdgeContrast">
            <summary>
            Gets a minimum edge contrast (ECmin), in percents of reflectance.
            </summary>
            <remarks>
            Minimum difference in the reflectance value between any 
            particular space (including quiet zones) and its adjoining bar within a
            bar code symbol.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.QualityTests.ISO15416ScanReflectanceProfile.MinEdgeContrastGrade">
            <summary>
            Gets a grade of <see cref="P:Vintasoft.WpfBarcode.QualityTests.ISO15416ScanReflectanceProfile.MinEdgeContrast" />.
            </summary>      
        </member>
        <member name="P:Vintasoft.WpfBarcode.QualityTests.ISO15416ScanReflectanceProfile.Modulation">
            <summary>
            Gets a modulation (MOD).
            </summary>
            <remarks>
            Modulation is a measure of the uniformity of reflectance of the dark and
            light elements respectively (MOD = ECmin/SC).
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.QualityTests.ISO15416ScanReflectanceProfile.ModulationGrade">
            <summary>
            Gets a grade of <see cref="P:Vintasoft.WpfBarcode.QualityTests.ISO15416ScanReflectanceProfile.Modulation" />.
            </summary>      
        </member>
        <member name="P:Vintasoft.WpfBarcode.QualityTests.ISO15416ScanReflectanceProfile.MaxElementReflectanceNonUniformity">
            <summary>
            Gets a maximum element reflectance non-uniformity (ERNmax).
            </summary>
            <remarks>
            Element reflectance nonuniformity is the difference in reflectance between the highest peak and
            lowest value within an element (bar or space) of the bar code symbol.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.QualityTests.ISO15416ScanReflectanceProfile.Defects">
            <summary>
            Gets a defects value.
            </summary>
            <remarks>
            Defects are measured by the ratio between the maximum element reflectance 
            nonuniformity and symbol contrast (Defects = ERNmax / SC).
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.QualityTests.ISO15416ScanReflectanceProfile.DefectsGrade">
            <summary>
            Gets a grade of <see cref="P:Vintasoft.WpfBarcode.QualityTests.ISO15416ScanReflectanceProfile.Defects" />.
            </summary>      
        </member>
        <member name="P:Vintasoft.WpfBarcode.QualityTests.ISO15416ScanReflectanceProfile.Decodability">
            <summary>
            Gets a decodability value.
            </summary>
            <remarks>
            Decodability is the measure of accuracy of the printed bar code symbol against its appropriate
            reference decode algorithm.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.QualityTests.ISO15416ScanReflectanceProfile.DecodabilityGrade">
            <summary>
            Gets a grade of <see cref="P:Vintasoft.WpfBarcode.QualityTests.ISO15416ScanReflectanceProfile.Decodability" />.
            </summary>      
        </member>
        <member name="T:Vintasoft.WpfBarcode.QualityTests.ISO15416SymbolComponentQualityTest">
            <summary>
            ISO/IEC 15416 print quality test for linear barcode symbol component.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.QualityTests.ISO15416SymbolComponentQualityTest.OverallSymbolGradeValue">
            <summary>
            Gets an overall symbol component grade value as double value.
            </summary>
            <value>
            Possible values are from 0 to 4.
            </value>
            <remarks>
            The overall symbol grade is calculated as the average from grades of all reflectance profiles.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfBarcode.QualityTests.ISO15416SymbolComponentQualityTest.OverallSymbolGrade">
            <summary>
            Gets a grade of <see cref="P:Vintasoft.WpfBarcode.QualityTests.ISO15416SymbolComponentQualityTest.OverallSymbolGradeValue" />.
            </summary>
            <value>
            ISO15416QualityGrade.A if <see cref="P:Vintasoft.WpfBarcode.QualityTests.ISO15416SymbolComponentQualityTest.OverallSymbolGradeValue" /> &gt; 3.5;
            ISO15416QualityGrade.B if <see cref="P:Vintasoft.WpfBarcode.QualityTests.ISO15416SymbolComponentQualityTest.OverallSymbolGradeValue" /> &gt; 2.5;
            ISO15416QualityGrade.C if <see cref="P:Vintasoft.WpfBarcode.QualityTests.ISO15416SymbolComponentQualityTest.OverallSymbolGradeValue" /> &gt; 1.5;
            ISO15416QualityGrade.D if <see cref="P:Vintasoft.WpfBarcode.QualityTests.ISO15416SymbolComponentQualityTest.OverallSymbolGradeValue" /> &gt; 0.5;
            ISO15416QualityGrade.F, otherwise.
            </value>
        </member>
        <member name="P:Vintasoft.WpfBarcode.QualityTests.ISO15416SymbolComponentQualityTest.ScanReflectanceProfiles">
            <summary>
            Gets an array that contains processed scan reflectance profiles.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.QualityTests.ISO15416SymbolComponentQualityTest.AverageScanReflectanceProfileValues">
            <summary>
            Gets average grade values of <see cref="P:Vintasoft.WpfBarcode.QualityTests.ISO15416SymbolComponentQualityTest.ScanReflectanceProfiles" />.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.QualityTests.ISO15416SymbolComponentQualityTest.DifferentDecodedValues">
            <summary>
            Gets a value indicating whether the decoded scanlines have different barcode values.
            </summary>
            <value>
            <b>true</b> - at least one scan line has barcode value different from barcode value
            of other lines;
            <b>false</b> - all scan lines have the same barcode value.
            </value>
            <remarks>
            Value of the <see cref="P:Vintasoft.WpfBarcode.QualityTests.ISO15416SymbolComponentQualityTest.OverallSymbolGradeValue" /> is set to 0 automatically
            if value of this property is set to <b>true</b>.
            </remarks>
        </member>
        <member name="T:Vintasoft.WpfBarcode.PdfImageInfo">
            <summary>
            Class that contains information about the image of PDF document.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfBarcode.PdfImageInfo.GetImage">
            <summary>
            Returns a <see cref="T:System.Windows.Media.Imaging.BitmapSource" /> instance.
            </summary>
            <returns><see cref="T:System.Windows.Media.Imaging.BitmapSource" /> object.</returns>
        </member>
        <member name="P:Vintasoft.WpfBarcode.PdfImageInfo.Width">
            <summary>
            Gets the width of the image.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.PdfImageInfo.Height">
            <summary>
            Gets the height of the image.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.PdfImageInfo.BitsPerPixel">
            <summary>
            Gets the number of bits per pixel for this image resource.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.PdfImageInfo.PageNumber">
            <summary>
            Gets page number of the image in PDF document.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.PdfImageInfo.Name">
            <summary>
            Gets the name of the image.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.PdfImageInfo.Compression">
            <summary>
            Gets the filters which the image encoded.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.PdfImageViewer">
            <summary>
            Class that allows to retrieve image resources from the PDF document.
            </summary>
            <remarks>
            <b>Supported compressions:</b>
            <ul>
            <li>ZIP</li>
            <li>JPEG (only for DeviceGray and DeviceRGB color space)</li>
            <li>CCITT3</li>
            <li>CCITT4</li>
            <li>LZW</li>
            <li>Run Length</li>
            </ul>
            <br />
            <b>Supported color spaces:</b>
            <ul>
            <li>DeviceGray</li>
            <li>DeviceRGB</li>
            <li>DeviceCMYK</li>
            <li>Indexed</li>
            </ul>
            </remarks>
            <example>
            <code lang="VB.NET">   
            Imports System.Windows.Media.Imaging   
               
            Imports Vintasoft.WpfBarcode   
               
            ''' &lt;summary&gt;   
            ''' Test that shows how to read barcodes from image-resources of PDF document.   
            ''' &lt;/summary&gt;   
            Class PdfImageViewerExample   
            	''' &lt;summary&gt;   
            	''' Read barcodes from image-resources of PDF document.   
            	''' &lt;/summary&gt;   
            	Public Shared Sub ReadBarcodesFromPdfDocument(filename As String, barcodeTypes As BarcodeType)   
            		' open PDF document   
            		Using pdfImageViewer As New PdfImageViewer(filename)   
            			' create the barcode reader   
            			Using reader As New BarcodeReader()   
            				' specify that reader must search barcodes of specified type(s)   
            				reader.Settings.ScanBarcodeTypes = barcodeTypes   
               
            				' for each page in PDF document   
            				For i As Integer = 0 To pdfImageViewer.PageCount - 1   
            					' get an array of names of image resources from page i   
            					Dim imageNames As String() = pdfImageViewer.GetImageNames(i)   
            					' for each image resource of page i   
            					For k As Integer = 0 To imageNames.Length - 1   
            						Console.WriteLine(String.Format("Page {0}, image {1}: ", i, imageNames(k)))   
            						Dim imageWithBarcode As BitmapSource   
            						' get image of image resource   
            						Try   
            							imageWithBarcode = pdfImageViewer.GetImage(i, imageNames(k))   
            						Catch e As Exception   
            							' not supported image format   
            							Console.WriteLine(e.Message)   
                                        Continue For   
            						End Try   
               
            						' read barcodes from image-resource   
            						Dim barcodesInfo As IBarcodeInfo() = reader.ReadBarcodes(imageWithBarcode)   
               
            						' show barcode recognition results   
            						If barcodesInfo.Length = 0 Then   
            							Console.WriteLine("No barcodes found.")   
            						Else   
            							For j As Integer = 0 To barcodesInfo.Length - 1   
            								Console.WriteLine(String.Format("[{0}] {1}", barcodesInfo(j).BarcodeType, barcodesInfo(j).Value))   
            							Next   
            						End If   
            					Next   
            				Next   
            			End Using   
            		End Using   
            	End Sub   
            End Class   
            
            </code>
            <code lang="C#">
            using System;
            using System.Windows.Media.Imaging;
            
            using Vintasoft.WpfBarcode;
            
            /// &lt;summary&gt;
            /// Test that shows how to read barcodes from image-resources of PDF document.
            /// &lt;/summary&gt;
            class PdfImageViewerExample
            {
                /// &lt;summary&gt;
                /// Read barcodes from image-resources of PDF document.
                /// &lt;/summary&gt;
                public static void ReadBarcodesFromPdfDocument(string filename, BarcodeType barcodeTypes)
                {
                    // open PDF document
                    using (PdfImageViewer pdfImageViewer = new PdfImageViewer(filename))
                    {
                        // create the barcode reader
                        using (BarcodeReader reader = new BarcodeReader())
                        {
                            // specify that reader must search barcodes of specified type(s)
                            reader.Settings.ScanBarcodeTypes = barcodeTypes;
            
                            // for each page in PDF document
                            for (int i = 0; i &lt; pdfImageViewer.PageCount; i++)
                            {
                                // get an array of names of image resources from page i
                                string[] imageNames = pdfImageViewer.GetImageNames(i);
                                // for each image resource of page i
                                for (int k = 0; k &lt; imageNames.Length; k++)
                                {
                                    Console.WriteLine(string.Format("Page {0}, image {1}: ", i, imageNames[k]));
                                    BitmapSource imageWithBarcode;
                                    // get image of image resource
                                    try
                                    {
                                        imageWithBarcode = pdfImageViewer.GetImage(i, imageNames[k]);
                                    }
                                    catch (Exception e)
                                    {
                                        // not supported image format
                                        Console.WriteLine(e.Message);
                                        continue;
                                    }
            
                                    // read barcodes from image-resource
                                    IBarcodeInfo[] barcodesInfo = reader.ReadBarcodes(imageWithBarcode);
            
                                    // show barcode recognition results
                                    if (barcodesInfo.Length == 0)
                                    {
                                        Console.WriteLine("No barcodes found.");
                                    }
                                    else
                                    {
                                        for (int j = 0; j &lt; barcodesInfo.Length; j++)
                                            Console.WriteLine(string.Format("[{0}] {1}",
                                                barcodesInfo[j].BarcodeType, barcodesInfo[j].Value));
                                    }
                                }
                            }
                        }
                    }
                }
            }
            
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.WpfBarcode.PdfImageViewer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.PdfImageViewer" /> class and 
            loads PDF document structure of specified PDF file.
            </summary>
            <param name="filename">Path to PDF file.</param>
            <example>Please see example <see cref="T:Vintasoft.WpfBarcode.PdfImageViewer">here</see>.</example>
        </member>
        <member name="M:Vintasoft.WpfBarcode.PdfImageViewer.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfBarcode.PdfImageViewer" /> class and 
            loads PDF document structure of specified PDF stream.
            </summary>
            <param name="stream">Stream contains PDF document.</param>
            <example>Please see example <see cref="T:Vintasoft.WpfBarcode.PdfImageViewer">here</see>.</example>
        </member>
        <member name="M:Vintasoft.WpfBarcode.PdfImageViewer.GetImageNames(System.Int32)">
            <summary>
            Returns an array of names of image resources of specified PDF page.
            </summary>
            <param name="pageIndex">Index of PDF page.</param>
            <returns>An array of names of image resources of specified PDF page.</returns>
        </member>
        <member name="M:Vintasoft.WpfBarcode.PdfImageViewer.GetImage(System.Int32,System.String)">
            <summary>
            Returns the image resource of PDF page specified by name.
            </summary>
            <param name="pageIndex">Name of image resource.</param>
            <param name="imageResourceName">Name of image resource.</param>
        </member>
        <member name="M:Vintasoft.WpfBarcode.PdfImageViewer.GetImageInfo(System.Int32,System.String)">
            <summary>
            Returns information about image located on the PDF page.
            </summary>
            <param name="pageIndex">Name of image resource..</param>
            <param name="imageResourceName">Name of image resource.</param>
            <returns />
        </member>
        <member name="M:Vintasoft.WpfBarcode.PdfImageViewer.Dispose">
            <summary>
             Releases all resources used by this <see cref="T:Vintasoft.WpfBarcode.PdfImageViewer" />.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfBarcode.PdfImageViewer.PageCount">
            <summary>
            Gets the number of pages in PDF document.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfBarcode.PdfCompression">
            <summary>
            Specifies available compressions for data of PDF document.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.PdfCompression.Auto">
            <summary>
            Best compression is used depending of the data.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.PdfCompression.Undefined">
            <summary>
            Undefined.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.PdfCompression.None">
            <summary>
            No compression is used.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.PdfCompression.AsciiHex">
            <summary>
            The ASCII hexadecimal compression is used for data compression.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.PdfCompression.Ascii85">
            <summary>
            ASCII base-85 encoding is used for data compression.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.PdfCompression.Lzw">
            <summary>
            LZW compression is used for data compression.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.PdfCompression.Zip">
            <summary>
            ZIP (Flate) compression is used for data compression.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.PdfCompression.RunLength">
            <summary>
            RunLength compression is used for data compression.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.PdfCompression.CcittFax">
            <summary>
            CCITTFax compression is used for data compression. This compression can
            be used only for monochrome images.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.PdfCompression.Jbig2">
            <summary>
            Jbig2 compression is used for data compression. This compression can
            be used only for monochrome images.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.PdfCompression.Jpeg">
            <summary>
            JPEG compression is used for data compression. This compression can
            be used only for grayscale or color images.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.PdfCompression.Jpeg2000">
            <summary>
            JPEG2000 compression is used for data compression. This compression can
            be used only for images.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.PdfCompression.Crypt">
            <summary>
            Data is encrypted.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfBarcode.PdfCompression.Predictor">
            <summary>
            Prediction is used for data compression.
            </summary>
        </member>
        </members>
</doc>
