<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Vintasoft.Barcode</name>
    </assembly>
    <members>
        <member name="T:Vintasoft.Barcode.BarcodeReader">
            <summary>
            Class that allows to read barcodes from the image.
            </summary>
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeReader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Barcode.BarcodeReader" /> class. 
            </summary>
            <example>
            Please see example <see cref="M:Vintasoft.Barcode.BarcodeReader.ReadBarcodes(System.IO.Stream)">here</see>.
            </example>
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeReader.SetImage(System.String)">
            <summary>
            Sets the current image from specified file.
            </summary>
            <param name="filename">The name of the image file with barcodes.</param>
            <example>
            Please see example <see cref="M:Vintasoft.Barcode.BarcodeReader.ReadBarcodes">here</see>.
            </example>
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeReader.SetImage(System.IO.Stream)">
            <summary>
            Sets the current image from specified stream.
            </summary>
            <param name="stream">The stream that contains image with barcodes.</param>
            <example>
            Please see example <see cref="M:Vintasoft.Barcode.BarcodeReader.ReadBarcodes">here</see>.
            </example>
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeReader.SetImage(System.Drawing.Image)">
            <summary>
            Sets the current image from specified image.
            </summary>
            <param name="image">Image with barcodes.</param>
            <example>
            Please see example <see cref="M:Vintasoft.Barcode.BarcodeReader.ReadBarcodes">here</see>.
            </example>
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeReader.ClearImage">
            <summary>
            Clears the current image.
            </summary>
            <example>
            Please see example <see cref="M:Vintasoft.Barcode.BarcodeReader.ReadBarcodes">here</see>.
            </example>
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeReader.ReadBarcodes">
            <summary>
            Reads barcodes from image specified using <see cref="M:Vintasoft.Barcode.BarcodeReader.SetImage(System.IO.Stream)" /> method.
            </summary>
            <example>Here is an example that demonstrates how to detect barcodes in 2 images.
            <code lang="VB.NET">   
            Imports Vintasoft.Barcode   
               
            ''' &lt;summary&gt;   
            ''' Test that shows how to read barcodes from image,   
            ''' the barcode reader searches barcodes using 2 different scan intervals.   
            ''' &lt;/summary&gt;   
            Class ReadBarcodesFromCurrentImageExample   
               
            	''' &lt;summary&gt;   
            	''' Run the test.   
            	''' &lt;/summary&gt;   
            	Public Shared Sub Test()   
            		ReadBarcodes("test1.jpg", "test2.png")   
            	End Sub   
               
            	''' &lt;summary&gt;   
            	''' Read barcodes from images, which are stored in files.   
            	''' Barcode reader will try to recognize barcodes using 2 different scan intervals.   
            	''' &lt;/summary&gt;   
            	Private Shared Sub ReadBarcodes(ParamArray filenames As String())   
            		' create barcode reader   
            		Using reader As New BarcodeReader()   
            			' specify that reader must search for Code39, Code128 and DataMatrix barcodes only   
            			reader.Settings.ScanBarcodeTypes = BarcodeType.Code39 Or BarcodeType.Code128 Or BarcodeType.DataMatrix   
               
            			' specify that reader must search for horizontal and vertical barcodes only   
            			reader.Settings.ScanDirection = ScanDirection.Horizontal Or ScanDirection.Vertical   
               
            			' for each filename   
            			For Each filename As String In filenames   
            				Console.Write(String.Format("{0}: ", filename))   
               
            				' set the reader image   
            				reader.SetImage(filename)   
               
            				' read barcodes from current image with scan interval = 5   
            				Dim infos As IBarcodeInfo() = ReadBarcodes(reader, 5)   
            				' if no barcodes found   
            				If infos.Length = 0 Then   
            					' read barcodes from current image with scan interval = 1   
            					infos = ReadBarcodes(reader, 1)   
            				End If   
               
            				' clear reader image   
            				reader.ClearImage()   
               
            				' show barcode recognition results   
               
            				If infos.Length = 0 Then   
            					Console.WriteLine("No barcodes found.")   
            				Else   
            					Console.WriteLine(String.Format("{0} barcodes found:", infos.Length))   
            					Console.WriteLine()   
            					For i As Integer = 0 To infos.Length - 1   
            						Dim info As IBarcodeInfo = infos(i)   
            						Console.WriteLine(String.Format("[{0}:{1}]", i, info.BarcodeType))   
            						Console.WriteLine(String.Format("Value:      {0}", info.Value))   
            						Console.WriteLine(String.Format("Confidence: {0}%", Math.Round(info.Confidence)))   
            						Console.WriteLine(String.Format("Threshold:  {0}", info.Threshold))   
            						Console.WriteLine(String.Format("Region:     {0}", info.Region))   
            						Console.WriteLine()   
            					Next   
            				End If   
            			Next   
            		End Using   
            	End Sub   
               
            	''' &lt;summary&gt;   
            	''' Read barcodes from current reader image with specified scan interval.   
            	''' &lt;/summary&gt;   
            	Private Shared Function ReadBarcodes(reader As BarcodeReader, scanInterval As Integer) As IBarcodeInfo()   
            		reader.Settings.ScanInterval = scanInterval   
            		Return reader.ReadBarcodes()   
            	End Function   
               
            End Class
            </code>
            <code lang="C#">
            using System;
            using Vintasoft.Barcode;
            
            /// &lt;summary&gt;
            /// Test that shows how to read barcodes from image,
            /// the barcode reader searches barcodes using 2 different scan intervals.
            /// &lt;/summary&gt;
            class ReadBarcodesFromCurrentImageExample
            {
            
                /// &lt;summary&gt;
                /// Run the test.
                /// &lt;/summary&gt;
                public static void Test()
                {
                    ReadBarcodes("test1.jpg", "test2.png");
                }
                
                /// &lt;summary&gt;
                /// Read barcodes from images, which are stored in files.
                /// Barcode reader will try to recognize barcodes using 2 different scan intervals.
                /// &lt;/summary&gt;
                static void ReadBarcodes(params string[] filenames)
                {
                    // create barcode reader
                    using (BarcodeReader reader = new BarcodeReader())
                    {
                        // specify that reader must search for Code39, Code128 and DataMatrix barcodes only
                        reader.Settings.ScanBarcodeTypes =
                            BarcodeType.Code39 |
                            BarcodeType.Code128 |
                            BarcodeType.DataMatrix;
            
                        // specify that reader must search for horizontal and vertical barcodes only
                        reader.Settings.ScanDirection = ScanDirection.Horizontal | ScanDirection.Vertical;
            
                        // for each filename
                        foreach (string filename in filenames)
                        {
                            Console.Write(string.Format("{0}: ", filename));
            
                            // set the reader image
                            reader.SetImage(filename);
            
                            // read barcodes from current image with scan interval = 5
                            IBarcodeInfo[] infos = ReadBarcodes(reader, 5);
                            // if no barcodes found
                            if (infos.Length == 0)
                                // read barcodes from current image with scan interval = 1
                                infos = ReadBarcodes(reader, 1);
            
                            // clear reader image
                            reader.ClearImage();
            
                            // show barcode recognition results
            
                            if (infos.Length == 0)
                            {
                                Console.WriteLine("No barcodes found.");
                            }
                            else
                            {
                                Console.WriteLine(string.Format("{0} barcodes found:", infos.Length));
                                Console.WriteLine();
                                for (int i = 0; i &lt; infos.Length; i++)
                                {
                                    IBarcodeInfo info = infos[i];
                                    Console.WriteLine(string.Format("[{0}:{1}]", i, info.BarcodeType));
                                    Console.WriteLine(string.Format("Value:      {0}", info.Value));
                                    Console.WriteLine(string.Format("Confidence: {0}%", Math.Round(info.Confidence)));
                                    Console.WriteLine(string.Format("Threshold:  {0}", info.Threshold));
                                    Console.WriteLine(string.Format("Region:     {0}", info.Region));
                                    Console.WriteLine();
                                }
                            }
                        }
                    }
                }
            
                /// &lt;summary&gt;
                /// Read barcodes from current reader image with specified scan interval.
                /// &lt;/summary&gt;
                private static IBarcodeInfo[] ReadBarcodes(BarcodeReader reader, int scanInterval)
                {
                    reader.Settings.ScanInterval = scanInterval;
                    return reader.ReadBarcodes();
                }
            
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeReader.ReadBarcodes(System.String)">
            <summary>
            Reads barcodes from the specified file.
            </summary>
            <param name="filename">The name of the file with barcodes.</param>
            <returns>An array of <see cref="T:Vintasoft.Barcode.IBarcodeInfo" /> objects which contains
            information about recognized barcodes.</returns>
            <example>Here is a simple example that demonstrates how to detect
            barcodes in an image.
            <code lang="VB.NET">   
               
            Imports Vintasoft.Barcode   
               
            ''' &lt;summary&gt;   
            ''' Test that shows how read barcodes from image, which is stored in file, using the BarcodeReader class.   
            ''' &lt;/summary&gt;   
            Class ReadBarcodesFromFilesExample   
               
            	''' &lt;summary&gt;   
            	''' Run the test.   
            	''' &lt;/summary&gt;   
            	Public Shared Sub Test()   
            		' read barcodes from image, which is stored in file   
            		ReadBarcodes("test1.jpg")   
            	End Sub   
               
            	''' &lt;summary&gt;   
            	''' Read barcodes from image, which is stored in file.   
            	''' &lt;/summary&gt;   
            	Private Shared Sub ReadBarcodes(filename As String)   
            		' create the barcode reader   
            		Using reader As New BarcodeReader()   
            			' specify that reader must search for Code39, Code128 and DataMatrix barcodes only   
            			reader.Settings.ScanBarcodeTypes = BarcodeType.Code39 Or BarcodeType.Code128 Or BarcodeType.DataMatrix   
               
            			' specify that reader must search for horizontal and vertical barcodes only   
            			reader.Settings.ScanDirection = ScanDirection.LeftToRight Or ScanDirection.RightToLeft   
               
            			' read barcodes from image stored in file   
            			Dim infos As IBarcodeInfo() = reader.ReadBarcodes(filename)   
               
            			' show barcode recognition results   
               
            			Console.WriteLine(String.Format("recognition time {0} ms.", reader.RecognizeTime.TotalMilliseconds))   
               
            			If infos.Length = 0 Then   
            				Console.WriteLine("No barcodes found.")   
            			Else   
            				Console.WriteLine(String.Format("{0} barcodes found:", infos.Length))   
            				Console.WriteLine()   
            				For i As Integer = 0 To infos.Length - 1   
            					Dim info As IBarcodeInfo = infos(i)   
            					Console.WriteLine(String.Format("[{0}:{1}]", i, info.BarcodeType))   
            					Console.WriteLine(String.Format("Value:      {0}", info.Value))   
            					Console.WriteLine(String.Format("Confidence: {0}%", Math.Round(info.Confidence)))   
            					Console.WriteLine(String.Format("Threshold:  {0}", info.Threshold))   
            					Console.WriteLine(String.Format("Region:     {0}", info.Region))   
            					Console.WriteLine()   
            				Next   
            			End If   
            		End Using   
            	End Sub   
               
            End Class
            </code>
            <code lang="C#">
            using System;
            
            using Vintasoft.Barcode;
            
            /// &lt;summary&gt;
            /// Test that shows how read barcodes from image, which is stored in file, using the BarcodeReader class.
            /// &lt;/summary&gt;
            class ReadBarcodesFromFilesExample
            {
            
                /// &lt;summary&gt;
                /// Run the test.
                /// &lt;/summary&gt;
                public static void Test()
                {
                    // read barcodes from image, which is stored in file
                    ReadBarcodes("test1.jpg");
                }
                
                /// &lt;summary&gt;
                /// Read barcodes from image, which is stored in file.
                /// &lt;/summary&gt;
                static void ReadBarcodes(string filename)
                {
                    // create the barcode reader
                    using (BarcodeReader reader = new BarcodeReader())
                    {
                        // specify that reader must search for Code39, Code128 and DataMatrix barcodes only
                        reader.Settings.ScanBarcodeTypes =
                            BarcodeType.Code39 |
                            BarcodeType.Code128 |
                            BarcodeType.DataMatrix;
            
                        // specify that reader must search for horizontal and vertical barcodes only
                        reader.Settings.ScanDirection = ScanDirection.LeftToRight | ScanDirection.RightToLeft;
            
                        // read barcodes from image stored in file
                        IBarcodeInfo[] infos = reader.ReadBarcodes(filename);
            
                        // show barcode recognition results
            
                        Console.WriteLine(string.Format("recognition time {0} ms.",
                            reader.RecognizeTime.TotalMilliseconds));
            
                        if (infos.Length == 0)
                        {
                            Console.WriteLine("No barcodes found.");
                        }
                        else
                        {
                            Console.WriteLine(string.Format("{0} barcodes found:", infos.Length));
                            Console.WriteLine();
                            for (int i = 0; i &lt; infos.Length; i++)
                            {
                                IBarcodeInfo info = infos[i];
                                Console.WriteLine(string.Format("[{0}:{1}]", i, info.BarcodeType));
                                Console.WriteLine(string.Format("Value:      {0}", info.Value));
                                Console.WriteLine(string.Format("Confidence: {0}%", Math.Round(info.Confidence)));
                                Console.WriteLine(string.Format("Threshold:  {0}", info.Threshold));
                                Console.WriteLine(string.Format("Region:     {0}", info.Region));
                                Console.WriteLine();
                            }
                        }
                    }
                }
            
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeReader.ReadBarcodes(System.IO.Stream)">
            <summary>
            Reads barcodes from the specified stream.
            </summary>
            <param name="stream">The stream that contains image.</param>
            <returns>An array of <see cref="T:Vintasoft.Barcode.IBarcodeInfo" /> objects which contains
            information about recognized barcodes.</returns>
            <example>Here is a simple example that demonstrates how to detect
            barcodes in an image.
            <code lang="VB.NET">   
            Imports System.IO   
            Imports Vintasoft.Barcode   
               
            ''' &lt;summary&gt;   
            ''' Test that shows how read barcodes from image, which is stored in stream, using the BarcodeReader class.   
            ''' &lt;/summary&gt;   
            Class ReadBarcodesFromStreamExample   
            	''' &lt;summary&gt;   
            	''' Run the test.   
            	''' &lt;/summary&gt;   
            	Public Shared Sub Test()   
            		' open the stream   
            		Using barcodeImageStream As Stream = New FileStream("test1.jpg", FileMode.Open, FileAccess.Read)   
            			' read barcodes from image, which is stored in stream   
            			ReadBarcodes(barcodeImageStream)   
            		End Using   
            	End Sub   
               
            	''' &lt;summary&gt;   
            	''' Read barcodes from image, which is stored in stream.   
            	''' &lt;/summary&gt;   
            	Private Shared Sub ReadBarcodes(stream As Stream)   
            		' create barcode reader   
            		Using reader As New BarcodeReader()   
            			' specify that reader must search for Code39, Code128 and DataMatrix barcodes only   
            			reader.Settings.ScanBarcodeTypes = BarcodeType.Code39 Or BarcodeType.Code128 Or BarcodeType.DataMatrix   
               
            			' specify that reader must search for horizontal and vertical barcodes only   
            			reader.Settings.ScanDirection = ScanDirection.LeftToRight Or ScanDirection.RightToLeft   
               
            			' read barcodes from image stored in stream   
            			Dim infos As IBarcodeInfo() = reader.ReadBarcodes(stream)   
               
            			' show barcode recognition results   
               
            			Console.WriteLine(String.Format("Recognition time {0} ms.", reader.RecognizeTime.TotalMilliseconds))   
               
            			If infos.Length = 0 Then   
            				Console.WriteLine("No barcodes found.")   
            			Else   
            				Console.WriteLine(String.Format("{0} barcodes found:", infos.Length))   
            				Console.WriteLine()   
            				For i As Integer = 0 To infos.Length - 1   
            					Dim info As IBarcodeInfo = infos(i)   
            					Console.WriteLine(String.Format("[{0}:{1}]", i, info.BarcodeType))   
            					Console.WriteLine(String.Format("Value:      {0}", info.Value))   
            					Console.WriteLine(String.Format("Confidence: {0}%", Math.Round(info.Confidence)))   
            					Console.WriteLine(String.Format("Threshold:  {0}", info.Threshold))   
            					Console.WriteLine(String.Format("Region:     {0}", info.Region))   
            					Console.WriteLine()   
            				Next   
            			End If   
            		End Using   
            	End Sub   
               
            End Class
            </code>
            <code lang="C#">
            using System;
            using System.IO;
            using Vintasoft.Barcode;
            
            /// &lt;summary&gt;
            /// Test that shows how read barcodes from image, which is stored in stream, using the BarcodeReader class.
            /// &lt;/summary&gt;
            class ReadBarcodesFromStreamExample
            {
                /// &lt;summary&gt;
                /// Run the test.
                /// &lt;/summary&gt;
                public static void Test()
                {
                    // open the stream
                    using (Stream barcodeImageStream = new FileStream("test1.jpg", FileMode.Open, FileAccess.Read))
                    {
                        // read barcodes from image, which is stored in stream
                        ReadBarcodes(barcodeImageStream);
                    }
                }
            
                /// &lt;summary&gt;
                /// Read barcodes from image, which is stored in stream.
                /// &lt;/summary&gt;
                static void ReadBarcodes(Stream stream)
                {
                    // create barcode reader
                    using (BarcodeReader reader = new BarcodeReader())
                    {
                        // specify that reader must search for Code39, Code128 and DataMatrix barcodes only
                        reader.Settings.ScanBarcodeTypes =
                            BarcodeType.Code39 |
                            BarcodeType.Code128 |
                            BarcodeType.DataMatrix;
            
                        // specify that reader must search for horizontal and vertical barcodes only
                        reader.Settings.ScanDirection = ScanDirection.LeftToRight | ScanDirection.RightToLeft;
            
                        // read barcodes from image stored in stream
                        IBarcodeInfo[] infos = reader.ReadBarcodes(stream);
            
                        // show barcode recognition results
            
                        Console.WriteLine(string.Format("Recognition time {0} ms.",
                            reader.RecognizeTime.TotalMilliseconds));
            
                        if (infos.Length == 0)
                        {
                            Console.WriteLine("No barcodes found.");
                        }
                        else
                        {
                            Console.WriteLine(string.Format("{0} barcodes found:", infos.Length));
                            Console.WriteLine();
                            for (int i = 0; i &lt; infos.Length; i++)
                            {
                                IBarcodeInfo info = infos[i];
                                Console.WriteLine(string.Format("[{0}:{1}]", i, info.BarcodeType));
                                Console.WriteLine(string.Format("Value:      {0}", info.Value));
                                Console.WriteLine(string.Format("Confidence: {0}%", Math.Round(info.Confidence)));
                                Console.WriteLine(string.Format("Threshold:  {0}", info.Threshold));
                                Console.WriteLine(string.Format("Region:     {0}", info.Region));
                                Console.WriteLine();
                            }
                        }
                    }
                }
            
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeReader.ReadBarcodes(System.Drawing.Image)">
            <summary>
            Reads barcodes from the specified existing image.
            </summary>
            <param name="image">Image with barcodes.</param>
            <returns>An array of <see cref="T:Vintasoft.Barcode.IBarcodeInfo" /> objects which contains
            information about recognized barcodes.</returns>
            <example>Here is a simple example that demonstrates how to detect barcodes
            in an image.
            <code lang="VB.NET">   
            Imports System.Drawing   
            Imports Vintasoft.Barcode   
               
            ''' &lt;summary&gt;   
            ''' Test that shows how read barcodes from image using the BarcodeReader class.   
            ''' &lt;/summary&gt;   
            Class ReadBarcodesFromImageExample   
               
            	''' &lt;summary&gt;   
            	''' Run the test.   
            	''' &lt;/summary&gt;   
            	Public Shared Sub Test()   
            		' load image from file   
            		Using barcodeImage As Image = Image.FromFile("test1.jpg")   
            			' read barcodes from image   
            			ReadBarcodes(barcodeImage)   
            		End Using   
            	End Sub   
               
            	''' &lt;summary&gt;   
            	''' Read barcodes from image.   
            	''' &lt;/summary&gt;   
            	Private Shared Sub ReadBarcodes(barcodeImage As Image)   
            		' create barcode reader   
            		Using reader As New BarcodeReader()   
            			' specify that reader must search for Code39, Code128 and DataMatrix barcodes only   
            			reader.Settings.ScanBarcodeTypes = BarcodeType.Code39 Or BarcodeType.Code128 Or BarcodeType.DataMatrix   
               
            			' specify that reader must search for horizontal and vertical barcodes only   
            			reader.Settings.ScanDirection = ScanDirection.LeftToRight Or ScanDirection.RightToLeft   
               
            			' read barcodes from image   
            			Dim infos As IBarcodeInfo() = reader.ReadBarcodes(barcodeImage)   
               
            			' show barcode recognition results   
               
            			Console.WriteLine(String.Format("Recognition time {0} ms.", reader.RecognizeTime.TotalMilliseconds))   
               
            			If infos.Length = 0 Then   
            				Console.WriteLine("No barcodes found.")   
            			Else   
            				Console.WriteLine(String.Format("{0} barcodes found:", infos.Length))   
            				Console.WriteLine()   
            				For i As Integer = 0 To infos.Length - 1   
            					Dim info As IBarcodeInfo = infos(i)   
            					Console.WriteLine(String.Format("[{0}:{1}]", i, info.BarcodeType))   
            					Console.WriteLine(String.Format("Value:      {0}", info.Value))   
            					Console.WriteLine(String.Format("Confidence: {0}%", Math.Round(info.Confidence)))   
            					Console.WriteLine(String.Format("Threshold:  {0}", info.Threshold))   
            					Console.WriteLine(String.Format("Region:     {0}", info.Region))   
            					Console.WriteLine()   
            				Next   
            			End If   
            		End Using   
            	End Sub   
               
            End Class
            </code>
            <code lang="C#">
            using System;
            using System.Drawing;
            using Vintasoft.Barcode;
            
            /// &lt;summary&gt;
            /// Test that shows how read barcodes from image using the BarcodeReader class.
            /// &lt;/summary&gt;
            class ReadBarcodesFromImageExample
            {
            
                /// &lt;summary&gt;
                /// Run the test.
                /// &lt;/summary&gt;
                public static void Test()
                {
                    // load image from file
                    using (Image barcodeImage = Image.FromFile("test1.jpg"))
                    {
                        // read barcodes from image
                        ReadBarcodes(barcodeImage);
                    }
                }
                
                /// &lt;summary&gt;
                /// Read barcodes from image.
                /// &lt;/summary&gt;
                static void ReadBarcodes(Image barcodeImage)
                {
                    // create barcode reader
                    using (BarcodeReader reader = new BarcodeReader())
                    {
                        // specify that reader must search for Code39, Code128 and DataMatrix barcodes only
                        reader.Settings.ScanBarcodeTypes =
                            BarcodeType.Code39 |
                            BarcodeType.Code128 |
                            BarcodeType.DataMatrix;
            
                        // specify that reader must search for horizontal and vertical barcodes only
                        reader.Settings.ScanDirection = ScanDirection.LeftToRight | ScanDirection.RightToLeft;
            
                        // read barcodes from image
                        IBarcodeInfo[] infos = reader.ReadBarcodes(barcodeImage);
            
                        // show barcode recognition results
            
                        Console.WriteLine(string.Format("Recognition time {0} ms.",
                            reader.RecognizeTime.TotalMilliseconds));
            
                        if (infos.Length == 0)
                        {
                            Console.WriteLine("No barcodes found.");
                        }
                        else
                        {
                            Console.WriteLine(string.Format("{0} barcodes found:", infos.Length));
                            Console.WriteLine();
                            for (int i = 0; i &lt; infos.Length; i++)
                            {
                                IBarcodeInfo info = infos[i];
                                Console.WriteLine(string.Format("[{0}:{1}]", i, info.BarcodeType));
                                Console.WriteLine(string.Format("Value:      {0}", info.Value));
                                Console.WriteLine(string.Format("Confidence: {0}%", Math.Round(info.Confidence)));
                                Console.WriteLine(string.Format("Threshold:  {0}", info.Threshold));
                                Console.WriteLine(string.Format("Region:     {0}", info.Region));
                                Console.WriteLine();
                            }
                        }
                    }
                }
            
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeReader.ProcessImage(System.Drawing.Image)">
            <summary>
            Allows to process the image before barcode reading.
            </summary>
            <param name="source">Image with barcodes.</param>
            <returns>Processed image.</returns>
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeReader.Dispose">
            <summary>
            Releases all resources used by this <see cref="T:Vintasoft.Barcode.BarcodeReader" />.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeReader.Settings">
            <summary>
            Defines the barcode reader settings.
            </summary>
            <example>
            Please see example <see cref="M:Vintasoft.Barcode.BarcodeReader.ReadBarcodes(System.IO.Stream)">here</see>.
            </example>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeReader.RecognizeTime">
            <summary>
            Gets an information about barcodes read time.
            </summary>
            <example>
            Please see example <see cref="M:Vintasoft.Barcode.BarcodeReader.ReadBarcodes(System.IO.Stream)">here</see>.
            </example>
        </member>
        <member name="E:Vintasoft.Barcode.BarcodeReader.Progress">
            <summary>
            Occurs when progress of barcode reading is changed. 
            </summary>
            <remarks>
            Used only in <see cref="P:Vintasoft.Barcode.ReaderSettings.AutomaticRecognition">Automatic recognition</see>
            and <see cref="P:Vintasoft.Barcode.ReaderSettings.ThresholdIterations">iteration process</see>.
            </remarks>
        </member>
        <member name="T:Vintasoft.Barcode.BarcodeReaderProgressEventArgs">
            <summary>
            Provides data for the <see cref="E:Vintasoft.Barcode.BarcodeReader.Progress" /> event.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeReaderProgressEventArgs.Progress">
            <summary>
            Returns the progress, in percent, of current action.
            </summary>
            <value>Value from 0 to 100.</value>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeReaderProgressEventArgs.CanCancel">
            <summary>
            Determines that current action can be canceled.
            </summary>
            <value><b>true</b> if current action can be canceled;
            <b>false</b> otherwise.
            </value>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeReaderProgressEventArgs.Cancel">
            <summary>
            Determines that current action must be canceled.
            </summary>
            <value>
            <b>true</b> if current action must be canceled;
            <b>false</b> otherwise.
            </value>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeReaderProgressEventArgs.FoundBarcodes">
            <summary> 
            Gets the Collection of recognized barcodes.
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.BarcodeCharacteristics">
            <summary>
            Specifies available barcode characteristics.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeCharacteristics.Undefinded">
            <summary>
            Barcode characteristics are undefined.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeCharacteristics.SmallBarcodes">
            <summary>
            Image with small barcodes.
            </summary>
            <remarks>
            This characteristic has effect only with automatic barcode recognition
            (<see cref="P:Vintasoft.Barcode.ReaderSettings.AutomaticRecognition" /> is <b>true</b>).
            </remarks>
        </member>
        <member name="T:Vintasoft.Barcode.BarcodeInfo.Code128EncodingMode">
            <summary>
            Specifies available data encodation modes.
            </summary>
            <seealso cref="T:Vintasoft.Barcode.BarcodeInfo.Code128ValueItem" />
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.Code128EncodingMode.Undefined">
            <summary>
            Undefined (auto detect).
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.Code128EncodingMode.ModeA">
            <summary>
            Mode A. Symbols with codes from 0 to 95.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.Code128EncodingMode.ModeB">
            <summary>
            Mode B. Symbols with codes from 32 to 127.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.Code128EncodingMode.ModeC">
            <summary>
            Mode C. Pair of numbers from '00' to '99'.
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.BarcodeInfo.Code128ValueItem">
            <summary>
            Class that allows to access the encoding modes of Code128 barcode.
            </summary>
            <example>
            <code lang="VB.NET">   
            Imports System.Drawing   
               
            Imports Vintasoft.Barcode   
            Imports Vintasoft.Barcode.BarcodeInfo   
               
            ''' &lt;summary&gt;   
            ''' Test that shows how to create image with Code128 barcode with multiple value items.   
            ''' &lt;/summary&gt;   
            Class Code128ValueItemExample   
               
            	''' &lt;summary&gt;   
            	''' Run the test.   
            	''' &lt;/summary&gt;   
            	Public Shared Sub TestWriteBCBModes()   
            		' create image with barcode   
            		Using barcodeImage As Bitmap = WriteBCBModes("ABC", "12345678", "1234ABC")   
            			' create the barcode reader   
            			Using reader As New BarcodeReader()   
            				' specify that reader must search for Code128 barcodes only   
            				reader.Settings.ScanBarcodeTypes = BarcodeType.Code128   
               
            				' read barcode from image   
            				Dim barcodeInfo As IBarcodeInfo = reader.ReadBarcodes(barcodeImage)(0)   
               
            				' print barcode value   
            				Console.WriteLine("Value = {0}", barcodeInfo.Value)   
            				' print value items   
            				Console.WriteLine("ValueItems:")   
            				For Each item As Code128ValueItem In barcodeInfo.ValueItems   
            					Console.WriteLine("[{0}] {1}", item.Mode, item.Value)   
            				Next   
            			End Using   
            		End Using   
            	End Sub   
               
            	''' &lt;summary&gt;   
            	''' Write Code128 barcode in B, C, B modes.   
            	''' &lt;/summary&gt;   
            	Public Shared Function WriteBCBModes(part1B As String, part2C As String, part3B As String) As Bitmap   
            		' create value items   
               
            		Dim part1 As New Code128ValueItem(part1B, Code128EncodingMode.ModeB)   
            		Dim part2 As New Code128ValueItem(part2C, Code128EncodingMode.ModeC)   
            		Dim part3 As New Code128ValueItem(part3B, Code128EncodingMode.ModeB)   
               
            		' create the barcode writer   
            		Dim writer As New BarcodeWriter()   
               
            		' specify that writer must generate Code128 barcode   
            		writer.Settings.Barcode = BarcodeType.Code128   
               
            		' set value items   
            		writer.Settings.ValueItems = New ValueItemBase() {part1, part2, part3}   
               
            		' generate image with barcode   
            		Return writer.GetBarcodeAsBitmap()   
            	End Function   
               
            End Class
            </code>
            <code lang="C#">
            using System;
            using System.Drawing;
            
            using Vintasoft.Barcode;
            using Vintasoft.Barcode.BarcodeInfo;
            
            /// &lt;summary&gt;
            /// Test that shows how to create image with Code128 barcode with multiple value items.
            /// &lt;/summary&gt;
            class Code128ValueItemExample
            {
            
                /// &lt;summary&gt;
                /// Run the test.
                /// &lt;/summary&gt;
                public static void TestWriteBCBModes()
                {
                    // create image with barcode
                    using (Bitmap barcodeImage = WriteBCBModes("ABC", "12345678", "1234ABC"))
                    {
                        // create the barcode reader
                        using (BarcodeReader reader = new BarcodeReader())
                        {
                            // specify that reader must search for Code128 barcodes only
                            reader.Settings.ScanBarcodeTypes = BarcodeType.Code128;
            
                            // read barcode from image
                            IBarcodeInfo barcodeInfo = reader.ReadBarcodes(barcodeImage)[0];
            
                            // print barcode value
                            Console.WriteLine("Value = {0}", barcodeInfo.Value);
                            // print value items
                            Console.WriteLine("ValueItems:");
                            foreach (Code128ValueItem item in barcodeInfo.ValueItems)
                                Console.WriteLine("[{0}] {1}", item.Mode, item.Value);
                        }
                    }
                }
                
                /// &lt;summary&gt;
                /// Write Code128 barcode in B, C, B modes.
                /// &lt;/summary&gt;
                public static Bitmap WriteBCBModes(string part1B, string part2C, string part3B)
                {
                    // create value items
            
                    Code128ValueItem part1 = new Code128ValueItem(part1B, Code128EncodingMode.ModeB);
                    Code128ValueItem part2 = new Code128ValueItem(part2C, Code128EncodingMode.ModeC);
                    Code128ValueItem part3 = new Code128ValueItem(part3B, Code128EncodingMode.ModeB);
            
                    // create the barcode writer
                    BarcodeWriter writer = new BarcodeWriter();
            
                    // specify that writer must generate Code128 barcode
                    writer.Settings.Barcode = BarcodeType.Code128;
            
                    // set value items
                    writer.Settings.ValueItems = new ValueItemBase[] { part1, part2, part3 };
            
                    // generate image with barcode
                    return writer.GetBarcodeAsBitmap();
                }
            
            }
            </code>
            </example>
        </member>
        <member name="T:Vintasoft.Barcode.BarcodeInfo.TextValueItem">
            <summary>
            Class that allows to access a text data of barcode.
            </summary>    
        </member>
        <member name="T:Vintasoft.Barcode.BarcodeInfo.ValueItemBase">
            <summary>
            Specification for a value item of barcode.
            </summary>
            <example>
            <code lang="VB.NET">   
            Imports System.Drawing   
            Imports System.Text   
            Imports Vintasoft.Barcode   
            Imports Vintasoft.Barcode.BarcodeInfo   
               
            ''' &lt;summary&gt;   
            ''' Test that shows how to create image with 2D barcode wih text and binary data.   
            ''' &lt;/summary&gt;   
            Class ValueItemsExample   
               
            	''' &lt;summary&gt;   
            	''' Run the test.   
            	''' &lt;/summary&gt;   
            	Public Shared Sub Test()   
            		' generate binary data   
            		Dim data As Byte() = New Byte(15) {}   
            		For i As Integer = 0 To data.Length - 1   
            			data(i) = CByte(i * 16)   
            		Next   
               
            		' create image with PDF417 barcode   
            		Using barcodeImage As Image = CreateBarcodeWithTextAndBinaryData(BarcodeType.PDF417, data)   
            			' read barcode from image   
            			ReadBarcode(barcodeImage, BarcodeType.PDF417)   
            		End Using   
               
            		' create image with Aztec barcode   
            		Using barcodeImage As Image = CreateBarcodeWithTextAndBinaryData(BarcodeType.Aztec, data)   
            			' read barcode from image   
            			ReadBarcode(barcodeImage, BarcodeType.Aztec)   
            		End Using   
               
            		' create image with DataMatrix barcode   
            		Using barcodeImage As Image = CreateBarcodeWithTextAndBinaryData(BarcodeType.DataMatrix, data)   
            			' read barcode from image   
            			ReadBarcode(barcodeImage, BarcodeType.DataMatrix)   
            		End Using   
               
            		' create image with QR barcode   
            		Using barcodeImage As Image = CreateBarcodeWithTextAndBinaryData(BarcodeType.QR, data)   
            			' read barcode from image   
            			ReadBarcode(barcodeImage, BarcodeType.QR)   
            		End Using   
            	End Sub   
               
            	''' &lt;summary&gt;   
            	''' Creates image with barcode wih text and binary data.   
            	''' &lt;/summary&gt;   
            	Private Shared Function CreateBarcodeWithTextAndBinaryData(barcodeType As BarcodeType, data As Byte()) As Image   
            		' create text value item   
            		Dim textData As New TextValueItem("BINARY DATA: ")   
            		' create binary value item   
            		Dim binaryData As New BinaryValueItem(data)   
               
            		' create the barcode writer   
            		Dim writer As New BarcodeWriter()   
               
            		' specify that writer must generate barcode of spefied type   
            		writer.Settings.Barcode = barcodeType   
               
            		' set the barcode value items   
            		writer.Settings.ValueItems = New ValueItemBase() {textData, binaryData}   
               
            		' create image with barcode   
            		Return writer.GetBarcodeAsBitmap()   
            	End Function   
               
            	''' &lt;summary&gt;   
            	''' Read barcode from image and show the barcode value items.   
            	''' &lt;/summary&gt;   
            	Private Shared Sub ReadBarcode(image As Image, barcode As BarcodeType)   
            		' create the barcode reader   
            		Using reader As New BarcodeReader()   
            			' specify that reader must search for barcodes of specified types   
            			reader.Settings.ScanBarcodeTypes = barcode   
               
            			' read barcode from image   
            			Dim barcodeInfo As IBarcodeInfo = reader.ReadBarcodes(image)(0)   
               
            			' for each found barcode   
            			For i As Integer = 0 To barcodeInfo.ValueItems.Length - 1   
            				' show the barcode value tems   
               
            				Dim itemValue As New StringBuilder()   
            				If TypeOf barcodeInfo.ValueItems(i) Is BinaryValueItem Then   
            					Dim data As Byte() = DirectCast(barcodeInfo.ValueItems(i), BinaryValueItem).Value   
            					For j As Integer = 0 To data.Length - 1   
            						itemValue.Append(String.Format("{0} ", data(j)))   
            					Next   
            				Else   
            					itemValue.Append(barcodeInfo.ValueItems(i).ToString())   
            				End If   
            				Console.WriteLine(String.Format("[{0}] {1}", barcodeInfo.ValueItems(i).[GetType]().Name, itemValue))   
            			Next   
            		End Using   
               
            		Console.WriteLine()   
            	End Sub   
               
            End Class
            </code>
            <code lang="C#">
            using System;
            using System.Drawing;
            using System.Text;
            using Vintasoft.Barcode;
            using Vintasoft.Barcode.BarcodeInfo;
            
            /// &lt;summary&gt;
            /// Test that shows how to create image with 2D barcode wih text and binary data.
            /// &lt;/summary&gt;
            class ValueItemsExample
            {
            
                /// &lt;summary&gt;
                /// Run the test.
                /// &lt;/summary&gt;
                public static void Test()
                {
                    // generate binary data
                    byte[] data = new byte[16];
                    for (int i = 0; i &lt; data.Length; i++)
                        data[i] = (byte)(i * 16);
            
                    // create image with PDF417 barcode
                    using (Image barcodeImage = CreateBarcodeWithTextAndBinaryData(BarcodeType.PDF417, data))
                    {
                        // read barcode from image
                        ReadBarcode(barcodeImage, BarcodeType.PDF417);
                    }
            
                    // create image with Aztec barcode
                    using (Image barcodeImage = CreateBarcodeWithTextAndBinaryData(BarcodeType.Aztec, data))
                    {
                        // read barcode from image
                        ReadBarcode(barcodeImage, BarcodeType.Aztec);
                    }
            
                    // create image with DataMatrix barcode
                    using (Image barcodeImage = CreateBarcodeWithTextAndBinaryData(BarcodeType.DataMatrix, data))
                    {
                        // read barcode from image
                        ReadBarcode(barcodeImage, BarcodeType.DataMatrix);
                    }
            
                    // create image with QR barcode
                    using (Image barcodeImage = CreateBarcodeWithTextAndBinaryData(BarcodeType.QR, data))
                    {
                        // read barcode from image
                        ReadBarcode(barcodeImage, BarcodeType.QR);
                    }
                }
                
                /// &lt;summary&gt;
                /// Creates image with barcode wih text and binary data.
                /// &lt;/summary&gt;
                static Image CreateBarcodeWithTextAndBinaryData(BarcodeType barcodeType, byte[] data)
                {
                    // create text value item
                    TextValueItem textData = new TextValueItem("BINARY DATA: ");
                    // create binary value item
                    BinaryValueItem binaryData = new BinaryValueItem(data);
            
                    // create the barcode writer
                    BarcodeWriter writer = new BarcodeWriter();
            
                    // specify that writer must generate barcode of spefied type
                    writer.Settings.Barcode = barcodeType;
            
                    // set the barcode value items
                    writer.Settings.ValueItems = new ValueItemBase[] { textData, binaryData };
                    
                    // create image with barcode
                    return writer.GetBarcodeAsBitmap();
                }
            
                /// &lt;summary&gt;
                /// Read barcode from image and show the barcode value items.
                /// &lt;/summary&gt;
                static void ReadBarcode(Image image, BarcodeType barcode)
                {
                    // create the barcode reader
                    using (BarcodeReader reader = new BarcodeReader())
                    {
                        // specify that reader must search for barcodes of specified types
                        reader.Settings.ScanBarcodeTypes = barcode;
            
                        // read barcode from image
                        IBarcodeInfo barcodeInfo = reader.ReadBarcodes(image)[0];
            
                        // for each found barcode
                        for (int i = 0; i &lt; barcodeInfo.ValueItems.Length; i++)
                        {
                            // show the barcode value tems
            
                            StringBuilder itemValue = new StringBuilder();
                            if (barcodeInfo.ValueItems[i] is BinaryValueItem)
                            {
                                byte[] data = ((BinaryValueItem)barcodeInfo.ValueItems[i]).Value;
                                for (int j = 0; j &lt; data.Length; j++)
                                    itemValue.Append(string.Format("{0} ", data[j]));
                            }
                            else
                            {
                                itemValue.Append(barcodeInfo.ValueItems[i].ToString());
                            }
                            Console.WriteLine(
                                string.Format("[{0}] {1}", barcodeInfo.ValueItems[i].GetType().Name, itemValue));
                        }
                    }
            
                    Console.WriteLine();
                }
            
            }
            </code>
            </example>
            <seealso cref="P:Vintasoft.Barcode.WriterSettings.ValueItems">WriterSettings.ValueItems</seealso>   
            <seealso cref="P:Vintasoft.Barcode.IBarcodeInfo.ValueItems">IBarcodeInfo.ValueItems</seealso>
            <seealso cref="T:Vintasoft.Barcode.BarcodeInfo.NonDataFlagValueItem" /> 
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.ValueItemBase.DataType">
            <summary>
            Gets a data type of this value item.
            </summary>
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeInfo.TextValueItem.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Barcode.BarcodeInfo.TextValueItem" /> class. 
            </summary>
            <param name="value">value of text data.</param>
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeInfo.TextValueItem.ToString">
            <summary> 
             Converts the value item of this instance to its equivalent string.
             </summary>
             <returns>String representation of this value item.</returns>        
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.TextValueItem.Value">
            <summary>
            Returns a value of text data.
            </summary>
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeInfo.Code128ValueItem.#ctor(System.String,Vintasoft.Barcode.BarcodeInfo.Code128EncodingMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Barcode.BarcodeInfo.Code128ValueItem" /> class.
            </summary>
            <param name="value">Value of the data.</param>
            <param name="encodingMode">Encoding mode.</param>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.Code128ValueItem.Mode">
            <summary>
            Gets the encoding mode.
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.BarcodeInfo.MSIChecksumType">
            <summary>
            Specifies available checksums in MSI barcode.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.MSIChecksumType.None">
            <summary>
            No checksum.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.MSIChecksumType.Mod10">
            <summary>
            Modulo 10 check digit.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.MSIChecksumType.Mod11">
            <summary>
            Check digit is a Modulo 11 approach.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.MSIChecksumType.Mod10Mod10">
            <summary>
            Two Modulo 10 checksum digits.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.MSIChecksumType.Mod11Mod10">
            <summary>
            Two checksum digits: Modulo 11 and Modulo 10.
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.BarcodeInfo.EANSubtype">
            <summary>
            Specifies available EAN barcode subtypes.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.EANSubtype.Undefined">
            <summary>
            Undefined. 
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.EANSubtype.ISBN">
            <summary>
            ISBN (ISBN-13) symbol is an EAN-13 with prefix 978 for the new ISBN-13 format, used to identify books. 
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.EANSubtype.ISMN">
            <summary>
            ISMN (ISMN-13) symbol is an EAN-13 with prefix 9790 for the new ISMN-13 format, used to identify printed music. 
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.EANSubtype.ISSN">
            <summary>
            ISSN symbol is an EAN-13 with prefix 977 used to identify periodicals. 
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.BarcodeInfo.PharmacodeInfo">
            <summary>
            Class that allows to get information about recognized Pharmacode barcode.
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.BarcodeInfo.BarcodeInfo1D">
            <summary>
            Class that allows to get information about recognized 1D barcode.
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.BarcodeInfo.BarcodeInfoBase">
            <summary>
            An abstract base class that allows to get information about recognized barcode.
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.IBarcodeInfo">
            <summary>
            Specification for a barcode information.
            </summary>
        </member>
        <member name="M:Vintasoft.Barcode.IBarcodeInfo.ToString">
            <summary>
            Converts the information about barcode of this instance to its equivalent
            string.
            </summary>
            <returns>String representation of barcode.</returns>
        </member>
        <member name="P:Vintasoft.Barcode.IBarcodeInfo.ReadingQuality">
            <summary>
            Gets a barcode reading quality.
            </summary>
            <value>
            Possible values:
            <ul>
            <li>value is close to 1 - barcode was read very successful, e.g. it's ideal barcode</li>
            <li>value is less 0,5 - more than a half of scanning lines are damaged</li>
            </ul>
            </value>
            <remarks>
            This property has no relation to the barcode string value.
            <see cref="P:Vintasoft.Barcode.IBarcodeInfo.Confidence" /> property must be used if correctness of recognised
            barcode must be appraised.
            </remarks>
        </member>
        <member name="P:Vintasoft.Barcode.IBarcodeInfo.BarcodeType">
            <summary>
            Gets a barcode type.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.IBarcodeInfo.BarcodeInfoClass">
            <summary>
            Gets a barcode class: 1D or 2D.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.IBarcodeInfo.Value">
            <summary>
            Gets a barcode string.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.IBarcodeInfo.ShowNonDataFlagsInValue">
            <summary>
            Gets or sets a value that indicating whether 
            <see cref="T:Vintasoft.Barcode.BarcodeInfo.NonDataFlagValueItem">non-data flags</see>,
            <see cref="T:Vintasoft.Barcode.BarcodeInfo.EciCharacterValueItem">ECI character</see> or
            <see cref="T:Vintasoft.Barcode.BarcodeInfo.StructureAppendCharacter">Structure Append character</see> is visible
            in <see cref="P:Vintasoft.Barcode.IBarcodeInfo.Value">barcode value</see>.
            </summary>
            <seealso cref="T:Vintasoft.Barcode.BarcodeInfo.NonDataFlags" />
        </member>
        <member name="P:Vintasoft.Barcode.IBarcodeInfo.ValueItems">
            <summary>
            Gets an array of value items of barcode.
            </summary>
            <remarks>
            2D barcode can contain data of a three types in a single barcode,
            for example, barcode can contain two sections of text, one section
            of binary data and one section of ASCII data - this property
            allows to access these data.<br />
            </remarks>
            <example>
            Please see example <see cref="T:Vintasoft.Barcode.BarcodeInfo.ValueItemBase">here</see>.
            </example>
        </member>
        <member name="P:Vintasoft.Barcode.IBarcodeInfo.Region">
            <summary>
            Gets a barcode region.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.IBarcodeInfo.Direction">
            <summary>
            Gets a barcode direction.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.IBarcodeInfo.Confidence">
            <summary>
            Gets or sets barcode confidence, in percents.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.IBarcodeInfo.Threshold">
            <summary>
            Gets a threshold value of barcode.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.IBarcodeInfo.SymbolComponents">
            <summary>
            Gets an array of  symbol components from which symbol is composed.
            </summary>
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeInfo.BarcodeInfoBase.ToString">
            <summary> 
             Converts the information about barcode of this instance to its equivalent
             string.
             </summary>
             <returns>
             String representation of barcode.
             </returns>
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeInfo.BarcodeInfoBase.CompareTo(System.Object)">
            <summary>
            Compare using the <see cref="P:Vintasoft.Barcode.BarcodeInfo.BarcodeInfoBase.Region">Region</see> center.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.BarcodeInfoBase.BarcodeInfoClass">
            <summary>
            Gets a barcode class: 1D or 2D.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.BarcodeInfoBase.Direction">
            <summary>
            Gets a scan direction in which the barcode was found.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.BarcodeInfoBase.BarcodeType">
            <summary>
            Gets a barcode symbolgy type.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.BarcodeInfoBase.Value">
            <summary>
            Gets a barcode string.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.BarcodeInfoBase.ValueItems">
            <summary>
            Gets an array of value items of barcode.
            </summary>
            <remarks>
            Barcode can contain data of a three types in a single barcode,
            for example, barcode can contain one non-data flag, two sections of text an one section
            of binary data - this property allows to access these data.
            </remarks>
            <example>
            Please see example <see cref="T:Vintasoft.Barcode.BarcodeInfo.ValueItemBase">here</see>.
            </example>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.BarcodeInfoBase.ShowNonDataFlagsInValue">
            <summary>
            Gets or sets a value that indicating whether 
            <see cref="T:Vintasoft.Barcode.BarcodeInfo.NonDataFlags">non-data flags</see> or 
            <see cref="T:Vintasoft.Barcode.BarcodeInfo.EciCharacterValueItem">ECI character</see> is visible
            in <see cref="P:Vintasoft.Barcode.BarcodeInfo.BarcodeInfoBase.Value">barcode value</see>.
            </summary>
            <value>Default value is <b>true</b>.</value>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.BarcodeInfoBase.Region">
            <summary>
            Gets a barcode region.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.BarcodeInfoBase.Confidence">
            <summary>
            Gets or sets a barcode confidence, in percents.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.BarcodeInfoBase.Threshold">
            <summary>
            Gets a threshold value of barcode.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.BarcodeInfoBase.ReadingQuality">
            <summary>
            Shows what part of barcode scan lines are correct.
            </summary>
            <value>Possible values: from 0 to 1.</value>
            <remarks>
            <b>This property has correct value</b> if value of the
            <see cref="P:Vintasoft.Barcode.ReaderSettings.ScanInterval" /> is set to 1.<br />
            <br />
            Barcode is ideal if value of this property is close to 1.<br />
            Barcode has more than a half of scan lines damaged if value of this
            property is less than 0.5.<br />
            <br />
            This property has no relation to the barcode string value,
            it only shows how many scan lines of barcode are correct.<br />
            Use the <see cref="P:Vintasoft.Barcode.IBarcodeInfo.Confidence" /> property if you want to
            know confidence of barcode.
            </remarks>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.BarcodeInfoBase.SymbolComponents">
            <summary>
            Gets an array of symbol components from which the barcode symbol is composed.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.BarcodeInfo1D.NarrowBarCount">
            <summary>
            Gets a narrow bar count.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.PharmacodeInfo.ReverseReadValue">
            <summary>
            Gets a reversed barcode value.
            </summary>        
            <remarks>
            Since a value of Pharmacode depends on the read direction, 
            this property returns a reversed barcode value.
            </remarks>
        </member>
        <member name="T:Vintasoft.Barcode.BarcodeInfo.AustralianPostCustomerInfoFormat">
            <summary>
            Specifies available formats of customer information field in barcode.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.AustralianPostCustomerInfoFormat.None">
            <summary>
            Customer information field will be ignored.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.AustralianPostCustomerInfoFormat.TableC">
            <summary>
            Customer information field contains characters (upper case, lower case,
            numeric and some special characters).
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.AustralianPostCustomerInfoFormat.TableN">
            <summary>
            Customer information field contains digits.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.AustralianPostCustomerInfoFormat.Custom">
            <summary>
            Customer information field has a proprietary format. Customer
            information will be returned as string of bar states. Each bar state
            will be represented as symbol: A - Ascending Bar, D - Decending Bar,
            F - Full Bar, T - Tracking Bar.
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.ScanDirection">
            <summary>
            Specifies available direction types for barcode scanning. 
            </summary>
            <remarks>These values may be OR'ed together to form a combination of
            directions.</remarks>
        </member>
        <member name="F:Vintasoft.Barcode.ScanDirection.None">
            <summary>
            Barcodes is not scanned.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.ScanDirection.LeftToRight">
            <summary>
            Horizontally, left to right.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.ScanDirection.TopToBottom">
            <summary>
            Vertically, top to bottom.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.ScanDirection.RightToLeft">
            <summary>
            Horizontally, right to left.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.ScanDirection.BottomToTop">
            <summary>
            Vertically, bottom to top.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.ScanDirection.Angle45and135">
            <summary>
            Top to bottom and bottom to top at 45° and 135° angle. This direction cannot
            be used separately and should should be used along with horizontal or/and
            vertical direction.
            </summary>
            <remarks>
            This scan direction should be used only if image contains low and
            wide barcodes rotated to 30-60 degrees.
            </remarks>
        </member>
        <member name="F:Vintasoft.Barcode.ScanDirection.Horizontal">
            <summary>
            Horizontally, left to right and right to left.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.ScanDirection.Vertical">
            <summary>
            Vertically, bottom to top and top to bottom.
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.ThresholdMode">
            <summary>
            Specifies available modes of threshold detection.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.ThresholdMode.Automatic">
            <summary>
            Barcode reader detects the threshold (value of the <see cref="P:Vintasoft.Barcode.ReaderSettings.Threshold" />
            property) automatically. This mode is decreasing speed of barcode
            reading therefore it should be used only if you have many different images
            with barcodes and single threshold value cannot be used.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.ThresholdMode.Manual">
            <summary>
            Barcode reader uses defined threshold (value of the <see cref="P:Vintasoft.Barcode.ReaderSettings.Threshold" /> property).
            Please read more info about this mode
            <see cref="P:Vintasoft.Barcode.ReaderSettings.ThresholdMode">here</see>.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.ThresholdMode.Iterations">
            <summary>
            Barcode reader uses some threshold values.
            Value of the <see cref="P:Vintasoft.Barcode.ReaderSettings.ThresholdMin" />, 
            <see cref="P:Vintasoft.Barcode.ReaderSettings.ThresholdMax" /> and <see cref="P:Vintasoft.Barcode.ReaderSettings.ThresholdIterations" />
            properties used in barcode reading iteration process. 
            Please read more info about this mode <see cref="P:Vintasoft.Barcode.ReaderSettings.ThresholdIterations">here</see>.
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.VerifyBarcodeDelegate">
            <summary>
            Represents the method that verifies the information about barcode found by barcode reader.
            </summary>
            <param name="reader">The source of the event.</param>
            <param name="barcodeInfo"><see cref="T:Vintasoft.Barcode.IBarcodeInfo" /> that contains information about found barcode.</param>
            <remarks>
            <see cref="P:Vintasoft.Barcode.IBarcodeInfo.Confidence" /> should be changed after analyzing of <i>barcodeInfo</i>.
            </remarks>
        </member>
        <member name="T:Vintasoft.Barcode.BarcodeInfo.UPCEANInfo">
            <summary>
            Class that allows to get information about recognized EAN-8/13 barcode.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.UPCEANInfo.Value">
            <summary>
            Returns a barcode value as a string.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.UPCEANInfo.Data">
            <summary>
            Returns a barcode value as an array of integer values.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.UPCEANInfo.PlusData">
            <summary>
            Returns a EANPlus barcode value as an array of integer values.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.UPCEANInfo.UPCEValue">
            <summary>
            Returns a UPCE (6 digits) barcode value as a string.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.UPCEANInfo.UPCAValue">
            <summary>
            Returns a UPCA (12 digits) barcode value as a string.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.UPCEANInfo.Subtype">
            <summary>
            Gets the EAN subtype.
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.BarcodeInfo.AustralianPostInfo">
            <summary>
            Class that allows to get information about recognized AustralianPost barcode.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.AustralianPostInfo.FormatControlCode">
            <summary>
            Format control code (FCC).
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.AustralianPostInfo.DeliveryPointID">
            <summary>
            Delivery Point Identifier (DPID).
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.AustralianPostInfo.CustomerInformation">
            <summary>
            Customer Information (optional information).
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.AustralianPostInfo.Value">
            <summary>
            Returns string concatination of the following values:
            <see cref="P:Vintasoft.Barcode.BarcodeInfo.AustralianPostInfo.FormatControlCode" />, <see cref="P:Vintasoft.Barcode.BarcodeInfo.AustralianPostInfo.DeliveryPointID" />,
            <see cref="P:Vintasoft.Barcode.BarcodeInfo.AustralianPostInfo.CustomerInformation" />.
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.BarcodeInfo.IntelligentMailInfo">
            <summary>
            Class that allows to get information about recognized IntelligentMail barcode.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.IntelligentMailInfo.BarcodeID">
            <summary>
            The Barcode Identifier shall be assigned by USPS to encode the presort
            identification that is currently printed in human readable form on the
            optional endorsement line (OEL) as well as for future USPS use.
            </summary>
            <value>
            This shall be two digits, with the second digit in the range of 0-4. The
            allowable encoding ranges shall be 00-04, 10-14, 20-24, 30-34, 40-44,
            50-54, 60-64, 70-74, 80-84, and 90-94.
            </value>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.IntelligentMailInfo.ServiceTypeID">
            <summary>
            The Service Type Identifier shall be assigned by USPS for any
            combination of services requested on the mailpiece.
            </summary>
            <value>
            The allowable encoding range shall be 000-999. Each 3-digit value
            shall correspond to a particular mail class with a particular
            combination of service(s). Each service program, such as OneCode
            Confirm and OneCode ACS, shall provide the list of Service Type
            Identifier values.
            </value>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.IntelligentMailInfo.MailerID">
            <summary>
            The Mailer or Customer Identifier shall be assigned by USPS as a
            unique, 6 or 9 digit number that identifies a business entity.
            </summary>
            <value>
            The allowable encoding range for the 6 digit Mailer ID shall be
            000000-899999, while the allowable encoding range for the 9 digit
            Mailer ID shall be 900000000-999999999.
            </value>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.IntelligentMailInfo.SerialNumber">
            <summary>
            The Serial or Sequence Number shall be assigned by the mailer for
            uniquely identifying and tracking mailpieces.
            </summary>
            <value>
            The allowable encoding range shall be 000000000-999999999 when used
            with a 6 digit Mailer ID and 000000-999999 when used with a 9 digit Mailer ID.
            </value>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.IntelligentMailInfo.RoutingZIPCode">
            <summary>
            The Delivery Point ZIP Code shall be assigned by the mailer for routing
            the mailpiece. This shall replace POSTNET for routing the mailpiece to
            its final delivery point. 
            </summary>
            <value>
            The length may be 0, 5, 9, or 11 digits. The allowable encoding ranges
            can be no ZIP Code, 00000-99999, 000000000-999999999 or
            00000000000-99999999999.
            </value>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.IntelligentMailInfo.Value">
            <summary>
            Returns string concatenation of the following values:
            <see cref="P:Vintasoft.Barcode.BarcodeInfo.IntelligentMailInfo.BarcodeID" />
            <see cref="P:Vintasoft.Barcode.BarcodeInfo.IntelligentMailInfo.ServiceTypeID" />
            <see cref="P:Vintasoft.Barcode.BarcodeInfo.IntelligentMailInfo.MailerID" />
            <see cref="P:Vintasoft.Barcode.BarcodeInfo.IntelligentMailInfo.SerialNumber" />
            <see cref="P:Vintasoft.Barcode.BarcodeInfo.IntelligentMailInfo.RoutingZIPCode" />
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.BarcodeInfo.Mailmark4StateValueItem">
            <summary>
            Class that contains information about a decoded value of Mailmark 4-state C/L barcode.
            </summary>
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeInfo.Mailmark4StateValueItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Barcode.BarcodeInfo.Mailmark4StateValueItem" /> class. 
            </summary>
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeInfo.Mailmark4StateValueItem.ToString">
            <summary>
            Converts the information about value item of this instance to its equivalent
            string.
            </summary>
            <returns>
            String representation of value item.
            </returns>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.Mailmark4StateValueItem.VersionId">
            <summary>
            Gets or sets the barcode version as relevant to each Information Type ID.
            </summary>
            <value>
            <ul>
            <li>"1" – Mailmark barcode</li>
            <li>"0", "2" to "9", "A" to "Z" - spare for future use.</li>
            </ul>
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            value if not equal "1".</exception>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.Mailmark4StateValueItem.Format">
            <summary>
            Gets or sets the format of the item.
            </summary>
            <value>
            <ul>
            <li>"0" – Null or Test</li>
            <li>"1" – Letter</li>
            <li>"2" – Large Letter#</li>
            <li>"3" – Packet (for potential future use)</li>
            <li>"4" – Parcel (for potential future use)</li>
            <li>"5" to "9" – Spare (for potential future use)</li>
            <li>"A" to "Z" – Spare (for potential future use).</li>
            </ul>
            </value>
            <exception cref="T:System.ArgumentException">Thrown if
            value contains less or more than 1 symbol.</exception>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.Mailmark4StateValueItem.Class">
            <summary>
            Gets or sets the class of the item.
            </summary>
            <value>
            <ul>
            <li>"0" - Null or Test</li>
            <li>"1" - 1C (Retail)</li>
            <li>"2" - 2C (Retail)</li>
            <li>"3" - 3C (Retail)</li>
            <li>"4" - Premium (Retail Publishing Mail) (for potential future use)</li>
            <li>"5" - Deferred (Retail)</li>
            <li>"6" - Air (Retail) (for potential future use)</li>
            <li>"7" - Surface (Retail) (for potential future use)</li>
            <li>"8" - Premium (Network Access)</li>
            <li>"9" - Standard (Network Access)</li>
            <li>"A" to "Z" – Spare(for potential future use).</li>
            </ul>
            </value>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.Mailmark4StateValueItem.SupplyChainId">
            <summary>
            Gets or sets the unique chain of customers involved in the mailing.
            </summary>
            <value>
            "00" to "99" for C version, "000000" to "999999" for L version.
            </value>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.Mailmark4StateValueItem.ItemId">
            <summary>
            Gets or sets the unique item within the Supply Chain ID.
            </summary>
            <value>
            "00000000" to "99999999".
            </value>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.Mailmark4StateValueItem.Dps">
            <summary>
            Gets or sets the Destination Post Code plus Delivery Point Suffix (DPS).
            </summary>
            <value>
            The PC and DP must comply with a valid PAF format 
            (see Royal Mail Mailmark® barcode definition document, Appendix A).
            </value>
            <remarks>
            Contains the Postcode of the Delivery Address with DPS.<br />
            <br />
            If inland the Postcode/DP contains the following number of characters:<br />
            <ul>
            <li>Area (1 or 2 characters)</li>
            <li>District (1 or 2 characters)</li>
            <li>Sector (1 character)</li>
            <li>Unit (2 characters)</li>
            <li>DPS (2 characters)</li>
            </ul>
            <br />
            If no destination post code information is available this field shall be filled 
            with 9 space characters.
            </remarks>
        </member>
        <member name="T:Vintasoft.Barcode.BarcodeInfo.CodabarInfo">
            <summary>
            Class that allows to get information about recognized Codabar barcode.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.CodabarInfo.StartSymbol">
            <summary>
            Gets a barcode start symbol.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.CodabarInfo.StopSymbol">
            <summary>
            Gets a barcode stop symbol.
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.BarcodeInfo.RSSInfo">
            <summary>
            Class that allows to get information about recognized RSS barcode.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.RSSInfo.LinkageFlag">
            <summary>
            Gets indicator encoded in an RSS linear component to signal 
            if a 2D component accompanies the linear component.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.RSSInfo.RowsCount">
            <summary>
            Returns a count of rows.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.RSSInfo.SegmentsInRow">
            <summary>
            Returns a count of segments in row.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.RSSInfo.SegmentsCount">
            <summary>
            Returns a count of segments.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.RSSInfo.Value">
            <summary>
            Gets a barcode string.
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.BarcodeInfo.UnknownLinearBarcodeInfo">
            <summary>
            Class that contains information about unknown linear barcode.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.UnknownLinearBarcodeInfo.NormalizedBarcodeLine">
            <summary>
            Gets a normalized barcode line.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.UnknownLinearBarcodeInfo.BarcodeLine">
            <summary>
            Gets a barcode line.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.UnknownLinearBarcodeInfo.Value">
            <summary>
            Gets a barcode string.
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.BarcodeInfo.AztecEncodingMode">
            <summary>
            Aztec encoding mode.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.AztecEncodingMode.Text">
            <summary>
            Text/Digits data.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.AztecEncodingMode.Byte">
            <summary>
            Binary data (8-bit bytes).
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.AztecEncodingMode.Undefined">
            <summary>
            Undefined.
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.BarcodeInfo.AztecStructureAppendCharacter">
            <summary>
            Class that contains information about the Aztec Structure Append non-data character.
            </summary>
            <example>
            Please see example <see cref="T:Vintasoft.Barcode.BarcodeInfo.StructureAppendCharacter">here</see>.
            </example>
            <seealso cref="T:Vintasoft.Barcode.BarcodeInfo.StructureAppendCharacter" />
        </member>
        <member name="T:Vintasoft.Barcode.BarcodeInfo.StructureAppendCharacter">
            <summary>
            Class that contains information about the Structure Append non-data character.
            </summary>
            <remarks>
            To fit a non-square area or to handle larger messages than are practical 
            in a single symbol, a data message can be distributed across several symbols 
            using Structure Append character.<br />
            This character is available only in first position Aztec, DataMatrix, MaxiCode and QR barcodes.
            </remarks>
            <example>
            This example shows how to write and read Structure Append character.
            <code lang="VB.NET">   
            Imports System.Drawing   
            Imports System.Text   
            Imports Vintasoft.Barcode   
            Imports Vintasoft.Barcode.BarcodeInfo   
               
            ''' &lt;summary&gt;   
            ''' Test that shows how to use Structure Append feature for distributing data message across   
            ''' several 2D barcodes.   
            ''' &lt;/summary&gt;   
            Class StructureAppendExample   
               
            	''' &lt;summary&gt;   
            	''' Run the test.   
            	''' &lt;/summary&gt;   
            	Public Shared Sub Test()   
            		Dim barcodeType__1 As BarcodeType = BarcodeType.Aztec   
               
            		Dim symbolsCount As Integer = 5   
               
            		Dim symbolsValue As String = "In order to fit a non-square area or to handle larger messages than are practical " &amp; "in a single symbol, a data message can be distributed across several symbols." &amp; " Up to 16(DataMatrix, QR) or 26(Aztec) symbols may be appended in a structured format."   
               
            		' split data and generate barcodes   
            		Dim barcodeImages As Image() = GenerateBarcodes(barcodeType__1, symbolsValue, symbolsCount)   
               
            		' resort barcode images   
            		Array.Reverse(barcodeImages)   
            		Array.Reverse(barcodeImages, 0, barcodeImages.Length \ 2)   
               
            		' read barcodes and merge data value   
            		Dim readValue As String = ReadBarcodeValue(barcodeImages, barcodeType__1)   
               
            		If readValue = symbolsValue Then   
            			Console.WriteLine("Success")   
            		Else   
            			Throw New ApplicationException()   
            		End If   
            	End Sub   
               
            	''' &lt;summary&gt;   
            	''' Split value and generate symbolCount barcodes using Structure Append.   
            	''' &lt;/summary&gt;   
            	Public Shared Function GenerateBarcodes(barcodeType__1 As BarcodeType, value As String, symbolCount As Integer) As Image()   
            		' create an image array   
            		Dim result As Image() = New Image(symbolCount - 1) {}   
               
            		' create the barcode writer   
            		Dim writer As New BarcodeWriter()   
               
            		' specify that writer must generate barcode of specified type   
            		writer.Settings.Barcode = barcodeType__1   
               
            		' create parity data for a QR barcode value   
            		Dim parityData As Byte = 0   
            		If barcodeType__1 = BarcodeType.QR Then   
            			parityData = QRStructureAppendCharacter.CaluculateParityData(value)   
            		End If   
               
            		' generate symbols(barcodes)   
            		Dim fragmentLength As Integer = value.Length \ symbolCount   
            		For i As Integer = 0 To symbolCount - 1   
            			' create Structure Append character   
               
            			Dim structureAppendCharacter As StructureAppendCharacter   
            			Select Case barcodeType__1   
            				Case BarcodeType.Aztec   
            					structureAppendCharacter = New AztecStructureAppendCharacter(i + 1, symbolCount, "")   
            					Exit Select   
               
            				Case BarcodeType.DataMatrix   
            					structureAppendCharacter = New DataMatrixStructureAppendCharacter(i + 1, symbolCount, 0)   
            					Exit Select   
               
            				Case BarcodeType.QR   
            					structureAppendCharacter = New QRStructureAppendCharacter(i + 1, symbolCount, parityData)   
            					Exit Select   
            				Case Else   
               
            					Throw New NotSupportedException()   
            			End Select   
               
            			' create symbol data   
               
            			Dim symbolTextData As String   
            			If i = symbolCount - 1 Then   
            				symbolTextData = value.Substring(i * fragmentLength)   
            			Else   
            				symbolTextData = value.Substring(i * fragmentLength, fragmentLength)   
            			End If   
               
            			Dim symbolData As New TextValueItem(symbolTextData)   
               
            			' set the barcode value items   
            			writer.Settings.ValueItems = New ValueItemBase() {structureAppendCharacter, symbolData}   
               
            			' create image with barcode   
            			result(i) = writer.GetBarcodeAsBitmap()   
            		Next   
               
            		Return result   
            	End Function   
               
            	''' &lt;summary&gt;   
            	''' Read barcodes and merge the results into a single value.   
            	''' &lt;/summary&gt;   
            	Private Shared Function ReadBarcodeValue(barcodeImages As Image(), barcodeType As BarcodeType) As String   
            		' create the barcode reader   
            		Using reader As New BarcodeReader()   
            			' specify that reader must search for barcodes of specified type   
            			reader.Settings.ScanBarcodeTypes = barcodeType   
               
            			' barcode reading results   
            			Dim readingResults As IBarcodeInfo() = New IBarcodeInfo(barcodeImages.Length - 1) {}   
            			' read barcodes   
            			For i As Integer = 0 To barcodeImages.Length - 1   
            				' read barcode from image   
            				readingResults(i) = reader.ReadBarcodes(barcodeImages(i))(0)   
               
            				' dispose image   
            				barcodeImages(i).Dispose()   
            			Next   
               
            			' determine symbol count   
            			Dim symbolsCount As Integer = 0   
            			For i As Integer = 0 To readingResults.Length - 1   
            				If TypeOf readingResults(i).ValueItems(0) Is StructureAppendCharacter Then   
            					symbolsCount = DirectCast(readingResults(i).ValueItems(0), StructureAppendCharacter).SymbolCount   
            					Exit For   
            				End If   
            			Next   
            			If symbolsCount = 0 Then   
            				Throw New ApplicationException("No structure append symbols.")   
            			End If   
               
            			' create array of string   
            			Dim resultValues As String() = New String(symbolsCount - 1) {}   
            			' fill resultValues   
            			For i As Integer = 0 To readingResults.Length - 1   
            				If TypeOf readingResults(i).ValueItems(0) Is StructureAppendCharacter Then   
            					Dim structureAppendCharacter As StructureAppendCharacter = DirectCast(readingResults(i).ValueItems(0), StructureAppendCharacter)   
            					If structureAppendCharacter.SymbolCount = symbolsCount Then   
            						readingResults(i).ShowNonDataFlagsInValue = False   
            						resultValues(structureAppendCharacter.SymbolPosition - 1) = readingResults(i).Value   
            					End If   
            				End If   
            			Next   
               
            			' build result string   
            			Dim result As New StringBuilder()   
            			For i As Integer = 0 To resultValues.Length - 1   
            				If resultValues(i) IsNot Nothing Then   
            					result.Append(resultValues(i))   
            				Else   
            					Throw New ApplicationException(String.Format("missing symbol at position {0}", i + 1))   
            				End If   
            			Next   
               
            			Return result.ToString()   
            		End Using   
            	End Function   
               
            End Class
            </code>
            <code lang="C#">
            using System;
            using System.Drawing;
            using System.Text;
            using Vintasoft.Barcode;
            using Vintasoft.Barcode.BarcodeInfo;
            
            /// &lt;summary&gt;
            /// Test that shows how to use Structure Append feature for distributing data message across
            /// several 2D barcodes.
            /// &lt;/summary&gt;
            class StructureAppendExample
            {
            
                /// &lt;summary&gt;
                /// Run the test.
                /// &lt;/summary&gt;
                public static void Test()
                {
                    BarcodeType barcodeType = BarcodeType.Aztec;
            
                    int symbolsCount = 5;
            
                    string symbolsValue =
                        "In order to fit a non-square area or to handle larger messages than are practical " +
                        "in a single symbol, a data message can be distributed across several symbols." +
                        " Up to 16(DataMatrix, QR) or 26(Aztec) symbols may be appended in a structured format.";
            
                    // split data and generate barcodes
                    Image[] barcodeImages = GenerateBarcodes(barcodeType, symbolsValue, symbolsCount);
            
                    // resort barcode images
                    Array.Reverse(barcodeImages);
                    Array.Reverse(barcodeImages, 0, barcodeImages.Length / 2);
            
                    // read barcodes and merge data value
                    string readValue = ReadBarcodeValue(barcodeImages, barcodeType);
            
                    if (readValue == symbolsValue)
                        Console.WriteLine("Success");
                    else
                        throw new ApplicationException();
                }
            
                /// &lt;summary&gt;
                /// Split value and generate symbolCount barcodes using Structure Append.
                /// &lt;/summary&gt;
                public static Image[] GenerateBarcodes(BarcodeType barcodeType, string value, int symbolCount)
                {
                    // create an image array
                    Image[] result = new Image[symbolCount];
            
                    // create the barcode writer
                    BarcodeWriter writer = new BarcodeWriter();
                    
                    // specify that writer must generate barcode of specified type
                    writer.Settings.Barcode = barcodeType;
            
                    // create parity data for a QR barcode value
                    byte parityData = 0;
                    if (barcodeType == BarcodeType.QR)
                        parityData = QRStructureAppendCharacter.CaluculateParityData(value);
            
                    // generate symbols(barcodes)
                    int fragmentLength = value.Length / symbolCount;
                    for (int i = 0; i &lt; symbolCount; i++)
                    {
                        // create Structure Append character
            
                        StructureAppendCharacter structureAppendCharacter;
                        switch (barcodeType)
                        {
                            case BarcodeType.Aztec:
                                structureAppendCharacter =
                                    new AztecStructureAppendCharacter(i + 1, symbolCount, "");
                                break;
            
                            case BarcodeType.DataMatrix:
                                structureAppendCharacter =
                                    new DataMatrixStructureAppendCharacter(i + 1, symbolCount, 0);
                                break;
            
                            case BarcodeType.QR:
                                structureAppendCharacter =
                                    new QRStructureAppendCharacter(i + 1, symbolCount, parityData);
                                break;
            
                            default:
                                throw new NotSupportedException();
                        }
            
                        // create symbol data
            
                        string symbolTextData;
                        if (i == symbolCount - 1)
                            symbolTextData = value.Substring(i * fragmentLength);
                        else
                            symbolTextData = value.Substring(i * fragmentLength, fragmentLength);
                        
                        TextValueItem symbolData = new TextValueItem(symbolTextData);
            
                        // set the barcode value items
                        writer.Settings.ValueItems = new ValueItemBase[] { structureAppendCharacter, symbolData };
                        
                        // create image with barcode
                        result[i] = writer.GetBarcodeAsBitmap();
                    }
            
                    return result;
                }
            
                /// &lt;summary&gt;
                /// Read barcodes and merge the results into a single value.
                /// &lt;/summary&gt;
                private static string ReadBarcodeValue(Image[] barcodeImages, BarcodeType barcodeType)
                {
                    // create the barcode reader
                    using (BarcodeReader reader = new BarcodeReader())
                    {
                        // specify that reader must search for barcodes of specified type
                        reader.Settings.ScanBarcodeTypes = barcodeType;
            
                        // barcode reading results
                        IBarcodeInfo[] readingResults = new IBarcodeInfo[barcodeImages.Length];
                        // read barcodes
                        for (int i = 0; i &lt; barcodeImages.Length; i++)
                        {
                            // read barcode from image
                            readingResults[i] = reader.ReadBarcodes(barcodeImages[i])[0];
            
                            // dispose image
                            barcodeImages[i].Dispose();
                        }
            
                        // determine symbol count
                        int symbolsCount = 0;
                        for (int i = 0; i &lt; readingResults.Length; i++)
                        {
                            if (readingResults[i].ValueItems[0] is StructureAppendCharacter)
                            {
                                symbolsCount = ((StructureAppendCharacter)readingResults[i].ValueItems[0]).SymbolCount;
                                break;
                            }
                        }
                        if (symbolsCount == 0)
                            throw new ApplicationException("No structure append symbols.");
            
                        // create array of string
                        string[] resultValues = new string[symbolsCount];
                        // fill resultValues
                        for (int i = 0; i &lt; readingResults.Length; i++)
                        {
                            if (readingResults[i].ValueItems[0] is StructureAppendCharacter)
                            {
                                StructureAppendCharacter structureAppendCharacter =
                                    (StructureAppendCharacter)readingResults[i].ValueItems[0];
                                if (structureAppendCharacter.SymbolCount == symbolsCount)
                                {
                                    readingResults[i].ShowNonDataFlagsInValue = false;
                                    resultValues[structureAppendCharacter.SymbolPosition - 1] = readingResults[i].Value;
                                }
                            }
                        }
            
                        // build result string
                        StringBuilder result = new StringBuilder();
                        for (int i = 0; i &lt; resultValues.Length; i++)
                        {
                            if (resultValues[i] != null)
                            {
                                result.Append(resultValues[i]);
                            }
                            else
                            {
                                throw new ApplicationException(string.Format("missing symbol at position {0}", i + 1));
                            }
                        }
            
                        return result.ToString();
                    }
                }
            
            }
            </code>
            </example>
            <seealso cref="T:Vintasoft.Barcode.BarcodeInfo.AztecStructureAppendCharacter" />
            <seealso cref="T:Vintasoft.Barcode.BarcodeInfo.DataMatrixStructureAppendCharacter" />
            <seealso cref="T:Vintasoft.Barcode.BarcodeInfo.QRStructureAppendCharacter" />
        </member>
        <member name="T:Vintasoft.Barcode.BarcodeInfo.NonDataFlagValueItem">
            <summary>
            Class that allows to access a non-data flags of barcode.
            </summary>    
            <example>
            Please see example <see cref="T:Vintasoft.Barcode.BarcodeInfo.NonDataFlags">here</see>.
            </example>
            <seealso cref="P:Vintasoft.Barcode.IBarcodeInfo.ShowNonDataFlagsInValue">IBarcodeInfo.ShowNonDataFlagsInValue</seealso>
            <seealso cref="P:Vintasoft.Barcode.WriterSettings.ProcessSpecialSymbols">WriterSettings.ProcessSpecialSymbols</seealso>
            <seealso cref="T:Vintasoft.Barcode.BarcodeInfo.NonDataFlags" />
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeInfo.NonDataFlagValueItem.ToString">
            <summary> 
             Converts the <see cref="T:Vintasoft.Barcode.BarcodeInfo.NonDataFlagValueItem" /> of this instance to its equivalent
             string.
             </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.NonDataFlagValueItem.Name">
            <summary>
            Gets a flag name.
            </summary>
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeInfo.StructureAppendCharacter.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Barcode.BarcodeInfo.StructureAppendCharacter" /> class. 
            </summary>
            <param name="symbolPosition">The position for a symbol in the Structured Append format.</param>
            <param name="symbolCount">The number of symbols in the Structured Append format.</param>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.StructureAppendCharacter.SymbolCount">
            <summary>
            Gets the number of symbols in the Structured Append format.
            </summary>
            <value>
            Maximal value for Aztec - 26, for DataMatrix and QR - 16.<br />
            </value>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.StructureAppendCharacter.SymbolPosition">
            <summary>
            Gets the position for a symbol in the Structured Append format.
            </summary>
            <value>
            Maximal value for Aztec - 26, for DataMatrix and QR - 16.
            </value>
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeInfo.AztecStructureAppendCharacter.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Barcode.BarcodeInfo.AztecStructureAppendCharacter" /> class. 
            </summary>
            <param name="symbolPosition">The position for a symbol in the Structured Append format.</param>
            <param name="symbolCount">The number of symbols in the Structured Append format.</param>
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeInfo.AztecStructureAppendCharacter.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Barcode.BarcodeInfo.AztecStructureAppendCharacter" /> class. 
            </summary>
            <param name="messageID">The Message ID.</param>
            <param name="symbolPosition">The position for a symbol in the Structured Append format.</param>
            <param name="symbolCount">The number of symbols in the Structured Append format.</param>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.AztecStructureAppendCharacter.MessageID">
            <summary>
            Gets a Message Identification.
            </summary>
            <value>Any number of characters (except spaces).</value>
            <remarks>
            The optional message ID field.
            </remarks>
        </member>
        <member name="T:Vintasoft.Barcode.BarcodeInfo.DataMatrixEncodingMode">
            <summary>
            Specifies available data encodation modes.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.DataMatrixEncodingMode.Undefined">
            <summary>
            Undefined.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.DataMatrixEncodingMode.ASCII">
            <summary>
            ASCII mode. Available digits and ASCII values from 0 to 255.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.DataMatrixEncodingMode.C40">
            <summary>
            C40 mode. Available alphanumeric and special characters.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.DataMatrixEncodingMode.Text">
            <summary>
            Text mode. Available alphanumeric and special characters.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.DataMatrixEncodingMode.X12">
            <summary>
            ANSI X12 EDI data set.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.DataMatrixEncodingMode.EDIFACT">
            <summary>
            EDIFACT mode. Available ASCII values from 32 to 94.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.DataMatrixEncodingMode.Byte">
            <summary>
            Byte mode. Available byte values from 0 to 255.
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.BarcodeInfo.DataMatrixSymbolECCType">
            <summary>
            Data Matrix ECC symbol type.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.DataMatrixSymbolECCType.Unknown">
            <summary>
            Unknown type.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.DataMatrixSymbolECCType.ECC200">
            <summary>
            ECC200 symbol.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.DataMatrixSymbolECCType.ECC000to140">
            <summary>
            ECC000-ECC140 symbols (not supported).
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.BarcodeInfo.DataMatrixSymbolType">
            <summary>
            Data Matrix symbol type.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.DataMatrixSymbolType.Undefined">
            <summary>
            Undefined symbol.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.DataMatrixSymbolType.Row10Col10">
            <summary>
            10x10 symbol.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.DataMatrixSymbolType.Row12Col12">
            <summary>
            12x12 symbol.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.DataMatrixSymbolType.Row14Col14">
            <summary>
            14x14 symbol.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.DataMatrixSymbolType.Row16Col16">
            <summary>
            16x16 symbol.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.DataMatrixSymbolType.Row18Col18">
            <summary>
            18x18 symbol.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.DataMatrixSymbolType.Row20Col20">
            <summary>
            20x20 symbol.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.DataMatrixSymbolType.Row22Col22">
            <summary>
            22x22 symbol.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.DataMatrixSymbolType.Row24Col24">
            <summary>
            24x24 symbol.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.DataMatrixSymbolType.Row26Col26">
            <summary>
            26x26 symbol.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.DataMatrixSymbolType.Row32Col32">
            <summary>
            32x32 symbol.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.DataMatrixSymbolType.Row36Col36">
            <summary>
            36x36 symbol.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.DataMatrixSymbolType.Row40Col40">
            <summary>
            40x40 symbol.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.DataMatrixSymbolType.Row44Col44">
            <summary>
            48x48 symbol.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.DataMatrixSymbolType.Row48Col48">
            <summary>
            48x48 symbol.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.DataMatrixSymbolType.Row52Col52">
            <summary>
            52x52 symbol.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.DataMatrixSymbolType.Row64Col64">
            <summary>
            64x64 symbol.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.DataMatrixSymbolType.Row72Col72">
            <summary>
            72x72 symbol.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.DataMatrixSymbolType.Row80Col80">
            <summary>
            80x80 symbol.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.DataMatrixSymbolType.Row88Col88">
            <summary>
            88x88 symbol.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.DataMatrixSymbolType.Row96Col96">
            <summary>
            96x96 symbol.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.DataMatrixSymbolType.Row104Col104">
            <summary>
            104x104 symbol.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.DataMatrixSymbolType.Row120Col120">
            <summary>
            120x120 symbol.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.DataMatrixSymbolType.Row132Col132">
            <summary>
            132x132 symbol.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.DataMatrixSymbolType.Row144Col144">
            <summary>
            144x144 symbol.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.DataMatrixSymbolType.Row8Col18">
            <summary>
            8x18 symbol.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.DataMatrixSymbolType.Row8Col32">
            <summary>
            8x32 symbol.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.DataMatrixSymbolType.Row12Col26">
            <summary>
            12x26 symbol.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.DataMatrixSymbolType.Row12Col36">
            <summary>
            12x36 symbol.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.DataMatrixSymbolType.Row16Col36">
            <summary>
            16x36 symbol.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.DataMatrixSymbolType.Row16Col48">
            <summary>
            16x48 symbol.
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.BarcodeInfo.MicroPDF417AsCode128EmulationCodeword">
            <summary>
            Specifies available Micro PDF417 function codewords for Code 128 emulation.
            </summary>
            <remarks>
            Refer to the ISO/IEC 24728 specification for information about 
            codewords for Code 128 emulation (5.4.1.5).
            </remarks>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.MicroPDF417AsCode128EmulationCodeword.Codeword903">
            <summary>
            UCC/EAN-128 emulation: transmit ]C1 or ]L3, 
            implied latch to text compaction mode.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.MicroPDF417AsCode128EmulationCodeword.Codeword904">
            <summary>
            UCC/EAN-128 emulation: transmit ]C1 or ]L3,
            implied latch to numeric compaction mode.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.MicroPDF417AsCode128EmulationCodeword.Codeword905">
            <summary>
            UCC/EAN-128 emulation: transmit ]C1 or ]L3,
            implied latch to text compaction mode, 
            followed by implied "01" AI and 14-digit expansion of first 13 digits.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.MicroPDF417AsCode128EmulationCodeword.Codeword906">
            <summary>
            "Linked" UCC/EAN-128: transmit ]C1 or ]L3,
            implied latch to text compaction mode.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.MicroPDF417AsCode128EmulationCodeword.Codeword907">
            <summary>
            "Linked" UCC/EAN-128: transmit ]C1 or ]L3,
            implied latch to numeric compaction mode.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.MicroPDF417AsCode128EmulationCodeword.Codeword908">
            <summary>
            Code 128 emulation: transmit ]C2 or ]L4,
            implied latch to text compaction mode.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.MicroPDF417AsCode128EmulationCodeword.Codeword909">
            <summary>
            Code 128 emulation: transmit ]C2 or ]L4,
            implied latch to numeric compaction mode.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.MicroPDF417AsCode128EmulationCodeword.Codeword910">
            <summary>
            Code 128 emulation: transmit ]C0 or ]L5,
            implied latch to text compaction mode.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.MicroPDF417AsCode128EmulationCodeword.Codeword911">
            <summary>
            Code 128 emulation: transmit ]C0 or ]L5,
            implied latch to numeric compaction mode.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.MicroPDF417AsCode128EmulationCodeword.Codeword912">
            <summary>
            "Linked" UCC/EAN-128, with leading date field: transmit ]C1 or ]L3, 
            implied latch to numeric compaction mode, specially encoded date field.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.MicroPDF417AsCode128EmulationCodeword.Codeword914">
            <summary>
            "Linked" UCC/EAN-128, with lot number: transmit ]C1 or ]L3, 
            implied latch to numeric compaction mode, followed by implied "10" AI.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.MicroPDF417AsCode128EmulationCodeword.Codeword915">
            <summary>
            "Linked" UCC/EAN-128, with serial number: transmit ]C1 or ]L3, 
            implied latch to numeric compaction mode, followed by implied "21" AI.
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.BarcodeInfo.MicroPDF417AsCode128EmulationValueItem">
            <summary>
            Represents a Micro PDF417 non-data flag for Code 128 emulation.
            </summary>
            <remarks>
            Name: &lt;CODE128EM_nnn&gt;, where nnn:903-912,914,915. <br />
            <seealso cref="T:Vintasoft.Barcode.BarcodeInfo.MicroPDF417AsCode128EmulationCodeword" />
            </remarks>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.MicroPDF417AsCode128EmulationValueItem.Codeword">
            <summary>
            Gets a codeword number.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.MicroPDF417AsCode128EmulationValueItem.Codeword903">
            <summary>
            Gets the Code128 emulation value item with codeword 903.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.MicroPDF417AsCode128EmulationValueItem.Codeword904">
            <summary>
            Gets the Code128 emulation value item with codeword 904.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.MicroPDF417AsCode128EmulationValueItem.Codeword905">
            <summary>
            Gets the Code128 emulation value item with codeword 905.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.MicroPDF417AsCode128EmulationValueItem.Codeword906">
            <summary>
            Gets the Code128 emulation value item with codeword 906.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.MicroPDF417AsCode128EmulationValueItem.Codeword907">
            <summary>
            Gets the Code128 emulation value item with codeword 907.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.MicroPDF417AsCode128EmulationValueItem.Codeword908">
            <summary>
            Gets the Code128 emulation value item with codeword 908.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.MicroPDF417AsCode128EmulationValueItem.Codeword909">
            <summary>
            Gets the Code128 emulation value item with codeword 909.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.MicroPDF417AsCode128EmulationValueItem.Codeword910">
            <summary>
            Gets the Code128 emulation value item with codeword 910.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.MicroPDF417AsCode128EmulationValueItem.Codeword911">
            <summary>
            Gets the Code128 emulation value item with codeword 911.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.MicroPDF417AsCode128EmulationValueItem.Codeword912">
            <summary>
            Gets the Code128 emulation value item with codeword 912.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.MicroPDF417AsCode128EmulationValueItem.Codeword914">
            <summary>
            Gets the Code128 emulation value item with codeword 914.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.MicroPDF417AsCode128EmulationValueItem.Codeword915">
            <summary>
            Gets the Code128 emulation value item with codeword 915.
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.SymbologySubsets.BarcodeSymbologySubset">
            <summary>
            An abstract base class that allows to define the barcode symbology subset.
            </summary>
            <remarks>
            This class must be used if it is necessary to define
            the barcode symbology subset of some <see cref="T:Vintasoft.Barcode.BarcodeType">basic barcode type</see>.
            Here are examples of possible barcode symbology subsets:
            <ul>
            <li>Code39 barcodes with checksum modulo 256</li>
            <li>Code128 barcodes, which contain 10 symbols in which 6 first symbols are digits</li>
            <li>Code39 barcodes, which have height more than specified value</li>
            <li>DataMatrix barcodes, which have values coded in specified format</li>
            </ul>
            <br />
            During defining the barcode symbology subset it is necessary to override
            the <see cref="M:Vintasoft.Barcode.SymbologySubsets.BarcodeSymbologySubset.Decode(Vintasoft.Barcode.IBarcodeInfo)" /> method, which defines
            the algorithm for converting the source barcode symbology value into
            the barcode symbology subset value.<br />
            The <see cref="M:Vintasoft.Barcode.SymbologySubsets.BarcodeSymbologySubset.Encode(Vintasoft.Barcode.BarcodeInfo.ValueItemBase,Vintasoft.Barcode.WriterSettings)" /> method
            also can be overriden but this is not obligatory, this method defines the algorithm
            for converting the barcode symbology subset value into the source barcode symbology value.<br />
            <br />
            Usage of the barcode symbology subsets allows to classify the found barcode as a barcode
            from the barcode symbology subset during the barcode recognition and this can greatly increase
            the barcode recognition speed and allow to use
            the <see cref="P:Vintasoft.Barcode.ReaderSettings.ExpectedBarcodes" /> property for specifying
            the expected barcode count.<br />
            <br />
            VintaSoftBarcode.NET SDK has the following built-in barcode symbology subsets:
            <ul>
            <li><see cref="P:Vintasoft.Barcode.SymbologySubsets.BarcodeSymbologySubsets.GS1_128">GS1-128</see></li>
            <li><see cref="P:Vintasoft.Barcode.SymbologySubsets.BarcodeSymbologySubsets.GS1DataBar">GS1 DataBar</see></li>
            <li><see cref="P:Vintasoft.Barcode.SymbologySubsets.BarcodeSymbologySubsets.GS1DataBarStacked">GS1 DataBar Stacked</see></li>
            <li><see cref="P:Vintasoft.Barcode.SymbologySubsets.BarcodeSymbologySubsets.GS1DataBarExpanded">GS1 DataBar Expanded</see></li>
            <li><see cref="P:Vintasoft.Barcode.SymbologySubsets.BarcodeSymbologySubsets.GS1DataBarExpandedStacked">GS1 DataBar Expanded Stacked</see></li>
            <li><see cref="P:Vintasoft.Barcode.SymbologySubsets.BarcodeSymbologySubsets.GS1DataBar">GS1 DataBar Limited</see></li>
            <li><see cref="P:Vintasoft.Barcode.SymbologySubsets.BarcodeSymbologySubsets.GS1QR">GS1 QR</see></li>
            <li><see cref="P:Vintasoft.Barcode.SymbologySubsets.BarcodeSymbologySubsets.GS1DataMatrix">GS1 DataMatrix</see></li>
            <li><see cref="P:Vintasoft.Barcode.SymbologySubsets.BarcodeSymbologySubsets.GS1Aztec">GS1 Aztec (value in GS1 System format)</see></li>
            <li><see cref="P:Vintasoft.Barcode.SymbologySubsets.BarcodeSymbologySubsets.MailmarkCmdmType7">Mailmark CMDM Type 7</see></li>
            <li><see cref="P:Vintasoft.Barcode.SymbologySubsets.BarcodeSymbologySubsets.MailmarkCmdmType9">Mailmark CMDM Type 9</see></li>
            <li><see cref="P:Vintasoft.Barcode.SymbologySubsets.BarcodeSymbologySubsets.MailmarkCmdmType29">Mailmark CMDM Type 29</see></li>
            </ul>
            </remarks>
            <seealso cref="P:Vintasoft.Barcode.ReaderSettings.ScanBarcodeSubsets" />
            <example>
            This example shows how to define a subset of Code39 barcodes with checksum modulo 256.
            <code lang="VB.NET">   
            Imports System.Drawing   
               
            Imports Vintasoft.Barcode.SymbologySubsets   
            Imports Vintasoft.Barcode   
            Imports Vintasoft.Barcode.BarcodeInfo   
               
            ''' &lt;summary&gt;   
            ''' Test that demonstrates how to generate image with Code39 barcode with checksum modulo 256 and   
            ''' how to recognize Code39 barcode with checksum modulo 256 on the image.   
            ''' &lt;/summary&gt;   
            Public NotInheritable Class Code39Checksum256SymbologyTest   
            	Private Sub New()   
            	End Sub   
               
            	''' &lt;summary&gt;   
            	''' Run the test.   
            	''' &lt;/summary&gt;   
            	Public Shared Sub Test()   
            		Test("TEST12345")   
            		Test("ABCDEF")   
            		Test("AB")   
            		Test("123456789")   
            	End Sub   
               
            	''' &lt;summary&gt;   
            	''' Run the test for a single barcode value.   
            	''' &lt;/summary&gt;   
            	Public Shared Sub Test(value As String)   
            		' create an object that defines Code39 barcodes with checksum modulo 256   
            		Dim code39Checksum256 As New Code39Checksum256Symbology()   
               
            		' create the barcode writer   
            		Dim writer As New BarcodeWriter()   
               
            		' specify that writer must generate Code39 barcode AND   
            		' set the barcode value with checksum   
            		code39Checksum256.Encode(New TextValueItem(value), writer.Settings)   
               
            		' create image with Code39 barcode with checksum   
            		Using imageWithCode39BarcodeWithChecksum As Image = writer.GetBarcodeAsBitmap()   
            			' specify that writer must generate Code39 barcode   
            			writer.Settings.Barcode = BarcodeType.Code39   
               
            			' set the barcode value without checksum   
            			writer.Settings.Value = value   
               
            			' create image with barcode without checksum   
            			Using imageWithCode39Barcode As Image = writer.GetBarcodeAsBitmap()   
            				' create the barcode reader   
            				Using reader As New BarcodeReader()   
            					' specify that reader must search for Code39 with checksum only   
               
            					reader.Settings.ScanBarcodeTypes = BarcodeType.None   
            					reader.Settings.ScanBarcodeSubsets.Add(code39Checksum256)   
               
            					' read barcode from image with barcode with checksum   
            					Dim infos As IBarcodeInfo() = reader.ReadBarcodes(imageWithCode39BarcodeWithChecksum)   
               
            					' show information about found barcode   
               
            					Dim subsetInfo As BarcodeSubsetInfo = DirectCast(infos(0), BarcodeSubsetInfo)   
            					Console.WriteLine("Detected '{0}' barcode, value = {1}, base value = {2}.", subsetInfo.BarcodeSubset.Name, subsetInfo.Value, subsetInfo.BaseBarcodeInfo.Value)   
               
               
            					' read barcodes from image with barcode without checksum   
            					infos = reader.ReadBarcodes(imageWithCode39Barcode)   
            					' if barcode is found   
            					If infos.Length &lt;&gt; 0 Then   
            						' throw exception   
            						Throw New ApplicationException()   
            					End If   
            				End Using   
            			End Using   
            		End Using   
            	End Sub   
            End Class   
               
            ''' &lt;summary&gt;   
            ''' Represents the barcode symbology subset that includes Code39 barcodes with checksum modulo 256.   
            ''' &lt;/summary&gt;   
            Public Class Code39Checksum256Symbology   
            	Inherits BarcodeSymbologySubset   
               
            	#Region "Properties"   
               
            	''' &lt;summary&gt;   
            	''' Gets a name of barcode symbology subset.   
            	''' &lt;/summary&gt;   
            	Public Overrides ReadOnly Property Name() As String   
            		Get   
            			Return "Code39 CH256"   
            		End Get   
            	End Property   
               
            	''' &lt;summary&gt;   
            	''' Gets a base barcode symbology type of this barcode symbology subset.   
            	''' &lt;/summary&gt;   
            	Public Overrides ReadOnly Property BaseType() As BarcodeType   
            		Get   
            			Return BarcodeType.Code39   
            		End Get   
            	End Property   
               
            	#End Region   
               
               
               
            	#Region "Methods"   
               
            	''' &lt;summary&gt;   
            	''' Decodes the Code39 barcode value into Code39 barcode value with checksum modulo 256.   
            	''' &lt;/summary&gt;   
            	''' &lt;param name="info"&gt;Code39 barcode value.&lt;/param&gt;   
            	''' &lt;returns&gt;Code39 barcode value with checksum modulo 256.&lt;/returns&gt;   
            	Public Overrides Function Decode(info As IBarcodeInfo) As BarcodeSubsetInfo   
            		If info.Value IsNot Nothing AndAlso info.Value.Length &gt;= 4 Then   
            			' get the barcode checksum   
            			Dim checksum As String = info.Value.Substring(info.Value.Length - 2)   
            			' get the barcode value   
            			Dim value As String = info.Value.Substring(0, info.Value.Length - 2)   
            			' if barcode checksum is correct   
            			If checksum = GenerateChecksum256(value) Then   
            				Dim result As New BarcodeSubsetInfo(info, Me, New TextValueItem(value))   
            				result.Confidence = 100   
            				Return result   
            			End If   
            		End If   
            		Return Nothing   
            	End Function   
               
            	''' &lt;summary&gt;   
            	''' Encodes the Code39 barcode value with checksum modulo 256 into the Code39 barcode value   
            	''' using provided barcode writer settings and   
            	''' saves the source barcode symbology value in the barcode writer settings.   
            	''' &lt;/summary&gt;   
            	''' &lt;param name="value"&gt;Code39 barcode value with checksum modulo 256 to encode.&lt;/param&gt;   
            	''' &lt;param name="settings"&gt;Barcode writer settings.&lt;/param&gt;   
            	Public Overrides Sub Encode(value As ValueItemBase, settings As WriterSettings)   
            		Dim textValue As String = value.ToString()   
            		If textValue.Length &lt; 2 Then   
            			Throw New WriterSettingsException(WriterSettingsExceptionType.ExpectedNSymbolsInBarcodeValue, "minimum two symbols")   
            		End If   
               
            		' specify the barcode symbology type   
            		settings.Barcode = Me.BaseType   
            		' add checksum to the barcode value   
            		settings.Value = String.Format("{0}{1}", textValue, GenerateChecksum256(textValue))   
            	End Sub   
               
            	''' &lt;summary&gt;   
            	''' Calculates simple checksum modulo 256.   
            	''' &lt;/summary&gt;   
            	''' &lt;param name="value"&gt;Text value.&lt;/param&gt;   
            	''' &lt;returns&gt;Checksum in HEX format.&lt;/returns&gt;   
            	Private Shared Function GenerateChecksum256(value As String) As String   
            		Dim checksum As Integer = 0   
            		For i As Integer = 0 To value.Length - 1   
            			Dim symbol As Integer = AscW(value(i)) Mod 39   
            			If i Mod 2 = 0 Then   
            				checksum += symbol   
            			Else   
            				checksum += symbol * 3   
            			End If   
            		Next   
            		checksum = checksum Mod 256   
            		Return checksum.ToString("X2")   
            	End Function   
               
            	#End Region   
               
            End Class   
               
            ' This code example produces the following output:    
            '        
            '   Detected 'Code39 CH256' barcode, value = TEST12345, base value = TEST12345E3.   
            '   Detected 'Code39 CH256' barcode, value = ABCDEF, base value = ABCDEF59.   
            '   Detected 'Code39 CH256' barcode, value = AB, base value = AB6B.   
            '   Detected 'Code39 CH256' barcode, value = 123456789, base value = 123456789EE.   
            '   
            
            </code>
            <code lang="C#">
            using System;
            using System.Drawing;
            
            using Vintasoft.Barcode.SymbologySubsets;
            using Vintasoft.Barcode;
            using Vintasoft.Barcode.BarcodeInfo;
            
            /// &lt;summary&gt;
            /// Test that demonstrates how to generate image with Code39 barcode with checksum modulo 256 and
            /// how to recognize Code39 barcode with checksum modulo 256 on the image.
            /// &lt;/summary&gt;
            public static class Code39Checksum256SymbologyTest
            {
            
                /// &lt;summary&gt;
                /// Run the test.
                /// &lt;/summary&gt;
                public static void Test()
                {
                    Test("TEST12345");
                    Test("ABCDEF");
                    Test("AB");
                    Test("123456789");
                }
            
                /// &lt;summary&gt;
                /// Run the test for a single barcode value.
                /// &lt;/summary&gt;
                public static void Test(string value)
                {
                    // create an object that defines Code39 barcodes with checksum modulo 256
                    Code39Checksum256Symbology code39Checksum256 = new Code39Checksum256Symbology();
            
                    // create the barcode writer
                    BarcodeWriter writer = new BarcodeWriter();
            
                    // specify that writer must generate Code39 barcode AND
                    // set the barcode value with checksum
                    code39Checksum256.Encode(new TextValueItem(value), writer.Settings);
            
                    // create image with Code39 barcode with checksum
                    using (Image imageWithCode39BarcodeWithChecksum = writer.GetBarcodeAsBitmap())
                    {
                        // specify that writer must generate Code39 barcode
                        writer.Settings.Barcode = BarcodeType.Code39;
            
                        // set the barcode value without checksum
                        writer.Settings.Value = value;
            
                        // create image with barcode without checksum
                        using (Image imageWithCode39Barcode = writer.GetBarcodeAsBitmap())
                        {
                            // create the barcode reader
                            using (BarcodeReader reader = new BarcodeReader())
                            {
                                // specify that reader must search for Code39 with checksum only
            
                                reader.Settings.ScanBarcodeTypes = BarcodeType.None;
                                reader.Settings.ScanBarcodeSubsets.Add(code39Checksum256);
            
                                // read barcode from image with barcode with checksum
                                IBarcodeInfo[] infos = reader.ReadBarcodes(imageWithCode39BarcodeWithChecksum);
            
                                // show information about found barcode
            
                                BarcodeSubsetInfo subsetInfo = ((BarcodeSubsetInfo)infos[0]);
                                Console.WriteLine("Detected '{0}' barcode, value = {1}, base value = {2}.",
                                    subsetInfo.BarcodeSubset.Name,
                                    subsetInfo.Value,
                                    subsetInfo.BaseBarcodeInfo.Value);
            
            
                                // read barcodes from image with barcode without checksum
                                infos = reader.ReadBarcodes(imageWithCode39Barcode);
                                // if barcode is found
                                if (infos.Length != 0)
                                    // throw exception
                                    throw new ApplicationException();
                            }
                        }
                    }
                }
            }
            
            /// &lt;summary&gt;
            /// Represents the barcode symbology subset that includes Code39 barcodes with checksum modulo 256.
            /// &lt;/summary&gt;
            public class Code39Checksum256Symbology : BarcodeSymbologySubset
            {
            
                #region Properties
            
                /// &lt;summary&gt;
                /// Gets a name of barcode symbology subset.
                /// &lt;/summary&gt;
                public override string Name
                {
                    get
                    {
                        return "Code39 CH256";
                    }
                }
            
                /// &lt;summary&gt;
                /// Gets a base barcode symbology type of this barcode symbology subset.
                /// &lt;/summary&gt;
                public override BarcodeType BaseType
                {
                    get
                    {
                        return BarcodeType.Code39;
                    }
                }
            
                #endregion
            
            
            
                #region Methods
            
                /// &lt;summary&gt;
                /// Decodes the Code39 barcode value into Code39 barcode value with checksum modulo 256.
                /// &lt;/summary&gt;
                /// &lt;param name="info"&gt;Code39 barcode value.&lt;/param&gt;
                /// &lt;returns&gt;Code39 barcode value with checksum modulo 256.&lt;/returns&gt;
                public override BarcodeSubsetInfo Decode(IBarcodeInfo info)
                {
                    if (info.Value != null &amp;&amp; info.Value.Length &gt;= 4)
                    {
                        // get the barcode checksum
                        string checksum = info.Value.Substring(info.Value.Length - 2);
                        // get the barcode value
                        string value = info.Value.Substring(0, info.Value.Length - 2);
                        // if barcode checksum is correct
                        if (checksum == GenerateChecksum256(value))
                        {
                            BarcodeSubsetInfo result = new BarcodeSubsetInfo(info, this, new TextValueItem(value));
                            result.Confidence = 100;
                            return result;
                        }
                    }
                    return null;
                }
            
                /// &lt;summary&gt;
                /// Encodes the Code39 barcode value with checksum modulo 256 into the Code39 barcode value
                /// using provided barcode writer settings and
                /// saves the source barcode symbology value in the barcode writer settings.
                /// &lt;/summary&gt;
                /// &lt;param name="value"&gt;Code39 barcode value with checksum modulo 256 to encode.&lt;/param&gt;
                /// &lt;param name="settings"&gt;Barcode writer settings.&lt;/param&gt;
                public override void Encode(ValueItemBase value, WriterSettings settings)
                {
                    string textValue = value.ToString();
                    if (textValue.Length &lt; 2)
                        throw new WriterSettingsException(
                            WriterSettingsExceptionType.ExpectedNSymbolsInBarcodeValue, 
                            "minimum two symbols");
            
                    // specify the barcode symbology type
                    settings.Barcode = this.BaseType;
                    // add checksum to the barcode value
                    settings.Value = string.Format("{0}{1}", textValue, GenerateChecksum256(textValue));
                }
            
                /// &lt;summary&gt;
                /// Calculates simple checksum modulo 256.
                /// &lt;/summary&gt;
                /// &lt;param name="value"&gt;Text value.&lt;/param&gt;
                /// &lt;returns&gt;Checksum in HEX format.&lt;/returns&gt;
                private static string GenerateChecksum256(string value)
                {
                    int checksum = 0;
                    for (int i = 0; i &lt; value.Length; i++)
                    {
                        int symbol = (int)value[i] % 39;
                        if (i % 2 == 0)
                            checksum += symbol;
                        else
                            checksum += symbol * 3;
                    }
                    checksum = checksum % 256;
                    return checksum.ToString("X2");
                }
            
                #endregion
            
            }
            
            /* This code example produces the following output: 
                 
               Detected 'Code39 CH256' barcode, value = TEST12345, base value = TEST12345E3.
               Detected 'Code39 CH256' barcode, value = ABCDEF, base value = ABCDEF59.
               Detected 'Code39 CH256' barcode, value = AB, base value = AB6B.
               Detected 'Code39 CH256' barcode, value = 123456789, base value = 123456789EE.
            */
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Barcode.SymbologySubsets.BarcodeSymbologySubset.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Barcode.SymbologySubsets.BarcodeSymbologySubset" /> class. 
            </summary>
        </member>
        <member name="M:Vintasoft.Barcode.SymbologySubsets.BarcodeSymbologySubset.Decode(Vintasoft.Barcode.IBarcodeInfo)">
            <summary>
            Decodes the source barcode symbology value into the barcode symbology subset value.
            </summary>
            <param name="info">Source barcode symbology value.</param>
            <returns>Barcode symbology subset value.</returns>
        </member>
        <member name="M:Vintasoft.Barcode.SymbologySubsets.BarcodeSymbologySubset.Encode(Vintasoft.Barcode.BarcodeInfo.ValueItemBase,Vintasoft.Barcode.WriterSettings)">
            <summary>
            Encodes the barcode symbology subset value into the source barcode symbology value
            using provided barcode writer settings and
            saves the source barcode symbology value in the barcode writer settings.
            </summary>
            <param name="value">The barcode symbology subset value to encode.</param>
            <param name="settings">Barcode writer settings.</param>
        </member>
        <member name="M:Vintasoft.Barcode.SymbologySubsets.BarcodeSymbologySubset.CreateValue">
            <summary>
            Creates the barcode symbology subset value with default (empty) value.
            </summary>
            <returns>A new barcode symbology subset value with default (empty) value.</returns>
        </member>
        <member name="M:Vintasoft.Barcode.SymbologySubsets.BarcodeSymbologySubset.ToString">
            <summary>
            Converts the information about barcode subset of this instance to its equivalent
            string.
            </summary>
            <returns>
            String with information about barcode subset of this instance.
            </returns>
        </member>
        <member name="M:Vintasoft.Barcode.SymbologySubsets.BarcodeSymbologySubset.GetSchema">
            <summary>
            Not implemented.
            </summary>
            <returns />
        </member>
        <member name="M:Vintasoft.Barcode.SymbologySubsets.BarcodeSymbologySubset.ReadXml(System.Xml.XmlReader)">
            <summary>
            Deserializes the <see cref="T:Vintasoft.Barcode.SymbologySubsets.BarcodeSymbologySubset" /> from
            a specified <see cref="T:System.Xml.XmlReader" />.
            </summary>
            <param name="reader">The XML reader from which the <see cref="T:Vintasoft.Barcode.SymbologySubsets.BarcodeSymbologySubset" />
            must be serialized.</param>
        </member>
        <member name="M:Vintasoft.Barcode.SymbologySubsets.BarcodeSymbologySubset.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Serializes the <see cref="T:Vintasoft.Barcode.SymbologySubsets.BarcodeSymbologySubset" /> to
            a specified <see cref="T:System.Xml.XmlWriter" />.
            </summary>
            <param name="writer">The XML writer to which the <see cref="T:Vintasoft.Barcode.SymbologySubsets.BarcodeSymbologySubset" />
            must be serialized.</param>
        </member>
        <member name="P:Vintasoft.Barcode.SymbologySubsets.BarcodeSymbologySubset.Name">
            <summary>
            Gets a name of this barcode symbology subset.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.SymbologySubsets.BarcodeSymbologySubset.BaseType">
            <summary>
            Gets a base barcode symbology type of this barcode symbology subset.
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.BarcodeInfo.BarcodeSubsetInfo">
            <summary>
            Class that allows to get information about recognized barcode,
            recognized barcode belongs the barcode symbology subset.
            </summary>
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeInfo.BarcodeSubsetInfo.#ctor(Vintasoft.Barcode.IBarcodeInfo,Vintasoft.Barcode.SymbologySubsets.BarcodeSymbologySubset,Vintasoft.Barcode.BarcodeInfo.ValueItemBase[])">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Barcode.BarcodeInfo.BarcodeSubsetInfo" /> class. 
            </summary>
            <param name="sourceInfo">Information about source recognized barcode.</param>
            <param name="barcodeSubset">Barcode symbology subset.</param>
            <param name="value">Barcode value.</param>
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeInfo.BarcodeSubsetInfo.CompareTo(System.Object)">
            <summary>
            Compare using the <see cref="P:Vintasoft.Barcode.BarcodeInfo.BarcodeInfoBase.Region">Region</see> center.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.BarcodeSubsetInfo.BarcodeSubset">
            <summary>
            Gets an information about barcode symbology subset.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.BarcodeSubsetInfo.BaseBarcodeInfo">
            <summary>
            Gets a base barcode info.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.BarcodeSubsetInfo.ReadingQuality">
            <summary>
            Shows what part of barcode scan lines are correct.
            </summary>
            <value>Possible values: from 0 to 1.</value>
            <remarks>
            <b>This property has correct value</b> if value of the
            <see cref="P:Vintasoft.Barcode.ReaderSettings.ScanInterval" /> is set to 1.<br />
            <br />
            Barcode is ideal if value of this property is close to 1.<br />
            Barcode has more than a half of scan lines damaged if value of this
            property is less than 0.5.<br />
            <br />
            This property has no relation to the barcode string value,
            it only shows how many scan lines of barcode are correct.<br />
            Use the <see cref="P:Vintasoft.Barcode.IBarcodeInfo.Confidence" /> property if you want to
            know confidence of barcode.
            </remarks>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.BarcodeSubsetInfo.BarcodeType">
            <summary>
            Gets a barcode symbology type.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.BarcodeSubsetInfo.Value">
            <summary>
            Gets a barcode string.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.BarcodeSubsetInfo.ShowNonDataFlagsInValue">
            <summary>
            Gets a value that indicating whether 
            <see cref="T:Vintasoft.Barcode.BarcodeInfo.NonDataFlags">non-data flags</see> or 
            <see cref="T:Vintasoft.Barcode.BarcodeInfo.EciCharacterValueItem">ECI character</see> is visible
            in <see cref="P:Vintasoft.Barcode.BarcodeInfo.BarcodeInfoBase.Value">barcode value</see>.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.BarcodeSubsetInfo.ValueItems">
            <summary>
            Gets an array of value items of decoded barcode.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.BarcodeSubsetInfo.Region">
            <summary>
            Gets a barcode region.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.BarcodeSubsetInfo.Direction">
            <summary>
            Gets a scan direction in which the barcode was found.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.BarcodeSubsetInfo.Confidence">
            <summary>
            Gets or sets a barcode confidence, in percents.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.BarcodeSubsetInfo.Threshold">
            <summary>
            Gets a threshold value of barcode.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.BarcodeSubsetInfo.SymbolComponents">
            <summary>
            Gets an array of symbol components from which the barcode symbol is composed.
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.SymbologySubsets.BarcodeSymbologySubsets">
            <summary>
            Class that contains standard barcode symbology subsets.
            </summary>
            <example>
            This example shows how to read GS1-128 barcode from an image.
            <code lang="VB.NET">   
            Public Shared Sub Recognize(image As Image)   
            	' create the barcode reader   
            	Using reader As New BarcodeReader()   
            		' specify that reader must search for GS1-128 barcodes only   
               
            		reader.Settings.ScanBarcodeTypes = BarcodeType.None   
            		reader.Settings.ScanBarcodeSubsets.Add(BarcodeSymbologySubsets.GS1_128)   
               
            		' recognize barcode on image    
            		Dim infos As IBarcodeInfo() = reader.ReadBarcodes(image)   
               
            		' for each found barcode   
            		For j As Integer = 0 To infos.Length - 1   
            			Dim info As GS1BarcodeInfo = DirectCast(infos(j), GS1BarcodeInfo)   
               
            			' print barcode symbology   
            			Console.WriteLine(info.BarcodeSubset)   
               
            			' print barcode region on image   
            			Console.WriteLine(info.Region.ToString())   
               
            			' print Transmitted data   
            			Console.WriteLine(String.Format("Transmitted data            : {0} ", info.TransmittedData))   
               
            			' print Application identifiers values   
            			Dim printableValue As New StringBuilder()   
            			Dim aiValues As GS1ApplicationIdentifierValue() = info.ApplicationIdentifierValues   
            			For i As Integer = 0 To aiValues.Length - 1   
            				Dim aiValue As GS1ApplicationIdentifierValue = aiValues(i)   
            				Dim ai As GS1ApplicationIdentifier = aiValue.ApplicationIdentifier   
            				Console.WriteLine(String.Format("Application identifier {0}    : {1}", i + 1, ai.ApplicationIdentifier))   
            				Console.WriteLine(String.Format("  Value                     : {0}", aiValue.Value))   
            				Console.WriteLine(String.Format("  Data title                : {0}", ai.DataTitle))   
            				Console.WriteLine(String.Format("  Data content              : {0}", ai.DataContent))   
            				Console.WriteLine(String.Format("  Format                    : {0}", ai.Format))   
            				Console.WriteLine(String.Format("  Is contains decimal point : {0}", ai.IsContainsDecimalPoint))   
            				Console.WriteLine(String.Format("  Is variable length        : {0}", ai.IsVariableLength))   
            				printableValue.Append(aiValue.ToString())   
            			Next   
               
            			' print GS1 printable value   
            			Console.WriteLine("Printable GS1 value: " &amp; printableValue.ToString())   
            			Console.WriteLine()   
            		Next   
            	End Using   
            End Sub
            </code>
            <code lang="C#">
            public static void Recognize(Image image)
            {
                // create the barcode reader
                using (BarcodeReader reader = new BarcodeReader())
                {
                    // specify that reader must search for GS1-128 barcodes only
            
                    reader.Settings.ScanBarcodeTypes = BarcodeType.None;
                    reader.Settings.ScanBarcodeSubsets.Add(BarcodeSymbologySubsets.GS1_128);
            
                    // recognize barcode on image 
                    IBarcodeInfo[] infos = reader.ReadBarcodes(image);
            
                    // for each found barcode
                    for (int j = 0; j &lt; infos.Length; j++)
                    {
                        GS1BarcodeInfo info = (GS1BarcodeInfo)infos[j];
            
                        // print barcode symbology
                        Console.WriteLine(info.BarcodeSubset);
            
                        // print barcode region on image
                        Console.WriteLine(info.Region.ToString());
            
                        // print Transmitted data
                        Console.WriteLine(string.Format("Transmitted data            : {0} ", info.TransmittedData));
            
                        // print Application identifiers values
                        StringBuilder printableValue = new StringBuilder();
                        GS1ApplicationIdentifierValue[] aiValues = info.ApplicationIdentifierValues;
                        for (int i = 0; i &lt; aiValues.Length; i++)
                        {
                            GS1ApplicationIdentifierValue aiValue = aiValues[i];
                            GS1ApplicationIdentifier ai = aiValue.ApplicationIdentifier;
                            Console.WriteLine(string.Format("Application identifier {0}    : {1}", i + 1, ai.ApplicationIdentifier));
                            Console.WriteLine(string.Format("  Value                     : {0}", aiValue.Value));
                            Console.WriteLine(string.Format("  Data title                : {0}", ai.DataTitle));
                            Console.WriteLine(string.Format("  Data content              : {0}", ai.DataContent));
                            Console.WriteLine(string.Format("  Format                    : {0}", ai.Format));
                            Console.WriteLine(string.Format("  Is contains decimal point : {0}", ai.IsContainsDecimalPoint));
                            Console.WriteLine(string.Format("  Is variable length        : {0}", ai.IsVariableLength));
                            printableValue.Append(aiValue.ToString());
                        }
            
                        // print GS1 printable value
                        Console.WriteLine("Printable GS1 value: " + printableValue.ToString());
                        Console.WriteLine();
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="P:Vintasoft.Barcode.SymbologySubsets.BarcodeSymbologySubsets.GS1Aztec">
            <summary>
            Gets the subset of Aztec barcode symbology with value is GS1 System data format.
            </summary>
            <remarks>
            Subset of Aztec barcode symbology.
            </remarks>
        </member>
        <member name="P:Vintasoft.Barcode.SymbologySubsets.BarcodeSymbologySubsets.GS1_128">
            <summary>
            Gets the GS1-128 barcode symbology.
            </summary>
            <remarks>
            Subset of Code 128 barcode symbology.
            </remarks>
        </member>
        <member name="P:Vintasoft.Barcode.SymbologySubsets.BarcodeSymbologySubsets.GS1DataBar">
            <summary>
            Gets the GS1 DataBar barcode symbology.
            </summary>
            <remarks>
            Subset of RSS-14 barcode symbology.
            </remarks>
        </member>
        <member name="P:Vintasoft.Barcode.SymbologySubsets.BarcodeSymbologySubsets.GS1DataBarStacked">
            <summary>
            Gets the GS1 DataBar Stacked barcode symbology.
            </summary>
            <remarks>
            Subset of RSS-14 Stacked barcode symbology.
            </remarks>
        </member>
        <member name="P:Vintasoft.Barcode.SymbologySubsets.BarcodeSymbologySubsets.GS1DataBarExpanded">
            <summary>
            Gets the GS1 DataBar Expanded barcode symbology.
            </summary>
            <remarks>
            Subset of RSS Expanded barcode symbology.
            </remarks>
        </member>
        <member name="P:Vintasoft.Barcode.SymbologySubsets.BarcodeSymbologySubsets.GS1DataBarExpandedStacked">
            <summary>
            Gets the GS1 DataBar Expanded Stacked barcode symbology.
            </summary>
            <remarks>
            Subset of RSS Expanded Stacked barcode symbology.
            </remarks>
        </member>
        <member name="P:Vintasoft.Barcode.SymbologySubsets.BarcodeSymbologySubsets.GS1DataBarLimited">
            <summary>
            Gets the GS1 DataBar Limited barcode symbology.
            </summary>
            <remarks>
            Subset of RSS Limited barcode symbology.
            </remarks>
        </member>
        <member name="P:Vintasoft.Barcode.SymbologySubsets.BarcodeSymbologySubsets.GS1QR">
            <summary>
            Gets the GS1 QR Code barcode symbology.
            </summary>
            <remarks>
            Subset of QR Code barcode symbology.
            </remarks>
        </member>
        <member name="P:Vintasoft.Barcode.SymbologySubsets.BarcodeSymbologySubsets.GS1DataMatrix">
            <summary>
            Gets the GS1 DataMatrix barcode symbology.
            </summary>
            <remarks>
            Subset of DataMatrix barcode symbology.
            </remarks>
        </member>
        <member name="P:Vintasoft.Barcode.SymbologySubsets.BarcodeSymbologySubsets.MailmarkCmdmType7">
            <summary>
            Gets the Royal Mail Mailmark CMDM Type7 2D barcode symbology.
            </summary>
            <remarks>
            Subset of DataMatrix barcode symbology.
            </remarks>
        </member>
        <member name="P:Vintasoft.Barcode.SymbologySubsets.BarcodeSymbologySubsets.MailmarkCmdmType9">
            <summary>
            Gets the Royal Mail Mailmark CMDM Type9 2D barcode symbology.
            </summary>
            <remarks>
            Subset of DataMatrix barcode symbology.
            </remarks>
        </member>
        <member name="P:Vintasoft.Barcode.SymbologySubsets.BarcodeSymbologySubsets.MailmarkCmdmType29">
            <summary>
            Gets the Royal Mail Mailmark CMDM Type29 2D barcode symbology.
            </summary>
            <remarks>
            Subset of DataMatrix barcode symbology.
            </remarks>
        </member>
        <member name="T:Vintasoft.Barcode.BarcodeInfo.GS1BarcodeInfo">
            <summary>
            Gets an information about recognized GS1 barcode.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.GS1BarcodeInfo.ApplicationIdentifierValues">
            <summary>
            Gets a value of GS1 barcode - array of <see cref="T:Vintasoft.Barcode.GS1.GS1ApplicationIdentifierValue" /> values.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.GS1BarcodeInfo.TransmittedData">
            <summary>
            Gets data transmitted from barcode reader.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.GS1BarcodeInfo.PrintableValue">
            <summary>
            Gets a printable value of this GS1 barcode.
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.BarcodeInfo.GS1ValueItem">
            <summary>
            Class that contains information about a decoded value of GS1 barcode.
            </summary>
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeInfo.GS1ValueItem.#ctor(Vintasoft.Barcode.GS1.GS1ApplicationIdentifierValue[])">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Barcode.BarcodeInfo.GS1ValueItem" /> class. 
            </summary>
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeInfo.GS1ValueItem.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
            <returns>String representation of this object.</returns>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.GS1ValueItem.ApplicationIdentifierValues">
            <summary>
            Gets or sets a GS1 barcode value - array of <see cref="T:Vintasoft.Barcode.GS1.GS1ApplicationIdentifierValue" /> values.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.GS1ValueItem.PrintableValue">
            <summary>
            Gets a printable value of this value item.
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.SymbologySubsets.GS1.GS1_128BarcodeSymbology">
            <summary>
            Class that defines the GS1-128 barcode symbology -
            subset of Code 128 barcode symbology with values in GS1 System data format.
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.SymbologySubsets.GS1.GS1BarcodeSymbologySubset">
            <summary>
            Base class that allows to define the barcode symbology subset with barcode values,
            which are stored in GS1 System data format.
            </summary>
        </member>
        <member name="M:Vintasoft.Barcode.SymbologySubsets.GS1.GS1BarcodeSymbologySubset.#ctor(Vintasoft.Barcode.BarcodeType,Vintasoft.Barcode.GS1.GS1Codec)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Barcode.SymbologySubsets.GS1.GS1BarcodeSymbologySubset" /> class. 
            </summary>
            <param name="baseType">Base barcode type.</param>
            <param name="codec">GS1 Codec.</param>
        </member>
        <member name="M:Vintasoft.Barcode.SymbologySubsets.GS1.GS1BarcodeSymbologySubset.Decode(Vintasoft.Barcode.IBarcodeInfo)">
            <summary>
            Decodes the source barcode symbology value into the GS1 barcode value.
            </summary>
            <param name="info">Source barcode symbology value.</param>
            <returns>GS1 barcode value.</returns>
        </member>
        <member name="M:Vintasoft.Barcode.SymbologySubsets.GS1.GS1BarcodeSymbologySubset.Encode(Vintasoft.Barcode.BarcodeInfo.ValueItemBase,Vintasoft.Barcode.WriterSettings)">
            <summary>
            Encodes the GS1 barcode value into the source barcode symbology value
            using provided barcode writer settings and
            saves the source barcode symbology value in the barcode writer settings.
            </summary>
            <param name="value">GS1 barcode value to encode.</param>
            <param name="settings">Barcode writer settings.</param>
        </member>
        <member name="M:Vintasoft.Barcode.SymbologySubsets.GS1.GS1BarcodeSymbologySubset.CreateValue">
            <summary>
            Creates a <see cref="T:Vintasoft.Barcode.BarcodeInfo.GS1ValueItem" /> with
            an empty array of <see cref="T:Vintasoft.Barcode.GS1.GS1ApplicationIdentifierValue" /> values.
            </summary>
            <returns>A <see cref="T:Vintasoft.Barcode.BarcodeInfo.GS1ValueItem" /> with
            an empty array of <see cref="T:Vintasoft.Barcode.GS1.GS1ApplicationIdentifierValue" /> values.</returns>
        </member>
        <member name="P:Vintasoft.Barcode.SymbologySubsets.GS1.GS1BarcodeSymbologySubset.Codec">
            <summary>
            Gets a GS1 codec for this barcode subset.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.SymbologySubsets.GS1.GS1BarcodeSymbologySubset.Name">
            <summary>
            Gets a name of barcode subset.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.SymbologySubsets.GS1.GS1BarcodeSymbologySubset.BaseType">
            <summary>
            Gets a base barcode type of barcode subset.
            </summary>
        </member>
        <member name="M:Vintasoft.Barcode.SymbologySubsets.GS1.GS1_128BarcodeSymbology.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Barcode.SymbologySubsets.GS1.GS1_128BarcodeSymbology" /> class. 
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.SymbologySubsets.GS1.GS1DataMatrixBarcodeSymbology">
            <summary>
            Class that defines the GS1 DataMatrix barcode symbology -
            subset of DataMatrix barcode symbology with values in GS1 System data format.
            </summary>
        </member>
        <member name="M:Vintasoft.Barcode.SymbologySubsets.GS1.GS1DataMatrixBarcodeSymbology.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Barcode.SymbologySubsets.GS1.GS1DataMatrixBarcodeSymbology" /> class. 
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.SymbologySubsets.GS1.GS1QRBarcodeSymbology">
            <summary>
            Class that defines the GS1 QR barcode symbology -
            subset of QR barcode symbology with values in GS1 System data format.
            </summary>
            <example>This example shows how to generate GS1 QR barcode and read
            generated barcode.
            <code lang="VB.NET">   
            Imports System.Drawing   
            Imports System.Text   
               
            Imports Vintasoft.Barcode   
            Imports Vintasoft.Barcode.BarcodeInfo   
            Imports Vintasoft.Barcode.SymbologySubsets   
            Imports Vintasoft.Barcode.GS1   
               
            ''' &lt;summary&gt;   
            ''' Test that shows how to encode the barcode data in GS1 format,   
            ''' create image with GS1 QR barcode,   
            ''' read GS1 QR barcode from image and print data stored in GS1 format.   
            ''' &lt;/summary&gt;   
            Class GS1QRExample   
               
            	''' &lt;summary&gt;   
            	''' Run the test.   
            	''' &lt;/summary&gt;   
            	Public Shared Sub TestGS1QR()   
            		' form the GS1 Application identifiers   
            		'   
            		Dim aiValues As GS1ApplicationIdentifierValue() = New GS1ApplicationIdentifierValue(3) {}   
            		Dim ai As GS1ApplicationIdentifier   
            		' 01 - Global Trade Item Number   
            		ai = GS1ApplicationIdentifiers.FindApplicationIdentifier("01")   
            		aiValues(0) = New GS1ApplicationIdentifierValue(ai, "0123456789123C")   
            		' 310 - Net weight, kilograms   
            		ai = GS1ApplicationIdentifiers.FindApplicationIdentifier("310")   
            		aiValues(1) = New GS1ApplicationIdentifierValue(ai, "0012.55")   
            		' 30 - Count of Items   
            		ai = GS1ApplicationIdentifiers.FindApplicationIdentifier("30")   
            		aiValues(2) = New GS1ApplicationIdentifierValue(ai, "10")   
            		' 90 - Company Internal Information   
            		ai = GS1ApplicationIdentifiers.FindApplicationIdentifier("90")   
            		aiValues(3) = New GS1ApplicationIdentifierValue(ai, "ABCabc12345")   
            		' create GS1 value item   
            		Dim gs1Value As New GS1ValueItem(aiValues)   
               
            		' create the barcode writer   
            		Dim writer As New BarcodeWriter()   
               
            		' specify that writer must create output image as 24-bpp image   
            		writer.Settings.PixelFormat = BarcodeImagePixelFormat.Bgr24   
               
            		' encode GS1 QR barcode   
            		BarcodeSymbologySubsets.GS1QR.Encode(gs1Value, writer.Settings)   
               
            		' create image with barcode   
            		Using barcodeImage As Image = writer.GetBarcodeAsBitmap()   
            			' delete aiValues array   
            			aiValues = Nothing   
               
            			' read barcode with GS1 value   
               
            			' create barcode reader   
            			Using reader As New BarcodeReader()   
            				' specify that reader must search for GS1 QR barcodes only   
               
            				reader.Settings.ScanBarcodeTypes = BarcodeType.None   
            				reader.Settings.ScanBarcodeSubsets.Add(BarcodeSymbologySubsets.GS1QR)   
               
            				' read barcode from image   
            				Dim infos As IBarcodeInfo() = reader.ReadBarcodes(barcodeImage)   
               
            				' print reader transmitted value   
            				Console.WriteLine("Transmitted data: {0}", DirectCast(infos(0), GS1BarcodeInfo).TransmittedData)   
            				Console.WriteLine()   
               
            				' gets GS1 value from barcode value         
            				gs1Value = DirectCast(infos(0).ValueItems(0), GS1ValueItem)   
               
            				' gets a GS1 Application identifiers from barcode value               
            				aiValues = gs1Value.ApplicationIdentifierValues   
               
            				Dim printableValue As New StringBuilder()   
            				' print Application identifiers values   
            				For i As Integer = 0 To aiValues.Length - 1   
            					Dim aiValue As GS1ApplicationIdentifierValue = aiValues(i)   
            					ai = aiValue.ApplicationIdentifier   
            					Console.WriteLine(String.Format("[{0}] {1}", i + 1, aiValue))   
            					Console.WriteLine(String.Format("Application identifier   : {0}", ai.ApplicationIdentifier))   
            					Console.WriteLine(String.Format("Value                    : {0}", aiValue.Value))   
            					Console.WriteLine(String.Format("Data title               : {0}", ai.DataTitle))   
            					Console.WriteLine(String.Format("Data content             : {0}", ai.DataContent))   
            					Console.WriteLine(String.Format("Format                   : {0}", ai.Format))   
            					Console.WriteLine(String.Format("Is contains decimal point: {0}", ai.IsContainsDecimalPoint))   
            					Console.WriteLine(String.Format("Is variable length       : {0}", ai.IsVariableLength))   
            					Console.WriteLine()   
            					printableValue.Append(aiValue.ToString())   
            				Next   
               
            				' print GS1 printable value   
            				Console.WriteLine("Printable GS1 value: " &amp; printableValue.ToString())   
            			End Using   
            		End Using   
            	End Sub   
            End Class
            </code>
            <code lang="C#">
            using System;
            using System.Drawing;
            using System.Text;
            
            using Vintasoft.Barcode;
            using Vintasoft.Barcode.BarcodeInfo;
            using Vintasoft.Barcode.SymbologySubsets;
            using Vintasoft.Barcode.GS1;
            
            /// &lt;summary&gt;
            /// Test that shows how to encode the barcode data in GS1 format,
            /// create image with GS1 QR barcode,
            /// read GS1 QR barcode from image and print data stored in GS1 format.
            /// &lt;/summary&gt;
            class GS1QRExample
            {
            
                /// &lt;summary&gt;
                /// Run the test.
                /// &lt;/summary&gt;
                public static void TestGS1QR()
                {
                    // form the GS1 Application identifiers
                    //
                    GS1ApplicationIdentifierValue[] aiValues = new GS1ApplicationIdentifierValue[4];
                    GS1ApplicationIdentifier ai;
                    // 01 - Global Trade Item Number
                    ai = GS1ApplicationIdentifiers.FindApplicationIdentifier("01");
                    aiValues[0] = new GS1ApplicationIdentifierValue(ai, "0123456789123C");
                    // 310 - Net weight, kilograms
                    ai = GS1ApplicationIdentifiers.FindApplicationIdentifier("310");
                    aiValues[1] = new GS1ApplicationIdentifierValue(ai, "0012.55");
                    // 30 - Count of Items
                    ai = GS1ApplicationIdentifiers.FindApplicationIdentifier("30");
                    aiValues[2] = new GS1ApplicationIdentifierValue(ai, "10");
                    // 90 - Company Internal Information
                    ai = GS1ApplicationIdentifiers.FindApplicationIdentifier("90");
                    aiValues[3] = new GS1ApplicationIdentifierValue(ai, "ABCabc12345");
                    // create GS1 value item
                    GS1ValueItem gs1Value = new GS1ValueItem(aiValues);
            
                    // create the barcode writer
                    BarcodeWriter writer = new BarcodeWriter();
            
                    // specify that writer must create output image as 24-bpp image
                    writer.Settings.PixelFormat = BarcodeImagePixelFormat.Bgr24;
            
                    // encode GS1 QR barcode
                    BarcodeSymbologySubsets.GS1QR.Encode(gs1Value, writer.Settings);
            
                    // create image with barcode
                    using (Image barcodeImage = writer.GetBarcodeAsBitmap())
                    {
                        // delete aiValues array
                        aiValues = null;
            
                        // read barcode with GS1 value
            
                        // create barcode reader
                        using (BarcodeReader reader = new BarcodeReader())
                        {
                            // specify that reader must search for GS1 QR barcodes only
            
                            reader.Settings.ScanBarcodeTypes = BarcodeType.None;
                            reader.Settings.ScanBarcodeSubsets.Add(BarcodeSymbologySubsets.GS1QR);
            
                            // read barcode from image
                            IBarcodeInfo[] infos = reader.ReadBarcodes(barcodeImage);
            
                            // print reader transmitted value
                            Console.WriteLine("Transmitted data: {0}", ((GS1BarcodeInfo)infos[0]).TransmittedData);
                            Console.WriteLine();
            
                            // gets GS1 value from barcode value      
                            gs1Value = (GS1ValueItem)(infos[0].ValueItems[0]);
            
                            // gets a GS1 Application identifiers from barcode value            
                            aiValues = gs1Value.ApplicationIdentifierValues;
            
                            StringBuilder printableValue = new StringBuilder();
                            // print Application identifiers values
                            for (int i = 0; i &lt; aiValues.Length; i++)
                            {
                                GS1ApplicationIdentifierValue aiValue = aiValues[i];
                                ai = aiValue.ApplicationIdentifier;
                                Console.WriteLine(string.Format("[{0}] {1}", i + 1, aiValue));
                                Console.WriteLine(string.Format("Application identifier   : {0}", ai.ApplicationIdentifier));
                                Console.WriteLine(string.Format("Value                    : {0}", aiValue.Value));
                                Console.WriteLine(string.Format("Data title               : {0}", ai.DataTitle));
                                Console.WriteLine(string.Format("Data content             : {0}", ai.DataContent));
                                Console.WriteLine(string.Format("Format                   : {0}", ai.Format));
                                Console.WriteLine(string.Format("Is contains decimal point: {0}", ai.IsContainsDecimalPoint));
                                Console.WriteLine(string.Format("Is variable length       : {0}", ai.IsVariableLength));
                                Console.WriteLine();
                                printableValue.Append(aiValue.ToString());
                            }
            
                            // print GS1 printable value
                            Console.WriteLine("Printable GS1 value: " + printableValue.ToString());
                        }
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Barcode.SymbologySubsets.GS1.GS1QRBarcodeSymbology.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Barcode.SymbologySubsets.GS1.GS1QRBarcodeSymbology" /> class. 
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.SymbologySubsets.GS1.GS1DataBarBarcodeSymbology">
            <summary>
            Class that defines the GS1 DataBar barcode symbology -
            subset of RSS-14 barcode symbology with values in GS1 System data format.
            </summary>
        </member>
        <member name="M:Vintasoft.Barcode.SymbologySubsets.GS1.GS1DataBarBarcodeSymbology.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Barcode.SymbologySubsets.GS1.GS1DataBarBarcodeSymbology" /> class. 
            </summary>
        </member>
        <member name="M:Vintasoft.Barcode.SymbologySubsets.GS1.GS1DataBarBarcodeSymbology.Decode(Vintasoft.Barcode.IBarcodeInfo)">
            <summary>
            Decodes the source barcode symbology value into the GS1 barcode value.
            </summary>
            <param name="info">Source barcode symbology value.</param>
            <returns>GS1 barcode value.</returns>
        </member>
        <member name="M:Vintasoft.Barcode.SymbologySubsets.GS1.GS1DataBarBarcodeSymbology.Encode(Vintasoft.Barcode.BarcodeInfo.ValueItemBase,Vintasoft.Barcode.WriterSettings)">
            <summary>
            Encodes the GS1 barcode value into the source barcode symbology value
            using provided barcode writer settings and
            saves the source barcode symbology value in the barcode writer settings.
            </summary>
            <param name="value">GS1 barcode value to encode.</param>
            <param name="settings">Barcode writer settings.</param>
        </member>
        <member name="T:Vintasoft.Barcode.SymbologySubsets.GS1.GS1DataBarExpandedBarcodeSymbology">
            <summary>
            Class that defines the GS1 DataBar Expanded barcode symbology -
            subset of RSS Expanded barcode symbology with values in GS1 System data format.
            </summary>
        </member>
        <member name="M:Vintasoft.Barcode.SymbologySubsets.GS1.GS1DataBarExpandedBarcodeSymbology.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Barcode.SymbologySubsets.GS1.GS1DataBarExpandedBarcodeSymbology" /> class. 
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.SymbologySubsets.GS1.GS1DataBarExpandedBarcodeSymbology.Name">
            <summary>
            Gets a name of barcode subset.
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.SymbologySubsets.GS1.GS1DataBarExpandedStackedBarcodeSymbology">
            <summary>
            Class that defines the GS1 DataBar Expanded Stacked barcode symbology -
            subset of RSS Expanded Stacked barcode symbology with values in GS1 System data format.
            </summary>
        </member>
        <member name="M:Vintasoft.Barcode.SymbologySubsets.GS1.GS1DataBarExpandedStackedBarcodeSymbology.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Barcode.SymbologySubsets.GS1.GS1DataBarExpandedStackedBarcodeSymbology" /> class. 
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.SymbologySubsets.GS1.GS1DataBarExpandedStackedBarcodeSymbology.Name">
            <summary>
            Gets a name of barcode subset.
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.SymbologySubsets.GS1.GS1DataBarStackedBarcodeSymbology">
            <summary>
            Class that defines the GS1 DataBar Stacked barcode symbology -
            subset of RSS-14 Stacked barcode symbology with values in GS1 System data format.
            </summary>
        </member>
        <member name="M:Vintasoft.Barcode.SymbologySubsets.GS1.GS1DataBarStackedBarcodeSymbology.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Barcode.SymbologySubsets.GS1.GS1DataBarStackedBarcodeSymbology" /> class. 
            </summary>
        </member>
        <member name="M:Vintasoft.Barcode.SymbologySubsets.GS1.GS1DataBarStackedBarcodeSymbology.Decode(Vintasoft.Barcode.IBarcodeInfo)">
            <summary>
            Decodes the source barcode symbology value into the GS1 barcode value.
            </summary>
            <param name="info">Source barcode symbology value.</param>
            <returns>GS1 barcode value.</returns>
        </member>
        <member name="M:Vintasoft.Barcode.SymbologySubsets.GS1.GS1DataBarStackedBarcodeSymbology.Encode(Vintasoft.Barcode.BarcodeInfo.ValueItemBase,Vintasoft.Barcode.WriterSettings)">
            <summary>
            Encodes the GS1 barcode value into the source barcode symbology value
            using provided barcode writer settings and
            saves the source barcode symbology value in the barcode writer settings.
            </summary>
            <param name="value">GS1 barcode value to encode.</param>
            <param name="settings">Barcode writer settings.</param>
        </member>
        <member name="P:Vintasoft.Barcode.SymbologySubsets.GS1.GS1DataBarStackedBarcodeSymbology.Name">
            <summary>
            Gets a name of barcode subset.
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.SymbologySubsets.GS1.GS1DataBarLimitedBarcodeSymbology">
            <summary>
            Class that defines the GS1 DataBar Limited barcode symbology -
            subset of RSS Limited barcode symbology with values in GS1 System data format.
            </summary>
        </member>
        <member name="M:Vintasoft.Barcode.SymbologySubsets.GS1.GS1DataBarLimitedBarcodeSymbology.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Barcode.SymbologySubsets.GS1.GS1DataBarLimitedBarcodeSymbology" /> class. 
            </summary>
        </member>
        <member name="M:Vintasoft.Barcode.SymbologySubsets.GS1.GS1DataBarLimitedBarcodeSymbology.Decode(Vintasoft.Barcode.IBarcodeInfo)">
            <summary>
            Decodes the source barcode symbology value into the GS1 barcode value.
            </summary>
            <param name="info">Source barcode symbology value.</param>
            <returns>GS1 barcode value.</returns>
        </member>
        <member name="M:Vintasoft.Barcode.SymbologySubsets.GS1.GS1DataBarLimitedBarcodeSymbology.Encode(Vintasoft.Barcode.BarcodeInfo.ValueItemBase,Vintasoft.Barcode.WriterSettings)">
            <summary>
            Encodes the GS1 barcode value into the source barcode symbology value
            using provided barcode writer settings and
            saves the source barcode symbology value in the barcode writer settings.
            </summary>
            <param name="value">GS1 barcode value to encode.</param>
            <param name="settings">Barcode writer settings.</param>
        </member>
        <member name="P:Vintasoft.Barcode.SymbologySubsets.GS1.GS1DataBarLimitedBarcodeSymbology.Name">
            <summary>
            Gets a name of barcode subset.
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.SymbologySubsets.GS1.GS1AztecBarcodeSymbology">
            <summary>
            Class that defines the subset of Aztec barcodes with values in GS1 System data format.
            </summary>
        </member>
        <member name="M:Vintasoft.Barcode.SymbologySubsets.GS1.GS1AztecBarcodeSymbology.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Barcode.SymbologySubsets.GS1.GS1AztecBarcodeSymbology" /> class. 
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.SymbologySubsets.RoyalMailMailmark.MailmarkCmdmBarcodeSymbology">
            <summary>
            Class that defines the Royal Mail Mailmark CMDM 2D barcode symbology -
            subset of DataMatrix barcode symbology.
            </summary>
        </member>
        <member name="M:Vintasoft.Barcode.SymbologySubsets.RoyalMailMailmark.MailmarkCmdmBarcodeSymbology.#ctor(Vintasoft.Barcode.SymbologySubsets.RoyalMailMailmark.MailmarkCmdmType)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Barcode.SymbologySubsets.RoyalMailMailmark.MailmarkCmdmBarcodeSymbology" /> class. 
            </summary>
            <param name="cmdmType">Type of Mailmark CMDM 2D barcode.</param>
        </member>
        <member name="M:Vintasoft.Barcode.SymbologySubsets.RoyalMailMailmark.MailmarkCmdmBarcodeSymbology.Decode(Vintasoft.Barcode.IBarcodeInfo)">
            <summary>
            Decodes the DataMatrix barcode value into the Mailmark CMDM 2D barcode value.
            </summary>
            <param name="info">DataMatrix barcode value.</param>
            <returns>Mailmark CMDM 2D barcode value.</returns>
        </member>
        <member name="M:Vintasoft.Barcode.SymbologySubsets.RoyalMailMailmark.MailmarkCmdmBarcodeSymbology.Encode(Vintasoft.Barcode.BarcodeInfo.ValueItemBase,Vintasoft.Barcode.WriterSettings)">
            <summary>
            Encodes the Mailmark CMDM 2D barcode value into the source barcode symbology value
            using provided barcode writer settings and
            saves the source barcode symbology value in the barcode writer settings.
            </summary>
            <param name="value">The Mailmark CMDM 2D barcode value to encode.</param>
            <param name="settings">Barcode writer settings.</param>
        </member>
        <member name="M:Vintasoft.Barcode.SymbologySubsets.RoyalMailMailmark.MailmarkCmdmBarcodeSymbology.CreateValue">
            <summary>
            Creates a new <see cref="T:Vintasoft.Barcode.BarcodeInfo.MailmarkCmdmValueItem" /> object.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Barcode.BarcodeInfo.MailmarkCmdmValueItem" /> object.</returns>
        </member>
        <member name="P:Vintasoft.Barcode.SymbologySubsets.RoyalMailMailmark.MailmarkCmdmBarcodeSymbology.CmdmType">
            <summary>
            Gets a type of Mailmark CMDM 2D barcode.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.SymbologySubsets.RoyalMailMailmark.MailmarkCmdmBarcodeSymbology.Name">
            <summary>
            Gets a name of barcode subset.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.SymbologySubsets.RoyalMailMailmark.MailmarkCmdmBarcodeSymbology.BaseType">
            <summary>
            Gets a base barcode type of barode subset.
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.BarcodeInfo.MailmarkCmdmBarcodeInfo">
            <summary>
            Class that allows to get information about recognized Mailmark CMDM 2D barcode.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.MailmarkCmdmBarcodeInfo.DecodedValue">
            <summary>
            Gets a decode value of Mailmark CMDM 2D barcode.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.MailmarkCmdmBarcodeInfo.CmdmType">
            <summary>
            Gets a type of Mailmark CMDM 2D barcode.
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.SymbologySubsets.RoyalMailMailmark.MailmarkCmdmType">
            <summary>
            Defines available types of Mailmark 2D CMDM barcode.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.SymbologySubsets.RoyalMailMailmark.MailmarkCmdmType.CmdmType7">
            <summary>
            2D CMDM type 7 (24 x 24 modules).
            </summary>
            <remarks>
            Total capacity: 51 characters, available for customer use: 6 characters.
            </remarks>
        </member>
        <member name="F:Vintasoft.Barcode.SymbologySubsets.RoyalMailMailmark.MailmarkCmdmType.CmdmType9">
            <summary>
            2D CMDM type 9 (32 x 32 modules).
            </summary>
            <remarks>
            Total capacity: 90 characters, available for customer use: 45 characters.
            </remarks>
        </member>
        <member name="F:Vintasoft.Barcode.SymbologySubsets.RoyalMailMailmark.MailmarkCmdmType.CmdmType29">
            <summary>
            2D CMDM type 29 (16 x 48 modules).
            </summary>
            <remarks>
            Total capacity: 70 characters, available for customer use: 25 characters.
            </remarks>
        </member>
        <member name="T:Vintasoft.Barcode.BarcodeInfo.MailmarkCmdmValueItem">
            <summary>
            Class that contains information about a decoded value of Mailmark CMDM 2D barcode.
            </summary>
            <example>Here is a simple example that demonstrates how to 
            generate Mailmark CMDM 2D barcode:
            <code lang="VB.NET">   
            Imports System.Drawing   
               
            Imports Vintasoft.Barcode   
            Imports Vintasoft.Barcode.BarcodeInfo   
            Imports Vintasoft.Barcode.SymbologySubsets   
               
            ''' &lt;summary&gt;   
            ''' Test that demonstrates how to generate image with Mailmark CMDM Type29 barcode and   
            ''' how to recognize Mailmark CMDM Type29 barcode on the image.   
            ''' &lt;/summary&gt;   
            Class MailmarkCmdmValueItemExample   
               
            	''' &lt;summary&gt;   
            	''' Run the test.   
            	''' &lt;/summary&gt;   
            	Public Shared Sub Test()   
            		' create the Mailmark CMDM 2D barcode value   
            		Dim item As New MailmarkCmdmValueItem()   
            		item.InformationTypeId = "0"   
            		item.VersionId = "1"   
            		item.[Class] = "0"   
            		item.SupplyChainId = "1000009"   
            		item.ItemId = "00009609"   
            		item.Dps = "W1T1HQ9Z "   
            		item.RtsFlag = "0"   
            		item.ReturnToSenderPostCode = "SN35XX "   
            		item.CustomerContent = "ABCDEFGHIJ1234567890A"   
               
            		' create the barcode writer   
            		Dim writer As New BarcodeWriter()   
               
            		' encode Mailmark CMDM Type29 barcode   
            		BarcodeSymbologySubsets.MailmarkCmdmType29.Encode(item, writer.Settings)   
               
            		Dim infos As IBarcodeInfo()   
               
            		' get image with barcode   
            		Using image As Image = writer.GetBarcodeAsBitmap()   
            			' create the barcode reader   
            			Using reader As New BarcodeReader()   
            				' specify that reader must search for Mailmark CMDM Type29 barcodes only   
            				reader.Settings.ScanBarcodeTypes = BarcodeType.None   
            				reader.Settings.ScanBarcodeSubsets.Add(BarcodeSymbologySubsets.MailmarkCmdmType29)   
               
            				' recognize barcode   
            				infos = reader.ReadBarcodes(image)   
            			End Using   
            		End Using   
               
            		' get barcode value   
            		Dim readItem As MailmarkCmdmValueItem = DirectCast(infos(0).ValueItems(0), MailmarkCmdmValueItem)   
               
            		' print barcode value   
            		Console.WriteLine("Decoded value =              '{0}'", item.ToString())   
            		Console.WriteLine("Information Type ID =        '{0}'", item.InformationTypeId)   
            		Console.WriteLine("Version ID =                 '{0}'", item.VersionId)   
            		Console.WriteLine("Class =                      '{0}'", item.[Class])   
            		Console.WriteLine("Supply Chain ID =            '{0}'", item.SupplyChainId)   
            		Console.WriteLine("Item ID =                    '{0}'", item.ItemId)   
            		Console.WriteLine("DPS =                        '{0}'", item.Dps)   
            		Console.WriteLine("RTS Flag =                   '{0}'", item.RtsFlag)   
            		Console.WriteLine("Return To Sender Post Code = '{0}'", item.ReturnToSenderPostCode)   
            		Console.WriteLine("Customer Content =           '{0}'", item.CustomerContent)   
               
            		' check recognized barcode value   
            		If item.ToString() &lt;&gt; readItem.ToString() Then   
            			Throw New ApplicationException()   
            		End If   
            	End Sub   
            End Class   
               
            ' This code example produces the following output:    
            '   
            '   Decoded value =              'JGB 010100000900009609W1T1HQ9Z 0SN35XX       ABCDEFGHIJ1234567890A'   
            '   Information Type ID =        '0'   
            '   Version ID =                 '1'   
            '   Class =                      '0'   
            '   Supply Chain ID =            '1000009'   
            '   Item ID =                    '00009609'   
            '   DPS =                        'W1T1HQ9Z '   
            '   RTS Flag =                   '0'   
            '   Return To Sender Post Code = 'SN35XX '   
            '   Customer Content =           'ABCDEFGHIJ1234567890A'   
            '   
            
            </code>
            <code lang="C#">
            using System;
            using System.Drawing;
            
            using Vintasoft.Barcode;
            using Vintasoft.Barcode.BarcodeInfo;
            using Vintasoft.Barcode.SymbologySubsets;
            
            /// &lt;summary&gt;
            /// Test that demonstrates how to generate image with Mailmark CMDM Type29 barcode and
            /// how to recognize Mailmark CMDM Type29 barcode on the image.
            /// &lt;/summary&gt;
            class MailmarkCmdmValueItemExample
            {
            
                /// &lt;summary&gt;
                /// Run the test.
                /// &lt;/summary&gt;
                public static void Test()
                {
                    // create the Mailmark CMDM 2D barcode value
                    MailmarkCmdmValueItem item = new MailmarkCmdmValueItem();
                    item.InformationTypeId = "0";
                    item.VersionId = "1";
                    item.Class = "0";
                    item.SupplyChainId = "1000009";
                    item.ItemId = "00009609";
                    item.Dps = "W1T1HQ9Z ";
                    item.RtsFlag = "0";
                    item.ReturnToSenderPostCode = "SN35XX ";
                    item.CustomerContent = "ABCDEFGHIJ1234567890A";
            
                    // create the barcode writer
                    BarcodeWriter writer = new BarcodeWriter();
                    
                    // encode Mailmark CMDM Type29 barcode
                    BarcodeSymbologySubsets.MailmarkCmdmType29.Encode(item, writer.Settings);
                    
                    IBarcodeInfo[] infos;
                    
                    // get image with barcode
                    using (Image image = writer.GetBarcodeAsBitmap())
                    {
                        // create the barcode reader
                        using (BarcodeReader reader = new BarcodeReader())
                        {
                            // specify that reader must search for Mailmark CMDM Type29 barcodes only
                            reader.Settings.ScanBarcodeTypes = BarcodeType.None;
                            reader.Settings.ScanBarcodeSubsets.Add(BarcodeSymbologySubsets.MailmarkCmdmType29);
            
                            // recognize barcode
                            infos = reader.ReadBarcodes(image);
                        }
                    }
            
                    // get barcode value
                    MailmarkCmdmValueItem readItem = (MailmarkCmdmValueItem)infos[0].ValueItems[0];
            
                    // print barcode value
                    Console.WriteLine("Decoded value =              '{0}'", item.ToString());
                    Console.WriteLine("Information Type ID =        '{0}'", item.InformationTypeId);
                    Console.WriteLine("Version ID =                 '{0}'", item.VersionId);
                    Console.WriteLine("Class =                      '{0}'", item.Class);
                    Console.WriteLine("Supply Chain ID =            '{0}'", item.SupplyChainId);
                    Console.WriteLine("Item ID =                    '{0}'", item.ItemId);
                    Console.WriteLine("DPS =                        '{0}'", item.Dps);
                    Console.WriteLine("RTS Flag =                   '{0}'", item.RtsFlag);
                    Console.WriteLine("Return To Sender Post Code = '{0}'", item.ReturnToSenderPostCode);
                    Console.WriteLine("Customer Content =           '{0}'", item.CustomerContent);
            
                    // check recognized barcode value
                    if (item.ToString() != readItem.ToString())
                        throw new ApplicationException();
                }
            }
            
            /* This code example produces the following output: 
            
               Decoded value =              'JGB 010100000900009609W1T1HQ9Z 0SN35XX       ABCDEFGHIJ1234567890A'
               Information Type ID =        '0'
               Version ID =                 '1'
               Class =                      '0'
               Supply Chain ID =            '1000009'
               Item ID =                    '00009609'
               DPS =                        'W1T1HQ9Z '
               RTS Flag =                   '0'
               Return To Sender Post Code = 'SN35XX '
               Customer Content =           'ABCDEFGHIJ1234567890A'
            */
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeInfo.MailmarkCmdmValueItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Barcode.BarcodeInfo.MailmarkCmdmValueItem" /> class. 
            </summary>
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeInfo.MailmarkCmdmValueItem.ToString">
            <summary>
            Converts the information about value item of this instance to its equivalent
            string.
            </summary>
            <returns>
            String representation of value item.
            </returns>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.MailmarkCmdmValueItem.UpuCountryId">
            <summary>
            Gets the UPU Country ID.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.MailmarkCmdmValueItem.InformationTypeId">
            <summary>
            Gets or sets the Royal Mail Mailmark barcode payload for each product type.
            </summary>
            <value>
            <ul>
            <li>"0" – Domestic Sorted And Unsorted</li>
            <li>"1" – International Sorted And Unsorted (for potential future use)</li>
            <li>"2" – Response Services (for potential future use)</li>
            <li>"A" – Online Postage</li>
            <li>"B" - Franking</li>
            <li>"C" – Consolidation</li>
            </ul>
            </value>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.MailmarkCmdmValueItem.VersionId">
            <summary>
            Gets or sets the barcode version as relevant to each Information Type ID.
            </summary>
            <value>
            <ul>"
            <li>"1" – For Mailmark barcode</li>
            <li>"0", "2" to "9", "A" to "Z" - spare for future use</li>
            </ul>
            </value>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.MailmarkCmdmValueItem.Class">
            <summary>
            Gets or sets the class of the item.
            </summary>
            <value>
            <ul>
            <li>"0" - Null or Test</li>
            <li>"1" - 1C (Retail)</li>
            <li>"2" - 2C (Retail)</li>
            <li>"3" - 3C (Retail)</li>
            <li>"4" - Premium (Retail Publishing Mail) (for potential future use)</li>
            <li>"5" - Deferred (Retail)</li>
            <li>"6" - Air (Retail) (for potential future use)</li>
            <li>"7" - Surface (Retail) (for potential future use)</li>
            <li>"8" - Premium (Network Access)</li>
            <li>"9" - Standard (Network Access)</li>
            <li>"A" to "Z" – Spare(for potential future use)</li>
            </ul>
            </value>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.MailmarkCmdmValueItem.SupplyChainId">
            <summary>
            Gets or sets the unique chain of customers involved in the mailing.
            </summary>
            <value>
            From "0000000" to "9999999".
            </value>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.MailmarkCmdmValueItem.ItemId">
            <summary>
            Gets or sets the unique item within the Supply Chain ID.
            </summary>
            <value>
            From "00000000" to "99999999".
            </value>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.MailmarkCmdmValueItem.Dps">
            <summary>
            Gets or sets the Destination Post Code plus Delivery Point Suffix (DPS).
            </summary>
            <value>
            The PC and DP must comply with a valid PAF format 
            (see Royal Mail Mailmark® barcode definition document, Appendix A).
            </value>
            <remarks>
            Contains the Postcode of the Delivery Address with DPS.<br />
            If inland the Postcode/DP contains the following number of characters:<br />
            <ul>
            <li>Area (1 or 2 characters)</li>
            <li>District (1 or 2 characters)</li>
            <li>Sector (1 character)</li>
            <li>Unit (2 characters)</li>
            <li>DPS (2 characters).</li>
            </ul>
            If no destination post code information is available this field shall be filled 
            with 9 space characters.
            </remarks>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.MailmarkCmdmValueItem.RtsFlag">
            <summary>
            Gets or sets a flag which indicates what level of RTS service is being requested.
            </summary>
            <value>
            <ul>
            <li>"0" – None</li>
            <li>"1" – Response Services Unique (for potential future use)</li>
            </ul>
            </value>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.MailmarkCmdmValueItem.ReturnToSenderPostCode">
            <summary>
            Gets or sets the Return to Sender Post Code but no DPS.
            </summary>
            <value>
            The PC (without DPS) must comply with a PAF® format 
            (see Royal Mail Mailmark® barcode definition document, Appendix A).<br />
            If no RTS post code exists this field shall be filled with 7 space characters.
            </value>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.MailmarkCmdmValueItem.Reserved">
            <summary>
            Gets or sets field reserved by Royal Mail.
            </summary>
            <value>
            Must be filled with space characters until further notice.
            </value>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.MailmarkCmdmValueItem.CustomerContent">
            <summary>
            Gets or sets optional space for use by customer.
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.SymbologySubsets.RoyalMailMailmark.MailmarkCmdmType7BarcodeSymbology">
            <summary>
            Class that defines the Royal Mail Mailmark CMDM Type7 2D barcode symbology -
            subset of DataMatrix barcode symbology.
            </summary>
        </member>
        <member name="M:Vintasoft.Barcode.SymbologySubsets.RoyalMailMailmark.MailmarkCmdmType7BarcodeSymbology.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Barcode.SymbologySubsets.RoyalMailMailmark.MailmarkCmdmType7BarcodeSymbology" /> class. 
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.SymbologySubsets.RoyalMailMailmark.MailmarkCmdmType9BarcodeSymbology">
            <summary>
            Class that defines the Royal Mail Mailmark CMDM Type9 2D barcode symbology -
            subset of DataMatrix barcode symbology.
            </summary>
        </member>
        <member name="M:Vintasoft.Barcode.SymbologySubsets.RoyalMailMailmark.MailmarkCmdmType9BarcodeSymbology.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Barcode.SymbologySubsets.RoyalMailMailmark.MailmarkCmdmType9BarcodeSymbology" /> class. 
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.SymbologySubsets.RoyalMailMailmark.MailmarkCmdmType29BarcodeSymbology">
            <summary>
            Class that defines the Royal Mail Mailmark CMDM Type29 2D barcode symbology -
            subset of DataMatrix barcode symbology.
            </summary>
        </member>
        <member name="M:Vintasoft.Barcode.SymbologySubsets.RoyalMailMailmark.MailmarkCmdmType29BarcodeSymbology.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Barcode.SymbologySubsets.RoyalMailMailmark.MailmarkCmdmType29BarcodeSymbology" /> class. 
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.BarcodeInfo.MacroCharacter">
            <summary>
            Class that allows to access the macro characters.
            </summary>
            <remarks>
            DataMatrix and Micro PDF417 provides a means of abbreviating an industry
            specific header and trailer in one symbol character. This
            feature exists to reduce the number of symbol characters
            needed to encode data in a symbol using certain structured
            formats. A Macro character must be in the first character 
            position of a symbol.
            </remarks>
            <example>
            Please see example <see cref="T:Vintasoft.Barcode.BarcodeInfo.NonDataFlags">here</see>.
            </example>
            <seealso cref="P:Vintasoft.Barcode.WriterSettings.ProcessSpecialSymbols" />
            <seealso cref="T:Vintasoft.Barcode.BarcodeInfo.NonDataFlags" />
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.MacroCharacter.Header">
            <summary>
            Gets a header of this macro symbol.
            </summary>
            <remarks>
            The header transmitted as a prefix to the barcode value.
            </remarks>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.MacroCharacter.Trailer">
            <summary>
            Gets a trailer of this macro symbol.
            </summary>
            <remarks>
            The trailer transmitted as a suffix to the barcode value.
            </remarks>
        </member>
        <member name="T:Vintasoft.Barcode.BarcodeInfo.DataMatrixStructureAppendCharacter">
            <summary>
            Class that contains information about the DataMatrix Structure Append non-data character.
            </summary>
            <example>
            Please see example <see cref="T:Vintasoft.Barcode.BarcodeInfo.StructureAppendCharacter">here</see>.
            </example>
            <seealso cref="T:Vintasoft.Barcode.BarcodeInfo.StructureAppendCharacter" />
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeInfo.DataMatrixStructureAppendCharacter.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Barcode.BarcodeInfo.DataMatrixStructureAppendCharacter" /> class. 
            </summary>
            <param name="symbolPosition">The position for a symbol in the Structured Append format.</param>
            <param name="symbolCount">The number of symbols in the Structured Append format.</param>
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeInfo.DataMatrixStructureAppendCharacter.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Barcode.BarcodeInfo.DataMatrixStructureAppendCharacter" /> class. 
            </summary>
            <param name="fileID">File identification.</param>
            <param name="symbolPosition">The position for a symbol in the Structured Append format.</param>
            <param name="symbolCount">The number of symbols in the Structured Append format.</param>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.DataMatrixStructureAppendCharacter.FileID">
            <summary>
            Gets a File Identificator.
            </summary>
            <remarks>
            The purpose of the file identificator is to increase the 
            probability that only logically linked symbols are processed 
            as part of the same message.
            </remarks>
            <value>
            Default value is <b>0</b>.<br />
            Max value is <b>64515</b>.<br />
            Min value is <b>0</b>.
            </value>
        </member>
        <member name="T:Vintasoft.Barcode.BarcodeInfo.MaxiCodeInfo">
            <summary>
            Class that allows to get information about recognized MaxiCode barcode.
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.BarcodeInfo.BarcodeInfo2D">
            <summary>
            Class that allows to get information about recognized 2D barcode.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.BarcodeInfo2D.CorrectedErrors">
            <summary>
            Gets a number of corrected errors.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.BarcodeInfo2D.NotCorrectedErrors">
            <summary>
            Gets a number of uncorrected errors.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.BarcodeInfo2D.ErrorCorrectionCodewordCount">
            <summary>
            Gets a number of error correction codewords.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.BarcodeInfo2D.TotalCodewordCount">
            <summary>
            Gets a number of codewords.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.MaxiCodeInfo.EncodingMode">
            <summary>
            Returns a encoding mode used in barcode.
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.BarcodeInfo.MaxiCodeEncodingMode">
            <summary>
            MaxiCode encoding mode.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.MaxiCodeEncodingMode.Mode2">
            <summary>
            Mode2: Structured Carrier Message with Digital Post Code (MaxiCode specification, Annex B).
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.MaxiCodeEncodingMode.Mode3">
            <summary>
            Mode3: Structured Carrier Message with Alphanumeric or Digital Post Code (MaxiCode specification, Annex B).
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.MaxiCodeEncodingMode.Mode4">
            <summary>
            Mode4: Standard symbol with standard error correction.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.MaxiCodeEncodingMode.Mode5">
            <summary>
            Mode5: Standard symbol with extended error correction.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.MaxiCodeEncodingMode.Mode6">
            <summary>
            Mode6: Programmable reader with standard error correction.
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.BarcodeInfo.MaxiCodeStructuredCarrierMessage">
            <summary>
            Class that contains information about the MaxiCode Structured Carrier Message.
            </summary>
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeInfo.MaxiCodeStructuredCarrierMessage.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Barcode.BarcodeInfo.MaxiCodeStructuredCarrierMessage" /> class. 
            </summary>
            <param name="postalCode">Postal code.</param>
            <param name="isoCountryCode">ISO Contry code.</param>
            <param name="classOfService">Class of service.</param>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.MaxiCodeStructuredCarrierMessage.PostalCode">
            <summary>
            Gets a postal code.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.MaxiCodeStructuredCarrierMessage.CountryCode">
            <summary>
            Gets a contry code (ISO 3166).
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.MaxiCodeStructuredCarrierMessage.ClassOfService">
            <summary>
            Gets a class of service.
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.BarcodeInfo.MicroPDF417SymbolType">
            <summary>
            Specifies available Micro PDS417 symbol types.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.MicroPDF417SymbolType.Undefined">
            <summary>
            Undefined symbol.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.MicroPDF417SymbolType.Col1Row11">
            <summary>
            Symbol containing 1 column and 11 rows.
            </summary>
            <remarks>
            Maximum capacity: 3 bytes OR 6 alpha characters OR 8 digits.
            Error correction codewords (% of codewords): 64.
            </remarks>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.MicroPDF417SymbolType.Col1Row14">
            <summary>
            Symbol containing 1 column and 14 rows.
            </summary>
            <remarks>
            Maximum capacity: 7 bytes OR 12 alpha characters OR 17 digits.
            Error correction codewords (% of codewords): 50.
            </remarks>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.MicroPDF417SymbolType.Col1Row17">
            <summary>
            Symbol containing 1 column and 17 rows.
            </summary>
            <remarks>
            Maximum capacity: 10 bytes OR 18 alpha characters OR 26 digits.
            Error correction codewords (% of codewords): 41.
            </remarks>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.MicroPDF417SymbolType.Col1Row20">
            <summary>
            Symbol containing 1 column and 20 rows.
            </summary>
            <remarks>
            Maximum capacity: 13 bytes OR 22 alpha characters OR 32 digits.
            Error correction codewords (% of codewords): 40.
            </remarks>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.MicroPDF417SymbolType.Col1Row24">
            <summary>
            Symbol containing 1 column and 24 rows.
            </summary>
            <remarks>
            Maximum capacity: 18 bytes OR 30 alpha characters OR 44 digits.
            Error correction codewords (% of codewords): 33.
            </remarks>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.MicroPDF417SymbolType.Col1Row28">
            <summary>
            Symbol containing 1 column and 28 rows.
            </summary>
            <remarks>
            Maximum capacity: 22 bytes OR 38 alpha characters OR 55 digits.
            Error correction codewords (% of codewords): 29.
            </remarks>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.MicroPDF417SymbolType.Col2Row8">
            <summary>
            Symbol containing 2 columns and 8 rows.
            </summary>
            <remarks>
            Maximum capacity: 8 bytes OR 14 alpha characters OR 20 digits.
            Error correction codewords (% of codewords): 50.
            </remarks>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.MicroPDF417SymbolType.Col2Row11">
            <summary>
            Symbol containing 2 columns and 11 rows.
            </summary>
            <remarks>
            Maximum capacity: 14 bytes OR 24 alpha characters OR 35 digits.
            Error correction codewords (% of codewords): 41.
            </remarks>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.MicroPDF417SymbolType.Col2Row14">
            <summary>
            Symbol containing 2 columns and 14 rows.
            </summary>
            <remarks>
            Maximum capacity: 21 bytes OR 36 alpha characters OR 52 digits.
            Error correction codewords (% of codewords): 32.
            </remarks>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.MicroPDF417SymbolType.Col2Row17">
            <summary>
            Symbol containing 2 columns and 17 rows.
            </summary>
            <remarks>
            Maximum capacity: 27 bytes OR 46 alpha characters OR 67 digits.
            Error correction codewords (% of codewords): 29.
            </remarks>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.MicroPDF417SymbolType.Col2Row20">
            <summary>
            Symbol containing 2 columns and 20 rows.
            </summary>
            <remarks>
            Maximum capacity: 33 bytes OR 56 alpha characters OR 82 digits.
            Error correction codewords (% of codewords): 28.
            </remarks>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.MicroPDF417SymbolType.Col2Row23">
            <summary>
            Symbol containing 2 columns and 23 rows.
            </summary>
            <remarks>
            Maximum capacity: 38 bytes OR 64 alpha characters OR 92 digits.
            Error correction codewords (% of codewords): 28.
            </remarks>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.MicroPDF417SymbolType.Col2Row26">
            <summary>
            Symbol containing 2 columns and 26 rows.
            </summary>
            <remarks>
            Maximum capacity: 43 bytes OR 72 alpha characters OR 105 digits.
            Error correction codewords (% of codewords): 29.
            </remarks>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.MicroPDF417SymbolType.Col3Row6">
            <summary>
            Symbol containing 3 columns and 6 rows.
            </summary>
            <remarks>
            Maximum capacity: 6 bytes OR 10 alpha characters OR 14 digits.
            Error correction codewords (% of codewords): 67.
            </remarks>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.MicroPDF417SymbolType.Col3Row8">
            <summary>
            Symbol containing 3 columns and 8 rows.
            </summary>
            <remarks>
            Maximum capacity: 10 bytes OR 18 alpha characters OR 26 digits.
            Error correction codewords (% of codewords): 58.
            </remarks>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.MicroPDF417SymbolType.Col3Row10">
            <summary>
            Symbol containing 3 columns and 10 rows.
            </summary>
            <remarks>
            Maximum capacity: 15 bytes OR 26 alpha characters OR 38 digits.
            Error correction codewords (% of codewords): 53.
            </remarks>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.MicroPDF417SymbolType.Col3Row12">
            <summary>
            Symbol containing 3 columns and 12 rows.
            </summary>
            <remarks>
            Maximum capacity: 20 bytes OR 34 alpha characters OR 49 digits.
            Error correction codewords (% of codewords): 50.
            </remarks>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.MicroPDF417SymbolType.Col3Row15">
            <summary>
            Symbol containing 3 columns and 15 rows.
            </summary>
            <remarks>
            Maximum capacity: 27 bytes OR 46 alpha characters OR 67 digits.
            Error correction codewords (% of codewords): 47.
            </remarks>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.MicroPDF417SymbolType.Col3Row20">
            <summary>
            Symbol containing 3 columns and 20 rows.
            </summary>
            <remarks>
            Maximum capacity: 39 bytes OR 66 alpha characters OR 96 digits.
            Error correction codewords (% of codewords): 43.
            </remarks>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.MicroPDF417SymbolType.Col3Row26">
            <summary>
            Symbol containing 3 columns and 26 rows.
            </summary>
            <remarks>
            Maximum capacity: 54 bytes OR 90 alpha characters OR 132 digits.
            Error correction codewords (% of codewords): 41.
            </remarks>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.MicroPDF417SymbolType.Col3Row32">
            <summary>
            Symbol containing 3 columns and 32 rows.
            </summary>
            <remarks>
            Maximum capacity: 68 bytes OR 114 alpha characters OR 167 digits.
            Error correction codewords (% of codewords): 40.
            </remarks>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.MicroPDF417SymbolType.Col3Row38">
            <summary>
            Symbol containing 3 columns and 38 rows.
            </summary>
            <remarks>
            Maximum capacity: 82 bytes OR 138 alpha characters OR 202 digits.
            Error correction codewords (% of codewords): 39.
            </remarks>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.MicroPDF417SymbolType.Col3Row44">
            <summary>
            Symbol containing 3 columns and 44 rows.
            </summary>
            <remarks>
            Maximum capacity: 97 bytes OR 162 alpha characters OR 237 digits.
            Error correction codewords (% of codewords): 38.
            </remarks>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.MicroPDF417SymbolType.Col4Row4">
            <summary>
            Symbol containing 4 columns and 4 rows.
            </summary>
            <remarks>
            Maximum capacity: 8 bytes OR 14 alpha characters OR 20 digits.
            Error correction codewords (% of codewords): 50.
            </remarks>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.MicroPDF417SymbolType.Col4Row6">
            <summary>
            Symbol containing 4 columns and 6 rows.
            </summary>
            <remarks>
            Maximum capacity: 13 bytes OR 22 alpha characters OR 32 digits.
            Error correction codewords (% of codewords): 50.
            </remarks>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.MicroPDF417SymbolType.Col4Row8">
            <summary>
            Symbol containing 4 columns and 8 rows.
            </summary>
            <remarks>
            Maximum capacity: 20 bytes OR 34 alpha characters OR 49 digits.
            Error correction codewords (% of codewords): 44.
            </remarks>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.MicroPDF417SymbolType.Col4Row10">
            <summary>
            Symbol containing 4 columns and 10 rows.
            </summary>
            <remarks>
            Maximum capacity: 27 bytes OR 46 alpha characters OR 67 digits.
            Error correction codewords (% of codewords): 40.
            </remarks>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.MicroPDF417SymbolType.Col4Row12">
            <summary>
            Symbol containing 4 columns and 12 rows.
            </summary>
            <remarks>
            Maximum capacity: 34 bytes OR 58 alpha characters OR 85 digits.
            Error correction codewords (% of codewords): 38.
            </remarks>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.MicroPDF417SymbolType.Col4Row15">
            <summary>
            Symbol containing 4 columns and 15 rows.
            </summary>
            <remarks>
            Maximum capacity: 45 bytes OR 76 alpha characters OR 111 digits.
            Error correction codewords (% of codewords): 35.
            </remarks>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.MicroPDF417SymbolType.Col4Row20">
            <summary>
            Symbol containing 4 columns and 20 rows.
            </summary>
            <remarks>
            Maximum capacity: 63 bytes OR 106 alpha characters OR 55 digits.
            Error correction codewords (% of codewords): 33.
            </remarks>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.MicroPDF417SymbolType.Col4Row26">
            <summary>
            Symbol containing 4 columns and 26 rows.
            </summary>
            <remarks>
            Maximum capacity: 85 bytes OR 142 alpha characters OR 208 digits.
            Error correction codewords (% of codewords): 31.
            </remarks>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.MicroPDF417SymbolType.Col4Row32">
            <summary>
            Symbol containing 4 columns and 32 rows.
            </summary>
            <remarks>
            Maximum capacity: 106 bytes OR 178 alpha characters OR 261 digits.
            Error correction codewords (% of codewords): 30.
            </remarks>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.MicroPDF417SymbolType.Col4Row38">
            <summary>
            Symbol containing 4 columns and 38 rows.
            </summary>
            <remarks>
            Maximum capacity: 128 bytes OR 214 alpha characters OR 313 digits.
            Error correction codewords (% of codewords): 29.
            </remarks>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.MicroPDF417SymbolType.Col4Row44">
            <summary>
            Symbol containing 4 columns and 44 rows.
            </summary>
            <remarks>
            Maximum capacity: 150 bytes OR 250 alpha characters OR 366 digits.
            Error correction codewords (% of codewords): 28.
            </remarks>
        </member>
        <member name="T:Vintasoft.Barcode.BarcodeInfo.MicroPDF417Info">
            <summary>
            Class that allows to get information about recognized MicroPDF417 barcode.
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.BarcodeInfo.PDF417Info">
            <summary>
            Class that allows to get information about recognized PDF417 or PDF417Compact barcode.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.PDF417Info.ErrorCorrectionLevel">
            <summary>
            Returns a level of error correction used in barcode.
            </summary>
            <value>
            Minimal value is 0, maximal value is 8.<br />
            -1 means that area of error correction is not defined.
            </value>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.PDF417Info.RowCodewordsCount">
            <summary>
            Returns a count of codewords in a row.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.PDF417Info.RowsCount">
            <summary>
            Returns a count of rows.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.MicroPDF417Info.SymbolType">
            <summary>
            Gets a MicroPDF417 symbol type.
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.BarcodeInfo.PDF417EncodingMode">
            <summary>
            Specifies available data compaction modes.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.PDF417EncodingMode.Undefined">
            <summary>
            Undefined.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.PDF417EncodingMode.Text">
            <summary>
            Text mode.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.PDF417EncodingMode.Byte">
            <summary>
            Byte mode.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.PDF417EncodingMode.Numeric">
            <summary>
            Numeric mode.
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.BarcodeInfo.PDF417ErrorCorrectionLevel">
            <summary>
            PDF417 Error Correction Level determminate Error Correction Codewords count.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.PDF417ErrorCorrectionLevel.Undefined">
            <summary>
            Undefined level.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.PDF417ErrorCorrectionLevel.Level0">
            <summary>
            2 Error Correction Codewords (error detection only).
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.PDF417ErrorCorrectionLevel.Level1">
            <summary>
            4 Error Correction Codewords.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.PDF417ErrorCorrectionLevel.Level2">
            <summary>
            8 Error Correction Codewords.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.PDF417ErrorCorrectionLevel.Level3">
            <summary>
            16 Error Correction Codewords.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.PDF417ErrorCorrectionLevel.Level4">
            <summary>
            32 Error Correction Codewords.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.PDF417ErrorCorrectionLevel.Level5">
            <summary>
            64 Error Correction Codewords.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.PDF417ErrorCorrectionLevel.Level6">
            <summary>
            128 Error Correction Codewords.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.PDF417ErrorCorrectionLevel.Level7">
            <summary>
            256 Error Correction Codewords.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.PDF417ErrorCorrectionLevel.Level8">
            <summary>
            512 Error Correction Codewords.
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.BarcodeInfo.QRErrorCorrectionLevel">
            <summary>
            A level of error correction used in QR barcode.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.QRErrorCorrectionLevel.L">
            <summary>
            7% recovery capacity
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.QRErrorCorrectionLevel.M">
            <summary>
            15% recovery capacity
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.QRErrorCorrectionLevel.Q">
            <summary>
            25% recovery capacity
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.QRErrorCorrectionLevel.H">
            <summary>
            30% recovery capacity
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.BarcodeInfo.QRSymbolVersion">
            <summary>
            Determinate QR Symbol size.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.QRSymbolVersion.Undefined">
            <summary>
            Undefined version.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.QRSymbolVersion.Version1">
            <summary>
            21 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.QRSymbolVersion.Version2">
            <summary>
            25 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.QRSymbolVersion.Version3">
            <summary>
            29 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.QRSymbolVersion.Version4">
            <summary>
            33 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.QRSymbolVersion.Version5">
            <summary>
            37 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.QRSymbolVersion.Version6">
            <summary>
            41 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.QRSymbolVersion.Version7">
            <summary>
            45 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.QRSymbolVersion.Version8">
            <summary>
            49 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.QRSymbolVersion.Version9">
            <summary>
            53 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.QRSymbolVersion.Version10">
            <summary>
            57 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.QRSymbolVersion.Version11">
            <summary>
            61 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.QRSymbolVersion.Version12">
            <summary>
            65 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.QRSymbolVersion.Version13">
            <summary>
            69 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.QRSymbolVersion.Version14">
            <summary>
            73 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.QRSymbolVersion.Version15">
            <summary>
            77 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.QRSymbolVersion.Version16">
            <summary>
            81 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.QRSymbolVersion.Version17">
            <summary>
            85 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.QRSymbolVersion.Version18">
            <summary>
            89 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.QRSymbolVersion.Version19">
            <summary>
            93 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.QRSymbolVersion.Version20">
            <summary>
            97 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.QRSymbolVersion.Version21">
            <summary>
            101 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.QRSymbolVersion.Version22">
            <summary>
            105 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.QRSymbolVersion.Version23">
            <summary>
            109 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.QRSymbolVersion.Version24">
            <summary>
            113 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.QRSymbolVersion.Version25">
            <summary>
            117 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.QRSymbolVersion.Version26">
            <summary>
            121 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.QRSymbolVersion.Version27">
            <summary>
            125 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.QRSymbolVersion.Version28">
            <summary>
            129 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.QRSymbolVersion.Version29">
            <summary>
            133 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.QRSymbolVersion.Version30">
            <summary>
            137 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.QRSymbolVersion.Version31">
            <summary>
            141 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.QRSymbolVersion.Version32">
            <summary>
            145 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.QRSymbolVersion.Version33">
            <summary>
            149 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.QRSymbolVersion.Version34">
            <summary>
            153 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.QRSymbolVersion.Version35">
            <summary>
            157 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.QRSymbolVersion.Version36">
            <summary>
            161 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.QRSymbolVersion.Version37">
            <summary>
            165 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.QRSymbolVersion.Version38">
            <summary>
            169 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.QRSymbolVersion.Version39">
            <summary>
            173 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.QRSymbolVersion.Version40">
            <summary>
            177 Modules at side.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.QRSymbolVersion.VersionM1">
            <summary>
            11 Modules at side (Micro QR).
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.QRSymbolVersion.VersionM2">
            <summary>
            13 Modules at side (Micro QR).
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.QRSymbolVersion.VersionM3">
            <summary>
            15 Modules at side (Micro QR).
            </summary>        
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.QRSymbolVersion.VersionM4">
            <summary>
            17 Modules at side (Micro QR).
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.BarcodeInfo.QRStructureAppendCharacter">
            <summary>
            Class that contains information about the QR Structure Append non-data character.
            </summary>
            <example>
            Please see example <see cref="T:Vintasoft.Barcode.BarcodeInfo.StructureAppendCharacter">here</see>.
            </example>
            <seealso cref="T:Vintasoft.Barcode.BarcodeInfo.StructureAppendCharacter" />
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeInfo.QRStructureAppendCharacter.#ctor(System.Int32,System.Int32,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Barcode.BarcodeInfo.DataMatrixStructureAppendCharacter" /> class. 
            </summary>
            <param name="parityData">The Parity Data. Compute Parity Data using method <see cref="M:Vintasoft.Barcode.BarcodeInfo.QRStructureAppendCharacter.CaluculateParityData(System.String)" />.</param>
            <param name="symbolPosition">The position for a symbol in the Structured Append format.</param>
            <param name="symbolCount">The number of symbols in the Structured Append format.</param>
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeInfo.QRStructureAppendCharacter.CaluculateParityData(System.String)">
            <summary>
            Calcualtes the parity data.
            </summary>
            <param name="barcodeValue">Original barcode value before division into symbol blocks.</param>
            <returns>The parity data.</returns>
            <remarks>
            The parity data is a value obtained by XORing byte by byte 
            the byte values of all the original input data before division into symbol
            blocks.        
            </remarks>
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeInfo.QRStructureAppendCharacter.CaluculateParityData(System.Byte[])">
            <summary>
            Calcualtes the parity data.
            </summary>
            <param name="barcodeValue">Original barcode value before division into symbol blocks.</param>
            <returns>The parity data.</returns>
            <remarks>
            The parity data is a value obtained by XORing byte by byte 
            the byte values of all the original input data before division into symbol
            blocks.        
            </remarks>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.QRStructureAppendCharacter.ParityData">
            <summary>
            Gets a Parity Data.
            </summary>
            <remarks>
            The parity data is a value obtained by XORing byte by byte 
            the byte values of all the original input data before division into symbol
            blocks.        
            </remarks>
        </member>
        <member name="T:Vintasoft.Barcode.BarcodeInfo.IQRValueItem">
            <summary>
            Specification for a value item of QR barcode.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.IQRValueItem.Mode">
            <summary>
            Returns a encoding mode of data.
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.BarcodeInfo.QRBinaryValueItem">
            <summary>
            Class that allows to access the <see cref="T:Vintasoft.Barcode.BarcodeInfo.QREncodingMode" />.Byte and
            <see cref="T:Vintasoft.Barcode.BarcodeInfo.QREncodingMode" />.Kanji data of QR barcode.
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.BarcodeInfo.BinaryValueItem">
            <summary>
            Class that allows to access the binary(byte) data of 2D barcode.
            </summary>
            <example>
            Please see example <see cref="T:Vintasoft.Barcode.BarcodeInfo.ValueItemBase">here</see>.    
            </example>
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeInfo.BinaryValueItem.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Barcode.BarcodeInfo.BinaryValueItem" /> class. 
            </summary>
            <param name="value">value of byte data.</param>
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeInfo.BinaryValueItem.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Barcode.BarcodeInfo.BinaryValueItem" /> class. 
            </summary>
            <param name="value">value converts to byte data using <see cref="P:Vintasoft.Barcode.BarcodeInfo.BinaryValueItem.TextEncoding" /> encoding.</param>
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeInfo.BinaryValueItem.ToString">
            <summary> 
             Converts the value item of this instance to its equivalent string.
             </summary>
             <returns>String representation of this value item.</returns>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.BinaryValueItem.Value">
            <summary>
            Returns a value of byte data.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.BinaryValueItem.TextEncoding">
            <summary>
            Text encoding which must be used for converting data into the string.
            If value is null then encoding selected automatic.
            </summary>
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeInfo.QRBinaryValueItem.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Barcode.BarcodeInfo.QRBinaryValueItem" /> class. 
            </summary>
            <param name="value">value of byte data.</param>
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeInfo.QRBinaryValueItem.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Barcode.BarcodeInfo.QRBinaryValueItem" /> class. 
            </summary>
            <param name="value">value converts to byte data using <see cref="P:Vintasoft.Barcode.BarcodeInfo.BinaryValueItem.TextEncoding" /> encoding.</param>
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeInfo.QRBinaryValueItem.ToString">
            <summary>
            Converts the value item of this instance to its equivalent string, 
            using encoding <see cref="P:Vintasoft.Barcode.BarcodeInfo.BinaryValueItem.TextEncoding" />.
            </summary>
            <returns>String representation of this value item.</returns>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.QRBinaryValueItem.Mode">
            <summary>
            Returns a compaction mode of data.
            </summary>
            <value>
            This property always returns a <see cref="F:Vintasoft.Barcode.BarcodeInfo.QREncodingMode.Byte" />.
            </value>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.QRBinaryValueItem.TestValueToKanjiEncoding">
            <summary>
            Enable or disable automatic testing to detect value encoding is Kanji(Shift_JIS) encoding.
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.BarcodeInfo.QREncodingMode">
            <summary>
            Specifies available data coding modes.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.QREncodingMode.Undefined">
            <summary>
            Undefined.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.QREncodingMode.Numeric">
            <summary>
            Numeric mode.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.QREncodingMode.Alphanumeric">
            <summary>
            Alphanumeric mode.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.QREncodingMode.Byte">
            <summary>
            Byte mode.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.QREncodingMode.Kanji">
            <summary>
            Kanji mode.
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.BarcodeInfo.QRTextValueItem">
            <summary>
            Class that allows to access the <see cref="T:Vintasoft.Barcode.BarcodeInfo.QREncodingMode" />.Alphanumeric
            data of QR barcode.
            </summary>
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeInfo.QRTextValueItem.#ctor(System.String,Vintasoft.Barcode.BarcodeInfo.QREncodingMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Barcode.BarcodeInfo.QRTextValueItem" /> class. 
            </summary>
            <param name="value">value of text data.</param>
            <param name="encodingMode">encoding mode.</param>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.QRTextValueItem.Mode">
            <summary>
            Returns a mode of data.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.QRTextValueItem.ShiftJISEncoding">
            <summary>
            Gets or sets the Shift_JIS encoding.
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.BarcodeInfo.EciCharacterEncoder">
            <summary>
            Class that provides methods for encoding of Extended Channel Interpretation (ECI) characters.
            </summary>
            <remarks>
            ECI character in the barcode value specifies the character encoding of text after the ECI character
            and until the end of barcode value or next ECI character.<br />
            Several ECI characters can be used for storing text with different character encodings in
            the single barcode value.<br />
            <br />
            <b>Important</b>: Not all barcode readers support ECI characters!
            Use ECI characters only if your barcode reader supports ECI characters.
            Use text in UTF8 encoding and encode text as bytes (<see cref="M:System.Text.Encoding.GetBytes(System.String)" />)
            if you are not sure about support of ECI characters by your barcode reader.<br />
            <br />
            ECI characters are available only for Aztec, DataMatrix, QR, PDF417 or Micro PDF417 barcodes.
            </remarks>
            <example>
            This example shows how to encode and decode text with different encodingss:
            <code lang="VB.NET">   
            Imports System.Drawing   
            Imports System.Text   
            Imports Vintasoft.Barcode   
            Imports Vintasoft.Barcode.BarcodeInfo   
               
            ''' &lt;summary&gt;   
            ''' Class that shows how to create image with barcode Aztec, DataMatrix, QR, PDF417 or Micro PDF417,   
            ''' which stores text in different encodings.   
            ''' Barcode value is encoded using the EciCharacterEncoder class.   
            ''' &lt;/summary&gt;   
            Class EciCharacterEncoderExample   
            	''' &lt;summary&gt;   
            	''' Run the test.   
            	''' &lt;/summary&gt;   
            	Public Shared Sub Run()   
            		' ECI characters are available only for Aztec, DataMatrix, QR, PDF417 or Micro PDF417 barcodes   
            		Dim barcodeType__1 As BarcodeType = BarcodeType.DataMatrix   
               
            		' create the encoder of Extended Channel Interpretation (ECI) characters   
            		Dim eciEncoder As New EciCharacterEncoder(barcodeType__1)   
               
            		' create the ECI encoding for encoding text in codepage 28592   
            		Dim cp28592EciEncoding As EciCharacterEncoding = EciCharacterEncoding.GetEciCharacterEncodingForEncoding(Encoding.GetEncoding(28592))   
            		' append text in codepage 28592 to ECI encoder   
            		eciEncoder.AppendText(cp28592EciEncoding, "ążśźęćńółĄŻŚŹĘĆŃÓŁ")   
               
            		' create the ECI encoding for encoding text in codepage 28595   
            		Dim cp28595EciEncoding As EciCharacterEncoding = EciCharacterEncoding.GetEciCharacterEncodingForEncoding(Encoding.GetEncoding(28595))   
            		' append text in codepage 28595 to ECI encoder   
            		eciEncoder.AppendText(cp28595EciEncoding, "АБВГДЕЖЗИЙКЛМНОП")   
               
            		' create the ECI encoding for encoding text in codepage 950   
            		Dim cp950EciEncoding As EciCharacterEncoding = EciCharacterEncoding.GetEciCharacterEncodingForEncoding(Encoding.GetEncoding(950))   
            		' append text in codepage 950 to ECI encoder   
            		eciEncoder.AppendText(cp950EciEncoding, "日月火水木金土")   
               
            		' create the ECI encoding for encoding text in codepage 28591   
            		Dim cp28591EciEncoding As EciCharacterEncoding = EciCharacterEncoding.GetEciCharacterEncodingForEncoding(Encoding.GetEncoding(28591))   
            		' append text in codepage 28591 to ECI encoder   
            		eciEncoder.AppendText(cp28591EciEncoding, "test!")   
               
               
            		' create the barcode writer   
            		Dim writer As New BarcodeWriter()   
               
            		' specify that writer must generate barcode of specified type   
            		writer.Settings.Barcode = barcodeType__1   
               
            		' set the barcode value as value encoded by ECI encoder   
            		writer.Settings.ValueItems = eciEncoder.ToValueItems()   
               
            		' create image with barcode   
            		Using barcodeImage As Image = writer.GetBarcodeAsBitmap()   
            			' create the barcode reader   
            			Using reader As New BarcodeReader()   
            				' specify that reader must search for barcodes of specified type   
            				reader.Settings.ScanBarcodeTypes = barcodeType__1   
               
            				' read barcode from image   
            				Dim decodeItems As ValueItemBase() = reader.ReadBarcodes(barcodeImage)(0).ValueItems   
               
            				' decode the barcode value   
            				Dim decodedString As String = EciCharacterDecoder.Decode(decodeItems)   
               
            				' if decoded value does not match source value   
            				If decodedString &lt;&gt; "ążśźęćńółĄŻŚŹĘĆŃÓŁАБВГДЕЖЗИЙКЛМНОП日月火水木金土test!" Then   
            					' throw exception   
            					Throw New ApplicationException()   
            				End If   
            			End Using   
            		End Using   
               
            		Console.WriteLine("OK")   
            	End Sub   
            End Class
            </code>
            <code lang="C#">
            using System;
            using System.Drawing;
            using System.Text;
            using Vintasoft.Barcode;
            using Vintasoft.Barcode.BarcodeInfo;
            
            /// &lt;summary&gt;
            /// Class that shows how to create image with barcode Aztec, DataMatrix, QR, PDF417 or Micro PDF417,
            /// which stores text in different encodings.
            /// Barcode value is encoded using the EciCharacterEncoder class.
            /// &lt;/summary&gt;
            class EciCharacterEncoderExample
            {
                /// &lt;summary&gt;
                /// Run the test.
                /// &lt;/summary&gt;
                public static void Run()
                {
                    // ECI characters are available only for Aztec, DataMatrix, QR, PDF417 or Micro PDF417 barcodes
                    BarcodeType barcodeType = BarcodeType.DataMatrix;
            
                    // create the encoder of Extended Channel Interpretation (ECI) characters
                    EciCharacterEncoder eciEncoder = new EciCharacterEncoder(barcodeType);
            
                    // create the ECI encoding for encoding text in codepage 28592
                    EciCharacterEncoding cp28592EciEncoding =
                        EciCharacterEncoding.GetEciCharacterEncodingForEncoding(Encoding.GetEncoding(28592));
                    // append text in codepage 28592 to ECI encoder
                    eciEncoder.AppendText(cp28592EciEncoding, "ążśźęćńółĄŻŚŹĘĆŃÓŁ");
            
                    // create the ECI encoding for encoding text in codepage 28595
                    EciCharacterEncoding cp28595EciEncoding =
                        EciCharacterEncoding.GetEciCharacterEncodingForEncoding(Encoding.GetEncoding(28595));
                    // append text in codepage 28595 to ECI encoder
                    eciEncoder.AppendText(cp28595EciEncoding, "АБВГДЕЖЗИЙКЛМНОП");
            
                    // create the ECI encoding for encoding text in codepage 950
                    EciCharacterEncoding cp950EciEncoding =
                        EciCharacterEncoding.GetEciCharacterEncodingForEncoding(Encoding.GetEncoding(950));
                    // append text in codepage 950 to ECI encoder
                    eciEncoder.AppendText(cp950EciEncoding, "日月火水木金土");
            
                    // create the ECI encoding for encoding text in codepage 28591
                    EciCharacterEncoding cp28591EciEncoding =
                        EciCharacterEncoding.GetEciCharacterEncodingForEncoding(Encoding.GetEncoding(28591));
                    // append text in codepage 28591 to ECI encoder
                    eciEncoder.AppendText(cp28591EciEncoding, "test!");
            
            
                    // create the barcode writer
                    BarcodeWriter writer = new BarcodeWriter();
            
                    // specify that writer must generate barcode of specified type
                    writer.Settings.Barcode = barcodeType;
            
                    // set the barcode value as value encoded by ECI encoder
                    writer.Settings.ValueItems = eciEncoder.ToValueItems();
                    
                    // create image with barcode
                    using (Image barcodeImage = writer.GetBarcodeAsBitmap())
                    {
                        // create the barcode reader
                        using (BarcodeReader reader = new BarcodeReader())
                        {
                            // specify that reader must search for barcodes of specified type
                            reader.Settings.ScanBarcodeTypes = barcodeType;
                            
                            // read barcode from image
                            ValueItemBase[] decodeItems = reader.ReadBarcodes(barcodeImage)[0].ValueItems;
                            
                            // decode the barcode value
                            string decodedString = EciCharacterDecoder.Decode(decodeItems);
                            
                            // if decoded value does not match source value
                            if (decodedString != "ążśźęćńółĄŻŚŹĘĆŃÓŁАБВГДЕЖЗИЙКЛМНОП日月火水木金土test!")
                                // throw exception
                                throw new ApplicationException();
                        }
                    }
            
                    Console.WriteLine("OK");
                }
            }
            </code>
            </example>
            <seealso cref="T:Vintasoft.Barcode.BarcodeInfo.EciCharacterDecoder" />
            <seealso cref="T:Vintasoft.Barcode.BarcodeInfo.EciCharacterValueItem" />
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeInfo.EciCharacterEncoder.#ctor(Vintasoft.Barcode.BarcodeType)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Barcode.BarcodeInfo.EciCharacterEncoder" /> class.
            </summary>
            <param name="barcodeType">Barcode type where encoded ECI characters will be used.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <i>barcodeType</i> is not equal to
            BarcodeType.Aztec or BarcodeType.QR or BarcodeType.PDF417 or BarcodeType.MicroPDF417 or BarcodeType.PDF417Compact or
            BarcodeType.DataMatrix.</exception>
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeInfo.EciCharacterEncoder.AppendText(Vintasoft.Barcode.BarcodeInfo.EciCharacterEncoding,System.String)">
            <summary>
            Appends a text with specified encoding.
            </summary>
            <param name="eciCharacterEncoding">ECI character encoding.</param>
            <param name="text">Text to encode.</param>
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeInfo.EciCharacterEncoder.AppendBinaryData(System.Int32,System.Byte[])">
            <summary>
            Appends binary data with specified ECI assignment number.
            </summary>
            <param name="eciAssignmentNumber">ECI assignment number.</param>
            <param name="data">Binary data to encode.</param>
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeInfo.EciCharacterEncoder.ToValueItems">
            <summary>
            Returns an array of encoded value items.
            </summary>
            <returns>An array of encoded value items.</returns>
        </member>
        <member name="T:Vintasoft.Barcode.BarcodeInfo.EciCharacterEncoding">
            <summary>
            Class that represents encoding of Extended Channel Interpretation (ECI) character.
            </summary>
            <seealso cref="T:Vintasoft.Barcode.BarcodeInfo.EciCharacterValueItem" />
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeInfo.EciCharacterEncoding.#ctor(System.Int32,System.Text.Encoding)">
            <summary>
            Initializes a new instance of <see cref="T:Vintasoft.Barcode.BarcodeInfo.EciCharacterEncoding" /> class.
            </summary>
            <param name="eciAssignmentNumber">ECI assignment number.</param>
            <param name="encoding">Character encoding associated with the ECI assignment number.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <i>eciAssignmentNumber</i>
            is less or equal 0 or <i>eciAssignmentNumber</i> is more than 999999.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>encoding</i> is <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeInfo.EciCharacterEncoding.Register(Vintasoft.Barcode.BarcodeInfo.EciCharacterEncoding)">
            <summary>
            Registers specified ECI character encoding.
            </summary>
            <param name="eciCharacterEncoding">ECI character encoding to register.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>eciCharacterEncoding</i>
            is <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeInfo.EciCharacterEncoding.GetEciCharacterEncodingForEciAssigmentNumber(System.Int32)">
            <summary>
            Returns <see cref="T:Vintasoft.Barcode.BarcodeInfo.EciCharacterEncoding" /> for specified ECI assignment number.
            </summary>
            <param name="eciAssignmentNumber">ECI assignment number.</param>
            <returns><see cref="T:Vintasoft.Barcode.BarcodeInfo.EciCharacterEncoding" /> for specified ECI assignment number.</returns>
            <exception cref="T:System.ArgumentException">Thrown if ECI character encoding with
            specified ECI assignment number is not registered.</exception>
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeInfo.EciCharacterEncoding.GetEciCharacterEncodingForEncoding(System.Text.Encoding)">
            <summary>
            Returns <see cref="T:Vintasoft.Barcode.BarcodeInfo.EciCharacterEncoding" /> for specified character encoding.
            </summary>
            <param name="encoding">Character encoding.</param>
            <returns><see cref="T:Vintasoft.Barcode.BarcodeInfo.EciCharacterEncoding" /> for specified character encoding.</returns>
            <exception cref="T:System.ArgumentException">Thrown if ECI character encoding with
            specified encoding is not registered.</exception>
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeInfo.EciCharacterEncoding.GetEciCharacterEncodings">
            <summary>
            Returns an array that contains all registered ECI character encodings.
            </summary>
            <returns>Array of all registered ECI character encodings.</returns>
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeInfo.EciCharacterEncoding.ToString">
            <summary>
            Returns the string representation of this <see cref="T:Vintasoft.Barcode.BarcodeInfo.EciCharacterEncoding" />.
            </summary>
            <returns>String representation of this <see cref="T:Vintasoft.Barcode.BarcodeInfo.EciCharacterEncoding" />.</returns>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.EciCharacterEncoding.EciAssignmentNumber">
            <summary>
            Gets an ECI assignment number.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.EciCharacterEncoding.Encoding">
            <summary>
            Gets the <see cref="P:Vintasoft.Barcode.BarcodeInfo.EciCharacterEncoding.Encoding" /> associated with the ECI assignment number.
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.BarcodeInfo.EciCharacterValueItem">
            <summary>
            Extended Channel Interpretation (ECI) character.
            </summary>
            <remarks>    
            The Extended Channel Interpretation protocol is fully 
            specified in AIM Inc. International Technical Specification
            – Extended Channel Interpretations Part 1. The protocol
            provides a consistent method to specify particular interpretations
            on byte values before printing and after decoding. 
            The Extended Channel Interpretation is identified by a 6-digit
            number - ECI assignment number.<br />
            <br />
            ECI characters are available only for Aztec, DataMatrix, QR, PDF417 or Micro PDF417 barcodes.
            </remarks>
            <example>
            Please see example <see cref="T:Vintasoft.Barcode.BarcodeInfo.NonDataFlags">here</see>.
            </example>
            <seealso cref="T:Vintasoft.Barcode.BarcodeInfo.EciCharacterDecoder" />
            <seealso cref="T:Vintasoft.Barcode.BarcodeInfo.EciCharacterEncoder" />
            <seealso cref="P:Vintasoft.Barcode.IBarcodeInfo.ShowNonDataFlagsInValue">IBarcodeInfo.ShowNonDataFlagsInValue</seealso>
            <seealso cref="P:Vintasoft.Barcode.WriterSettings.ProcessSpecialSymbols">WriterSettings.ProcessSpecialSymbols</seealso>   
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeInfo.EciCharacterValueItem.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Barcode.BarcodeInfo.EciCharacterValueItem" /> class. 
            </summary>
            <param name="eciAssignmentNumber">ECI assignment number.</param>
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeInfo.EciCharacterValueItem.ToString">
            <summary> 
             Converts the <see cref="T:Vintasoft.Barcode.BarcodeInfo.EciCharacterValueItem" /> of this instance to its equivalent
             string.
             </summary>
             <returns>
             String representation of <see cref="T:Vintasoft.Barcode.BarcodeInfo.EciCharacterValueItem" />.
             </returns>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.EciCharacterValueItem.EciAssignmentNumber">
            <summary>
            Gets an ECI assignment number.
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.BarcodeInfo.AztecInfo">
            <summary>
            Class that allows to get information about recognized Aztec barcode.
            </summary>
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeInfo.AztecInfo.ToString">
            <summary> 
             Converts the information about barcode of this instance to its equivalent
             string.
             </summary>
             <returns>
             String representation of barcode.
             </returns>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.AztecInfo.Symbol">
            <summary>
            Returns an Aztec symbol for this barcode info.
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.BarcodeInfo.AztecSymbol">
            <summary>
            Contains information about Aztec symbol: type, size, number of data layers,
            percent of error correction, etc.
            </summary>
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeInfo.AztecSymbol.ToString">
            <summary> 
             Converts the Aztec symbol of this instance to its equivalent
             string.
             </summary>
             <returns>
             String representation of symbol.
             </returns>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.AztecSymbol.SymbolType">
            <summary>
            Returns an Aztec symbol type.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.AztecSymbol.DataLayers">
            <summary>
            Returns a number of data layers.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.AztecSymbol.Size">
            <summary>
            Returns a symbol size (in modules).
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.AztecSymbol.ErrorCorrectionData">
            <summary>
            Returns a percent of error correction data in this symbol.
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.BarcodeInfo.AztecSymbolType">
            <summary>
            Aztec symbol type.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.AztecSymbolType.Undefined">
            <summary>
            Undefined.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.AztecSymbolType.Rune">
            <summary>
            Rune - small mark (contains numbers: 0..255). Used Reed-Solomon Error Correction.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.AztecSymbolType.Compact">
            <summary>
            Aztec Compact symbol (1..4 layers). Used Reed-Solomon Error Correction.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.AztecSymbolType.FullRange">
            <summary>
            Aztec Full-Range symbol (1..32 layers). Used Reed-Solomon Error Correction.
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.BarcodeInfo.EciCharacterDecoder">
            <summary>
            Class that provides methods for interpretation of Extended Channel Interpretation (ECI) characters.
            </summary>
            <seealso cref="T:Vintasoft.Barcode.BarcodeInfo.EciCharacterEncoder" />
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeInfo.EciCharacterDecoder.Decode(Vintasoft.Barcode.BarcodeInfo.ValueItemBase[])">
            <summary>
            Decodes (interprets) ECI characters contained in array of <see cref="T:Vintasoft.Barcode.BarcodeInfo.ValueItemBase" />.
            </summary>
            <param name="items">Value items to interpret.</param>
            <returns><see cref="T:System.String" /> that contains interpreted value.</returns>
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeInfo.EciCharacterDecoder.DecodeEciItems(Vintasoft.Barcode.BarcodeInfo.ValueItemBase[])">
            <summary>
            Decodes (interprets) ECI characters contained in array of <see cref="T:Vintasoft.Barcode.BarcodeInfo.ValueItemBase" />.
            </summary>
            <param name="items">Value items to interpret.</param>
            <returns>Array of <see cref="T:Vintasoft.Barcode.BarcodeInfo.ValueItemBase" /> that contains interpreted value items.</returns>
        </member>
        <member name="T:Vintasoft.Barcode.BarcodeInfo.NonDataFlags">
            <summary>
            Class that contains available non-data flags.
            </summary>
            <example>
            This example shows how to write and read non-data flags in barcode.
            <code lang="VB.NET">   
            Imports System.Collections.Generic   
            Imports System.Drawing   
            Imports Vintasoft.Barcode   
            Imports Vintasoft.Barcode.BarcodeInfo   
               
            ''' &lt;summary&gt;   
            ''' Test that shows how to create barcodes with data flags.   
            ''' &lt;/summary&gt;   
            Class NonDataFlagsExample   
               
            	''' &lt;summary&gt;   
            	''' Run the test.   
            	''' &lt;/summary&gt;   
            	Public Shared Sub Test()   
            		' create image with Code128 barcode with FNC1 flag   
            		Using image As Image = WriteFlagUsingValueProperty(BarcodeType.Code128, "", NonDataFlags.Fnc1, "abc")   
            			' read barcode from image   
            			ReadBarcode(image, BarcodeType.Code128)   
            		End Using   
            		' create image with Code128 barcode with FNC1 flag   
            		Using image As Image = WriteFlagUsingValueItemsProperty(BarcodeType.Code128, "123", NonDataFlags.Fnc1, "456")   
            			' read barcode from image   
            			ReadBarcode(image, BarcodeType.Code128)   
            		End Using   
               
               
            		' create the barcode value with multiple FNC1 flags   
            		Dim barcodeValue As String = NonDataFlags.Fnc1.Name   
            		barcodeValue += "A" + NonDataFlags.Fnc1.Name   
            		barcodeValue += "B" + NonDataFlags.Fnc1.Name   
            		barcodeValue += "C" + NonDataFlags.Fnc1.Name   
               
            		' create the barcode writer   
            		Dim writer As New BarcodeWriter()   
            		' specify that writer must generate Code128 barcode   
            		writer.Settings.Barcode = BarcodeType.Code128   
            		writer.Settings.ProcessSpecialSymbols = True   
            		' set the barcode value   
            		writer.Settings.Value = barcodeValue   
            		' create image with Code128 barcode with  multiple FNC1 flags   
            		Using image As Image = writer.GetBarcodeAsBitmap()   
            			' read barcode from image   
            			ReadBarcode(image, BarcodeType.Code128)   
            		End Using   
               
               
            		' create image with DataMatrix barcode with FNC1 flag   
            		Using image As Image = WriteFlagUsingValueItemsProperty(BarcodeType.DataMatrix, "DataMatrix", NonDataFlags.Fnc1, "!")   
            			' read barcode from image   
            			ReadBarcode(image, BarcodeType.DataMatrix)   
            		End Using   
               
            		' create image with QR barcode with ECI123456 flag   
            		Using image As Image = WriteFlagUsingValueProperty(BarcodeType.QR, "", NonDataFlags.CreateECICharacter(123456), "QR Test ECI123456")   
            			' read barcode from image   
            			ReadBarcode(image, BarcodeType.QR)   
            		End Using   
               
            		' create image with DataMatrix barcode with Macro05 flag   
            		Using image As Image = WriteFlagUsingValueItemsProperty(BarcodeType.DataMatrix, "", NonDataFlags.Macro05, "BarcodeData")   
            			' read barcode from image   
            			ReadBarcode(image, BarcodeType.DataMatrix)   
            		End Using   
            	End Sub   
               
            	''' &lt;summary&gt;   
            	''' Write a data flag to barcode using WriterSettings.Value property.   
            	''' &lt;/summary&gt;   
            	Private Shared Function WriteFlagUsingValueProperty(barcodeType As BarcodeType, leftValuePart As String, flag As NonDataFlagValueItem, rightValuePart As String) As Image   
            		' create the barcode writer   
            		Dim writer As New BarcodeWriter()   
               
            		' specify that writer must generate barcode of specified type   
            		writer.Settings.Barcode = barcodeType   
               
            		' specify that writer must process special characters in the barcode value   
            		writer.Settings.ProcessSpecialSymbols = True   
               
            		' set the barcode value   
            		writer.Settings.Value = leftValuePart &amp; Convert.ToString(flag.Name) &amp; rightValuePart   
               
            		' create image with barcode   
            		Return writer.GetBarcodeAsBitmap()   
            	End Function   
               
            	''' &lt;summary&gt;   
            	''' Write a data flag to barcode using WriterSettings.ValueItems property.   
            	''' &lt;/summary&gt;   
            	Private Shared Function WriteFlagUsingValueItemsProperty(barcodeType As BarcodeType, leftValuePart As String, flag As NonDataFlagValueItem, rightValuePart As String) As Image   
            		' create the barcode writer   
            		Dim writer As New BarcodeWriter()   
               
            		' specify that writer must generate barcode of specified type   
            		writer.Settings.Barcode = barcodeType   
               
            		' create the barcode value items   
               
            		Dim items As New List(Of ValueItemBase)()   
            		If leftValuePart &lt;&gt; "" Then   
            			items.Add(New TextValueItem(leftValuePart))   
            		End If   
            		items.Add(flag)   
            		If rightValuePart &lt;&gt; "" Then   
            			items.Add(New TextValueItem(rightValuePart))   
            		End If   
               
            		' set the barcode value items   
            		writer.Settings.ValueItems = items.ToArray()   
               
            		' create image with barcode   
            		Return writer.GetBarcodeAsBitmap()   
            	End Function   
               
            	''' &lt;summary&gt;   
            	''' Read barcode and show it value.   
            	''' &lt;/summary&gt;   
            	Private Shared Sub ReadBarcode(image As Image, barcodeType As BarcodeType)   
            		' create the barcode reader   
            		Using reader As New BarcodeReader()   
            			' specify that reader must search for barcodes of specified type   
            			reader.Settings.ScanBarcodeTypes = barcodeType   
               
            			' reader barcode from image   
            			Dim barcodeInfo As IBarcodeInfo = reader.ReadBarcodes(image)(0)   
               
            			barcodeInfo.ShowNonDataFlagsInValue = False   
            			Console.WriteLine("Barcode value without flags: {0}", barcodeInfo.Value)   
               
            			barcodeInfo.ShowNonDataFlagsInValue = True   
            			Console.WriteLine("Barcode value with flags:    {0}", barcodeInfo.Value)   
               
            			Console.WriteLine("Barcode value items:")   
            			For i As Integer = 0 To barcodeInfo.ValueItems.Length - 1   
            				Dim valueItem As ValueItemBase = barcodeInfo.ValueItems(i)   
            				Console.WriteLine("  [{0}]: {1}", valueItem.[GetType]().Name, valueItem)   
            			Next   
            		End Using   
               
            		Console.WriteLine()   
            	End Sub   
               
            End Class
            </code>
            <code lang="C#">
            using System;
            using System.Collections.Generic;
            using System.Drawing;
            using Vintasoft.Barcode;
            using Vintasoft.Barcode.BarcodeInfo;
            
            /// &lt;summary&gt;
            /// Test that shows how to create barcodes with data flags.
            /// &lt;/summary&gt;
            class NonDataFlagsExample
            {
            
                /// &lt;summary&gt;
                /// Run the test.
                /// &lt;/summary&gt;
                public static void Test()
                {
                    // create image with Code128 barcode with FNC1 flag
                    using (Image image = WriteFlagUsingValueProperty(BarcodeType.Code128, "", NonDataFlags.Fnc1, "abc"))
                    {
                        // read barcode from image
                        ReadBarcode(image, BarcodeType.Code128);
                    }
                    // create image with Code128 barcode with FNC1 flag
                    using (Image image = WriteFlagUsingValueItemsProperty(BarcodeType.Code128, "123", NonDataFlags.Fnc1, "456"))
                    {
                        // read barcode from image
                        ReadBarcode(image, BarcodeType.Code128);
                    }
            
            
                    // create the barcode value with multiple FNC1 flags
                    string barcodeValue = NonDataFlags.Fnc1.Name;
                    barcodeValue += "A" + NonDataFlags.Fnc1.Name;
                    barcodeValue += "B" + NonDataFlags.Fnc1.Name;
                    barcodeValue += "C" + NonDataFlags.Fnc1.Name;
            
                    // create the barcode writer
                    BarcodeWriter writer = new BarcodeWriter();
                    // specify that writer must generate Code128 barcode
                    writer.Settings.Barcode = BarcodeType.Code128;
                    writer.Settings.ProcessSpecialSymbols = true;
                    // set the barcode value
                    writer.Settings.Value = barcodeValue;
                    // create image with Code128 barcode with  multiple FNC1 flags
                    using (Image image = writer.GetBarcodeAsBitmap())
                    {
                        // read barcode from image
                        ReadBarcode(image, BarcodeType.Code128);
                    }
            
            
                    // create image with DataMatrix barcode with FNC1 flag
                    using (Image image = WriteFlagUsingValueItemsProperty(
                        BarcodeType.DataMatrix, "DataMatrix", NonDataFlags.Fnc1, "!"))
                    {
                        // read barcode from image
                        ReadBarcode(image, BarcodeType.DataMatrix);
                    }
            
                    // create image with QR barcode with ECI123456 flag
                    using (Image image = WriteFlagUsingValueProperty(
                        BarcodeType.QR, "", NonDataFlags.CreateECICharacter(123456), "QR Test ECI123456"))
                    {
                        // read barcode from image
                        ReadBarcode(image, BarcodeType.QR);
                    }
            
                    // create image with DataMatrix barcode with Macro05 flag
                    using (Image image = WriteFlagUsingValueItemsProperty(
                        BarcodeType.DataMatrix, "", NonDataFlags.Macro05, "BarcodeData"))
                    {
                        // read barcode from image
                        ReadBarcode(image, BarcodeType.DataMatrix);
                    }
                }
            
                /// &lt;summary&gt;
                /// Write a data flag to barcode using WriterSettings.Value property.
                /// &lt;/summary&gt;
                static Image WriteFlagUsingValueProperty(
                    BarcodeType barcodeType,
                    string leftValuePart,
                    NonDataFlagValueItem flag,
                    string rightValuePart)
                {
                    // create the barcode writer
                    BarcodeWriter writer = new BarcodeWriter();
            
                    // specify that writer must generate barcode of specified type
                    writer.Settings.Barcode = barcodeType;
                    
                    // specify that writer must process special characters in the barcode value
                    writer.Settings.ProcessSpecialSymbols = true;
            
                    // set the barcode value
                    writer.Settings.Value = leftValuePart + flag.Name + rightValuePart;
            
                    // create image with barcode
                    return writer.GetBarcodeAsBitmap();
                }
            
                /// &lt;summary&gt;
                /// Write a data flag to barcode using WriterSettings.ValueItems property.
                /// &lt;/summary&gt;
                static Image WriteFlagUsingValueItemsProperty(
                    BarcodeType barcodeType,
                    string leftValuePart,
                    NonDataFlagValueItem flag,
                    string rightValuePart)
                {
                    // create the barcode writer
                    BarcodeWriter writer = new BarcodeWriter();
            
                    // specify that writer must generate barcode of specified type
                    writer.Settings.Barcode = barcodeType;
            
                    // create the barcode value items
            
                    List&lt;ValueItemBase&gt; items = new List&lt;ValueItemBase&gt;();
                    if (leftValuePart != "")
                        items.Add(new TextValueItem(leftValuePart));
                    items.Add(flag);
                    if (rightValuePart != "")
                        items.Add(new TextValueItem(rightValuePart));
            
                    // set the barcode value items
                    writer.Settings.ValueItems = items.ToArray();
            
                    // create image with barcode
                    return writer.GetBarcodeAsBitmap();
                }
            
                /// &lt;summary&gt;
                /// Read barcode and show it value.
                /// &lt;/summary&gt;
                static void ReadBarcode(Image image, BarcodeType barcodeType)
                {
                    // create the barcode reader
                    using (BarcodeReader reader = new BarcodeReader())
                    {
                        // specify that reader must search for barcodes of specified type
                        reader.Settings.ScanBarcodeTypes = barcodeType;
            
                        // reader barcode from image
                        IBarcodeInfo barcodeInfo = reader.ReadBarcodes(image)[0];
                        
                        barcodeInfo.ShowNonDataFlagsInValue = false;
                        Console.WriteLine("Barcode value without flags: {0}", barcodeInfo.Value);
            
                        barcodeInfo.ShowNonDataFlagsInValue = true;
                        Console.WriteLine("Barcode value with flags:    {0}", barcodeInfo.Value);
            
                        Console.WriteLine("Barcode value items:");
                        for (int i = 0; i &lt; barcodeInfo.ValueItems.Length; i++)
                        {
                            ValueItemBase valueItem = barcodeInfo.ValueItems[i];
                            Console.WriteLine("  [{0}]: {1}", valueItem.GetType().Name, valueItem);
                        }
                    }
            
                    Console.WriteLine();
                }
            
            }
            </code>
            </example>
            <seealso cref="T:Vintasoft.Barcode.BarcodeInfo.NonDataFlagValueItem" />   
            <seealso cref="P:Vintasoft.Barcode.IBarcodeInfo.ShowNonDataFlagsInValue">IBarcodeInfo.ShowNonDataFlagsInValue</seealso>
            <seealso cref="P:Vintasoft.Barcode.WriterSettings.ProcessSpecialSymbols">WriterSettings.ProcessSpecialSymbols</seealso>   
            <seealso cref="T:Vintasoft.Barcode.BarcodeInfo.EciCharacterValueItem" />
            <seealso cref="T:Vintasoft.Barcode.BarcodeInfo.AztecStructureAppendCharacter" />
            <seealso cref="T:Vintasoft.Barcode.BarcodeInfo.DataMatrixStructureAppendCharacter" />
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeInfo.NonDataFlags.CreateECICharacter(System.Int32)">
            <summary>
            Creates a new ECI character with specified assignment number.
            </summary>
            <param name="eciAssignmentNumber">ECI assignment number.</param>
            <returns>Instance of the <see cref="T:Vintasoft.Barcode.BarcodeInfo.EciCharacterValueItem" /> class.</returns>
            <remarks>
            Name: &lt;ECInnnnnn&gt; n=0..9 <br />
            <br />
            This character can be used in Aztec, DataMatrix, QR, MaxiCode, PDF417, and Micro PDF417 barcodes.
            </remarks>
            <seealso cref="T:Vintasoft.Barcode.BarcodeInfo.EciCharacterValueItem" />
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeInfo.NonDataFlags.CreateDataMatrixStructureAppendCharacter(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new DataMatrix Structure Append character with 
            specified symbol position, symbol count and file identefication.
            </summary>
            <param name="symbolPosition">The position for a symbol in the Structured Append format.</param>
            <param name="symbolCount">The number of symbols in the Structured Append format.</param>
            <param name="fileID">File identification.</param>
            <returns>Instance of the <see cref="T:Vintasoft.Barcode.BarcodeInfo.DataMatrixStructureAppendCharacter" /> class.</returns>
            <seealso cref="T:Vintasoft.Barcode.BarcodeInfo.DataMatrixStructureAppendCharacter" />
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeInfo.NonDataFlags.CreateAztecStructureAppendCharacter(System.Int32,System.Int32,System.String)">
            <summary>
            Creates a new Aztect Structure Append character with 
            specified symbol position, symbol count and message ID.
            </summary>
            <param name="symbolPosition">The position for a symbol in the Structured Append format.</param>
            <param name="symbolCount">The number of symbols in the Structured Append format.</param>
            <param name="messageID">The Message ID.</param>
            <returns>Instance of the <see cref="T:Vintasoft.Barcode.BarcodeInfo.AztecStructureAppendCharacter" /> class.</returns>
            <seealso cref="T:Vintasoft.Barcode.BarcodeInfo.AztecStructureAppendCharacter" />
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeInfo.NonDataFlags.CreateQRStructureAppendCharacter(System.Int32,System.Int32,System.Byte)">
            <summary>
            Creates a new QR Structure Append character with 
            specified symbol position, symbol count and parity data.
            </summary>
            <param name="symbolPosition">The position for a symbol in the Structured Append format.</param>
            <param name="symbolCount">The number of symbols in the Structured Append format.</param>
            <param name="parityData">The Parity Data. Compute Parity Data using method <see cref="M:Vintasoft.Barcode.BarcodeInfo.QRStructureAppendCharacter.CaluculateParityData(System.String)" />.</param>
            <returns>Instance of the <see cref="T:Vintasoft.Barcode.BarcodeInfo.QRStructureAppendCharacter" /> class.</returns>
            <seealso cref="T:Vintasoft.Barcode.BarcodeInfo.QRStructureAppendCharacter" />
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeInfo.NonDataFlags.CreateMaxiCodeStructureAppendCharacter(System.Int32,System.Int32)">
            <summary>
            Creates a new MaxiCode Structure Append character with 
            specified symbol position and symbol count.
            </summary>
            <param name="symbolPosition">The position for a symbol in the Structured Append format.</param>
            <param name="symbolCount">The number of symbols in the Structured Append format.</param>
            <returns>Instance of the <see cref="T:Vintasoft.Barcode.BarcodeInfo.StructureAppendCharacter" /> class.</returns>
            <seealso cref="T:Vintasoft.Barcode.BarcodeInfo.StructureAppendCharacter" />
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.NonDataFlags.Fnc1">
            <summary> 
            Gets the Function 1 Character (FNC1). 
            </summary>
            <remarks>
            Name: &lt;FNC1&gt; <br />
            <br />
            This flag can be used in Aztec, DataMatrix, Code128, QR, RSSExpanded, RSSExpandedStacked barcodes.
            </remarks>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.NonDataFlags.Fnc2">
            <summary> 
            Gets the Function 2 Character (FNC2). 
            </summary>
            <remarks>
            Name: &lt;FNC2&gt; <br />
            <br />
            This flag can be used only in Code128 barcode.
            </remarks>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.NonDataFlags.Fnc3">
            <summary> 
            Gets the Function 3 Character (FNC3). 
            </summary>
            <remarks>
            Name: &lt;FNC3&gt; <br />
            <br />
            This flag can be used only in Code128 barcode.
            </remarks>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.NonDataFlags.Fnc4">
            <summary> 
            Gets the Function 4 Character (FNC4). 
            </summary>
            <remarks>
            Name: &lt;FNC4&gt; <br />
            <br />
            This flag can be used only in Code128 barcode.<br />
            <br />
            FNC4 is used to represent an extended ASCII character set (byte values 128 to 255).
            </remarks>
            <seealso cref="P:Vintasoft.Barcode.ReaderSettings.Code128UseFnc4ShiftToExtendedAsciiTable" />
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.NonDataFlags.LinkageFlag">
            <summary>
            Gets the linkage flag to associated linear component in a composite symbol.
            </summary>
            <remarks>
            Name: &lt;LINKAGE&gt; <br />
            <br />
            This flag can be used only in PDF417 barcode.
            </remarks>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.NonDataFlags.EanUccLinkageFlag">
            <summary>
            Gets the linkage flag to associated linear component in an EAN.UCC composite symbol.
            </summary>
            <remarks>
            Name: &lt;LINKAGE_EANUCC&gt; <br />
            <br />
            This flag can be used only in PDF417 barcode.
            </remarks>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.NonDataFlags.ReaderProgramming">
            <summary>
            Gets the Reader Programming character. 
            </summary>
            <remarks>
            Name: &lt;READER_PROGRAMMING&gt;<br />
            <br />
            This flag can be used in DataMatrix and PDF417 barcodes. <br />
            Reader Programming character can be used only as first character of barcode.
            Reader Programming character indicates that the barcode encodes a message used
            to program the reader system.
            </remarks>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.NonDataFlags.Macro05">
            <summary>
            Gets the Macro05 character. 
            </summary>
            <remarks>
            Name: &lt;MACRO_05&gt; <br />
            Header: [)&gt;&lt;RS&gt;05&lt;GS&gt; <br />
            Trailer: &lt;RS&gt;&lt;EOT&gt;<br />
            This flag can be used in DataMatrix and Micro PDF417 barcodes. 
            </remarks>
            <seealso cref="T:Vintasoft.Barcode.BarcodeInfo.MacroCharacter" />
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.NonDataFlags.Macro06">
            <summary>
            Gets the Macro06 character. 
            </summary>
            <remarks>
            Name: &lt;MACRO_06&gt; <br />
            Header: [)&gt;&lt;RS&gt;06&lt;GS&gt; <br />
            Trailer: &lt;RS&gt;&lt;EOT&gt;<br />
            This flag can be used in DataMatrix and Micro PDF417 barcodes. 
            </remarks>
            <seealso cref="T:Vintasoft.Barcode.BarcodeInfo.MacroCharacter" />
        </member>
        <member name="T:Vintasoft.Barcode.BarcodeInfo.ValueItemDataType">
            <summary>
            Specifies available data types of <see cref="T:Vintasoft.Barcode.BarcodeInfo.ValueItemBase" />.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.ValueItemDataType.TextData">
            <summary>
            Text data.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.ValueItemDataType.BinaryData">
            <summary>
            Binary data.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.ValueItemDataType.NumericData">
            <summary>
            Numeric data.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfo.ValueItemDataType.NonDataFlag">
            <summary>
            Non-data flag or special character.
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.BarcodeInfo.DataMatrixInfo">
            <summary>
            Class that allows to get information about recognized Data Matrix barcode.
            </summary>
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeInfo.DataMatrixInfo.ToString">
            <summary> 
             Converts the information about barcode of this instance to its equivalent
             string.
             </summary>
             <returns>
             String representation of barcode.
             </returns>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.DataMatrixInfo.Symbol">
            <summary>
            Returns Data Matrix symbol information.
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.BarcodeInfo.DataMatrixSymbol">
            <summary>
            Contains information about DataMatrix symbol: size, number of data codewords,
            number of error correction codewords, etc.
            </summary>
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeInfo.DataMatrixSymbol.ToString">
            <summary> 
             Converts the DataMatrix symbol of this instance to its equivalent
             string.
             </summary>
             <returns>
             String representation of symbol.
             </returns>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.DataMatrixSymbol.SymbolWidth">
            <summary>
            Returns a symbol width.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.DataMatrixSymbol.SymbolHeight">
            <summary>
            Returns a symbol height.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.DataMatrixSymbol.SymbolType">
            <summary>
            Returns Data Matrix symbol type.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.DataMatrixSymbol.TotalCodewords">
            <summary>
            Returns a number of total codewords in symbol.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.DataMatrixSymbol.ErrorCorrectionCodewords">
            <summary>
            Returns a number of codewords, a used for Reed-Solomon error detection and
            correction(in ECC200 symbols).
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.DataMatrixSymbol.SymbolECCType">
            <summary>
            Returns the type of DataMatrix symbol.
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.BarcodeInfo.DataMatrixTextValueItem">
            <summary>
            Class that allows to access the <see cref="T:Vintasoft.Barcode.BarcodeInfo.DataMatrixEncodingMode" />.Text,
            <see cref="T:Vintasoft.Barcode.BarcodeInfo.DataMatrixEncodingMode" />.ASCII,
            <see cref="T:Vintasoft.Barcode.BarcodeInfo.DataMatrixEncodingMode" />.C40,
            <see cref="T:Vintasoft.Barcode.BarcodeInfo.DataMatrixEncodingMode" />.X12,
            <see cref="T:Vintasoft.Barcode.BarcodeInfo.DataMatrixEncodingMode" />.EDIFACT data of Data Matrix barcode.
            </summary>  
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeInfo.DataMatrixTextValueItem.#ctor(System.String,Vintasoft.Barcode.BarcodeInfo.DataMatrixEncodingMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Barcode.BarcodeInfo.DataMatrixTextValueItem" /> class. 
            </summary>
            <param name="value">value of text data.</param>
            <param name="mode">encoding mode.</param>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.DataMatrixTextValueItem.Mode">
            <summary>
            Returns a decoding mode of data.
            </summary>
            <value>
            This property returns a <see cref="T:Vintasoft.Barcode.BarcodeInfo.DataMatrixEncodingMode" />.Text, <see cref="T:Vintasoft.Barcode.BarcodeInfo.DataMatrixEncodingMode" />.C40, <see cref="T:Vintasoft.Barcode.BarcodeInfo.DataMatrixEncodingMode" />.X12 or <see cref="T:Vintasoft.Barcode.BarcodeInfo.DataMatrixEncodingMode" />.EDIFACT.
            </value>
        </member>
        <member name="T:Vintasoft.Barcode.BarcodeInfo.NumericValueItem">
            <summary>
            Class that allows to access a numeric data of barcode.
            </summary>    
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeInfo.NumericValueItem.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Barcode.BarcodeInfo.NumericValueItem" /> class. 
            </summary>
            <param name="value">value of numeric data.</param>
        </member>
        <member name="T:Vintasoft.Barcode.BarcodeInfo.QRInfo">
            <summary>
            Class that allows to get information about recognized QR barcode.
            </summary>
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeInfo.QRInfo.ToString">
            <summary> 
             Converts the information about barcode of this instance to its equivalent
             string.
             </summary>
             <returns>
             String representation of barcode.
             </returns>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.QRInfo.Symbol">
            <summary>
            Returns the QR symbol.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.QRInfo.ErrorCorrectionLevel">
            <summary>
            Returns a level of error correction used in barcode.
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.BarcodeInfo.QRSymbol">
            <summary>
            Contains information about QR symbol: size, number of total codewords,
            version number, etc.
            </summary>
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeInfo.QRSymbol.ToString">
            <summary> 
             Converts the QRSymbol of this instance to its equivalent
             string.
             </summary>
             <returns>
             String representation of symbol.
             </returns>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.QRSymbol.SymbolSize">
            <summary>
            Returns a symbol size.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.QRSymbol.IsMicroQR">
            <summary>
            Returns true if symbol is MicroQR. 
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.QRSymbol.Version">
            <summary>
            Returns QR symbol version.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeInfo.QRSymbol.TotalCodewords">
            <summary>
            Returns a number of total codewords in symbol.
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.BarcodeInfoClass">
            <summary>
            Specifies available barcode classes: 1D or 2D.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfoClass.Barcode1D">
            <summary>
            1D barcode.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeInfoClass.Barcode2D">
            <summary>
            2D barcode.
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.BarcodeType">
            <summary>
            Specifies available barcode symbology types.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeType.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeType.Codabar">
            <summary>
            Codabar.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeType.Code11">
            <summary>
            Code 11.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeType.Code128">
            <summary>
            Code 128.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeType.Standard2of5">
            <summary>
            Standard 2 of 5.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeType.Interleaved2of5">
            <summary>
            Interleaved 2 of 5.
            </summary>        
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeType.Code39">
            <summary>
            Code 39.
            </summary>        
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeType.Code93">
            <summary>
            Code 93.
            </summary>        
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeType.RSS14Stacked">
            <summary>
            RSS-14 Stacked.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeType.RSSExpandedStacked">
            <summary>
            RSS Expanded Stacked.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeType.UPCE">
            <summary>
            UPC-E.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeType.Telepen">
            <summary>
            Telepen.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeType.Postnet">
            <summary>
            Postnet.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeType.Planet">
            <summary>
            Planet.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeType.RoyalMail">
            <summary>
            Royal Mail.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeType.AustralianPost">
            <summary>
            Australia Post 4-state.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeType.PatchCode">
            <summary>
            Patch code.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeType.PDF417">
            <summary>
            PDF417 2D barcode symbology.<br />
            - ISO/IEC 15438:2006(E) international standard<br />
            - Three data read mode: <br />
            1. Text mode(up to 1850 text characters per barcode)<br />
            2. Byte mode(up to 1108 bytes per barcode)<br />
            3. Numeric mode(up to 2710 numeric characters per barcode)<br />
            - Reed-Solomon error detection and correction(9 levels)<br />
            - Support compact version PDF417Compact
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeType.PDF417Compact">
            <summary>
            PDF417 Compact 2D barcode symbology. Not contains stop symbol and right row indicator. 
            For more info see PDF417.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeType.EAN13">
            <summary>
            EAN/UPC 13.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeType.EAN8">
            <summary>
            EAN/UPC 8.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeType.UPCA">
            <summary>
            UPC-A.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeType.Plus5">
            <summary>
            EAN/UPC Plus 5.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeType.Plus2">
            <summary>
            EAN/UPC Plus 2.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeType.EAN13Plus5">
            <summary>
            EAN 13 with a 5 digit add-on.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeType.EAN13Plus2">
            <summary>
            EAN 13 with a 2 digit add-on.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeType.EAN8Plus5">
            <summary>
            EAN 8 with a 5 digit add-on.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeType.EAN8Plus2">
            <summary>
            EAN 8 with a 2 digit add-on.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeType.UPCEPlus5">
            <summary>
            UPC-E with a 5 digit add-on.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeType.UPCEPlus2">
            <summary>
            UPC-E with a 2 digit add-on.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeType.UPCAPlus5">
            <summary>
            UPC-A with a 2 digit add-on.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeType.UPCAPlus2">
            <summary>
            UPC-A with a 2 digit add-on.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeType.DataMatrix">
            <summary>
            Data Matrix 2D barcode symbology.
            - ISO/IEC 16022:2006(E) international standard<br />
            - Three data read mode: <br />
            1. Alphanumeric data(up to 2335 text characters per barcode)<br />
            2. Byte(8-bit) data(up to 1555 bytes per barcode)<br />
            3. Numeric data(up to 3116 digits per barcode)<br />
            - Reed-Solomon error detection and correction<br />
            - Supports all ECC200 square(10x10 to 144x144) and rectangular(8x18 to 16x48) symbols
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeType.QR">
            <summary>
            QR 2D barcode symbology.
            - ISO/IEC 18004:2006(E) international standard<br />
            1. Alphanumeric data(up to 4296 text characters per barcode)<br />
            2. Byte(8-bit) data(up to 2953 bytes per barcode)<br />
            3. Numeric data(up to 7089 digits per barcode)<br />
            4. Kanji (up to 1817 characters per barcode)
            - Reed-Solomon error detection and correction(4 levels)<br />
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeType.IntelligentMail">
            <summary>
            Intelligent Mail (US Postal 4-state barcode symbology).<br />
            - USPS-B-3200 standard<br />
            - error detetection
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeType.RSS14">
            <summary>
            RSS-14.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeType.RSSLimited">
            <summary>
            RSS Limited.      
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeType.RSSExpanded">
            <summary>
            RSS Expanded.       
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeType.Aztec">
            <summary>
            Aztec 2D barcode symbology.
            - ISO/IEC 24778:2008(E) international standard<br />
            1. Alphanumeric data(up to 3067 text characters per barcode)<br />
            2. Byte(8-bit) data(up to 1914 bytes per barcode)<br />
            3. Numeric data(up to 3832 digits per barcode)<br />
            - Reed-Solomon error detection and correction<br />
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeType.Pharmacode">
            <summary>
            Pharmacode barcode symbology. Pharmacode is a barcode standard, 
            used in the pharmaceutical industry as a packing control system. 
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeType.MSI">
            <summary>
            MSI (Modified Plessey).
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeType.UnknownLinear">
            <summary>
            Unknown linear barcode symbology.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeType.MicroQR">
            <summary>
            Micro QR 2D barcode symbology.
            - ISO/IEC 18004:2006(E) international standard
            1. Alphanumeric data(up to 21 text characters per barcode)<br />
            2. Byte(8-bit) data(up to 15 bytes per barcode)<br />
            3. Numeric data(up to 35 digits per barcode)<br />
            4. Kanji (up to 9 characters per barcode)
            - Reed-Solomon error detection and correction(3 levels)<br />
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeType.MaxiCode">
            <summary>
            MaxiCode 2D barcode symbology.
            - ISO/IEC 16032:2000(E) international standard
            1. Alphanumeric data(up to 93 text characters)<br />
            2. Numeric data(up to 138 text characters)<br />
            - Reed-Solomon error detection and correction(2 levels)<br />
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeType.DutchKIX">
            <summary>
            Dutch KIX (Royal TPG Post KIX) postal barcode symbology.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeType.MicroPDF417">
            <summary>
            Micro PDF417 2D barcode symbology.<br />
            - ISO/IEC 15438:2006(E) international standard<br />
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeType.Code32">
            <summary>
            Code 32 (Italian Pharmacode, Codice 32 Pharmacode).<br />
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeType.Mailmark4StateC">
            <summary>
            Royal Mail Mailmark 4-state barcode C postal barcode symbology.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeType.Mailmark4StateL">
            <summary>
            Royal Mail Mailmark 4-state barcode L postal barcode symbology.
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.Region">
            <summary>
            Contains information about region of barcode.
            </summary>
        </member>
        <member name="M:Vintasoft.Barcode.Region.GetPoints">
            <summary>
            Returns a Region points.
            </summary>
        </member>
        <member name="M:Vintasoft.Barcode.Region.ToString">
            <summary>
            Converts this <see cref="T:Vintasoft.Barcode.Region" /> to a human-readable string. 
            </summary>
            <returns>A string that represents this <see cref="T:Vintasoft.Barcode.Region" />.</returns>
        </member>
        <member name="M:Vintasoft.Barcode.Region.IsPointInRegion(System.Drawing.Point)">
            <summary>
            Determines if point is located in region.
            </summary>
            <param name="point">Point to test.</param>
            <returns><b>true</b> if point is located in region, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:Vintasoft.Barcode.Region.GetHashCode">
            <summary>
            Returns a hash code for this <see cref="T:Vintasoft.Barcode.Region" />.
            </summary>
        </member>
        <member name="M:Vintasoft.Barcode.Region.Equals(System.Object)">
            <summary>
            Specifies whether this <see cref="T:Vintasoft.Barcode.Region" /> contains the same coordinates
            as the specified <see cref="T:System.Object" />.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.Region.LeftTop">
            <summary>
            Returns a left-top coordinate of rectangle.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.Region.RightTop">
            <summary>
            Returns a right-top coordinate of rectangle.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.Region.LeftBottom">
            <summary>
            Returns a left-bottom coordinate of rectangle.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.Region.RightBottom">
            <summary>
            Returns a right-bottom coordinate of rectangle.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.Region.Angle">
            <summary>
            Returns an angle relative to vector (1,0).
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.Region.Rectangle">
            <summary>
            Returns a boundary rectangle for this region.
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.InternalErrorException">
            <summary>
            The exception that is thrown when an internal error is occured in the library.
            </summary>
            <remarks>
            The <see cref="P:Vintasoft.Barcode.InternalErrorException.Message" /> property contains information about current
            state of the library. You can send this information to VintaSoft's support
            team (support@vintasoft.com) and we will do the best to solve the problem.
            </remarks>
        </member>
        <member name="M:Vintasoft.Barcode.InternalErrorException.ToString">
            <summary>
            Creates and returns a string representation of the current exception. 
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.InternalErrorException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.InternalErrorException.StackTrace">
            <summary>
            Gets a string representation of the frames on the call stack at the time
            the current exception was thrown.
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.ReaderSettings">
            <summary>
            Encapsulates the settings for reading barcodes from images.
            </summary>
            <example>
            Please see example <see cref="M:Vintasoft.Barcode.BarcodeReader.ReadBarcodes">here</see>.
            </example>
        </member>
        <member name="F:Vintasoft.Barcode.ReaderSettings.MaxThresholdInterations">
            <summary>
            Define maximum value for the <see cref="P:Vintasoft.Barcode.ReaderSettings.ThresholdIterations" /> property.
            </summary>
            <value>This constant is equal 32.</value>
        </member>
        <member name="F:Vintasoft.Barcode.ReaderSettings.DefaultScanInterval">
            <summary>
            Define default value for the <see cref="P:Vintasoft.Barcode.ReaderSettings.ScanInterval" /> property.
            </summary>
            <value>This constant is equal 5.</value>
        </member>
        <member name="F:Vintasoft.Barcode.ReaderSettings.ConfidenceNotAviable">
            <summary>
            Value of the <see cref="P:Vintasoft.Barcode.IBarcodeInfo.Confidence" /> property will have this
            value if confidence of barcode cannot be calculated because checksum
            or error correction algorithm are not implemented in the specification
            of barcode type.
            </summary>
        </member>
        <member name="M:Vintasoft.Barcode.ReaderSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Barcode.ReaderSettings" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Barcode.ReaderSettings.GetSchema">
            <summary>
            Not implemented.
            </summary>
            <returns />
        </member>
        <member name="M:Vintasoft.Barcode.ReaderSettings.ReadXml(System.Xml.XmlReader)">
            <summary>
            Deserializes the <see cref="T:Vintasoft.Barcode.ReaderSettings" /> from a specified <see cref="T:System.Xml.XmlReader" />.
            </summary>
            <param name="reader">The XML reader to use to deserialize the <see cref="T:Vintasoft.Barcode.ReaderSettings" />.</param>
        </member>
        <member name="M:Vintasoft.Barcode.ReaderSettings.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Serializes the <see cref="T:Vintasoft.Barcode.ReaderSettings" /> to a specified <see cref="T:System.Xml.XmlWriter" />.
            </summary>
            <param name="writer">The XML writer to use to serialize the <see cref="T:Vintasoft.Barcode.ReaderSettings" />.</param>
        </member>
        <member name="M:Vintasoft.Barcode.ReaderSettings.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Vintasoft.Barcode.ReaderSettings.ToString">
            <summary> 
            Converts the reader settings of this instance to its equivalent
            string.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.ReaderSettings.ScanBarcodeTypes">
            <summary>
            Gets or sets the barcode symbology types to search.
            </summary>
            <value>
            Default value is <see cref="T:Vintasoft.Barcode.BarcodeType" />.Code39.
            </value>
            <remarks>Different <see cref="T:Vintasoft.Barcode.BarcodeType" />'s may be logically OR'd
            to search for more than one barcode type.</remarks>
        </member>
        <member name="P:Vintasoft.Barcode.ReaderSettings.ScanBarcodeSubsets">
            <summary>
            Gets or sets the barcode symbology subsets to search.
            </summary>
            <remarks>
            Standard barcode subsets see in <see cref="T:Vintasoft.Barcode.SymbologySubsets.BarcodeSymbologySubsets" />.
            </remarks>
            <seealso cref="T:Vintasoft.Barcode.SymbologySubsets.BarcodeSymbologySubset" />
        </member>
        <member name="P:Vintasoft.Barcode.ReaderSettings.ScanDirection">
            <summary>
            Gets or sets the direction for barcode search.
            </summary>
            <value>
            Default value is <see cref="P:Vintasoft.Barcode.ReaderSettings.ScanDirection" />.LeftToRight.
            </value>
            <remarks>
            Different <see cref="P:Vintasoft.Barcode.ReaderSettings.ScanDirection" />'s may be logically OR'd to
            search for more in one direction.<br />
            <br />
            The <see cref="P:Vintasoft.Barcode.ReaderSettings.ScanDirection" />.Angle45and135 scan
            direction should be used only if image contains low and wide barcodes
            rotated to 30-60 degrees. Usage of this scan direction increase time
            of recognition.
            </remarks>
            <example>
            Please see example <see cref="M:Vintasoft.Barcode.BarcodeReader.ReadBarcodes">here</see>.
            </example>
        </member>
        <member name="P:Vintasoft.Barcode.ReaderSettings.ScanInterval">
            <summary>
            Gets or sets the scan interval for barcode search.
            </summary>
            <value>
            Minimal value is <b>1</b>, maximal value is <b>255</b>.
            Default value is 5.
            </value>
            <remarks>
            A value of 1 means scan every pixel row or column of the image; 2 means scan every second row or column, and so on.<br />
            <br />
            Increasing the value of this field may result in faster reading of the image, but increases the probablility of not detecting narrow or poorly formed barcodes. Decreasing the value of this field can have the opposite effect: slower reading of the image but better barcode detection.<br />
            </remarks>
            <example>
            Please see example <see cref="M:Vintasoft.Barcode.BarcodeReader.ReadBarcodes">here</see>.
            </example>
        </member>
        <member name="P:Vintasoft.Barcode.ReaderSettings.ScanRectangle">
            <summary>
            Gets or sets the rectangle in the image to search barcodes.
            </summary>
            <value>
            Default value is <see cref="T:System.Drawing.Rectangle" />(0,0,0,0) - entire image.
            </value>
            <remarks>Rectangle with coordinates (0;0) - (0;0) means that value of
            this property will not be used.</remarks>
        </member>
        <member name="P:Vintasoft.Barcode.ReaderSettings.ExpectedBarcodes">
            <summary>
            Gets or sets the expected number of barcodes to search.
            </summary>
            <value>
            Default value is 1.
            </value>
            <remarks>You must set value of this property to 2 if you want to
            read one EAN Plus or UPC Plus barcode.</remarks>
        </member>
        <member name="P:Vintasoft.Barcode.ReaderSettings.MinConfidence">
            <summary>
            Gets or sets the minimal value of confidence, in percents.
            </summary>
            <value>
            Minimal value is <b>0</b>, maximal value is <b>100</b>.
            Default value is 95.
            </value>
            <remarks>
            Barcode will be dropped if it's <see cref="P:Vintasoft.Barcode.IBarcodeInfo.Confidence" /> value
            less than MinConfidence.<br />
            <br />
            You should set value of this property to 0 if you want to see all searched
            barcodes.<br />
            You should set value of this property to 95 if you want to see "good"
            barcodes only.<br />
            </remarks>
        </member>
        <member name="P:Vintasoft.Barcode.ReaderSettings.ThresholdMode">
            <summary>
            Gets or sets a mode of threshold detection.
            </summary>
            <value>
            Default value is <see cref="P:Vintasoft.Barcode.ReaderSettings.ThresholdMode" />.Automatic.
            </value>
            <remarks>
            Color, palette or gray image (Color image) is converted to black-white
            image before barcode reading.<br />
            <br />
            Here is a list of steps of image converting algorithm:<br />
            <ul>
            <li>Calculates the sum of components of color (T) for each pixel by
            following formula: T = R + G + B</li>
            <li>Pixel color is changed to black color if T is less than Threshold value</li>
            <li>Pixel color is changed to white color if T is more or equal than
            Threshold value</li>
            </ul>
            <br />
            Threshold can be:<br />
            <ul>
            <li>Calculated automatically (ThresholdMode = <see cref="P:Vintasoft.Barcode.ReaderSettings.ThresholdMode" />.Automatic). Used by default.</li>
            <li>Set manually (ThresholdMode = <see cref="P:Vintasoft.Barcode.ReaderSettings.ThresholdMode" />.Manual).<br />
            Library converts the Color image to black-white image 
            with <see cref="P:Vintasoft.Barcode.ReaderSettings.Threshold" /> value and reads barcodes from image.</li>
            <li>Range of threshold's values (ThresholdMode = <see cref="P:Vintasoft.Barcode.ReaderSettings.ThresholdMode" />.Iterations).<br />
            Library converts the Color image to N black-white images and reads barcodes from images, where
            N = <see cref="P:Vintasoft.Barcode.ReaderSettings.ThresholdIterations" />, <see cref="P:Vintasoft.Barcode.ReaderSettings.ThresholdMin" /> - left
            bound of range, <see cref="P:Vintasoft.Barcode.ReaderSettings.ThresholdMax" /> - right bound of range. Barcode
            reading process will be interrupted if <see cref="P:Vintasoft.Barcode.ReaderSettings.ExpectedBarcodes" /> value is reached.
            </li>
            </ul>
            <br />
            You should use the <see cref="P:Vintasoft.Barcode.ReaderSettings.ThresholdMode" />.Automatic
            mode only if you read barcodes from many "different" images because this
            feature decreases barcode reading speed.<br />
            You should use the <see cref="P:Vintasoft.Barcode.ReaderSettings.ThresholdMode" />.Manual
            mode if you read barcodes from "similar" images.
            </remarks>
            <example> Here is a simple example that demonstrates how to detect barcodes in a color image with difficult-to-locate threshold.
            <code lang="VB.NET">   
            Imports System.Drawing   
            Imports Vintasoft.Barcode   
               
            ''' &lt;summary&gt;   
            ''' Test that shows how to read barcodes from image using several iterations with different thresholds.   
            ''' &lt;/summary&gt;   
            Class ThresholdModeExample   
               
            	''' &lt;summary&gt;   
            	''' Run the test.   
            	''' &lt;/summary&gt;   
            	Public Shared Sub Test()   
            		Using barcodeImage As Image = Image.FromFile("test1.jpg")   
            			ReadBarcodesUsingIterationsThresholdMode(barcodeImage)   
            		End Using   
            	End Sub   
               
            	''' &lt;summary&gt;   
            	''' Read barcodes from image using several iterations with different thresholds.   
            	''' &lt;/summary&gt;   
            	Private Shared Sub ReadBarcodesUsingIterationsThresholdMode(barcodeImage As Image)   
            		' create barcode reader   
            		Using reader As New BarcodeReader()   
            			' specify that reader must search for Code39, Code128 and DataMatrix barcodes only   
            			reader.Settings.ScanBarcodeTypes = BarcodeType.Code39 Or BarcodeType.Code128 Or BarcodeType.DataMatrix   
               
            			' specify that reader must search for horizontal and vertical barcodes only   
            			reader.Settings.ScanDirection = ScanDirection.LeftToRight Or ScanDirection.RightToLeft   
               
            			' specify that reader must search for 3 barcodes   
            			reader.Settings.ExpectedBarcodes = 3   
               
            			' specify that reader must use 9 iterations for barcode reading,   
            			' minimum threshold is 200, maximum threashold 600, threshold step is 50   
            			reader.Settings.ThresholdMode = ThresholdMode.Iterations   
            			reader.Settings.ThresholdIterations = 9   
            			reader.Settings.ThresholdMin = 200   
            			reader.Settings.ThresholdMax = 600   
               
            			' read barcodes from image   
            			Dim infos As IBarcodeInfo() = reader.ReadBarcodes(barcodeImage)   
               
            			' show barcode recognition results   
               
            			Console.WriteLine(String.Format("Recognition time {0} ms.", reader.RecognizeTime.TotalMilliseconds))   
               
            			If infos.Length = 0 Then   
            				Console.WriteLine("No barcodes found.")   
            			Else   
            				Console.WriteLine(String.Format("{0} barcodes found:", infos.Length))   
            				Console.WriteLine()   
            				For i As Integer = 0 To infos.Length - 1   
            					Dim info As IBarcodeInfo = infos(i)   
            					Console.WriteLine(String.Format("[{0}:{1}]", i, info.BarcodeType))   
            					Console.WriteLine(String.Format("Value:      {0}", info.Value))   
            					Console.WriteLine(String.Format("Confidence: {0}%", Math.Round(info.Confidence)))   
            					Console.WriteLine(String.Format("Threshold:  {0}", info.Threshold))   
            					Console.WriteLine(String.Format("Region:     {0}", info.Region))   
            					Console.WriteLine()   
            				Next   
            			End If   
            		End Using   
            	End Sub   
               
            End Class
            </code>
            <code lang="C#">
            using System;
            using System.Drawing;
            using Vintasoft.Barcode;
            
            /// &lt;summary&gt;
            /// Test that shows how to read barcodes from image using several iterations with different thresholds.
            /// &lt;/summary&gt;
            class ThresholdModeExample
            {
            
                /// &lt;summary&gt;
                /// Run the test.
                /// &lt;/summary&gt;
                public static void Test()
                {
                    using (Image barcodeImage = Image.FromFile("test1.jpg"))
                    {
                        ReadBarcodesUsingIterationsThresholdMode(barcodeImage);
                    }
                }
                
                /// &lt;summary&gt;
                /// Read barcodes from image using several iterations with different thresholds.
                /// &lt;/summary&gt;
                static void ReadBarcodesUsingIterationsThresholdMode(Image barcodeImage)
                {
                    // create barcode reader
                    using (BarcodeReader reader = new BarcodeReader())
                    {
                        // specify that reader must search for Code39, Code128 and DataMatrix barcodes only
                        reader.Settings.ScanBarcodeTypes =
                            BarcodeType.Code39 |
                            BarcodeType.Code128 |
                            BarcodeType.DataMatrix;
            
                        // specify that reader must search for horizontal and vertical barcodes only
                        reader.Settings.ScanDirection = ScanDirection.LeftToRight | ScanDirection.RightToLeft;
            
                        // specify that reader must search for 3 barcodes
                        reader.Settings.ExpectedBarcodes = 3;
            
                        // specify that reader must use 9 iterations for barcode reading,
                        // minimum threshold is 200, maximum threashold 600, threshold step is 50
                        reader.Settings.ThresholdMode = ThresholdMode.Iterations;
                        reader.Settings.ThresholdIterations = 9;
                        reader.Settings.ThresholdMin = 200;
                        reader.Settings.ThresholdMax = 600;
            
                        // read barcodes from image
                        IBarcodeInfo[] infos = reader.ReadBarcodes(barcodeImage);
            
                        // show barcode recognition results
            
                        Console.WriteLine(string.Format("Recognition time {0} ms.",
                            reader.RecognizeTime.TotalMilliseconds));
            
                        if (infos.Length == 0)
                        {
                            Console.WriteLine("No barcodes found.");
                        }
                        else
                        {
                            Console.WriteLine(string.Format("{0} barcodes found:", infos.Length));
                            Console.WriteLine();
                            for (int i = 0; i &lt; infos.Length; i++)
                            {
                                IBarcodeInfo info = infos[i];
                                Console.WriteLine(string.Format("[{0}:{1}]", i, info.BarcodeType));
                                Console.WriteLine(string.Format("Value:      {0}", info.Value));
                                Console.WriteLine(string.Format("Confidence: {0}%", Math.Round(info.Confidence)));
                                Console.WriteLine(string.Format("Threshold:  {0}", info.Threshold));
                                Console.WriteLine(string.Format("Region:     {0}", info.Region));
                                Console.WriteLine();
                            }
                        }
                    }
                }
            
            }
            </code>
            </example>
        </member>
        <member name="P:Vintasoft.Barcode.ReaderSettings.Threshold">
            <summary>
            Gets or sets the threshold value for algorithm of color conversion.
            </summary>
            <value>
            Minimal value is <b>0</b>, maximal value is <b>765</b>.
            Default value is 500.
            </value>
            <example>
            Please see example <see cref="P:Vintasoft.Barcode.ReaderSettings.ThresholdMode">here</see>.
            </example>
        </member>
        <member name="P:Vintasoft.Barcode.ReaderSettings.ThresholdMin">
            <summary>
            Gets or sets the minimal threshold value of algorithm color conversion 
            in the barcode reading iteration process (see <see cref="P:Vintasoft.Barcode.ReaderSettings.ThresholdMode" />.Iterations).
            </summary>
            <value>
            Minimal value is <b>0</b>, maximal value is <b>765</b>.
            Default value is 200.
            </value>
            <example>
            Please see example <see cref="P:Vintasoft.Barcode.ReaderSettings.ThresholdIterations">here</see>.
            </example>
        </member>
        <member name="P:Vintasoft.Barcode.ReaderSettings.ThresholdMax">
            <summary>
            Gets or sets the maximal threshold value of algorithm color conversion 
            in the barcode reading iteration process (see <see cref="P:Vintasoft.Barcode.ReaderSettings.ThresholdMode" />.Iterations).
            </summary>
            <value>
            Minimal value is <b>0</b>, maximal value is <b>765</b>.
            Default value is 600.
            </value>
            <example>
            Please see example <see cref="P:Vintasoft.Barcode.ReaderSettings.ThresholdIterations">here</see>.
            </example>
        </member>
        <member name="P:Vintasoft.Barcode.ReaderSettings.ThresholdIterations">
            <summary>
            Gets or sets the number of steps in barcode reading iteration process.
            </summary>
            <value>
            Possible value:<br />
            <ul>
            <li><b>1</b> - iterative process is disabled,</li>
            <li><b>2..30</b> - iterative process is enabled.</li>
            </ul>
            Minimal value is <b>1</b>, maximal value is <b>32</b>. Default value is <b>1</b>.
            </value>
            <remarks>
            You should set ThresholdMode = <see cref="P:Vintasoft.Barcode.ReaderSettings.ThresholdMode" />.Iterations for using iteration process.<br />
            You should use the <see cref="P:Vintasoft.Barcode.ReaderSettings.ExpectedBarcodes" /> property if you use iteration
            process and you know how many barcodes present in the image - this will
            increase speed of barcode reading process because iteration will be
            interrupted when number of barcodes is found. Confidence of barcodes can
            be set with the <see cref="P:Vintasoft.Barcode.ReaderSettings.MinConfidence" /> property.<br />
            <br />
            Please read more info about iteration process
            <see cref="P:Vintasoft.Barcode.ReaderSettings.ThresholdMode">here</see>.
            </remarks>
            <example>
            Please see example <see cref="P:Vintasoft.Barcode.ReaderSettings.ThresholdMode">here</see>.
            </example>
        </member>
        <member name="P:Vintasoft.Barcode.ReaderSettings.OptionalCheckSum">
            <summary>
            Gets or sets a value indicating whether the barcode reader calculates an optional checksum.
            </summary>
            <value>
            <b>true</b> - optional checksum is calculated,<br />
            <b>false</b> - optional checksum is not calculated.<br />
            Default value is <b>false</b>.
            </value>
            <remarks>The following barcode symbologies have optional checksum: Code 39, Industrial Standard 2 of 5, Interleaved 2 of 5.</remarks>
        </member>
        <member name="P:Vintasoft.Barcode.ReaderSettings.RemovePostnetPlanetCheckSum">
            <summary>
            Gets or sets a value indicating whether the barcode reader 
            removes the checksum digit from the barcode value of Planet or Postnet barcode.
            </summary>
            <value>
            <b>true</b> - remove the checksum digit from the barcode value,<br />
            <b>false</b> - do not remove the checksum digit from the barcode value.<br />
            Default value is <b>true</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Barcode.ReaderSettings.AustralianPostCustomerInfoFormat">
            <summary>
            Gets or sets the format of customer information field of Australia Post 4-state barcode.
            </summary>
            <value>
            Default value is <see cref="P:Vintasoft.Barcode.ReaderSettings.AustralianPostCustomerInfoFormat" />.None.
            </value>
        </member>
        <member name="P:Vintasoft.Barcode.ReaderSettings.Erode">
            <summary>
            Gets or sets a value indicating whether the barcode reader processes the image with
            barcodes using  the "erode" algorithm before barcode search.
            </summary>
            <value>
            Default value is <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Barcode.ReaderSettings.UnknownLinearMinScanlines">
            <summary>
            Gets or sets the minimum number of scanlines in unknown linear barcode.
            </summary>
            <value>
            Minimal value is <b>4</b>.
            Default value is 8.
            </value>
        </member>
        <member name="P:Vintasoft.Barcode.ReaderSettings.UnknownLinearMaxBarWide">
            <summary>
            Gets or sets the maximum width of bar in unknown linear barcode.
            </summary>
            <value>
            Minimal value is <b>1</b>, maximal value is <b>8</b>.
            Default value is 4.
            </value>
        </member>
        <member name="P:Vintasoft.Barcode.ReaderSettings.UnknownLinearMinBars">
            <summary>
            Gets or sets the minimum number of black bars in unknown linear barcode.
            </summary>
            <value>
            Minimal value is <b>3</b>, maximal value is <see cref="P:Vintasoft.Barcode.ReaderSettings.UnknownLinearMaxBars" />.
            Default value is 16.
            </value>
        </member>
        <member name="P:Vintasoft.Barcode.ReaderSettings.UnknownLinearMaxBars">
            <summary>
            Gets or sets the maximum number of black bars in unknown linear barcode.
            </summary>
            <value>
            Minimal value is <see cref="P:Vintasoft.Barcode.ReaderSettings.UnknownLinearMinBars" />.
            Default value is 128.
            </value>
        </member>
        <member name="P:Vintasoft.Barcode.ReaderSettings.RemovePeas">
            <summary>
            Gets or sets a value indicating whether the barcode reader removes "peas" from the image with
            barcodes before barcode search.
            </summary>
            <value>
            <b>true</b> - enables remove of "peas" from image,<br />
            <b>false</b> - disables remove of "peas" from image.<br />
            Default value is <b>true</b>.
            </value>
            <remarks>
            "Peas" - specific noise in the image.
            <br />
            You should not enable this feature if you have good barcodes because this
            feature can decrease barcode reading speed.
            </remarks>
        </member>
        <member name="P:Vintasoft.Barcode.ReaderSettings.InvertImageColors">
            <summary>
            Gets or sets a value indicating whether the barcode reader inverts the image with
            barcodes before barcode search.
            </summary>
            <value>
            <b>false</b> - pixel with index 0 in color table will be interpreted as black pixel,
            pixel with index 1 in color table will be interpreted as white pixel,<br />
            <b>true</b> - pixel with index 0 in color table will be interpreted as white pixel,
            pixel with index 1 in color table will be interpreted as black pixel.<br />
            Default value is <b>false</b>.
            </value>
            <remarks>.NET Framework loads color table from some TIFF files uncorrectly
            and as a result images will be inverted. This property must be set to
            <b>true</b> for solving this problem and correct barcode reading.</remarks>
        </member>
        <member name="P:Vintasoft.Barcode.ReaderSettings.MaximalThreadsCount">
            <summary>
            Gets or sets the maximal number of threads the barcode reader can create for barcode search.
            </summary>
            <value>
            Minimal value is <b>1</b>, maximal value is <b>32</b>.
            Default value is a number of processors.
            </value>
        </member>
        <member name="P:Vintasoft.Barcode.ReaderSettings.UseCode39ExtendedDecodeTable">
            <summary>
            Gets or sets a value indicating whether the barcode reader converts Code 39 barcode
            to Code39 Extended barcode if necessary.
            </summary>
            <value>
            Default value is <b>true</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Barcode.ReaderSettings.Code128UseFnc4ShiftToExtendedAsciiTable">
            <summary>
            Gets or sets a value indicating whether the barcode reader interprets FNC4 symbols in
            Code 128 barcode and shifts barcode characters to extended ASCII table (128..255 byte values).
            </summary>
            <value>
            <b>false</b> - if barcode contains FNC4 symbols: FNC4 symbol is not interpreted, barcode
            contains only ASCII symbols (0..127 byte values);<br />
            <b>true</b> - if barcode contains FNC4 symbols: FNC4 symbols interpreted and excluded from
            barcode value, barcode value contains extended ASCII symbols (0..255 byte values).<br />
            Default value is <b>true</b>.
            </value>
            <remarks>
            This function based on FNC4 symbol, see Code128 specification.
            </remarks>
        </member>
        <member name="P:Vintasoft.Barcode.ReaderSettings.SearchDistortedDataMatrixBarcodes">
            <summary>
            Gets or sets a value indicating whether the barcode reader searches "distorted" DataMatrix barcodes.
            </summary>
            <value>
            <b>false</b> - search of "distorted" DataMatrix barcodes is disabled;
            <b>true</b> - search of "distorted" DataMatrix barcodes is enabled.
            Default value is <b>true</b>.
            </value>
            <remarks>
            "Distorted" barcode is not rectangular barcode (trapezoid, etc) which in most cases are
            received from web- or photo camera. 
            </remarks>
        </member>
        <member name="P:Vintasoft.Barcode.ReaderSettings.SearchDistortedQRBarcodes">
            <summary>
            Gets or sets a value indicating whether the barcode reader searches "distorted" QR barcodes.
            </summary>
            <value>
            <b>false</b> - search of "distorted" QR barcodes is disabled;
            <b>true</b> - search of "distorted" QR barcodes is enabled.
            Default value is <b>true</b>.
            </value>
            <remarks>
            "Distorted" barcode is not rectangular barcode (trapezoid, etc) which in most cases are
            received from web- or photo camera. 
            </remarks>
            <value>Default value is <b>True</b>.</value>
        </member>
        <member name="P:Vintasoft.Barcode.ReaderSettings.DataMatrixMinCellSize">
            <summary>
            Gets or sets the minimal cell size, in pixels, for Data Matrix barcode.
            </summary>
            <value>
            Minimal value is 2, maimal value is 50. Default value is 2.
            </value>
            <remarks>
            Correct (appropriate) value of this property increases barcode reading speed.
            </remarks>
        </member>
        <member name="P:Vintasoft.Barcode.ReaderSettings.MSIChecksum">
            <summary>
            Gets or sets a checksum type of MSI barcode.
            </summary>
            <value>
            Default value is <b><see cref="T:Vintasoft.Barcode.BarcodeInfo.MSIChecksumType" />.Mod10</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Barcode.ReaderSettings.EnableTelepenNumericMode">
            <summary>
            Gets or sets a value indicating whether the barcode reader enables numeric mode in Telepen barcode.
            </summary>
            <value>
            Default value is <b>true</b>.
            </value>
            <remarks>Numeric mode allows packing two digits into one character.</remarks>
        </member>
        <member name="P:Vintasoft.Barcode.ReaderSettings.AutomaticRecognition">
            <summary>
            Gets or sets a value indicating whether the barcode reader enables the special automatic
            recognition mode.
            </summary>
            <value>
            <b>false</b> - the special automatic recognition mode is disabled;
            <b>true</b> - the special automatic recognition mode is enabled.
            Default value is <b>false</b>.
            </value>
            <remarks>
            Special automatic recognition mode is combination of some recognition
            algorithms and gives the best quality of recognition and it
            should be used for reading of barcodes with bad quality only.<br />
            <br />
            Correct number of expected barcodes is very important because recognition
            will be stopped when expected number of barcodes is found.<br />
            <br />
            <b>Important:</b> This mode does not have stable speed like the manual mode.
            Speed of recognition in this mode will be from T to 12*T, where T is
            speed of recognition in the manual mode with automatic threshold.
            12*T is the bad case when the expected number of barcodes is not reached.<br />
            <br />
            <see cref="P:Vintasoft.Barcode.ReaderSettings.ThresholdIterations" />, <see cref="P:Vintasoft.Barcode.ReaderSettings.ThresholdMode" />
            and <see cref="P:Vintasoft.Barcode.ReaderSettings.Threshold" /> properties are ignored if value of
            this property is set to <b>true</b>.
            </remarks>
        </member>
        <member name="P:Vintasoft.Barcode.ReaderSettings.BarcodeCharacteristics">
            <summary>
            Gets or sets a barcode characteristics.
            </summary>
            <value>
            Default value is <b><see cref="P:Vintasoft.Barcode.ReaderSettings.BarcodeCharacteristics" />.Undefined</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Barcode.ReaderSettings.VerifyBarcodeMethod">
            <summary>
            Gets or sets method that verifies the information about barcode found by barcode reader.
            </summary>
            <remarks>
            Method that verifies the information about barcode found by barcode reader executes every
            time when the "barcode" is found by the barcode reader.<br />
            <br />
            Application can analyze information about found barcode and change
            <see cref="P:Vintasoft.Barcode.IBarcodeInfo.Confidence" /> if this is necessary.<br />
            <br />
            Method that verifies the information about barcode found can be used
            in automatic or iteration recognition mode and increase quality of recognition.
            </remarks>
            <example>
            This example generates Code 39 barcode with user-defined 
            base 1000 cheksum, and read it using check barcode checksum 
            in verify barcode method. 
            <code lang="VB.NET">   
            Imports System.Drawing   
            Imports Vintasoft.Barcode   
               
            ''' &lt;summary&gt;   
            ''' Test that shows how to use specify delegate to a method for barcode verification and   
            ''' verify found barcode during the barcode recognition process.   
            ''' &lt;/summary&gt;   
            Class UserDefinedChecksumExample   
            	''' &lt;summary&gt;   
            	''' Run the test.   
            	''' &lt;/summary&gt;   
            	Public Shared Sub Run()   
            		Dim value As String = "1234567890AbC"   
               
            		' create the barcode writer   
            		Dim writer As New BarcodeWriter()   
            		' specify that writer must generate Code39 barcode   
            		writer.Settings.Barcode = BarcodeType.Code39   
               
            		' create the barcode reader   
            		Using reader As New BarcodeReader()   
            			' specify that reader must search for Code39 barcodes only   
            			reader.Settings.ScanBarcodeTypes = BarcodeType.Code39   
            			' specify that reader must search for barcode with 100% confidence only   
            			reader.Settings.MinConfidence = 100   
            			' specify that reader must use barcodes in automatic mode   
            			reader.Settings.AutomaticRecognition = True   
            			' specify that reader must search for 1 barcode   
            			reader.Settings.ExpectedBarcodes = 1   
               
            			' set the barcode value without checksum   
            			writer.Settings.Value = value   
            			' create image with barcode without checksum   
            			Using barcodeNoChecksumImage As Image = writer.GetBarcodeAsBitmap()   
            				' set the barcode value with checksum   
            				writer.Settings.Value = value &amp; GenerateChecksum(value)   
            				' create image with barcode with checksum   
            				Using barcodeWithMyChecksumImage As Image = writer.GetBarcodeAsBitmap()   
            					' specify delegate to a method for barcode verification   
            					reader.Settings.VerifyBarcodeMethod = AddressOf VerifyBarcodeMethod   
               
            					' read barcodes from barcode image without checksum,   
            					' barcode reader will not find barcode   
            					Dim infos As IBarcodeInfo() = reader.ReadBarcodes(barcodeNoChecksumImage)   
            					Console.WriteLine("Scan (NoChecksum):")   
            					For i As Integer = 0 To infos.Length - 1   
            						Console.WriteLine(infos(i).Value)   
            					Next   
               
            					' read barcodes from barcode image with checksum,   
            					' barcode reader will find 1 barcode   
            					infos = reader.ReadBarcodes(barcodeWithMyChecksumImage)   
            					Console.WriteLine("Scan (MyChecksum):")   
            					For i As Integer = 0 To infos.Length - 1   
            						Console.WriteLine(infos(i).Value)   
            					Next   
            				End Using   
            			End Using   
            		End Using   
            	End Sub   
               
            	''' &lt;summary&gt;   
            	''' Generate checksum modulo 1000.   
            	''' &lt;/summary&gt;   
            	Private Shared Function GenerateChecksum(value As String) As String   
            		Dim checkSum As Integer = 0   
            		For i As Integer = 0 To value.Length - 1   
            			checkSum += CByte(AscW(value(i))) * (i + 1)   
            			checkSum = checkSum Mod 1000   
            		Next   
            		' result - [000..999]   
            		Return checkSum.ToString().PadLeft(3, "0"C)   
            	End Function   
               
            	''' &lt;summary&gt;   
            	''' Method that verifies the barcode during the barcode recognition process.   
            	''' &lt;/summary&gt;   
            	Private Shared Sub VerifyBarcodeMethod(reader As BarcodeReader, barcodeInfo As IBarcodeInfo)   
            		If TestChecksum(barcodeInfo.Value) Then   
            			barcodeInfo.Confidence = 100   
            		Else   
            			barcodeInfo.Confidence = 0   
            		End If   
            	End Sub   
               
            	''' &lt;summary&gt;   
            	''' Test checksum in barcode value.   
            	''' &lt;/summary&gt;   
            	Private Shared Function TestChecksum(barcodeValue As String) As Boolean   
            		Dim value As String = barcodeValue.Substring(0, barcodeValue.Length - 3)   
            		Dim readChecksum As String = barcodeValue.Substring(barcodeValue.Length - 3)   
            		Return readChecksum = GenerateChecksum(value)   
            	End Function   
               
            End Class
            </code>
            <code lang="C#">
            using System;
            using System.Drawing;
            using Vintasoft.Barcode;
            
            /// &lt;summary&gt;
            /// Test that shows how to use specify delegate to a method for barcode verification and
            /// verify found barcode during the barcode recognition process.
            /// &lt;/summary&gt;
            class UserDefinedChecksumExample
            {
                /// &lt;summary&gt;
                /// Run the test.
                /// &lt;/summary&gt;
                public static void Run()
                {
                    string value = "1234567890AbC";
            
                    // create the barcode writer
                    BarcodeWriter writer = new BarcodeWriter();
                    // specify that writer must generate Code39 barcode
                    writer.Settings.Barcode = BarcodeType.Code39;
            
                    // create the barcode reader
                    using (BarcodeReader reader = new BarcodeReader())
                    {
                        // specify that reader must search for Code39 barcodes only
                        reader.Settings.ScanBarcodeTypes = BarcodeType.Code39;
                        // specify that reader must search for barcode with 100% confidence only
                        reader.Settings.MinConfidence = 100;
                        // specify that reader must use barcodes in automatic mode
                        reader.Settings.AutomaticRecognition = true;
                        // specify that reader must search for 1 barcode
                        reader.Settings.ExpectedBarcodes = 1;
            
                        // set the barcode value without checksum
                        writer.Settings.Value = value;
                        // create image with barcode without checksum
                        using (Image barcodeNoChecksumImage = writer.GetBarcodeAsBitmap())
                        {
                            // set the barcode value with checksum
                            writer.Settings.Value = value + GenerateChecksum(value);
                            // create image with barcode with checksum
                            using (Image barcodeWithMyChecksumImage = writer.GetBarcodeAsBitmap())
                            {
                                // specify delegate to a method for barcode verification
                                reader.Settings.VerifyBarcodeMethod = VerifyBarcodeMethod;
            
                                // read barcodes from barcode image without checksum,
                                // barcode reader will not find barcode
                                IBarcodeInfo[] infos = reader.ReadBarcodes(barcodeNoChecksumImage);
                                Console.WriteLine("Scan (NoChecksum):");
                                for (int i = 0; i &lt; infos.Length; i++)
                                    Console.WriteLine(infos[i].Value);
            
                                // read barcodes from barcode image with checksum,
                                // barcode reader will find 1 barcode
                                infos = reader.ReadBarcodes(barcodeWithMyChecksumImage);
                                Console.WriteLine("Scan (MyChecksum):");
                                for (int i = 0; i &lt; infos.Length; i++)
                                    Console.WriteLine(infos[i].Value);
                            }
                        }
                    }
                }
            
                /// &lt;summary&gt;
                /// Generate checksum modulo 1000.
                /// &lt;/summary&gt;
                static string GenerateChecksum(string value)
                {
                    int checkSum = 0;
                    for (int i = 0; i &lt; value.Length; i++)
                    {
                        checkSum += ((byte)value[i]) * (i + 1);
                        checkSum %= 1000;
                    }
                    // result - [000..999]
                    return checkSum.ToString().PadLeft(3, '0');
                }
            
                /// &lt;summary&gt;
                /// Method that verifies the barcode during the barcode recognition process.
                /// &lt;/summary&gt;
                static void VerifyBarcodeMethod(BarcodeReader reader, IBarcodeInfo barcodeInfo)
                {
                    if (TestChecksum(barcodeInfo.Value))
                        barcodeInfo.Confidence = 100;
                    else
                        barcodeInfo.Confidence = 0;
                }
            
                /// &lt;summary&gt;
                /// Test checksum in barcode value.
                /// &lt;/summary&gt;
                static bool TestChecksum(string barcodeValue)
                {
                    string value = barcodeValue.Substring(0, barcodeValue.Length - 3);
                    string readChecksum = barcodeValue.Substring(barcodeValue.Length - 3);
                    return readChecksum == GenerateChecksum(value);
                }
            
            }
            </code>
            </example>
            <example>
            This example shows how to remove barcodes with 
            <see cref="P:Vintasoft.Barcode.IBarcodeInfo.ReadingQuality">reading quality</see>&lt;0.2.
            <code lang="VB.NET">   
            ''' &lt;summary&gt;   
            ''' Method that verifies the barcode during the barcode recognition process.   
            ''' &lt;/summary&gt;   
            Private Shared Sub VerifyBarcodeMethod(reader As BarcodeReader, barcodeInfo As IBarcodeInfo)   
            	If barcodeInfo.ReadingQuality &lt; 0.2 Then   
            		barcodeInfo.Confidence = 0   
            	End If   
            End Sub   
               
            ' ...   
            ' reader.Settings.VerifyBarcodeMethod = VerifyBarcodeMethod;   
            ' ...
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Method that verifies the barcode during the barcode recognition process.
            /// &lt;/summary&gt;
            static void VerifyBarcodeMethod(BarcodeReader reader, IBarcodeInfo barcodeInfo)
            {
                if (barcodeInfo.ReadingQuality &lt; 0.2)
                    barcodeInfo.Confidence = 0;
            }
            
            // ...
            // reader.Settings.VerifyBarcodeMethod = VerifyBarcodeMethod;
            // ...
            </code>
            </example>
        </member>
        <member name="P:Vintasoft.Barcode.ReaderSettings.TryTransmitGS1Value">
            <summary>
            Gets a value indicating whether the barcode reader translates barcode value in GS1 format
            (with symbology prefix).
            </summary>
            <value>
            Default value is <b>false</b>.
            </value>
            <remarks>Aviable for barcodes: Aztec, DataMatrix, Code 128, RSS, QR.
            This property is obsolete. Use <see cref="P:Vintasoft.Barcode.ReaderSettings.ScanBarcodeSubsets" /> property instead.</remarks>
        </member>
        <member name="P:Vintasoft.Barcode.ReaderSettings.CollectTestInformation">
            <summary>
            Gets or sets a value indicating whether the barcode reader collects information for quality test.
            </summary>
            <value>
            Default value is <b>false.</b>
            </value>
        </member>
        <member name="T:Vintasoft.Barcode.BarcodeImageChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Vintasoft.Barcode.BarcodeWriterControl.BarcodeImageChanged" /> action.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeImageChangedEventArgs.Image">
            <summary>
            Gets the barcode image.
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.GS1.GS1AICharacterSetType">
            <summary>
            Defines available types of character sets.
            </summary>
            <remarks>
            See GS1 General Specification: 7.11. The GS1 Subset of International Standard ISO/IEC 646.
            </remarks>
        </member>
        <member name="F:Vintasoft.Barcode.GS1.GS1AICharacterSetType.CharacterSet82">
            <summary>
            GS1 AI Encodable Character Set 82.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.GS1.GS1AICharacterSetType.CharacterSet39">
            <summary>
            GS1 AI Encodable Character Set 39.
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.BarcodeWriterControl">
            <summary>
            Represents a viewer control for displaying an image with barcode.
            </summary>
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeWriterControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Barcode.BarcodeWriterControl" /> class. 
            </summary>
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeWriterControl.GetBarcodeAsImage">
            <summary>
            Returns barcode as <see cref="T:System.Drawing.Image" />.
            </summary>
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeWriterControl.GetBarcodeAsGraphicsPath">
            <summary>
            Returns barcode as <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.
            </summary>
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeWriterControl.BeginInit">
            <summary>
            Signals the object that initialization is starting.
            </summary>
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeWriterControl.EndInit">
            <summary>
            Signals the object that initialization is complete.
            </summary>
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeWriterControl.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the<see cref="T:Vintasoft.Barcode.BarcodeWriterControl" />.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeWriterControl.Settings">
            <summary>
            Gets the barcode writer settings.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeWriterControl.SizeMode">
            <summary>
            Indicates how the image with barcode is displayed.
            </summary>
            <returns>
            Default value is <see cref="T:System.Windows.Forms.PictureBoxSizeMode" />.CenterImage.
            </returns>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeWriterControl.EncodedValue">
            <summary>
            Gets an encoded value. 
            </summary>
            <remarks>
            This value can not coincide with <see cref="P:Vintasoft.Barcode.WriterSettings.Value" />
            because reader can add checksum or another system info to the initial
            value of barcode.
            </remarks>
        </member>
        <member name="E:Vintasoft.Barcode.BarcodeWriterControl.BarcodeImageChanged">
            <summary>
            Occurs when barcode image is changed. 
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.BarcodeWriter">
            <summary>
            Class that allows to write barcodes to the image or in vector form.
            </summary>
            <example>This example shows how to generate image with Code128 barcode.
            <code lang="VB.NET">   
            Imports System.Drawing   
            Imports Vintasoft.Barcode   
               
            ''' &lt;summary&gt;   
            ''' Test that shows how to create image with barcode using the BarcodeWriter class.   
            ''' &lt;/summary&gt;   
            Class BarcodeWriterExample   
            	Public Shared Sub Test()   
            		' create the barcode writer   
            		Dim writer As New BarcodeWriter()   
               
            		' specify that writer must generate Code128 barcode   
            		writer.Settings.Barcode = BarcodeType.Code128   
               
            		' specify that writer must create output image as 24-bpp image   
            		writer.Settings.PixelFormat = BarcodeImagePixelFormat.Bgr24   
               
            		' specify that single bar's minimum width is 3 pixels   
            		writer.Settings.MinWidth = 3   
               
            		' set the barcode value   
            		writer.Settings.Value = "Test1234567"   
               
            		' create image with barcode   
            		Using image As Image = writer.GetBarcodeAsBitmap()   
            			' save the barcode image to a disk   
            			image.Save("barcode.png")   
            		End Using   
            	End Sub   
            End Class
            </code>
            <code lang="C#">
            using System.Drawing;
            using Vintasoft.Barcode;
            
            /// &lt;summary&gt;
            /// Test that shows how to create image with barcode using the BarcodeWriter class.
            /// &lt;/summary&gt;
            class BarcodeWriterExample
            {
                public static void Test()
                {
                    // create the barcode writer
                    BarcodeWriter writer = new BarcodeWriter();
            
                    // specify that writer must generate Code128 barcode
                    writer.Settings.Barcode = BarcodeType.Code128;
            
                    // specify that writer must create output image as 24-bpp image
                    writer.Settings.PixelFormat = BarcodeImagePixelFormat.Bgr24;
            
                    // specify that single bar's minimum width is 3 pixels
                    writer.Settings.MinWidth = 3;
            
                    // set the barcode value
                    writer.Settings.Value = "Test1234567";
            
                    // create image with barcode
                    using (Image image = writer.GetBarcodeAsBitmap())
                    {
                        // save the barcode image to a disk
                        image.Save("barcode.png");
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeWriter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Barcode.BarcodeWriter" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeWriter.GetBarcodeAsBitmap">
            <summary>
            Returns barcode as image.
            </summary>
            <returns>Image with barcode.</returns>
            <example>
            Please see example <see cref="T:Vintasoft.Barcode.BarcodeWriter">here</see>.
            </example>
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeWriter.GetBarcodeAsGraphicsPath">
            <summary>
            Returns barcode as <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.
            </summary>
            <returns>Barcode as <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.</returns>
            <remarks>
            This method ignores values of properties:
            <ul>
            <li><see cref="P:Vintasoft.Barcode.WriterSettings.Padding" />, always used <b>0</b>.</li>
            <li><see cref="P:Vintasoft.Barcode.WriterSettings.ValueVisible" />, always used <b>false</b>.</li>
            </ul>
            </remarks>
            <example>This example shows how to add barcode in vector form to PDF document.
            <code lang="VB.NET">   
            Imports System.Drawing   
            Imports System.Drawing.Drawing2D   
            Imports System.IO   
            Imports Vintasoft.Barcode   
            Imports Vintasoft.Pdf   
            Imports Vintasoft.Pdf.Drawing   
            Imports Vintasoft.Pdf.Tree   
               
            ''' &lt;summary&gt;   
            ''' This test shows how to draw barcodes on each page of PDF document.   
            ''' Barcode writer generated barcode as graphics path.   
            ''' &lt;/summary&gt;   
            ''' &lt;remarks&gt;   
            ''' &lt;b&gt;Important:&lt;/b&gt; Vintasoft.Barcode.dll, Vintasoft.Imaging.dll and Vintasoft.Imaging.Pdf.dll    
            ''' assemblies are necessary for executing this code.   
            ''' &lt;/remarks&gt;   
            Class GetBarcodeAsGraphicsPathExample   
               
            	''' &lt;summary&gt;   
            	''' Run the test.   
            	''' &lt;/summary&gt;   
            	Public Shared Sub Test()   
            		Dim barcodeValue As String = "ABCDEF1234ABCDEF1234AB"   
               
            		' draw barcode on each page of PDF document, barcode size is 4 millimeters,   
            		' recommend print quality: 600dpi, recommend scan quality : 400-600dpi   
            		DrawBarcodeOnPdfPages("test.pdf", 4, barcodeValue)   
               
            		' draw barcode on each page of PDF document, barcode size is 10 millimeters,   
            		' recommend print quality: 300-600dpi, recommend scan quality : 150dpi   
            		DrawBarcodeOnPdfPages("test.pdf", 10, barcodeValue)   
            	End Sub   
               
            	''' &lt;summary&gt;   
            	''' Draw barcode on each page of PDF document.   
            	''' &lt;/summary&gt;   
            	Public Shared Sub DrawBarcodeOnPdfPages(pdfFilename As String, barcodeSizeInMillimeters As Single, barcodeValue As String)   
            		' X padding - 20mm   
            		Dim xPadding As Single = TraslateMillimetersToPdfPageUserSpace(20)   
            		' Y padding - 15mm   
            		Dim yPadding As Single = TraslateMillimetersToPdfPageUserSpace(15)   
               
            		' translate barcode size, in millimeters, to the PdfPage UserSpace units   
            		Dim barcodeSize As Single = TraslateMillimetersToPdfPageUserSpace(barcodeSizeInMillimeters)   
               
            		' create the barcode writer   
            		Dim barcodeWriter As New BarcodeWriter()   
               
            		' specify that writer must generate DataMatrix barcode   
            		barcodeWriter.Settings.Barcode = BarcodeType.DataMatrix   
               
            		' open PDF document   
            		Using document As New PdfDocument(pdfFilename)   
            			' for each PDF page   
            			For i As Integer = 0 To document.Pages.Count - 1   
            				Dim page As PdfPage = document.Pages(i)   
               
            				' set the barcode value   
            				barcodeWriter.Settings.Value = barcodeValue   
               
            				' generate barcode as graphics path   
            				Using barcodePath As GraphicsPath = barcodeWriter.GetBarcodeAsGraphicsPath()   
            					' transform barcode path   
            					Using m As New Matrix()   
            						' translate barcode to right-top corner of page   
            						Dim x As Single = page.MediaBox.Right - barcodeSize - xPadding   
            						Dim y As Single = page.MediaBox.Bottom - barcodeSize - yPadding   
            						m.Translate(x, y)   
               
            						' gets generated barcode size   
            						Dim genaratedBarcodeSize As Single = barcodePath.GetBounds().Height   
               
            						' scale barcode    
            						Dim scale As Single = barcodeSize / genaratedBarcodeSize   
            						m.Scale(scale, scale)   
               
            						barcodePath.Transform(m)   
            					End Using   
               
            					' fill barcode path   
            					Using g As PdfGraphics = page.GetGraphics()   
            						Dim brush As New PdfBrush(Color.Black)   
            						g.FillPath(brush, barcodePath)   
            					End Using   
            				End Using   
            			Next   
               
            			Dim filePosfix As String = String.Format("_marked{0}mm.pdf", barcodeSizeInMillimeters)   
            			Dim outPdfFilename As String = Path.GetFileNameWithoutExtension(pdfFilename) &amp; filePosfix   
               
            			' save PDF document   
            			document.Save(outPdfFilename)   
            		End Using   
            	End Sub   
               
            	''' &lt;summary&gt;   
            	''' Translate value from millimeters to the PdfPage UserSpace units (72 DPI).   
            	''' &lt;/summary&gt;   
            	Private Shared Function TraslateMillimetersToPdfPageUserSpace(value As Single) As Single   
            		Return ((value / 10F) / 2.54F * 72F)   
            	End Function   
               
            End Class
            </code>
            <code lang="C#">
            using System.Drawing;
            using System.Drawing.Drawing2D;
            using System.IO;
            using Vintasoft.Barcode;
            using Vintasoft.Pdf;
            using Vintasoft.Pdf.Drawing;
            using Vintasoft.Pdf.Tree;
            
            /// &lt;summary&gt;
            /// This test shows how to draw barcodes on each page of PDF document.
            /// Barcode writer generated barcode as graphics path.
            /// &lt;/summary&gt;
            /// &lt;remarks&gt;
            /// &lt;b&gt;Important:&lt;/b&gt; Vintasoft.Barcode.dll, Vintasoft.Imaging.dll and Vintasoft.Imaging.Pdf.dll 
            /// assemblies are necessary for executing this code.
            /// &lt;/remarks&gt;
            class GetBarcodeAsGraphicsPathExample
            {
            
                /// &lt;summary&gt;
                /// Run the test.
                /// &lt;/summary&gt;
                public static void Test()
                {
                    string barcodeValue = "ABCDEF1234ABCDEF1234AB";
            
                    // draw barcode on each page of PDF document, barcode size is 4 millimeters,
                    // recommend print quality: 600dpi, recommend scan quality : 400-600dpi
                    DrawBarcodeOnPdfPages("test.pdf", 4, barcodeValue);
            
                    // draw barcode on each page of PDF document, barcode size is 10 millimeters,
                    // recommend print quality: 300-600dpi, recommend scan quality : 150dpi
                    DrawBarcodeOnPdfPages("test.pdf", 10, barcodeValue);
                }
                
                /// &lt;summary&gt;
                /// Draw barcode on each page of PDF document.
                /// &lt;/summary&gt;
                public static void DrawBarcodeOnPdfPages(
                    string pdfFilename,
                    float barcodeSizeInMillimeters,
                    string barcodeValue)
                {
                    // X padding - 20mm
                    float xPadding = TraslateMillimetersToPdfPageUserSpace(20);
                    // Y padding - 15mm
                    float yPadding = TraslateMillimetersToPdfPageUserSpace(15);
            
                    // translate barcode size, in millimeters, to the PdfPage UserSpace units
                    float barcodeSize = TraslateMillimetersToPdfPageUserSpace(barcodeSizeInMillimeters);
            
                    // create the barcode writer
                    BarcodeWriter barcodeWriter = new BarcodeWriter();
            
                    // specify that writer must generate DataMatrix barcode
                    barcodeWriter.Settings.Barcode = BarcodeType.DataMatrix;
            
                    // open PDF document
                    using (PdfDocument document = new PdfDocument(pdfFilename))
                    {
                        // for each PDF page
                        for (int i = 0; i &lt; document.Pages.Count; i++)
                        {
                            PdfPage page = document.Pages[i];
            
                            // set the barcode value
                            barcodeWriter.Settings.Value = barcodeValue;
            
                            // generate barcode as graphics path
                            using (GraphicsPath barcodePath = barcodeWriter.GetBarcodeAsGraphicsPath())
                            {
                                // transform barcode path
                                using (Matrix m = new Matrix())
                                {
                                    // translate barcode to right-top corner of page
                                    float x = page.MediaBox.Right - barcodeSize - xPadding;
                                    float y = page.MediaBox.Bottom - barcodeSize - yPadding;
                                    m.Translate(x, y);
            
                                    // gets generated barcode size
                                    float genaratedBarcodeSize = barcodePath.GetBounds().Height;
            
                                    // scale barcode 
                                    float scale = barcodeSize / genaratedBarcodeSize;
                                    m.Scale(scale, scale);
            
                                    barcodePath.Transform(m);
                                }
            
                                // fill barcode path
                                using (PdfGraphics g = page.GetGraphics())
                                {
                                    PdfBrush brush = new PdfBrush(Color.Black);
                                    g.FillPath(brush, barcodePath);
                                }
                            }
                        }
            
                        string filePosfix = string.Format("_marked{0}mm.pdf", barcodeSizeInMillimeters);
                        string outPdfFilename = Path.GetFileNameWithoutExtension(pdfFilename) + filePosfix;
            
                        // save PDF document
                        document.Save(outPdfFilename);
                    }
                }
            
                /// &lt;summary&gt;
                /// Translate value from millimeters to the PdfPage UserSpace units (72 DPI).
                /// &lt;/summary&gt;
                private static float TraslateMillimetersToPdfPageUserSpace(float value)
                {
                    return ((value / 10f) / 2.54f * 72f);
                }
            
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeWriter.CreateBitmapFromBarcodePath(System.Drawing.Drawing2D.GraphicsPath,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,Vintasoft.Barcode.UnitOfMeasure,System.Drawing.Color,System.Drawing.Color,System.Boolean)">
            <summary>
            Creates barcode image with exact physical dimensions from barcode graphics path.
            </summary>
            <param name="barcodePath">Graphics path, which presents the barcode in vector form.</param>
            <param name="barcodeWidth">Barcode width, in units.</param>
            <param name="barcodeHeight">Barcode height, in units.</param>
            <param name="paddingLeft">Left padding, in units.</param>
            <param name="paddingTop">Top padding, in units.</param>
            <param name="paddingRight">Right padding, in units.</param>
            <param name="paddingBottom">Bottom padding, in units.</param>
            <param name="horizontalResolution">Bitmap horizontal resolution, in dpi.</param>
            <param name="verticalResolution">Bitmap vertical resolution, in dpi.</param>
            <param name="units">Units of measure.</param>
            <param name="backgroundColor">Background image color.</param>
            <param name="barcodeColor">Barcode color.</param>
            <param name="antiAlias">Specifies antialiased rendering of barcode path.</param>
            <returns>Rasterized barcode image with exact physical dimensions.</returns>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeWriter.WriteTime">
            <summary>
            Gets information about barcode write time.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeWriter.EncodedValue">
            <summary>
            Gets encoded value. 
            </summary>
            <remarks>
            This value can not coincide with <see cref="P:Vintasoft.Barcode.WriterSettings.Value" />
            because reader can add checksum or another system info to the initial
            value of barcode.
            </remarks>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeWriter.Settings">
            <summary>
            Defines the barcode writer settings.
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.BarcodeImagePixelFormat">
            <summary>
            Specifies the format of the color data for each
            pixel in the barcode image.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeImagePixelFormat.Indexed1">
            <summary>
            Specifies that the pixel format is 1 bit per pixel and that it uses
            indexed color. The color table therefore has two colors in it.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeImagePixelFormat.Bgr24">
            <summary>
            Specifies that the format is 24 bits per pixel; 8 bits each are used for
            the blue, green, and red components. 
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.BarcodeImagePixelFormat.Bgra32">
            <summary>
            Specifies that the format is 32 bits per pixel; 8 bits each are used
            for the blue, green, red and alpha components.
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.WriterSettingsExceptionType">
            <summary>
            Specifies available types of exceptions which can occur in <see cref="T:Vintasoft.Barcode.WriterSettings" />.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.WriterSettingsExceptionType.UnexpectedSymbol">
            <summary>
            Unexpected symbol.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.WriterSettingsExceptionType.ExpectedSymbol">
            <summary>
            Expected symbol.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.WriterSettingsExceptionType.DataLengthCanNotBe0">
            <summary>
            Length of data can not be 0.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.WriterSettingsExceptionType.DataRegionTooLarge">
            <summary>
            Data region is too large.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.WriterSettingsExceptionType.UnexpectedValueItem">
            <summary>
            Unexpected value item.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.WriterSettingsExceptionType.ExpectedOneTextValueItem">
            <summary>
            Expected one <see cref="T:Vintasoft.Barcode.BarcodeInfo.TextValueItem" />.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.WriterSettingsExceptionType.BarcodeValueCanNotBeEmpty">
            <summary>
            Barcode value can not be empty.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.WriterSettingsExceptionType.PixelFormatNotSuppored">
            <summary>
            <see cref="P:Vintasoft.Barcode.WriterSettings.PixelFormat" /> not supported.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.WriterSettingsExceptionType.BarcodeTypeIsUndefined">
            <summary>
            <see cref="P:Vintasoft.Barcode.WriterSettings.Barcode" /> is undefined.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.WriterSettingsExceptionType.WritingBarcodeUnsupported">
            <summary>
            Writing of this barcode is not supported.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.WriterSettingsExceptionType.ExpectedNSymbolsInBarcodeValue">
            <summary>
            Expected N symbols in barcode value.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.WriterSettingsExceptionType.Expected0InFirstUPCSymbol">
            <summary>
            Expected '0' in first symbol of UPC barcode value.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.WriterSettingsExceptionType.UnableConvertUPCAValueTOUPCEValue">
            <summary>
            Cannot convert UPCA value to UPCE value.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.WriterSettingsExceptionType.WrongBarcodeValue">
            <summary>
            Wrong barcode value.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.WriterSettingsExceptionType.WrongWriterSettings">
            <summary>
            Wrong writer settings.
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.UnitOfMeasure">
            <summary>
            Specifies available units of measure.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.UnitOfMeasure.Inches">
            <summary>
            Inches.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.UnitOfMeasure.Centimeters">
            <summary>
            Centimeters.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.UnitOfMeasure.Millimeters">
            <summary>
            Millimeters.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.UnitOfMeasure.Pixels">
            <summary>
            Device pixels.
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.WriterSettings">
            <summary>
            Encapsulates the settings for writing barcodes to image.
            </summary>
        </member>
        <member name="M:Vintasoft.Barcode.WriterSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Barcode.WriterSettings" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Barcode.WriterSettings.GetSchema">
            <summary>
            Not implemented.
            </summary>
            <returns />
        </member>
        <member name="M:Vintasoft.Barcode.WriterSettings.ReadXml(System.Xml.XmlReader)">
            <summary>
            Deserializes the <see cref="T:Vintasoft.Barcode.WriterSettings" /> from a specified <see cref="T:System.Xml.XmlReader" />.
            </summary>
            <param name="reader">The XML reader to use to deserialize the <see cref="T:Vintasoft.Barcode.WriterSettings" />.</param>
        </member>
        <member name="M:Vintasoft.Barcode.WriterSettings.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Serializes the <see cref="T:Vintasoft.Barcode.WriterSettings" /> to a specified <see cref="T:System.Xml.XmlWriter" />.
            </summary>
            <param name="writer">The XML writer to use to serialize the <see cref="T:Vintasoft.Barcode.WriterSettings" />.</param>
        </member>
        <member name="M:Vintasoft.Barcode.WriterSettings.SetMinWidth(System.Double,Vintasoft.Barcode.UnitOfMeasure)">
            <summary> 
            Sets <see cref="P:Vintasoft.Barcode.WriterSettings.MinWidth" /> property in specified units.
            </summary>
            <param name="value"><see cref="P:Vintasoft.Barcode.WriterSettings.MinWidth" /> value in specified units.</param>
            <param name="units">Unit of measure.</param>
        </member>
        <member name="M:Vintasoft.Barcode.WriterSettings.SetWidth(System.Double,Vintasoft.Barcode.UnitOfMeasure)">
            <summary>
            Sets the desired width of barcode.
            </summary>
            <param name="value">Barcode width is specified units.</param>
            <param name="units">Unit of measure.</param>
            <remarks>
            Parameters of this method are used for calculation of value of <see cref="P:Vintasoft.Barcode.WriterSettings.MinWidth" /> property.<br />
            <br />
            Real width of generated image with barcode can be not equal to desired width.
            Difference between "real" and "desired" width depends from the <see cref="P:Vintasoft.Barcode.WriterSettings.Resolution" />,
            difference is less if resolution is more.<br />
            <br />
            <see cref="P:Vintasoft.Barcode.WriterSettings.MinWidth" /> property contains value used for generation of barcode after
            barcode of barcode.
            </remarks>
            <example>
            <code lang="VB.NET">   
            Imports System.Drawing   
            Imports Vintasoft.Barcode   
               
            ''' &lt;summary&gt;   
            ''' Test that shows how to create image with barcode with desired size and resolution.   
            ''' &lt;/summary&gt;   
            Class SetWidthExample   
               
            	''' &lt;summary&gt;   
            	''' Run the test.   
            	''' &lt;/summary&gt;   
            	Public Shared Sub Test()   
            		' generate image with 600 dpi resolution and with barcode with size 6x2 cm   
            		Using barcodeImage As Image = DrawBarcode(BarcodeType.Code128, "TESTBARCODE", 600, 6, 2, UnitOfMeasure.Centimeters)   
            			' save image to a file   
            			barcodeImage.Save("test.png")   
            		End Using   
            	End Sub   
               
            	''' &lt;summary&gt;   
            	''' Create image with barcode with desired size and resolution.   
            	''' &lt;/summary&gt;   
            	Private Shared Function DrawBarcode(barcodeType As BarcodeType, value As String, resolution As Double, width As Double, height As Double, units As UnitOfMeasure) As Image   
            		' create the barcode writer   
            		Dim writer As New BarcodeWriter()   
               
            		' specify that writer must generate barcode of specified type   
            		writer.Settings.Barcode = barcodeType   
               
            		' set the barcode value   
            		writer.Settings.Value = value   
               
            		' specify the resolution of image with barcode   
            		writer.Settings.Resolution = resolution   
            		' specify the desired width of barcode   
            		writer.Settings.SetWidth(width, units)   
            		' specify the desired height of barcode   
            		writer.Settings.SetHeight(height, units)   
               
            		' create image with barcode   
            		Return writer.GetBarcodeAsBitmap()   
            	End Function   
               
            End Class   
            
            </code>
            <code lang="C#">
            using System.Drawing;
            using Vintasoft.Barcode;
            
            /// &lt;summary&gt;
            /// Test that shows how to create image with barcode with desired size and resolution.
            /// &lt;/summary&gt;
            class SetWidthExample
            {
            
                /// &lt;summary&gt;
                /// Run the test.
                /// &lt;/summary&gt;
                public static void Test()
                {
                    // generate image with 600 dpi resolution and with barcode with size 6x2 cm
                    using (Image barcodeImage = DrawBarcode(
                        BarcodeType.Code128, "TESTBARCODE",
                        600, 6, 2, UnitOfMeasure.Centimeters))
                    {
                        // save image to a file
                        barcodeImage.Save("test.png");
                    }
                }
                
                /// &lt;summary&gt;
                /// Create image with barcode with desired size and resolution.
                /// &lt;/summary&gt;
                static Image DrawBarcode(
                    BarcodeType barcodeType,
                    string value, 
                    double resolution,
                    double width,
                    double height, 
                    UnitOfMeasure units)
                {
                    // create the barcode writer
                    BarcodeWriter writer = new BarcodeWriter();
            
                    // specify that writer must generate barcode of specified type
                    writer.Settings.Barcode = barcodeType;
            
                    // set the barcode value
                    writer.Settings.Value = value;
            
                    // specify the resolution of image with barcode
                    writer.Settings.Resolution = resolution;
                    // specify the desired width of barcode
                    writer.Settings.SetWidth(width, units);
                    // specify the desired height of barcode
                    writer.Settings.SetHeight(height, units);
            
                    // create image with barcode
                    return writer.GetBarcodeAsBitmap();
                }
            
            }
            
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Barcode.WriterSettings.SetHeight(System.Double,Vintasoft.Barcode.UnitOfMeasure)">
            <summary>
            Sets <see cref="P:Vintasoft.Barcode.WriterSettings.Height" /> property in specified units.
            </summary>
            <param name="value"><see cref="P:Vintasoft.Barcode.WriterSettings.Height" /> value in specified units.</param>
            <param name="units">Unit of measure.</param>
            <example>
            Please see example <see cref="M:Vintasoft.Barcode.WriterSettings.SetWidth(System.Double,Vintasoft.Barcode.UnitOfMeasure)">here</see>.
            </example>         
        </member>
        <member name="M:Vintasoft.Barcode.WriterSettings.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Vintasoft.Barcode.WriterSettings.BeginInit">
            <summary>
            Signals the <see cref="T:Vintasoft.Barcode.WriterSettings" /> that initialization is starting.
            </summary>
        </member>
        <member name="M:Vintasoft.Barcode.WriterSettings.EndInit">
            <summary>
            Signals the <see cref="T:Vintasoft.Barcode.WriterSettings" /> that initialization is complete.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.WriterSettings.Value">
            <summary>
            Gets or sets the value of the barcode.
            </summary>
            <remarks>
            Optimization algorithm is used for 2D barcodes to reduce matrix size.
            Use <see cref="P:Vintasoft.Barcode.WriterSettings.ValueItems" /> property if optimization must be disabled.
            </remarks>
        </member>
        <member name="P:Vintasoft.Barcode.WriterSettings.PrintableValue">
            <summary>
            Gets or sets text that is showing below barcode.
            </summary>
            <remarks>
            <see cref="P:Vintasoft.Barcode.WriterSettings.Value" /> is showing below barcode if value of this property is empty.
            </remarks>
        </member>
        <member name="P:Vintasoft.Barcode.WriterSettings.ValueItems">
            <summary>
            Gets or sets an array of value items of barcode.
            </summary>
            <remarks>
            <see cref="P:Vintasoft.Barcode.WriterSettings.Value" /> property ignored if value of this property is specified.
            </remarks>
            <example>
            Please see example <see cref="T:Vintasoft.Barcode.BarcodeInfo.ValueItemBase">here</see>.
            </example>
        </member>
        <member name="P:Vintasoft.Barcode.WriterSettings.Barcode">
            <summary>
            Gets or sets the type of barcode symbology.
            </summary>
            <value>Default value is <see cref="T:Vintasoft.Barcode.BarcodeType" />.None.</value>
        </member>
        <member name="P:Vintasoft.Barcode.WriterSettings.ForeColor">
            <summary>
            Gets or sets the fore color of barcode.
            </summary>
            <value>Default value is <see cref="T:System.Drawing.Color" />.<b>Black</b>.</value>
        </member>
        <member name="P:Vintasoft.Barcode.WriterSettings.BackColor">
            <summary>
            Gets or sets the back color of barcode.
            </summary>
            <value>Default value is <see cref="T:System.Drawing.Color" />.<b>White</b>.</value>
        </member>
        <member name="P:Vintasoft.Barcode.WriterSettings.PixelFormat">
            <summary>
            Gets or sets the image pixel format.
            </summary>
            <value>Default value is <b>BarcodeImagePixelFormat.Indexed1</b>.</value>
        </member>
        <member name="P:Vintasoft.Barcode.WriterSettings.MinWidth">
            <summary>
            Gets or sets the width (and height for 2D barcodes), in pixels, of single block.
            </summary>
            <value>Minimal value is 2. Default value is <b>3</b>.</value>
            <remarks>
            Single block for 1D barcodes - single bar.<br />
            Single block for 2D barcodes - single bar or single row.<br />
            </remarks>
            <seealso cref="P:Vintasoft.Barcode.WriterSettings.BarsWidthAdjustment" />
        </member>
        <member name="P:Vintasoft.Barcode.WriterSettings.Resolution">
            <summary>
            Gets or sets image vertical and horizontal resolution, in dots per inch.
            </summary>
            <value>Default value is <b>96</b> DPI.</value>
        </member>
        <member name="P:Vintasoft.Barcode.WriterSettings.Padding">
            <summary>
            Gets or sets the barcode padding.
            </summary>
            <value>Minimal value is 1 <see cref="P:Vintasoft.Barcode.WriterSettings.MinWidth" />. Default value is <b>1</b>.</value>
        </member>
        <member name="P:Vintasoft.Barcode.WriterSettings.BarsRatio">
            <summary>
            Gets or sets the ratio of the wide bar width to the narrow bar width
            (only for barcodes width 1X and 2X bars width).
            </summary>
            <value>Minimal value is 1.5, maximal value is 3.<br /> 
            Default value is <b>2</b>.</value>
        </member>
        <member name="P:Vintasoft.Barcode.WriterSettings.BarsWidthAdjustment">
            <summary>
            Gets or sets the adjustment method of bars width in percentage to the value
            of MinWidth property.
            </summary>
            <value>
            From -0.3 to 0 - white bars will be expanded, black bars will be shrunk,<br />
            0 - no effect,<br />
            from 0 to 0.3 - white bars will be shrunk, black bars will be expanded.
            </value>
            <seealso cref="P:Vintasoft.Barcode.WriterSettings.MinWidth" />
        </member>
        <member name="P:Vintasoft.Barcode.WriterSettings.Code128EncodingMode">
            <summary>
            Gets or sets the Code128 data encoding mode.
            </summary>
            <value>Default value is
            <see cref="P:Vintasoft.Barcode.WriterSettings.Code128EncodingMode" />.<b>Undefined</b> (encoding mode calculated automatically).
            </value>
        </member>
        <member name="P:Vintasoft.Barcode.WriterSettings.EANSubtype">
            <summary>
            Gets or sets the EAN subtype.
            </summary>
            <value>Default value is
            <see cref="P:Vintasoft.Barcode.WriterSettings.EANSubtype" />.<b>Undefined</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Barcode.WriterSettings.PDF417RowHeight">
            <summary>
            Gets or sets the row height of PDF417.
            </summary>
            <value>
            Minimal value is 2, maximal value is 64. Default value is <b>4</b>.
            </value>
            <seealso cref="P:Vintasoft.Barcode.WriterSettings.MinWidth" />
        </member>
        <member name="P:Vintasoft.Barcode.WriterSettings.Height">
            <summary>
            Gets or sets the height, in pixels, of 1D barcode.
            </summary>
            <value>
            Mimimal value is 3, maximal value is 4096.
            Default value is <b>100</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Barcode.WriterSettings.DataMatrixSymbol">
            <summary>
            Gets or sets the Data Matrix symbol size. 
            </summary>
            <value>Default value is 
            <see cref="T:Vintasoft.Barcode.BarcodeInfo.DataMatrixSymbolType" />.<b>Undefined</b> (symbol size calculated automatically).
            </value>
        </member>
        <member name="P:Vintasoft.Barcode.WriterSettings.DataMatrixEncodingMode">
            <summary>
            Gets or sets the Data Matrix data encoding mode.
            </summary>
            <value>Default value is
            <see cref="P:Vintasoft.Barcode.WriterSettings.DataMatrixEncodingMode" />.<b>Undefined</b> (encoding mode calculated automatically).
            </value>
            <remarks>
            Only square barcodes are created if encoding mode is set to Undefined.
            </remarks>
        </member>
        <member name="P:Vintasoft.Barcode.WriterSettings.QRSymbol">
            <summary>
            Gets or sets the QR symbol version (symbol size).
            </summary>
            <value>Default value is
            <see cref="T:Vintasoft.Barcode.BarcodeInfo.QRSymbolVersion" />.<b>Undefined</b> (symbol version calculated automatically).
            </value>
        </member>
        <member name="P:Vintasoft.Barcode.WriterSettings.QRErrorCorrectionLevel">
            <summary>
            Gets or sets QR error correction level.
            </summary>
            <value>Default value is
            <see cref="P:Vintasoft.Barcode.WriterSettings.QRErrorCorrectionLevel" />.<b>M</b>.</value>
        </member>
        <member name="P:Vintasoft.Barcode.WriterSettings.QREncodingMode">
            <summary>
            Gets or sets QR data encoding mode.
            </summary>
            <value>Default value is <see cref="P:Vintasoft.Barcode.WriterSettings.QREncodingMode" />.<b>Undefined</b>.</value>
            <remarks>
            Parameter will be calculated automatically if value is
            <see cref="P:Vintasoft.Barcode.WriterSettings.QREncodingMode" />.Undefined.
            </remarks>
        </member>
        <member name="P:Vintasoft.Barcode.WriterSettings.PDF417Rows">
            <summary>
            Gets or sets PDF417 row count.
            </summary>
            <value>
            Minimal value is 3, maximal value is 90.
            Default value is <b>-1</b> (row count calculated automatically).
            </value>
        </member>
        <member name="P:Vintasoft.Barcode.WriterSettings.PDF417Columns">
            <summary>
            Gets or sets PDF417 column count.
            </summary>        
            <value>
            Minimal value is 1, maximal value is 30.
            Default value is <b>-1</b> (column count calculated automatically).
            </value>
        </member>
        <member name="P:Vintasoft.Barcode.WriterSettings.PDF417ErrorCorrectionLevel">
            <summary>
            Gets or sets PDF417 error correction level.
            </summary>
            <value>Default value is
            <see cref="P:Vintasoft.Barcode.WriterSettings.PDF417ErrorCorrectionLevel" />.<b>Undefined</b> (error correction level
            calculated automatically).
            </value>
            <remarks>
            Parameter will be calculated automatically if value is
            <see cref="P:Vintasoft.Barcode.WriterSettings.PDF417ErrorCorrectionLevel" />.Undefined.
            </remarks>
        </member>
        <member name="P:Vintasoft.Barcode.WriterSettings.PDF417EncodingMode">
            <summary>
            Gets or sets PDF417 data encoding mode. 
            </summary>
            <value>Default value is <see cref="P:Vintasoft.Barcode.WriterSettings.PDF417EncodingMode" />.<b>Undefined</b> (encoding mode
            calculated automatically).</value>
        </member>
        <member name="P:Vintasoft.Barcode.WriterSettings.MicroPDF417Columns">
            <summary>
            Gets or sets MicroPDF417 column count.
            </summary>        
            <value>
            Minimal value is 1, maximal value is 4.
            Default value is <b>0</b> (column count calculated automatically).
            </value>
        </member>
        <member name="P:Vintasoft.Barcode.WriterSettings.MicroPDF417EncodingMode">
            <summary>
            Gets or sets MicroPDF417 data encoding mode. 
            </summary>
            <value>Default value is <see cref="P:Vintasoft.Barcode.WriterSettings.PDF417EncodingMode" />.<b>Undefined</b> (encoding mode
            calculated automatically).</value>
        </member>
        <member name="P:Vintasoft.Barcode.WriterSettings.MicroPDF417Symbol">
            <summary>
            Gets or sets the MicroPDF417 symbol size. 
            </summary>
            <value>Default value is 
            <see cref="T:Vintasoft.Barcode.BarcodeInfo.MicroPDF417SymbolType" />.<b>Undefined</b> (symbol size calculated automatically).
            </value>
        </member>
        <member name="P:Vintasoft.Barcode.WriterSettings.MicroPDF417RowHeight">
            <summary>
            Gets or sets the row height of Micro PDF417.
            </summary>
            <value>
            Minimal value is 2, maximal value is 64. Default value is <b>2</b>.
            </value>
            <seealso cref="P:Vintasoft.Barcode.WriterSettings.MinWidth" />
        </member>
        <member name="P:Vintasoft.Barcode.WriterSettings.OptionalCheckSum">
            <summary>
            Gets or sets a value indicating whether the barcode writer calculates an optional checksum.
            </summary>
            <value>
            <b>false</b> - optional checksum will not be calculated;<br />
            <b>true</b> - optional checksum will be calculated.<br />
            Default value is <b>false</b>.
            </value>
            <remarks>The following barcode symbologies have optional checksum:
            <ul>
            <li>Code 39</li>
            <li>Industrial Standard 2 of 5</li>
            <li>Interleaved 2 of 5</li>
            </ul>
            <b>We recommend use checksum!</b>
            </remarks>
        </member>
        <member name="P:Vintasoft.Barcode.WriterSettings.UseCode39ExtendedEncodeTable">
            <summary>
            Gets or sets a value indicating whether the barcode writer converts Code39 barcode
            to to Code39 Extended barcode if necessary.
            </summary>
            <value>Default value is <b>true</b>.</value>
        </member>
        <member name="P:Vintasoft.Barcode.WriterSettings.ValueFont">
            <summary>
            Gets or sets the font of the barcode value written as text.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.WriterSettings.ValueGap">
            <summary>
            Gets or sets the amount of gap between the text and the barcode when
            creating a barcode, in pixels. 
            </summary>
            <value>Default value is <b>0</b>.</value>
        </member>
        <member name="P:Vintasoft.Barcode.WriterSettings.ValueVisible">
            <summary>
            Gets or sets a value indicating whether the barcode writer draws the 1D barcode value on
            the barcode image.
            </summary>
            <value>Default value is <b>true</b>.</value>
        </member>
        <member name="P:Vintasoft.Barcode.WriterSettings.Value2DVisible">
            <summary>
            Gets or sets a value indicating whether the barcode writer draws the 2D barcode value on
            the barcode image.
            </summary>
            <value>Default value is <b>false</b>.</value>
        </member>
        <member name="P:Vintasoft.Barcode.WriterSettings.ValueAutoLetterSpacing">
            <summary>
            Gets or sets a value indicating whether the barcode writer draws the barcode value on
            the barcode image using the automatic letter spacing.
            </summary>
            <value>Default value is <b>true</b>.</value>
        </member>
        <member name="P:Vintasoft.Barcode.WriterSettings.EnableTelepenNumericMode">
            <summary>
            Gets or sets a value indicating whether the barcode writer enables the numeric mode
            in Telepen barcodes.
            </summary>
            <value>Default value is <b>false</b>.
            </value>
            <remarks>Numeric mode allows packing two digits into one character.</remarks>
        </member>
        <member name="P:Vintasoft.Barcode.WriterSettings.PostBarcodesADMultiplier">
            <summary>
            Gets or sets the Post barcodes Ascender/Descender height multiplier.
            </summary>
            <value>
            Default value is <b>1</b>. Minimal value is 0.5, maximal value is 1.7.
            </value>
        </member>
        <member name="P:Vintasoft.Barcode.WriterSettings.AustralianPostCustomerInfoFormat">
            <summary>
            Gets or sets the format of customer information field of Australia Post 4-state barcode.
            </summary>
            <value>Default value is
            <see cref="P:Vintasoft.Barcode.WriterSettings.AustralianPostCustomerInfoFormat" />.None.
            </value>
            <example>
            Please see example <see cref="M:Vintasoft.Barcode.BarcodeReader.ReadBarcodes">here</see>.
            </example>         
        </member>
        <member name="P:Vintasoft.Barcode.WriterSettings.RSS14StackedOmnidirectional">
            <summary>
            Gets or sets a value indicating whether the barcode writer writes RSS-14 Stacked Omnidirectional
            barcode.
            </summary>
            <value>Default value is <b>false</b>.</value>
        </member>
        <member name="P:Vintasoft.Barcode.WriterSettings.RSSExpandedStackedSegmentPerRow">
            <summary>
            Gets or sets the number of segments per row to be used in RSS
            Expanded Stacked barcode.
            </summary>
            <value>Possible values from 2 to 20. Default value is <b>4</b>.</value>
        </member>
        <member name="P:Vintasoft.Barcode.WriterSettings.RSSLinkageFlag">
            <summary>
            Gets or sets a value indicating whether the RSS linear component has linked 2D component.
            </summary>
            <value>
            <b>false</b> - RSS component does not have linked 2D component;<br />
            <b>true</b> - RSS component has linked 2D component, i.e. RSS barcode is composite barcode.<br />
            Default value is <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Barcode.WriterSettings.MaxiCodeResolution">
            <summary>
            Gets or sets the MaxiCode barcode resolution.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.WriterSettings.MaxiCodeEncodingMode">
            <summary>
            Gets or sets the MaxiCode encoding mode.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.WriterSettings.AztecSymbol">
            <summary>
            Gets or sets Aztec symbol type.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.WriterSettings.AztecErrorCorrectionDataPercent">
            <summary>
            Gets or sets a percent of error correction data in aztec symbol.
            </summary>
            <value>Default value is <b>25</b>.</value>
        </member>
        <member name="P:Vintasoft.Barcode.WriterSettings.AztecDataLayers">
            <summary>
            Gets or sets number of data layers in aztec symbol.
            </summary>
            <value>
            Default value is <b>0</b> (number of data layers calculated automatically).
            </value>
        </member>
        <member name="P:Vintasoft.Barcode.WriterSettings.AztecEncodingMode">
            <summary>
            Gets or sets Aztec data encoding mode.
            </summary>
            <value>Default value is <b><see cref="P:Vintasoft.Barcode.WriterSettings.AztecEncodingMode" />.Undefined</b>.</value>
        </member>
        <member name="P:Vintasoft.Barcode.WriterSettings.MSIChecksum">
            <summary>
            Gets or sets a checksum type of MSI barcode.
            </summary>
            <value>
            Default value is <b><see cref="T:Vintasoft.Barcode.BarcodeInfo.MSIChecksumType" />.Mod10</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Barcode.WriterSettings.ProcessSpecialSymbols">
            <summary>
            Gets or sets a value indicating whether the barcode writer processes the special symbols
            in <see cref="P:Vintasoft.Barcode.WriterSettings.Value">barcode value</see>.
            </summary>
            <value>
            <b>false</b> - barcode writer does not process the special characters in barcode value;<br />
            <b>true</b> - barcode writer processes the special characters in barcode value.<br />
            Default value is <b>true</b>.
            </value>
            <remarks>
            Avaiable special symbols for barcodes:<br />
            <b>Aztec</b>: 
            <see cref="T:Vintasoft.Barcode.BarcodeInfo.EciCharacterValueItem">&lt;ECInnnnnn&gt;</see>, 
            <see cref="P:Vintasoft.Barcode.BarcodeInfo.NonDataFlags.Fnc1">&lt;FNC1&gt;</see>.
            <br />
            <b>DataMatrix</b>:
            <see cref="T:Vintasoft.Barcode.BarcodeInfo.EciCharacterValueItem">&lt;ECInnnnnn&gt;</see>, 
            <see cref="P:Vintasoft.Barcode.BarcodeInfo.NonDataFlags.Fnc1">&lt;FNC1&gt;</see>,
            <see cref="P:Vintasoft.Barcode.BarcodeInfo.NonDataFlags.Macro05">&lt;MACRO_05&gt;</see>, 
            <see cref="P:Vintasoft.Barcode.BarcodeInfo.NonDataFlags.Macro06">&lt;MACRO_06&gt;</see>, 
            <see cref="P:Vintasoft.Barcode.BarcodeInfo.NonDataFlags.ReaderProgramming">&lt;READER_PROGRAMMING&gt;</see>.
            <br />
            <b>Code128</b>: 
            <see cref="P:Vintasoft.Barcode.BarcodeInfo.NonDataFlags.Fnc1">&lt;FNC1&gt;</see>,
            <see cref="P:Vintasoft.Barcode.BarcodeInfo.NonDataFlags.Fnc2">&lt;FNC2&gt;</see>,
            <see cref="P:Vintasoft.Barcode.BarcodeInfo.NonDataFlags.Fnc3">&lt;FNC3&gt;</see>,
            <see cref="P:Vintasoft.Barcode.BarcodeInfo.NonDataFlags.Fnc4">&lt;FNC4&gt;</see>.
            <br />
            <b>QR</b>:
            <see cref="T:Vintasoft.Barcode.BarcodeInfo.EciCharacterValueItem">&lt;ECInnnnnn&gt;</see>, 
            <see cref="P:Vintasoft.Barcode.BarcodeInfo.NonDataFlags.Fnc1">&lt;FNC1&gt;</see>.
            <br />
            <b>PDF417, PDF417 Compact</b>: 
            <see cref="T:Vintasoft.Barcode.BarcodeInfo.EciCharacterValueItem">&lt;ECInnnnnn&gt;</see>, 
            <see cref="P:Vintasoft.Barcode.BarcodeInfo.NonDataFlags.LinkageFlag">&lt;LINKAGE&gt;</see>,
            <see cref="P:Vintasoft.Barcode.BarcodeInfo.NonDataFlags.EanUccLinkageFlag">&lt;LINKAGE_EANUCC&gt;</see>,
            <see cref="P:Vintasoft.Barcode.BarcodeInfo.NonDataFlags.ReaderProgramming">&lt;READER_PROGRAMMING&gt;</see>.
            <br />
            <b>RSS Expanded, RSS Expanded Stacked</b>:
            <see cref="P:Vintasoft.Barcode.BarcodeInfo.NonDataFlags.Fnc1">&lt;FNC1&gt;</see>.
            </remarks>
            <example>
            Please see example <see cref="T:Vintasoft.Barcode.BarcodeInfo.NonDataFlags">here</see>.<br />
            </example>
            <seealso cref="T:Vintasoft.Barcode.BarcodeInfo.NonDataFlags" />
        </member>
        <member name="E:Vintasoft.Barcode.WriterSettings.Changed">
            <summary>
            Occurs after writer settings is changed.
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.WriterSettingsException">
            <summary>
            The exception that is thrown when an <see cref="P:Vintasoft.Barcode.BarcodeWriter.Settings" /> is incorrect.
            </summary>
        </member>
        <member name="M:Vintasoft.Barcode.WriterSettingsException.#ctor(Vintasoft.Barcode.WriterSettingsExceptionType)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Barcode.WriterSettingsException" /> class. 
            </summary>
            <param name="exceptionType">Exectpion type.</param>
        </member>
        <member name="M:Vintasoft.Barcode.WriterSettingsException.#ctor(Vintasoft.Barcode.WriterSettingsExceptionType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Barcode.WriterSettingsException" /> class. 
            </summary>
            <param name="exceptionType">Exectpion type.</param>
            <param name="textContent">Exception text content.</param>
        </member>
        <member name="P:Vintasoft.Barcode.WriterSettingsException.ExceptionType">
            <summary>
            Gets a exception type.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.WriterSettingsException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.GS1.GS1Codec">
            <summary>
            Class that allows to encode/decode the GS1 information from barcode.
            </summary>
            <example>This example shows how to generate Code128 barcode with GS1 information (GS1-128) and read
            generated barcode.
            <code lang="VB.NET">   
            Imports System.Drawing   
            Imports System.Text   
               
            Imports Vintasoft.Barcode   
            Imports Vintasoft.Barcode.BarcodeInfo   
            Imports Vintasoft.Barcode.GS1   
            Imports Vintasoft.Barcode.SymbologySubsets   
               
            ''' &lt;summary&gt;   
            ''' Test that shows how to encode the barcode data in GS1 format using the GS1Codec class,   
            ''' create image with GS1-128 barcode,   
            ''' read GS1-128 barcode from image and parse data stored in GS1 format.   
            ''' &lt;/summary&gt;   
            Class GS1CodecExample   
               
            	''' &lt;summary&gt;   
            	''' Run the test.   
            	''' &lt;/summary&gt;   
            	Public Shared Sub TestGS1Codec()   
            		Dim valueVisible As Boolean = True   
               
            		' form the GS1 Application identifiers   
               
            		Dim aiValues As GS1ApplicationIdentifierValue() = New GS1ApplicationIdentifierValue(3) {}   
            		Dim ai As GS1ApplicationIdentifier   
            		' 01 - Global Trade Item Number   
            		ai = GS1ApplicationIdentifiers.FindApplicationIdentifier("01")   
            		aiValues(0) = New GS1ApplicationIdentifierValue(ai, "0123456789123C")   
            		' 310 - Net weight, kilograms   
            		ai = GS1ApplicationIdentifiers.FindApplicationIdentifier("310")   
            		aiValues(1) = New GS1ApplicationIdentifierValue(ai, "0012.55")   
            		' 30 - Count of Items   
            		ai = GS1ApplicationIdentifiers.FindApplicationIdentifier("30")   
            		aiValues(2) = New GS1ApplicationIdentifierValue(ai, "10")   
            		' 90 - Company Internal Information   
            		ai = GS1ApplicationIdentifiers.FindApplicationIdentifier("90")   
            		aiValues(3) = New GS1ApplicationIdentifierValue(ai, "ABCabc12345")   
               
            		' get GS1 printable value   
            		Dim printableValue As New StringBuilder()   
            		For Each value As GS1ApplicationIdentifierValue In aiValues   
            			printableValue.Append(value)   
            		Next   
               
               
            		' create the barcode writer   
            		Dim writer As New BarcodeWriter()   
               
            		' specify that writer must create output image as 24-bpp image   
            		writer.Settings.PixelFormat = BarcodeImagePixelFormat.Bgr24   
               
            		' specify that writer must generate Code128 barcode   
            		writer.Settings.Barcode = BarcodeType.Code128   
               
            		' encode GS1 value in GS1-128 symbology   
            		writer.Settings.Value = GS1Codec.GS1_128.Encode(aiValues, writer.Settings)   
            		' set printable value   
            		If valueVisible Then   
            			writer.Settings.ValueVisible = True   
            			writer.Settings.PrintableValue = printableValue.ToString()   
            		Else   
            			writer.Settings.ValueVisible = False   
            		End If   
               
            		' create image with barcode   
            		Using barcodeImage As Image = writer.GetBarcodeAsBitmap()   
            			' delete aiValues array   
            			aiValues = Nothing   
               
            			' read barcode with GS1 value   
               
            			' create barcode reader   
            			Using reader As New BarcodeReader()   
            				' specify that reader must search for GS1-128 barcodes only   
               
            				reader.Settings.ScanBarcodeTypes = BarcodeType.None   
            				reader.Settings.ScanBarcodeSubsets.Add(BarcodeSymbologySubsets.GS1_128)   
               
            				' read barcode from image   
            				Dim infos As IBarcodeInfo() = reader.ReadBarcodes(barcodeImage)   
               
            				' gets a GS1 Application identifiers from barcode value               
            				aiValues = DirectCast(infos(0), GS1BarcodeInfo).ApplicationIdentifierValues   
               
            				printableValue = New StringBuilder()   
               
            				' print Application identifiers values   
            				For i As Integer = 0 To aiValues.Length - 1   
            					Dim aiValue As GS1ApplicationIdentifierValue = aiValues(i)   
            					ai = aiValue.ApplicationIdentifier   
            					Console.WriteLine(String.Format("[{0}] {1}", i + 1, aiValue))   
            					Console.WriteLine(String.Format("Application identifier   : {0}", ai.ApplicationIdentifier))   
            					Console.WriteLine(String.Format("Value                    : {0}", aiValue.Value))   
            					Console.WriteLine(String.Format("Data title               : {0}", ai.DataTitle))   
            					Console.WriteLine(String.Format("Data content             : {0}", ai.DataContent))   
            					Console.WriteLine(String.Format("Format                   : {0}", ai.Format))   
            					Console.WriteLine(String.Format("Is contains decimal point: {0}", ai.IsContainsDecimalPoint))   
            					Console.WriteLine(String.Format("Is variable length       : {0}", ai.IsVariableLength))   
            					Console.WriteLine()   
            					printableValue.Append(aiValue.ToString())   
            				Next   
               
            				' print GS1 printable value   
            				Console.WriteLine("Printable GS1 value: " &amp; printableValue.ToString())   
            			End Using   
            		End Using   
            	End Sub   
            End Class
            </code>
            <code lang="C#">
            using System;
            using System.Drawing;
            using System.Text;
            
            using Vintasoft.Barcode;
            using Vintasoft.Barcode.BarcodeInfo;
            using Vintasoft.Barcode.GS1;
            using Vintasoft.Barcode.SymbologySubsets;
            
            /// &lt;summary&gt;
            /// Test that shows how to encode the barcode data in GS1 format using the GS1Codec class,
            /// create image with GS1-128 barcode,
            /// read GS1-128 barcode from image and parse data stored in GS1 format.
            /// &lt;/summary&gt;
            class GS1CodecExample
            {
            
                /// &lt;summary&gt;
                /// Run the test.
                /// &lt;/summary&gt;
                public static void TestGS1Codec()
                {
                    bool valueVisible = true;
            
                    // form the GS1 Application identifiers
            
                    GS1ApplicationIdentifierValue[] aiValues = new GS1ApplicationIdentifierValue[4];
                    GS1ApplicationIdentifier ai;
                    // 01 - Global Trade Item Number
                    ai = GS1ApplicationIdentifiers.FindApplicationIdentifier("01");
                    aiValues[0] = new GS1ApplicationIdentifierValue(ai, "0123456789123C");
                    // 310 - Net weight, kilograms
                    ai = GS1ApplicationIdentifiers.FindApplicationIdentifier("310");
                    aiValues[1] = new GS1ApplicationIdentifierValue(ai, "0012.55");
                    // 30 - Count of Items
                    ai = GS1ApplicationIdentifiers.FindApplicationIdentifier("30");
                    aiValues[2] = new GS1ApplicationIdentifierValue(ai, "10");
                    // 90 - Company Internal Information
                    ai = GS1ApplicationIdentifiers.FindApplicationIdentifier("90");
                    aiValues[3] = new GS1ApplicationIdentifierValue(ai, "ABCabc12345");
            
                    // get GS1 printable value
                    StringBuilder printableValue = new StringBuilder();
                    foreach (GS1ApplicationIdentifierValue value in aiValues)
                        printableValue.Append(value);
            
            
                    // create the barcode writer
                    BarcodeWriter writer = new BarcodeWriter();
            
                    // specify that writer must create output image as 24-bpp image
                    writer.Settings.PixelFormat = BarcodeImagePixelFormat.Bgr24;
            
                    // specify that writer must generate Code128 barcode
                    writer.Settings.Barcode = BarcodeType.Code128;
            
                    // encode GS1 value in GS1-128 symbology
                    writer.Settings.Value = GS1Codec.GS1_128.Encode(aiValues, writer.Settings);
                    // set printable value
                    if (valueVisible)
                    {
                        writer.Settings.ValueVisible = true;
                        writer.Settings.PrintableValue = printableValue.ToString();
                    }
                    else
                    {
                        writer.Settings.ValueVisible = false;
                    }
            
                    // create image with barcode
                    using (Image barcodeImage = writer.GetBarcodeAsBitmap())
                    {
                        // delete aiValues array
                        aiValues = null;
            
                        // read barcode with GS1 value
            
                        // create barcode reader
                        using (BarcodeReader reader = new BarcodeReader())
                        {
                            // specify that reader must search for GS1-128 barcodes only
            
                            reader.Settings.ScanBarcodeTypes = BarcodeType.None;
                            reader.Settings.ScanBarcodeSubsets.Add(BarcodeSymbologySubsets.GS1_128);
                            
                            // read barcode from image
                            IBarcodeInfo[] infos = reader.ReadBarcodes(barcodeImage);
            
                            // gets a GS1 Application identifiers from barcode value            
                            aiValues = ((GS1BarcodeInfo)infos[0]).ApplicationIdentifierValues;
            
                            printableValue = new StringBuilder();
            
                            // print Application identifiers values
                            for (int i = 0; i &lt; aiValues.Length; i++)
                            {
                                GS1ApplicationIdentifierValue aiValue = aiValues[i];
                                ai = aiValue.ApplicationIdentifier;
                                Console.WriteLine(string.Format("[{0}] {1}", i + 1, aiValue));
                                Console.WriteLine(string.Format("Application identifier   : {0}", ai.ApplicationIdentifier));
                                Console.WriteLine(string.Format("Value                    : {0}", aiValue.Value));
                                Console.WriteLine(string.Format("Data title               : {0}", ai.DataTitle));
                                Console.WriteLine(string.Format("Data content             : {0}", ai.DataContent));
                                Console.WriteLine(string.Format("Format                   : {0}", ai.Format));
                                Console.WriteLine(string.Format("Is contains decimal point: {0}", ai.IsContainsDecimalPoint));
                                Console.WriteLine(string.Format("Is variable length       : {0}", ai.IsVariableLength));
                                Console.WriteLine();
                                printableValue.Append(aiValue.ToString());
                            }
            
                            // print GS1 printable value
                            Console.WriteLine("Printable GS1 value: " + printableValue.ToString());
                        }
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Barcode.GS1.GS1Codec.Encode(Vintasoft.Barcode.GS1.GS1ApplicationIdentifierValue[],Vintasoft.Barcode.WriterSettings)">
            <summary>
            Encodes an array of <see cref="T:Vintasoft.Barcode.GS1.GS1ApplicationIdentifierValue" /> values to barcode value.
            </summary>
            <param name="applicationIdentifierValues">Array of
            <see cref="T:Vintasoft.Barcode.GS1.GS1ApplicationIdentifierValue" /> values.</param>
            <param name="writerSettings">A writer settings which must be used for
            encoding GS1 value.</param>
            <returns>Encoded value.</returns>
            <example>
            Please see example <see cref="T:Vintasoft.Barcode.GS1.GS1Codec">here</see>.
            </example>
        </member>
        <member name="M:Vintasoft.Barcode.GS1.GS1Codec.Decode(System.String)">
            <summary>
            Decodes GS1 barcode value into array of <see cref="T:Vintasoft.Barcode.GS1.GS1ApplicationIdentifierValue" /> values.
            </summary>
            <param name="barcodeValue">GS1 barcode value.</param>
            <returns>Array of <see cref="T:Vintasoft.Barcode.GS1.GS1ApplicationIdentifierValue" />.</returns>
            <example>
            Please see example <see cref="T:Vintasoft.Barcode.GS1.GS1Codec">here</see>.
            </example>
        </member>
        <member name="M:Vintasoft.Barcode.GS1.GS1Codec.GetSymbologyFormat(System.String)">
            <summary>
            Returns GS1 symbology format for specified GS1 barcode value.
            </summary>
            <param name="barcodeValue">GS1 barcode value.</param>
            <returns>GS1 symbology format.</returns>
        </member>
        <member name="P:Vintasoft.Barcode.GS1.GS1Codec.SymbologyIdentifier">
            <summary>
            Gets a symbology identifier.
            </summary>
            <remarks>
            The symbology identifier is not encoded in the bar code, but is generated by the decoder after
            decoding and is transmitted as a preamble to the data message.
            </remarks>
        </member>
        <member name="P:Vintasoft.Barcode.GS1.GS1Codec.SymbologyFormat">
            <summary>
            Gets a symbology format.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.GS1.GS1Codec.GS1DataMatrix">
            <summary>
            Gets a GS1 DataMatrix codec (for encoding GS1 value in DataMatrix barcode). 
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.GS1.GS1Codec.GS1_128">
            <summary>
            Gets a GS1-128 codec (for encoding GS1 value in Code 128 barcode).
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.GS1.GS1Codec.GS1DataBar">
            <summary>
            Gets a GS1 DataBar codec (for encoding GS1 value in RSS barcodes).
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.GS1.GS1Codec.GS1Aztec">
            <summary>
            Gets a GS1 Aztec codec (for encoding GS1 value in Aztec barcodes).
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.GS1.GS1Codec.GS1QR">
            <summary>
            Gets a GS1 QR codec (for encoding GS1 value in QR barcodes).
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.GS1.GS1ApplicationIdentifier">
            <summary>
            Class that contains information about GS1 Application Identifier.
            </summary>
            <example>
            Please see example <see cref="T:Vintasoft.Barcode.GS1.GS1Codec">here</see>.
            </example>
        </member>
        <member name="M:Vintasoft.Barcode.GS1.GS1ApplicationIdentifier.CalculateStandardCheckDigit(System.String)">
            <summary>
            Calculates the standard check digit for specified value.
            </summary>
            <param name="value">Value for which check digit must be calculated.</param>
        </member>
        <member name="P:Vintasoft.Barcode.GS1.GS1ApplicationIdentifier.ApplicationIdentifier">
            <summary>
            Gets the application identifier.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.GS1.GS1ApplicationIdentifier.DataContent">
            <summary>
            Gets the data content.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.GS1.GS1ApplicationIdentifier.DataTitle">
            <summary>
            Gets the data title.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.GS1.GS1ApplicationIdentifier.Format">
            <summary>
            Gets the data format.
            </summary>
            <value>
            'Nk' - k numeric digits, fixed length<br />
            'NkC' - k numeric digits + check digit, fixed length<br />
            'N..k' - up to k numeric digits<br />
            'X..k' - up to k characters ISO646
            </value>
        </member>
        <member name="P:Vintasoft.Barcode.GS1.GS1ApplicationIdentifier.IsVariableLength">
            <summary>
            Determines that Application Identifier has variable length.
            </summary>
            <value>
            <b>true</b> if the Application Identifier has variable length, otherwise <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Barcode.GS1.GS1ApplicationIdentifier.IsContainsDecimalPoint">
            <summary>
            Determines that Application Identifier can contains a decimal point.
            </summary>
            <value>
            <b>true</b> if the Application Identifier can contains a decimal point, otherwise <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Barcode.GS1.GS1ApplicationIdentifier.ValueLength">
            <summary>
            Gets the length of the Application Identifier value.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.GS1.GS1ApplicationIdentifier.TotalLength">
            <summary>
            Gets the total length of the Application Identifier.
            </summary>
            <value>
            Maximal length of the Application Identifier if the Application Identifier has variable length,
            otherwise the total length of the Application Identifier.
            </value>
        </member>
        <member name="P:Vintasoft.Barcode.GS1.GS1ApplicationIdentifier.CharacterSet">
            <summary>
            Gets a character set type of application indentifier.
            </summary>
            <remarks>
            See GS1 General Specification: 7.11. The GS1 Subset of International Standard ISO/IEC 646.
            </remarks>
        </member>
        <member name="T:Vintasoft.Barcode.GS1.GS1ApplicationIdentifiers">
            <summary>
            Class that stores information about available GS1 Application Identifiers.
            </summary>
            <remarks>
            Class contains information about GS1 Application Identifiers compatible
            with GS1 General Specifications version 14.
            </remarks>
            <example>
            Please see example <see cref="T:Vintasoft.Barcode.GS1.GS1Codec">here</see>.
            </example>
        </member>
        <member name="M:Vintasoft.Barcode.GS1.GS1ApplicationIdentifiers.FindApplicationIdentifier(System.String)">
            <summary>
            Searches for an application identifier at specified number. 
            </summary>
            <param name="aiNumber">Application identifier number.</param>
            <returns><see cref="T:Vintasoft.Barcode.GS1.GS1ApplicationIdentifier" /> instance if application identifier
            with specified number exists, otherwise <b>null</b>.</returns>
        </member>
        <member name="M:Vintasoft.Barcode.GS1.GS1ApplicationIdentifiers.IndexOfApplicationIdentifier(System.String)">
            <summary>
            Searches for the specified application identifier and returns 
            the index in the <see cref="P:Vintasoft.Barcode.GS1.GS1ApplicationIdentifiers.ApplicationIdentifiers" /> array.
            </summary>
            <param name="aiNumber">Application identifier number.</param>
            <returns>Index in <see cref="P:Vintasoft.Barcode.GS1.GS1ApplicationIdentifiers.ApplicationIdentifiers" /> array if application identifier
            with specified number exists, otherwise <b>-1</b>.</returns>
        </member>
        <member name="P:Vintasoft.Barcode.GS1.GS1ApplicationIdentifiers.ApplicationIdentifiers">
            <summary>
            Gets a list of application identifiers.
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.GS1.GS1ApplicationIdentifierValue">
            <summary>
            Class that contains information about the Application Identifier value.
            </summary>
            <example>
            Please see example <see cref="T:Vintasoft.Barcode.GS1.GS1Codec">here</see>.
            </example>
        </member>
        <member name="M:Vintasoft.Barcode.GS1.GS1ApplicationIdentifierValue.#ctor(Vintasoft.Barcode.GS1.GS1ApplicationIdentifier,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Barcode.GS1.GS1ApplicationIdentifierValue" /> class. 
            </summary>
            <param name="applicationIdentifier">Application identifier.</param>
            <param name="value">Application identifier value.</param>
        </member>
        <member name="M:Vintasoft.Barcode.GS1.GS1ApplicationIdentifierValue.ToString">
            <summary>
            Converts the <see cref="T:Vintasoft.Barcode.GS1.GS1ApplicationIdentifierValue" /> of this instance 
            to its equivalent printable string.
            </summary>
            <returns>Printable string of this <see cref="T:Vintasoft.Barcode.GS1.GS1ApplicationIdentifierValue" />.</returns>
        </member>
        <member name="P:Vintasoft.Barcode.GS1.GS1ApplicationIdentifierValue.ApplicationIdentifier">
            <summary>
            Gets the Application Identifier.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.GS1.GS1ApplicationIdentifierValue.Value">
            <summary>
            Gets a value of the Application Identifier.
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.BarcodeGlobalSettings">
            <summary>
            Class that contains global information about SDK.
            </summary>
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeGlobalSettings.RegisterBarcodeReader(System.String,System.String,System.String)">
            <summary>
            Registers barcode reader.
            </summary>
            <param name="user">User name.</param>
            <param name="email">Email or server name.</param>
            <param name="regCode">Registration code.</param>
        </member>
        <member name="M:Vintasoft.Barcode.BarcodeGlobalSettings.RegisterBarcodeWriter(System.String,System.String,System.String)">
            <summary>
            Registers barcode writer.
            </summary>
            <param name="user">User name.</param>
            <param name="email">Email or server name.</param>
            <param name="regCode">Registration code.</param>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeGlobalSettings.ProductVersion">
            <summary>
            Gets the product version.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeGlobalSettings.AssemblyVersion">
            <summary>
            Gets the assembly version.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeGlobalSettings.IsDemoVersion">
            <summary>
            Gets a value indicating whether SDK is used in demo mode.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeGlobalSettings.SDKPackage">
            <summary>
            Gets the version of SDK package.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.BarcodeGlobalSettings.ServerName">
            <summary>
            Gets the name of the server where SDK is used.
            </summary>
            <value>
            Null - SDK is used in non server environment;
            not empty string (name of the server) - SDK is used in server environment.
            </value>
        </member>
        <member name="T:Vintasoft.Barcode.SDKPackage">
            <summary>
            Specifies available packages of SDK.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.SDKPackage.Reader1D">
            <summary>
            Can read 1D and postal barcodes.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.SDKPackage.Reader2D">
            <summary>
            Can read 2D barcodes.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.SDKPackage.Writer1D">
            <summary>
            Can write 1D and postal barcodes.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.SDKPackage.Writer2D">
            <summary>
            Can write 2D barcodes.
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.QualityTests.ISO15415QualityTest">
            <summary>
            ISO/IEC 15415 barcode print quality test for 2D barcodes. 
            </summary>
            <remarks>
            Test can be used for testing the print quality of 2D matrix barcodes (Aztec,
            DataMatrix, QR Code, Micro QR Code). The algorithm of test is based on ISO/IEC 15415.
            Test allows to evaluate the barcode's print quality using the following parameters:<br />
            <ul>
            <li><see cref="P:Vintasoft.Barcode.QualityTests.ISO15415QualityTest.DecodeGrade">Decode</see></li>
            <li><see cref="P:Vintasoft.Barcode.QualityTests.ISO15415QualityTest.MaxReflectance">Max Reflectance (Rmax)</see></li>
            <li><see cref="P:Vintasoft.Barcode.QualityTests.ISO15415QualityTest.MinReflectance">Min Reflectance (Rmin)</see></li>
            <li><see cref="P:Vintasoft.Barcode.QualityTests.ISO15415QualityTest.SymbolContrast">Symbol Contrast (SC)</see></li>
            <li><see cref="P:Vintasoft.Barcode.QualityTests.ISO15415QualityTest.ModulationGrade">Modulation (MOD)</see></li>
            <li><see cref="P:Vintasoft.Barcode.QualityTests.ISO15415QualityTest.ReflectanceMarginGrade">Reflectance Margin</see></li>
            <li><see cref="P:Vintasoft.Barcode.QualityTests.ISO15415QualityTest.FixedPatternDamageGrade">Fixed Pattern Damage</see></li>
            <li><see cref="P:Vintasoft.Barcode.QualityTests.ISO15415QualityTest.AxialNonuniformityGrade">Axial Nonuniformity</see></li>
            <li><see cref="P:Vintasoft.Barcode.QualityTests.ISO15415QualityTest.GridNonuniformityGrade">Grid Nonuniformity</see></li>
            <li><see cref="P:Vintasoft.Barcode.QualityTests.ISO15415QualityTest.UnusedErrorCorrection">Unused Error Correction (UEC)</see></li>
            </ul>
            <br />
            Also test can be used for testing the print quality of 2D multi-row barcodes with
            cross-row scanning ability (PDF417, PDF417Compact, MicroPDF417).
            The algorithm of test is based on ISO/IEC 15415.
            Test allows to evaluate the barcode's print quality using the following parameters:<br />
            <ul>
            <li><see cref="P:Vintasoft.Barcode.QualityTests.ISO15415QualityTest.DecodeGrade">Decode</see></li>
            <li><see cref="P:Vintasoft.Barcode.QualityTests.ISO15415QualityTest.StartPatternTestGrade">ISO15416 Start/RAP pattern test</see></li>
            <li><see cref="P:Vintasoft.Barcode.QualityTests.ISO15415QualityTest.CenterPatternTestGrade">ISO15416 Center (RAP) pattern test</see></li>
            <li><see cref="P:Vintasoft.Barcode.QualityTests.ISO15415QualityTest.StopPatternTestGrade">ISO15416 Stop/RAP pattern test</see></li>
            <li><see cref="P:Vintasoft.Barcode.QualityTests.ISO15415QualityTest.UnusedErrorCorrection">Unused Error Correction (UEC)</see></li>
            <li><see cref="P:Vintasoft.Barcode.QualityTests.ISO15415QualityTest.CodewordYieldGrade">Codeword Yield</see></li>
            <li><see cref="P:Vintasoft.Barcode.QualityTests.ISO15415QualityTest.CodewordPrintQualityGrade">Codeword Print Quality</see></li>
            </ul>
            <br />
            </remarks>
            <example>
            Here is an example that demonstrates how to test print quality of 
            matrix 2D barcodes (Aztec, DataMatrix, QR and MicroQR) and 
            multi-row 2D barcodes (PDF417, PDF417Compact and MicroPDF417):
            <code lang="VB.NET">   
            Imports System.Drawing   
               
            Imports Vintasoft.Barcode   
            Imports Vintasoft.Barcode.BarcodeInfo   
            Imports Vintasoft.Barcode.QualityTests   
               
            ''' &lt;summary&gt;   
            ''' Test that shows how to test print quality of matrix 2D barcodes    
            ''' (Aztec, DataMatrix, QR and MicroQR).   
            ''' &lt;/summary&gt;   
            Class ISO15415QualityTestMatrixExample   
               
            	''' &lt;summary&gt;   
            	''' Run the test.   
            	''' &lt;/summary&gt;   
            	Public Shared Sub Test()   
            		' load image with barcode from file   
            		Using barcodeImage As Image = Image.FromFile("test1.jpg")   
            			' read barcodes from image and test print quality of 2D barcodes   
            			TestBarcodePrintQuality(barcodeImage)   
            		End Using   
            	End Sub   
               
            	''' &lt;summary&gt;   
            	''' Read barcodes from image and test print quality of 2D barcodes.   
            	''' &lt;/summary&gt;   
            	Public Shared Sub TestBarcodePrintQuality(imageWithBarcodes As Image)   
            		' create the barcode reader   
            		Using reader As New BarcodeReader()   
            			' specify that reader must collect information for quality test   
            			reader.Settings.CollectTestInformation = True   
               
            			' specify that reader must search for Aztec, DataMatrix, QR and MicroQR barcodes only   
            			reader.Settings.ScanBarcodeTypes = BarcodeType.Aztec Or BarcodeType.DataMatrix Or BarcodeType.QR Or BarcodeType.MicroQR   
               
            			' read barcodes   
            			Dim barcodeInfos As IBarcodeInfo() = reader.ReadBarcodes(imageWithBarcodes)   
               
            			' for each found barcode   
            			For i As Integer = 0 To barcodeInfos.Length - 1   
            				' test print quality of barcode using ISO 15415 test   
            				Dim test As New ISO15415QualityTest(DirectCast(barcodeInfos(i), BarcodeInfo2D), imageWithBarcodes)   
               
            				' print results of ISO 15415 test   
               
            				Console.WriteLine(String.Format("[{0}] {1}", barcodeInfos(i).BarcodeType, barcodeInfos(i).Value))   
            				Console.WriteLine(String.Format("Decode                 : {0}", GradeToString(test.DecodeGrade)))   
            				Console.WriteLine(String.Format("Unused error correction: {0} ({1}%)", GradeToString(test.UnusedErrorCorrectionGrade), test.UnusedErrorCorrection))   
            				Console.WriteLine(String.Format("Symbol contrast        : {0} ({1}%)", GradeToString(test.SymbolContrastGrade), test.SymbolContrast))   
            				Console.WriteLine(String.Format("Axial nonuniformity    : {0} ({1})", GradeToString(test.AxialNonuniformityGrade), test.AxialNonuniformity))   
            				Console.WriteLine(String.Format("Grid nonuniformity     : {0} ({1} cell)", GradeToString(test.GridNonuniformityGrade), test.GridNonuniformity))   
            				Console.WriteLine(String.Format("Modulation             : {0}", GradeToString(test.ModulationGrade)))   
            				Console.WriteLine(String.Format("Reflectance margin     : {0}", GradeToString(test.ReflectanceMarginGrade)))   
            				Console.WriteLine(String.Format("-------------Scan grade: {0}", GradeToString(test.ScanGrade)))   
            				Console.WriteLine()   
            			Next   
            		End Using   
            	End Sub   
               
            	''' &lt;summary&gt;   
            	''' Converts ISO15415 quality grade into string value.   
            	''' &lt;/summary&gt;   
            	Private Shared Function GradeToString(grade As ISO15415QualityGrade) As String   
            		Return String.Format("{0}({1})", CInt(grade).ToString(), grade)   
            	End Function   
               
            End Class
            </code>
            <code lang="VB.NET">   
            Imports System.Drawing   
               
            Imports Vintasoft.Barcode   
            Imports Vintasoft.Barcode.BarcodeInfo   
            Imports Vintasoft.Barcode.QualityTests   
               
            ''' &lt;summary&gt;   
            ''' Test that shows how to test print quality of multi-row 2D barcodes   
            ''' (PDF417, PDF417Compact and MicroPDF417).   
            ''' &lt;/summary&gt;   
            Class ISO15415QualityTestMultiRowExample   
               
            	''' &lt;summary&gt;   
            	''' Run the test.   
            	''' &lt;/summary&gt;   
            	Public Shared Sub Test()   
            		' load image with barcode from file   
            		Using barcodeImage As Image = Image.FromFile("test1.jpg")   
            			' read barcodes from image and test print quality of 2D barcodes   
            			TestBarcodePrintQuality(barcodeImage)   
            		End Using   
            	End Sub   
               
            	''' &lt;summary&gt;   
            	''' Read barcodes from image and test print quality of 2D barcodes.   
            	''' &lt;/summary&gt;   
            	Public Shared Sub TestBarcodePrintQuality(imageWithBarcodes As Image)   
            		' create the barcode reader   
            		Using reader As New BarcodeReader()   
            			' specify that reader must collect information for quality test   
            			reader.Settings.CollectTestInformation = True   
               
            			' specify that reader must search for PDF417, PDF417Compact and MicroPDF417 barcodes only   
            			reader.Settings.ScanBarcodeTypes = BarcodeType.PDF417 Or BarcodeType.PDF417Compact Or BarcodeType.MicroPDF417   
               
            			' read barcodes   
            			Dim barcodeInfos As IBarcodeInfo() = reader.ReadBarcodes(imageWithBarcodes)   
               
            			' for each found barcode   
            			For i As Integer = 0 To barcodeInfos.Length - 1   
            				' test print quality of barcode using ISO 15415 test   
            				Dim test As New ISO15415QualityTest(DirectCast(barcodeInfos(i), BarcodeInfo2D), imageWithBarcodes)   
               
            				' print results of ISO 15415 test   
               
            				Console.WriteLine(String.Format("[{0}] {1}", barcodeInfos(i).BarcodeType, barcodeInfos(i).Value))   
            				Console.WriteLine(String.Format("Decode                 : {0}", GradeToString(test.DecodeGrade)))   
            				Console.WriteLine(String.Format("Unused error correction: {0} ({1}%)", GradeToString(test.UnusedErrorCorrectionGrade), test.UnusedErrorCorrection))   
            				If test.StartPatternTestGrade &lt;&gt; ISO15415QualityGrade.Unavailable Then   
            					Console.WriteLine(String.Format("Start pattern test:      {0}", GradeToString(test.StartPatternTestGrade), test.StartPatternTestGrade))   
            				End If   
            				If test.CenterPatternTestGrade &lt;&gt; ISO15415QualityGrade.Unavailable Then   
            					Console.WriteLine(String.Format("Center pattern test:     {0}", GradeToString(test.CenterPatternTestGrade), test.CenterPatternTest))   
            				End If   
            				If test.CenterPatternTestGrade &lt;&gt; ISO15415QualityGrade.Unavailable Then   
            					Console.WriteLine(String.Format("Stop pattern test:       {0}", GradeToString(test.CenterPatternTestGrade), test.CenterPatternTestGrade))   
            				End If   
            				Console.WriteLine(String.Format("Codeword yield:          {0}", GradeToString(test.CodewordYieldGrade), test.CodewordYieldGrade))   
            				Console.WriteLine(String.Format("Codeword print quality:  {0}", GradeToString(test.CodewordPrintQualityGrade), test.CodewordPrintQualityGrade))   
            				Console.WriteLine(String.Format("-------------Scan grade: {0}", GradeToString(test.ScanGrade)))   
            				Console.WriteLine()   
            			Next   
            		End Using   
            	End Sub   
               
            	''' &lt;summary&gt;   
            	''' Converts ISO15415 quality grade into string value.   
            	''' &lt;/summary&gt;   
            	Private Shared Function GradeToString(grade As ISO15415QualityGrade) As String   
            		Return String.Format("{0}({1})", CInt(grade).ToString(), grade)   
            	End Function   
               
            End Class
            </code>
            <code lang="C#">
            using System;
            using System.Drawing;
            
            using Vintasoft.Barcode;
            using Vintasoft.Barcode.BarcodeInfo;
            using Vintasoft.Barcode.QualityTests;
            
            /// &lt;summary&gt;
            /// Test that shows how to test print quality of matrix 2D barcodes 
            /// (Aztec, DataMatrix, QR and MicroQR).
            /// &lt;/summary&gt;
            class ISO15415QualityTestMatrixExample
            {
            
                /// &lt;summary&gt;
                /// Run the test.
                /// &lt;/summary&gt;
                public static void Test()
                {
                    // load image with barcode from file
                    using (Image barcodeImage = Image.FromFile("test1.jpg"))
                    {
                        // read barcodes from image and test print quality of 2D barcodes
                        TestBarcodePrintQuality(barcodeImage);
                    }
                }
                
                /// &lt;summary&gt;
                /// Read barcodes from image and test print quality of 2D barcodes.
                /// &lt;/summary&gt;
                public static void TestBarcodePrintQuality(Image imageWithBarcodes)
                {
                    // create the barcode reader
                    using (BarcodeReader reader = new BarcodeReader())
                    {
                        // specify that reader must collect information for quality test
                        reader.Settings.CollectTestInformation = true;
                        
                        // specify that reader must search for Aztec, DataMatrix, QR and MicroQR barcodes only
                        reader.Settings.ScanBarcodeTypes = 
                            BarcodeType.Aztec | BarcodeType.DataMatrix |
                            BarcodeType.QR | BarcodeType.MicroQR;
                        
                        // read barcodes
                        IBarcodeInfo[] barcodeInfos = reader.ReadBarcodes(imageWithBarcodes);
                        
                        // for each found barcode
                        for (int i = 0; i &lt; barcodeInfos.Length; i++)
                        {
                            // test print quality of barcode using ISO 15415 test
                            ISO15415QualityTest test =
                                new ISO15415QualityTest((BarcodeInfo2D)barcodeInfos[i], imageWithBarcodes);
            
                            // print results of ISO 15415 test
            
                            Console.WriteLine(string.Format("[{0}] {1}",
                                barcodeInfos[i].BarcodeType, barcodeInfos[i].Value));
                            Console.WriteLine(string.Format("Decode                 : {0}",
                                GradeToString(test.DecodeGrade)));
                            Console.WriteLine(string.Format("Unused error correction: {0} ({1}%)",
                                GradeToString(test.UnusedErrorCorrectionGrade), test.UnusedErrorCorrection));
                            Console.WriteLine(string.Format("Symbol contrast        : {0} ({1}%)",
                                GradeToString(test.SymbolContrastGrade), test.SymbolContrast));
                            Console.WriteLine(string.Format("Axial nonuniformity    : {0} ({1})",
                                GradeToString(test.AxialNonuniformityGrade), test.AxialNonuniformity));
                            Console.WriteLine(string.Format("Grid nonuniformity     : {0} ({1} cell)",
                                GradeToString(test.GridNonuniformityGrade), test.GridNonuniformity));
                            Console.WriteLine(string.Format("Modulation             : {0}",
                                GradeToString(test.ModulationGrade)));
                            Console.WriteLine(string.Format("Reflectance margin     : {0}",
                                GradeToString(test.ReflectanceMarginGrade)));
                            Console.WriteLine(string.Format("-------------Scan grade: {0}",
                                GradeToString(test.ScanGrade)));
                            Console.WriteLine();
                        }
                    }
                }
            
                /// &lt;summary&gt;
                /// Converts ISO15415 quality grade into string value.
                /// &lt;/summary&gt;
                static string GradeToString(ISO15415QualityGrade grade)
                {
                    return string.Format("{0}({1})", ((int)grade).ToString(), grade);
                }
            
            }
            </code>
            <code lang="C#">
            using System;
            using System.Drawing;
            
            using Vintasoft.Barcode;
            using Vintasoft.Barcode.BarcodeInfo;
            using Vintasoft.Barcode.QualityTests;
            
            /// &lt;summary&gt;
            /// Test that shows how to test print quality of multi-row 2D barcodes
            /// (PDF417, PDF417Compact and MicroPDF417).
            /// &lt;/summary&gt;
            class ISO15415QualityTestMultiRowExample
            {
            
                /// &lt;summary&gt;
                /// Run the test.
                /// &lt;/summary&gt;
                public static void Test()
                {
                    // load image with barcode from file
                    using (Image barcodeImage = Image.FromFile("test1.jpg"))
                    {
                        // read barcodes from image and test print quality of 2D barcodes
                        TestBarcodePrintQuality(barcodeImage);
                    }
                }
                
                /// &lt;summary&gt;
                /// Read barcodes from image and test print quality of 2D barcodes.
                /// &lt;/summary&gt;
                public static void TestBarcodePrintQuality(Image imageWithBarcodes)
                {
                    // create the barcode reader
                    using (BarcodeReader reader = new BarcodeReader())
                    {
                        // specify that reader must collect information for quality test
                        reader.Settings.CollectTestInformation = true;
            
                        // specify that reader must search for PDF417, PDF417Compact and MicroPDF417 barcodes only
                        reader.Settings.ScanBarcodeTypes =
                            BarcodeType.PDF417 | BarcodeType.PDF417Compact | BarcodeType.MicroPDF417;
            
                        // read barcodes
                        IBarcodeInfo[] barcodeInfos = reader.ReadBarcodes(imageWithBarcodes);
            
                        // for each found barcode
                        for (int i = 0; i &lt; barcodeInfos.Length; i++)
                        {
                            // test print quality of barcode using ISO 15415 test
                            ISO15415QualityTest test =
                                new ISO15415QualityTest((BarcodeInfo2D)barcodeInfos[i], imageWithBarcodes);
            
                            // print results of ISO 15415 test
            
                            Console.WriteLine(string.Format("[{0}] {1}",
                                barcodeInfos[i].BarcodeType, barcodeInfos[i].Value));
                            Console.WriteLine(string.Format("Decode                 : {0}",
                                GradeToString(test.DecodeGrade)));
                            Console.WriteLine(string.Format("Unused error correction: {0} ({1}%)",
                                GradeToString(test.UnusedErrorCorrectionGrade), test.UnusedErrorCorrection));
                            if (test.StartPatternTestGrade != ISO15415QualityGrade.Unavailable)
                                Console.WriteLine(string.Format("Start pattern test:      {0}",
                                    GradeToString(test.StartPatternTestGrade), test.StartPatternTestGrade));
                            if (test.CenterPatternTestGrade != ISO15415QualityGrade.Unavailable)
                                Console.WriteLine(string.Format("Center pattern test:     {0}",
                                    GradeToString(test.CenterPatternTestGrade), test.CenterPatternTest));
                            if (test.CenterPatternTestGrade != ISO15415QualityGrade.Unavailable)
                                Console.WriteLine(string.Format("Stop pattern test:       {0}",
                                    GradeToString(test.CenterPatternTestGrade), test.CenterPatternTestGrade));
                            Console.WriteLine(string.Format("Codeword yield:          {0}",
                                GradeToString(test.CodewordYieldGrade), test.CodewordYieldGrade));
                            Console.WriteLine(string.Format("Codeword print quality:  {0}",
                                GradeToString(test.CodewordPrintQualityGrade), test.CodewordPrintQualityGrade));
                            Console.WriteLine(string.Format("-------------Scan grade: {0}",
                                GradeToString(test.ScanGrade)));
                            Console.WriteLine();
                        }
                    }
                }
            
                /// &lt;summary&gt;
                /// Converts ISO15415 quality grade into string value.
                /// &lt;/summary&gt;
                static string GradeToString(ISO15415QualityGrade grade)
                {
                    return string.Format("{0}({1})", ((int)grade).ToString(), grade);
                }
            
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Barcode.QualityTests.ISO15415QualityTest.#ctor(Vintasoft.Barcode.BarcodeInfo.BarcodeInfo2D,System.Drawing.Image)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Barcode.QualityTests.ISO15415QualityTest" /> class. 
            </summary>
            <param name="barcodeInfo">Information about barcode.</param>
            <param name="barcodeImage">Image with barcodes.</param>
            <example>
            Please see example <see cref="T:Vintasoft.Barcode.QualityTests.ISO15415QualityTest">here</see>.
            </example>
        </member>
        <member name="P:Vintasoft.Barcode.QualityTests.ISO15415QualityTest.ScanGrade">
            <summary>
            Gets a grade of Scan.
            </summary>
            <remarks>The grade of scan calculates as the lowest grade from all calculated grades.</remarks>
        </member>
        <member name="P:Vintasoft.Barcode.QualityTests.ISO15415QualityTest.DecodeGrade">
            <summary>
            Gets a grade of Decode.
            </summary>
            <remarks>
            The Decode parameter tests, on a Pass/Fail basis, whether the symbol has all its
            features sufficiently correct to be readable.
            </remarks>
        </member>
        <member name="P:Vintasoft.Barcode.QualityTests.ISO15415QualityTest.MaxReflectance">
            <summary>
            Gets a max reflectance, in percents of reflectance.
            </summary>
            <remarks>
            Highest reflectance of any sample area in a two-dimensional matrix symbol.
            </remarks>
        </member>
        <member name="P:Vintasoft.Barcode.QualityTests.ISO15415QualityTest.MinReflectance">
            <summary>
            Gets a min reflectance, in percents of reflectance.
            </summary>
            <remarks>
            Lowest reflectance of any sample area in a two-dimensional matrix symbol.
            </remarks>
        </member>
        <member name="P:Vintasoft.Barcode.QualityTests.ISO15415QualityTest.SymbolContrast">
            <summary>
            Gets a Symbol contrast.
            </summary>
            <remarks>
            Difference between the highest and lowest reflectance
            value in the symbol region.</remarks>
        </member>
        <member name="P:Vintasoft.Barcode.QualityTests.ISO15415QualityTest.SymbolContrastGrade">
            <summary>
            Gets a grade of <see cref="P:Vintasoft.Barcode.QualityTests.ISO15415QualityTest.SymbolContrast" />.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.QualityTests.ISO15415QualityTest.ModulationGrade">
            <summary>
            Gets a grade of Modulation.
            </summary>
            <remarks>
            Modulation is a measure of the uniformity of reflectance of 
            the dark and light modules respectively. Factors such as print growth
            (or loss), misplacement of a module relative to the grid intersection,
            the optical characteristics of the substrate and uneven printing may 
            reduce the difference between the reflectance of a module and the 
            <see cref="P:Vintasoft.Barcode.IBarcodeInfo.Threshold">Threshold</see>. A low Modulation may
            increase the probability of a module being incorrectly identified as dark 
            or light.
            </remarks>
        </member>
        <member name="P:Vintasoft.Barcode.QualityTests.ISO15415QualityTest.ReflectanceMarginGrade">
            <summary>
            Gets a grade of Reflectance Margin.
            </summary>
            <remarks>
            Reflectance Margin is a measure of how well each module 
            is correctly distinguishable as light or dark in comparison
            to the global threshold. Factors such as print growth (or loss),
            misplacement of a module relative to the grid intersection, the 
            optical characteristics of the substrate, uneven printing, or 
            encodation errors, may reduce or even eliminate the margin for 
            error between the reflectance of a module and the <see cref="P:Vintasoft.Barcode.IBarcodeInfo.Threshold">Threshold</see>. 
            A low Reflectance Margin may increase the probability of a module 
            being incorrectly identified as dark or light.
            </remarks>
        </member>
        <member name="P:Vintasoft.Barcode.QualityTests.ISO15415QualityTest.FixedPatternDamageGrade">
            <summary>
            Gets a grade of Fixed Pattern Damage.
            </summary>
            <remarks>
            This parameter tests that damage to the finder pattern, 
            quiet zone, timing, navigation and other fixed patterns in 
            a symbol does not reduce unacceptably the ability of the reference 
            decode algorithm to locate and identify the symbol within the field 
            of view, by inverting the apparent state of one or more modules from 
            light to dark or vice versa.
            </remarks>
        </member>
        <member name="P:Vintasoft.Barcode.QualityTests.ISO15415QualityTest.AxialNonuniformity">
            <summary>
            Gets an Axial Nonuniformity.
            </summary>
            <remarks>
            Axial Nonuniformity measures the spacing
            of the mapping centres, i.e. the sampling points, or 
            intersections of the grid obtained by applying the reference 
            decode algorithm to the binarized image, in the direction of 
            each of the grid’s major axes. Axial Nonuniformity tests for
            uneven scaling of the symbol which would hinder readability at 
            some non-normal viewing angles more than at others.
            </remarks>
        </member>
        <member name="P:Vintasoft.Barcode.QualityTests.ISO15415QualityTest.AxialNonuniformityGrade">
            <summary>
            Gets a grade of <see cref="P:Vintasoft.Barcode.QualityTests.ISO15415QualityTest.AxialNonuniformity" />.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.QualityTests.ISO15415QualityTest.GridNonuniformity">
            <summary>
            Gets a Grid Nonuniformity.
            </summary>
            <remarks>
            Grid Nonuniformity measures the largest vector 
            deviation of the grid intersections, determined by the reference
            decode algorithm from the binarized image of a given symbol,
            from their ideal theoretical position.
            </remarks>
        </member>
        <member name="P:Vintasoft.Barcode.QualityTests.ISO15415QualityTest.GridNonuniformityGrade">
            <summary>
            Gets a grade of <see cref="P:Vintasoft.Barcode.QualityTests.ISO15415QualityTest.GridNonuniformity" />.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.QualityTests.ISO15415QualityTest.UnusedErrorCorrection">
            <summary>
            Gets an Unused Error Correction.
            </summary>
            <remarks>
            The Unused Error Correction parameter tests the extent to which regional 
            or spot damage in the symbol has eroded the reading safety margin that error
            correction provides.
            </remarks>
        </member>
        <member name="P:Vintasoft.Barcode.QualityTests.ISO15415QualityTest.UnusedErrorCorrectionGrade">
            <summary>
            Gets a grade of <see cref="P:Vintasoft.Barcode.QualityTests.ISO15415QualityTest.UnusedErrorCorrection" />.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.QualityTests.ISO15415QualityTest.StartPatternTest">
            <summary>
            Gets a ISO15516 Start/RAP pattern test for multi-row symbologies (PDF417/MicroPDF417). 
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.QualityTests.ISO15415QualityTest.StartPatternTestGrade">
            <summary>
            Gets a grade of <see cref="P:Vintasoft.Barcode.QualityTests.ISO15415QualityTest.StartPatternTest" />.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.QualityTests.ISO15415QualityTest.StopPatternTest">
            <summary>
            Gets a ISO15516 Stop/RAP pattern test for multi-row symbologies (PDF417/MicroPDF417). 
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.QualityTests.ISO15415QualityTest.StopPatternTestGrade">
            <summary>
            Gets a grade of <see cref="P:Vintasoft.Barcode.QualityTests.ISO15415QualityTest.StopPatternTest" />.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.QualityTests.ISO15415QualityTest.CenterPatternTest">
            <summary>
            Gets a ISO15516 Center/RAP pattern test for multi-row symbologies (MicroPDF417). 
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.QualityTests.ISO15415QualityTest.CenterPatternTestGrade">
            <summary>
            Gets a grade of <see cref="P:Vintasoft.Barcode.QualityTests.ISO15415QualityTest.CenterPatternTest" />.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.QualityTests.ISO15415QualityTest.CodewordYield">
            <summary>
            Gets the efficiency with which linear scans can recover data from a two-dimensional
            multi-row symbol.
            </summary>
            <remarks>
            The Codeword Yield is the number of validly decoded codewords expressed as a
            percentage of the maximum number of codewords that could have been decoded
            (after adjusting for tilt). A poor Codeword Yield, for a symbol whose other measurements
            are good, may indicate a Y-axis print quality problem.
            </remarks>
        </member>
        <member name="P:Vintasoft.Barcode.QualityTests.ISO15415QualityTest.CodewordYieldGrade">
            <summary>
            Gets a grade of <see cref="P:Vintasoft.Barcode.QualityTests.ISO15415QualityTest.CodewordYield" />.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.QualityTests.ISO15415QualityTest.CodewordPrintQualityModulationGrade">
            <summary>
            Gets a Codeword Print Quality Grade based on codeword modulation
            for a two-dimensional multi-row symbol.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.QualityTests.ISO15415QualityTest.CodewordPrintQualityDefectsGrade">
            <summary>
            Gets a Codeword Print Quality Grade based on codeword defects
            for a two-dimensional multi-row symbol.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.QualityTests.ISO15415QualityTest.CodewordPrintQualityDecodabilityGrade">
            <summary>
            Gets a Codeword Print Quality Grade based on codeword decodability
            for a two-dimensional multi-row symbol.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.QualityTests.ISO15415QualityTest.CodewordPrintQualityGrade">
            <summary>
            Gets a Codeword Print Quality Grade for a two-dimensional multi-row symbol.
            </summary>
            <value>
            Value of this grade is minimum of 
            <see cref="P:Vintasoft.Barcode.QualityTests.ISO15415QualityTest.CodewordPrintQualityModulationGrade" />, 
            <see cref="P:Vintasoft.Barcode.QualityTests.ISO15415QualityTest.CodewordPrintQualityDefectsGrade" /> and
            <see cref="P:Vintasoft.Barcode.QualityTests.ISO15415QualityTest.CodewordPrintQualityDecodabilityGrade" />.
            </value>
        </member>
        <member name="P:Vintasoft.Barcode.QualityTests.ISO15415QualityTest.SymbolIso15416QualityTest">
            <summary>
            Gets an informative ISO15416 Quality Test for a two-dimensional multi-row symbol.
            </summary>
            <remarks>
            The results of this test are not included in the overall assessment.
            This test can be used by user for information about
            the properties Rmin, Rmax, Modulation and Defects.
            </remarks>
        </member>
        <member name="T:Vintasoft.Barcode.QualityTests.ISO15415QualityGrade">
            <summary>
            Specifies available grades of quality (ISO 15415).
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.QualityTests.ISO15415QualityGrade.Unavailable">
            <summary>
            Grade is unavailable.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.QualityTests.ISO15415QualityGrade.A">
            <summary>
            Grade A (highest).
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.QualityTests.ISO15415QualityGrade.B">
            <summary>
            Grade B.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.QualityTests.ISO15415QualityGrade.C">
            <summary>
            Grade C.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.QualityTests.ISO15415QualityGrade.D">
            <summary>
            Grade D.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.QualityTests.ISO15415QualityGrade.F">
            <summary>
            Grade F (least).
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.QualityTests.ISO15416QualityGrade">
            <summary>
            Specifies available grades of quality (ISO 15416).
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.QualityTests.ISO15416QualityGrade.Unavailable">
            <summary>
            Grade is unavailable.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.QualityTests.ISO15416QualityGrade.A">
            <summary>
            Grade A (highest).
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.QualityTests.ISO15416QualityGrade.B">
            <summary>
            Grade B.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.QualityTests.ISO15416QualityGrade.C">
            <summary>
            Grade C.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.QualityTests.ISO15416QualityGrade.D">
            <summary>
            Grade D.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.QualityTests.ISO15416QualityGrade.F">
            <summary>
            Grade F (least).
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.QualityTests.ISO15416QualityTest">
            <summary>
            ISO/IEC 15416 barcode print quality test for 1D linear barcodes.
            </summary>
            <remarks>
            The algorithm of test is based on ISO/IEC 15416.
            Test allows to evaluate the barcode's print quality using the following parameters:<br />
            <ul>
            <li><see cref="P:Vintasoft.Barcode.QualityTests.ISO15416ScanReflectanceProfile.DecodeGrade">Decode</see></li>
            <li><see cref="P:Vintasoft.Barcode.QualityTests.ISO15416ScanReflectanceProfile.MaxReflectance">Max Reflectance (Rmax)</see></li>
            <li><see cref="P:Vintasoft.Barcode.QualityTests.ISO15416ScanReflectanceProfile.MinReflectanceGrade">Min Reflectance (Rmin)</see></li>
            <li><see cref="P:Vintasoft.Barcode.QualityTests.ISO15416ScanReflectanceProfile.SymbolContrastGrade">Symbol Contrast (SC)</see></li>
            <li><see cref="P:Vintasoft.Barcode.QualityTests.ISO15416ScanReflectanceProfile.MinEdgeContrastGrade">Min Edge Contrast (ECmin)</see></li>
            <li><see cref="P:Vintasoft.Barcode.QualityTests.ISO15416ScanReflectanceProfile.ModulationGrade">Modulation (MOD)</see></li>
            <li><see cref="P:Vintasoft.Barcode.QualityTests.ISO15416ScanReflectanceProfile.MaxElementReflectanceNonUniformity">Max Element Reflectance Non-uniformity (ERNmax)</see></li>
            <li><see cref="P:Vintasoft.Barcode.QualityTests.ISO15416ScanReflectanceProfile.DefectsGrade">Defects</see></li>
            <li><see cref="P:Vintasoft.Barcode.QualityTests.ISO15416ScanReflectanceProfile.DecodabilityGrade">Decodability</see></li>
            </ul>
            </remarks>
            <example>
            <code lang="VB.NET">   
            Imports System.Drawing   
               
            Imports Vintasoft.Barcode   
            Imports Vintasoft.Barcode.BarcodeInfo   
            Imports Vintasoft.Barcode.QualityTests   
               
            ''' &lt;summary&gt;   
            ''' Test that shows how to test print quality of 1D barcodes.   
            ''' &lt;/summary&gt;   
            Class ISO15416QualityTestExample   
               
            	''' &lt;summary&gt;   
            	''' Run the test.   
            	''' &lt;/summary&gt;   
            	Public Shared Sub Test()   
            		' load image with barcode from file   
            		Using barcodeImage As Image = Image.FromFile("test1.jpg")   
            			' read barcodes from image and test print quality of 1D barcodes   
            			TestBarcodePrintQuality(barcodeImage)   
            		End Using   
            	End Sub   
               
            	''' &lt;summary&gt;   
            	''' Read barcodes from image and test print quality of 1D barcodes.   
            	''' &lt;/summary&gt;   
            	Private Shared Sub TestBarcodePrintQuality(imageWithBarcodes As Image)   
            		' create the barcode reader   
            		Using reader As New BarcodeReader()   
            			' specify that reader must collect information for quality test   
            			reader.Settings.CollectTestInformation = True   
               
            			' specify that reader must search for Code39 and Code128 barcodes only   
            			reader.Settings.ScanBarcodeTypes = BarcodeType.Code39 Or BarcodeType.Code128   
               
            			' read barcodes   
            			Dim barcodeInfos As IBarcodeInfo() = reader.ReadBarcodes(imageWithBarcodes)   
               
            			' for each found barcode   
            			For i As Integer = 0 To barcodeInfos.Length - 1   
            				' test print quality of barcode using ISO 15416 test   
            				Dim test As New ISO15416QualityTest(DirectCast(barcodeInfos(i), BarcodeInfo1D), imageWithBarcodes)   
               
            				' print results of ISO 15416 test   
               
            				Console.WriteLine(String.Format("[{0}] {1}", barcodeInfos(i).BarcodeType, barcodeInfos(i).Value))   
            				Console.WriteLine(String.Format("Overall symbol grade:            {0} ({1:f2})", test.OverallSymbolGrade, test.OverallSymbolGradeValue))   
            				If test.DifferentDecodedValues Then   
            					Console.WriteLine("Scan profiles has different barcode decode values!")   
            				End If   
            				If test.SymbolComponentQualityTests.Length = 1 Then   
            					Dim qualityTest As ISO15416SymbolComponentQualityTest = test.SymbolComponentQualityTests(0)   
            					Console.WriteLine(String.Format("Scan reflectance profiles:       {0}", qualityTest.ScanReflectanceProfiles.Length))   
            					Console.WriteLine("Scan reflectance profile grades:")   
            					For j As Integer = 0 To qualityTest.ScanReflectanceProfiles.Length - 1   
            						Console.Write(qualityTest.ScanReflectanceProfiles(j).ScanGrade)   
            					Next   
            				Else   
            					For k As Integer = 0 To test.SymbolComponentQualityTests.Length - 1   
            						Console.WriteLine(String.Format("Symbol component:                {0}", k + 1))   
            						Dim qualityTest As ISO15416SymbolComponentQualityTest = test.SymbolComponentQualityTests(k)   
            						Console.WriteLine(String.Format("Scan reflectance profiles:       {0}", qualityTest.ScanReflectanceProfiles.Length))   
            						Console.WriteLine("Scan reflectance profile grades:")   
            						For j As Integer = 0 To qualityTest.ScanReflectanceProfiles.Length - 1   
            							Console.Write(qualityTest.ScanReflectanceProfiles(j).ScanGrade)   
            						Next   
            					Next   
            				End If   
            				Console.WriteLine()   
            				Console.WriteLine()   
            			Next   
            		End Using   
            	End Sub   
               
            End Class
            </code>
            <code lang="C#">
            using System;
            using System.Drawing;
            
            using Vintasoft.Barcode;
            using Vintasoft.Barcode.BarcodeInfo;
            using Vintasoft.Barcode.QualityTests;
            
            /// &lt;summary&gt;
            /// Test that shows how to test print quality of 1D barcodes.
            /// &lt;/summary&gt;
            class ISO15416QualityTestExample
            {
            
                /// &lt;summary&gt;
                /// Run the test.
                /// &lt;/summary&gt;
                public static void Test()
                {
                    // load image with barcode from file
                    using (Image barcodeImage = Image.FromFile("test1.jpg"))
                    {
                        // read barcodes from image and test print quality of 1D barcodes
                        TestBarcodePrintQuality(barcodeImage);
                    }
                }
                
                /// &lt;summary&gt;
                /// Read barcodes from image and test print quality of 1D barcodes.
                /// &lt;/summary&gt;
                static void TestBarcodePrintQuality(Image imageWithBarcodes)
                {
                    // create the barcode reader
                    using (BarcodeReader reader = new BarcodeReader())
                    {
                        // specify that reader must collect information for quality test
                        reader.Settings.CollectTestInformation = true;
            
                        // specify that reader must search for Code39 and Code128 barcodes only
                        reader.Settings.ScanBarcodeTypes = BarcodeType.Code39 | BarcodeType.Code128;
            
                        // read barcodes
                        IBarcodeInfo[] barcodeInfos = reader.ReadBarcodes(imageWithBarcodes);
            
                        // for each found barcode
                        for (int i = 0; i &lt; barcodeInfos.Length; i++)
                        {
                            // test print quality of barcode using ISO 15416 test
                            ISO15416QualityTest test =
                                new ISO15416QualityTest((BarcodeInfo1D)barcodeInfos[i], imageWithBarcodes);
            
                            // print results of ISO 15416 test
            
                            Console.WriteLine(string.Format("[{0}] {1}",
                                barcodeInfos[i].BarcodeType, barcodeInfos[i].Value));
                            Console.WriteLine(string.Format("Overall symbol grade:            {0} ({1:f2})",
                                test.OverallSymbolGrade, test.OverallSymbolGradeValue));
                            if (test.DifferentDecodedValues)
                                Console.WriteLine("Scan profiles has different barcode decode values!");
                            if (test.SymbolComponentQualityTests.Length == 1)
                            {
                                ISO15416SymbolComponentQualityTest qualityTest = test.SymbolComponentQualityTests[0];
                                Console.WriteLine(string.Format("Scan reflectance profiles:       {0}",
                                    qualityTest.ScanReflectanceProfiles.Length));
                                Console.WriteLine("Scan reflectance profile grades:");
                                for (int j = 0; j &lt; qualityTest.ScanReflectanceProfiles.Length; j++)
                                    Console.Write(qualityTest.ScanReflectanceProfiles[j].ScanGrade);
                            }
                            else
                            {
                                for (int k = 0; k &lt; test.SymbolComponentQualityTests.Length; k++)
                                {
                                    Console.WriteLine(string.Format("Symbol component:                {0}", k + 1));
                                    ISO15416SymbolComponentQualityTest qualityTest = test.SymbolComponentQualityTests[k];
                                    Console.WriteLine(string.Format("Scan reflectance profiles:       {0}",
                                        qualityTest.ScanReflectanceProfiles.Length));
                                    Console.WriteLine("Scan reflectance profile grades:");
                                    for (int j = 0; j &lt; qualityTest.ScanReflectanceProfiles.Length; j++)
                                        Console.Write(qualityTest.ScanReflectanceProfiles[j].ScanGrade);
                                }
                            }
                            Console.WriteLine();
                            Console.WriteLine();
                        }
                    }
                }
            
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Barcode.QualityTests.ISO15416QualityTest.#ctor(Vintasoft.Barcode.BarcodeInfo.BarcodeInfo1D,System.Drawing.Image)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Barcode.QualityTests.ISO15416QualityTest" /> class. 
            </summary>
            <param name="barcodeInfo">Information about barcode.</param>
            <param name="barcodeImage">Image with barcodes.</param>
            <example>
            Please see example <see cref="T:Vintasoft.Barcode.QualityTests.ISO15416QualityTest">here</see>.
            </example>
        </member>
        <member name="M:Vintasoft.Barcode.QualityTests.ISO15416QualityTest.#ctor(Vintasoft.Barcode.BarcodeInfo.BarcodeInfo1D,System.Drawing.Image,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Barcode.QualityTests.ISO15416QualityTest" /> class. 
            </summary>
            <param name="barcodeInfo">Information about barcode.</param>
            <param name="barcodeImage">Image with barcodes.</param>
            <param name="scanlineCount">Number of scanlines.</param>
            <example>
            Please see example <see cref="T:Vintasoft.Barcode.QualityTests.ISO15416QualityTest">here</see>.
            </example>
        </member>
        <member name="M:Vintasoft.Barcode.QualityTests.ISO15416QualityTest.#ctor(Vintasoft.Barcode.BarcodeInfo.BarcodeInfo1D,System.Drawing.Image,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Barcode.QualityTests.ISO15416QualityTest" /> class. 
            </summary>
            <param name="barcodeInfo">Information about barcode.</param>
            <param name="barcodeImage">Image with barcodes.</param>
            <param name="invertImageColors">Indicates whether the quality test must invert image colors.</param>
            <example>
            Please see example <see cref="T:Vintasoft.Barcode.QualityTests.ISO15416QualityTest">here</see>.
            </example>
        </member>
        <member name="M:Vintasoft.Barcode.QualityTests.ISO15416QualityTest.#ctor(Vintasoft.Barcode.BarcodeInfo.BarcodeInfo1D,System.Drawing.Image,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Barcode.QualityTests.ISO15416QualityTest" /> class. 
            </summary>
            <param name="barcodeInfo">Information about barcode.</param>
            <param name="barcodeImage">Image with barcodes.</param>
            <param name="scanlineCount">Number of scanlines.</param>
            <param name="invertImageColors">Indicates whether the quality test must invert image colors.</param>
            <example>
            Please see example <see cref="T:Vintasoft.Barcode.QualityTests.ISO15416QualityTest">here</see>.
            </example>
        </member>
        <member name="P:Vintasoft.Barcode.QualityTests.ISO15416QualityTest.OverallSymbolGradeValue">
            <summary>
            Gets an overall symbol grade value as double value.
            </summary>
            <value>
            Possible values are from 0 to 4.
            </value>
            <remarks>
            The overall symbol grade is calculated as the average from grades of all reflectance profiles.
            </remarks>
        </member>
        <member name="P:Vintasoft.Barcode.QualityTests.ISO15416QualityTest.OverallSymbolGrade">
            <summary>
            Gets a grade of <see cref="P:Vintasoft.Barcode.QualityTests.ISO15416QualityTest.OverallSymbolGradeValue" />.
            </summary>
            <value>
            ISO15416QualityGrade.A if <see cref="P:Vintasoft.Barcode.QualityTests.ISO15416QualityTest.OverallSymbolGradeValue" /> &gt; 3.5;
            ISO15416QualityGrade.B if <see cref="P:Vintasoft.Barcode.QualityTests.ISO15416QualityTest.OverallSymbolGradeValue" /> &gt; 2.5;
            ISO15416QualityGrade.C if <see cref="P:Vintasoft.Barcode.QualityTests.ISO15416QualityTest.OverallSymbolGradeValue" /> &gt; 1.5;
            ISO15416QualityGrade.D if <see cref="P:Vintasoft.Barcode.QualityTests.ISO15416QualityTest.OverallSymbolGradeValue" /> &gt; 0.5;
            ISO15416QualityGrade.F, otherwise.
            </value>
        </member>
        <member name="P:Vintasoft.Barcode.QualityTests.ISO15416QualityTest.DifferentDecodedValues">
            <summary>
            Gets a value indicating whether the decoded scanlines have different barcode values.
            </summary>
            <value>
            <b>true</b> - at least one scan line has barcode value different from barcode value
            of other lines;
            <b>false</b> - all scan lines have the same barcode value.
            </value>
            <remarks>
            Value of the <see cref="P:Vintasoft.Barcode.QualityTests.ISO15416QualityTest.OverallSymbolGradeValue" /> is set to 0 automatically
            if value of this property is set to <b>true</b>.
            </remarks>
        </member>
        <member name="P:Vintasoft.Barcode.QualityTests.ISO15416QualityTest.SymbolComponentQualityTests">
            <summary>
            Gets an array of executed quality tests for symbol components of the barcode symbol.
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.QualityTests.ISO15416ScanReflectanceProfile">
            <summary>
            Represents an information about the ISO15416 scan reflectance profile.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.QualityTests.ISO15416ScanReflectanceProfile.ReflectanceData">
            <summary>
            Gets an array that contains RAW reflectance data of this profile.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.QualityTests.ISO15416ScanReflectanceProfile.ScanGrade">
            <summary>
            Gets a grade of scan profile.
            </summary>
            <remarks>The grade of scan is calculated as the lowest grade from
            all calculated grades.</remarks>
        </member>
        <member name="P:Vintasoft.Barcode.QualityTests.ISO15416ScanReflectanceProfile.GlobalThreshold">
            <summary>
            Gets a global threshold (GT), in percents of reflectance.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.QualityTests.ISO15416ScanReflectanceProfile.DecodeValue">
            <summary>
            Gets a decoded barcode value.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.QualityTests.ISO15416ScanReflectanceProfile.Decode">
            <summary>
            Gets a value indicating whether the barcode value is decoded successfully.
            </summary>
            <value>
            <b>true</b> - barcode value is decoded successfully;
            <b>false</b> - barcode value is not decoded.
            </value>
        </member>
        <member name="P:Vintasoft.Barcode.QualityTests.ISO15416ScanReflectanceProfile.DecodeGrade">
            <summary>
            Gets a grade of <see cref="P:Vintasoft.Barcode.QualityTests.ISO15416ScanReflectanceProfile.Decode" />.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.QualityTests.ISO15416ScanReflectanceProfile.MaxReflectance">
            <summary>
            Gets a max reflectance (Rmax), in percents of reflectance.
            </summary>
            <remarks>
            Highest reflectance in any element or quiet zone in a scan reflectance profile.
            </remarks>
        </member>
        <member name="P:Vintasoft.Barcode.QualityTests.ISO15416ScanReflectanceProfile.MinReflectance">
            <summary>
            Gets a min reflectance (Rmin), in percents of reflectance.
            </summary>
            <remarks>
            Lowest reflectance in any element in a scan reflectance profile.
            </remarks>
        </member>
        <member name="P:Vintasoft.Barcode.QualityTests.ISO15416ScanReflectanceProfile.MinReflectanceGrade">
            <summary>
            Gets a grade of <see cref="P:Vintasoft.Barcode.QualityTests.ISO15416ScanReflectanceProfile.MinReflectance" />.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.QualityTests.ISO15416ScanReflectanceProfile.SymbolContrast">
            <summary>
            Gets a symbol contrast (SC), in percents of reflectance.
            </summary>
            <remarks>Symbol contrast is the difference between the highest and lowest reflectance
            value in the symbol region.</remarks>
        </member>
        <member name="P:Vintasoft.Barcode.QualityTests.ISO15416ScanReflectanceProfile.SymbolContrastGrade">
            <summary>
            Gets a grade of <see cref="P:Vintasoft.Barcode.QualityTests.ISO15416ScanReflectanceProfile.SymbolContrast" />.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.QualityTests.ISO15416ScanReflectanceProfile.MinEdgeContrast">
            <summary>
            Gets a minimum edge contrast (ECmin), in percents of reflectance.
            </summary>
            <remarks>
            Minimum difference in the reflectance value between any 
            particular space (including quiet zones) and its adjoining bar within a
            bar code symbol.
            </remarks>
        </member>
        <member name="P:Vintasoft.Barcode.QualityTests.ISO15416ScanReflectanceProfile.MinEdgeContrastGrade">
            <summary>
            Gets a grade of <see cref="P:Vintasoft.Barcode.QualityTests.ISO15416ScanReflectanceProfile.MinEdgeContrast" />.
            </summary>      
        </member>
        <member name="P:Vintasoft.Barcode.QualityTests.ISO15416ScanReflectanceProfile.Modulation">
            <summary>
            Gets a modulation (MOD).
            </summary>
            <remarks>
            Modulation is a measure of the uniformity of reflectance of the dark and
            light elements respectively (MOD = ECmin/SC).
            </remarks>
        </member>
        <member name="P:Vintasoft.Barcode.QualityTests.ISO15416ScanReflectanceProfile.ModulationGrade">
            <summary>
            Gets a grade of <see cref="P:Vintasoft.Barcode.QualityTests.ISO15416ScanReflectanceProfile.Modulation" />.
            </summary>      
        </member>
        <member name="P:Vintasoft.Barcode.QualityTests.ISO15416ScanReflectanceProfile.MaxElementReflectanceNonUniformity">
            <summary>
            Gets a maximum element reflectance non-uniformity (ERNmax).
            </summary>
            <remarks>
            Element reflectance nonuniformity is the difference in reflectance between the highest peak and
            lowest value within an element (bar or space) of the bar code symbol.
            </remarks>
        </member>
        <member name="P:Vintasoft.Barcode.QualityTests.ISO15416ScanReflectanceProfile.Defects">
            <summary>
            Gets a defects value.
            </summary>
            <remarks>
            Defects are measured by the ratio between the maximum element reflectance 
            nonuniformity and symbol contrast (Defects = ERNmax / SC).
            </remarks>
        </member>
        <member name="P:Vintasoft.Barcode.QualityTests.ISO15416ScanReflectanceProfile.DefectsGrade">
            <summary>
            Gets a grade of <see cref="P:Vintasoft.Barcode.QualityTests.ISO15416ScanReflectanceProfile.Defects" />.
            </summary>      
        </member>
        <member name="P:Vintasoft.Barcode.QualityTests.ISO15416ScanReflectanceProfile.Decodability">
            <summary>
            Gets a decodability value.
            </summary>
            <remarks>
            Decodability is the measure of accuracy of the printed bar code symbol against its appropriate
            reference decode algorithm.
            </remarks>
        </member>
        <member name="P:Vintasoft.Barcode.QualityTests.ISO15416ScanReflectanceProfile.DecodabilityGrade">
            <summary>
            Gets a grade of <see cref="P:Vintasoft.Barcode.QualityTests.ISO15416ScanReflectanceProfile.Decodability" />.
            </summary>      
        </member>
        <member name="T:Vintasoft.Barcode.QualityTests.ISO15416SymbolComponentQualityTest">
            <summary>
            ISO/IEC 15416 print quality test for linear barcode symbol component.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.QualityTests.ISO15416SymbolComponentQualityTest.OverallSymbolGradeValue">
            <summary>
            Gets an overall symbol component grade value as double value.
            </summary>
            <value>
            Possible values are from 0 to 4.
            </value>
            <remarks>
            The overall symbol grade is calculated as the average from grades of all reflectance profiles.
            </remarks>
        </member>
        <member name="P:Vintasoft.Barcode.QualityTests.ISO15416SymbolComponentQualityTest.OverallSymbolGrade">
            <summary>
            Gets a grade of <see cref="P:Vintasoft.Barcode.QualityTests.ISO15416SymbolComponentQualityTest.OverallSymbolGradeValue" />.
            </summary>
            <value>
            ISO15416QualityGrade.A if <see cref="P:Vintasoft.Barcode.QualityTests.ISO15416SymbolComponentQualityTest.OverallSymbolGradeValue" /> &gt; 3.5;
            ISO15416QualityGrade.B if <see cref="P:Vintasoft.Barcode.QualityTests.ISO15416SymbolComponentQualityTest.OverallSymbolGradeValue" /> &gt; 2.5;
            ISO15416QualityGrade.C if <see cref="P:Vintasoft.Barcode.QualityTests.ISO15416SymbolComponentQualityTest.OverallSymbolGradeValue" /> &gt; 1.5;
            ISO15416QualityGrade.D if <see cref="P:Vintasoft.Barcode.QualityTests.ISO15416SymbolComponentQualityTest.OverallSymbolGradeValue" /> &gt; 0.5;
            ISO15416QualityGrade.F, otherwise.
            </value>
        </member>
        <member name="P:Vintasoft.Barcode.QualityTests.ISO15416SymbolComponentQualityTest.ScanReflectanceProfiles">
            <summary>
            Gets an array that contains processed scan reflectance profiles.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.QualityTests.ISO15416SymbolComponentQualityTest.AverageScanReflectanceProfileValues">
            <summary>
            Gets average grade values of <see cref="P:Vintasoft.Barcode.QualityTests.ISO15416SymbolComponentQualityTest.ScanReflectanceProfiles" />.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.QualityTests.ISO15416SymbolComponentQualityTest.DifferentDecodedValues">
            <summary>
            Gets a value indicating whether the decoded scanlines have different barcode values.
            </summary>
            <value>
            <b>true</b> - at least one scan line has barcode value different from barcode value
            of other lines;
            <b>false</b> - all scan lines have the same barcode value.
            </value>
            <remarks>
            Value of the <see cref="P:Vintasoft.Barcode.QualityTests.ISO15416SymbolComponentQualityTest.OverallSymbolGradeValue" /> is set to 0 automatically
            if value of this property is set to <b>true</b>.
            </remarks>
        </member>
        <member name="T:Vintasoft.Barcode.PdfImageInfo">
            <summary>
            Class that contains information about the image of PDF document.
            </summary>
        </member>
        <member name="M:Vintasoft.Barcode.PdfImageInfo.GetImage">
            <summary>
            Returns a <see cref="T:System.Drawing.Image" /> instance.
            </summary>
            <returns><see cref="T:System.Drawing.Image" /> object.</returns>
        </member>
        <member name="P:Vintasoft.Barcode.PdfImageInfo.Width">
            <summary>
            Gets the width of the image.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.PdfImageInfo.Height">
            <summary>
            Gets the height of the image.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.PdfImageInfo.BitsPerPixel">
            <summary>
            Gets the number of bits per pixel for this image resource.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.PdfImageInfo.PageNumber">
            <summary>
            Gets page number of the image in PDF document.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.PdfImageInfo.Name">
            <summary>
            Gets the name of the image.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.PdfImageInfo.Compression">
            <summary>
            Gets the filters which the image encoded.
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.PdfImageViewer">
            <summary>
            Class that allows to retrieve image resources from the PDF document.
            </summary>
            <remarks>
            <b>Supported compressions:</b>
            <ul>
            <li>ZIP</li>
            <li>JPEG (only for DeviceGray and DeviceRGB color space)</li>
            <li>CCITT3</li>
            <li>CCITT4</li>
            <li>LZW</li>
            <li>Run Length</li>
            </ul>
            <br />
            <b>Supported color spaces:</b>
            <ul>
            <li>DeviceGray</li>
            <li>DeviceRGB</li>
            <li>DeviceCMYK</li>
            <li>Indexed</li>
            </ul>
            </remarks>
            <example>
            <code lang="VB.NET">   
            Imports System.Drawing   
               
            Imports Vintasoft.Barcode   
               
            ''' &lt;summary&gt;   
            ''' Test that shows how to read barcodes from image-resources of PDF document.   
            ''' &lt;/summary&gt;   
            Class PdfImageViewerExample   
            	''' &lt;summary&gt;   
            	''' Read barcodes from image-resources of PDF document.   
            	''' &lt;/summary&gt;   
            	Public Shared Sub ReadBarcodesFromPdfDocument(filename As String, barcodeTypes As BarcodeType)   
            		' open PDF document   
            		Using pdfImageViewer As New PdfImageViewer(filename)   
            			' create the barcode reader   
            			Using reader As New BarcodeReader()   
            				' specify that reader must search barcodes of specified type(s)   
            				reader.Settings.ScanBarcodeTypes = barcodeTypes   
               
            				' for each page in PDF document   
            				For i As Integer = 0 To pdfImageViewer.PageCount - 1   
            					' get an array of names of image resources from page i   
            					Dim imageNames As String() = pdfImageViewer.GetImageNames(i)   
            					' for each image resource of page i   
            					For k As Integer = 0 To imageNames.Length - 1   
            						Console.WriteLine(String.Format("Page {0}, image {1}: ", i, imageNames(k)))   
            						Dim imageWithBarcode As Image   
            						' get image of image resource   
            						Try   
            							imageWithBarcode = pdfImageViewer.GetImage(i, imageNames(k))   
            						Catch e As Exception   
            							' not supported image format   
            							Console.WriteLine(e.Message)   
                                        Continue For   
            						End Try   
               
            						' read barcodes from image-resource   
            						Dim barcodesInfo As IBarcodeInfo() = reader.ReadBarcodes(imageWithBarcode)   
               
            						' dispose image   
            						imageWithBarcode.Dispose()   
               
            						' show barcode recognition results   
               
            						If barcodesInfo.Length = 0 Then   
            							Console.WriteLine("No barcodes found.")   
            						Else   
            							For j As Integer = 0 To barcodesInfo.Length - 1   
            								Console.WriteLine(String.Format("[{0}] {1}", barcodesInfo(j).BarcodeType, barcodesInfo(j).Value))   
            							Next   
            						End If   
            					Next   
            				Next   
            			End Using   
            		End Using   
            	End Sub   
            End Class
            </code>
            <code lang="C#">
            using System;
            using System.Drawing;
            
            using Vintasoft.Barcode;
            
            /// &lt;summary&gt;
            /// Test that shows how to read barcodes from image-resources of PDF document.
            /// &lt;/summary&gt;
            class PdfImageViewerExample
            {
                /// &lt;summary&gt;
                /// Read barcodes from image-resources of PDF document.
                /// &lt;/summary&gt;
                public static void ReadBarcodesFromPdfDocument(string filename, BarcodeType barcodeTypes)
                {
                    // open PDF document
                    using (PdfImageViewer pdfImageViewer = new PdfImageViewer(filename))
                    {
                        // create the barcode reader
                        using (BarcodeReader reader = new BarcodeReader())
                        {
                            // specify that reader must search barcodes of specified type(s)
                            reader.Settings.ScanBarcodeTypes = barcodeTypes;
            
                            // for each page in PDF document
                            for (int i = 0; i &lt; pdfImageViewer.PageCount; i++)
                            {
                                // get an array of names of image resources from page i
                                string[] imageNames = pdfImageViewer.GetImageNames(i);
                                // for each image resource of page i
                                for (int k = 0; k &lt; imageNames.Length; k++)
                                {
                                    Console.WriteLine(string.Format("Page {0}, image {1}: ", i, imageNames[k]));
                                    Image imageWithBarcode;
                                    // get image of image resource
                                    try
                                    {
                                        imageWithBarcode = pdfImageViewer.GetImage(i, imageNames[k]);
                                    }
                                    catch (Exception e)
                                    {
                                        // not supported image format
                                        Console.WriteLine(e.Message);
                                        continue;
                                    }
            
                                    // read barcodes from image-resource
                                    IBarcodeInfo[] barcodesInfo = reader.ReadBarcodes(imageWithBarcode);
            
                                    // dispose image
                                    imageWithBarcode.Dispose();
            
                                    // show barcode recognition results
            
                                    if (barcodesInfo.Length == 0)
                                    {
                                        Console.WriteLine("No barcodes found.");
                                    }
                                    else
                                    {
                                        for (int j = 0; j &lt; barcodesInfo.Length; j++)
                                            Console.WriteLine(string.Format("[{0}] {1}",
                                                barcodesInfo[j].BarcodeType, barcodesInfo[j].Value));
                                    }
                                }
                            }
                        }
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Barcode.PdfImageViewer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Barcode.PdfImageViewer" /> class and 
            loads PDF document structure of specified PDF file.
            </summary>
            <param name="filename">Path to PDF file.</param>
            <example>Please see example <see cref="T:Vintasoft.Barcode.PdfImageViewer">here</see>.</example>
        </member>
        <member name="M:Vintasoft.Barcode.PdfImageViewer.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Barcode.PdfImageViewer" /> class and 
            loads PDF document structure of specified PDF stream.
            </summary>
            <param name="stream">Stream contains PDF document.</param>
            <example>Please see example <see cref="T:Vintasoft.Barcode.PdfImageViewer">here</see>.</example>
        </member>
        <member name="M:Vintasoft.Barcode.PdfImageViewer.GetImageNames(System.Int32)">
            <summary>
            Returns an array of names of image resources of specified PDF page.
            </summary>
            <param name="pageIndex">Index of PDF page.</param>
            <returns>An array of names of image resources of specified PDF page.</returns>
        </member>
        <member name="M:Vintasoft.Barcode.PdfImageViewer.GetImage(System.Int32,System.String)">
            <summary>
            Returns the image resource of PDF page specified by name.
            </summary>
            <param name="pageIndex">Name of image resource.</param>
            <param name="imageResourceName">Name of image resource.</param>
        </member>
        <member name="M:Vintasoft.Barcode.PdfImageViewer.GetImageInfo(System.Int32,System.String)">
            <summary>
            Returns information about image located on the PDF page.
            </summary>
            <param name="pageIndex">Name of image resource..</param>
            <param name="imageResourceName">Name of image resource.</param>
            <returns />
        </member>
        <member name="M:Vintasoft.Barcode.PdfImageViewer.Dispose">
            <summary>
             Releases all resources used by this <see cref="T:Vintasoft.Barcode.PdfImageViewer" />.
            </summary>
        </member>
        <member name="P:Vintasoft.Barcode.PdfImageViewer.PageCount">
            <summary>
            Gets the number of pages in PDF document.
            </summary>
        </member>
        <member name="T:Vintasoft.Barcode.PdfCompression">
            <summary>
            Specifies available compressions for data of PDF document.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.PdfCompression.Auto">
            <summary>
            Best compression is used depending of the data.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.PdfCompression.Undefined">
            <summary>
            Undefined.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.PdfCompression.None">
            <summary>
            No compression is used.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.PdfCompression.AsciiHex">
            <summary>
            The ASCII hexadecimal compression is used for data compression.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.PdfCompression.Ascii85">
            <summary>
            ASCII base-85 encoding is used for data compression.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.PdfCompression.Lzw">
            <summary>
            LZW compression is used for data compression.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.PdfCompression.Zip">
            <summary>
            ZIP (Flate) compression is used for data compression.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.PdfCompression.RunLength">
            <summary>
            RunLength compression is used for data compression.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.PdfCompression.CcittFax">
            <summary>
            CCITTFax compression is used for data compression. This compression can
            be used only for monochrome images.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.PdfCompression.Jbig2">
            <summary>
            Jbig2 compression is used for data compression. This compression can
            be used only for monochrome images.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.PdfCompression.Jpeg">
            <summary>
            JPEG compression is used for data compression. This compression can
            be used only for grayscale or color images.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.PdfCompression.Jpeg2000">
            <summary>
            JPEG2000 compression is used for data compression. This compression can
            be used only for images.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.PdfCompression.Crypt">
            <summary>
            Data is encrypted.
            </summary>
        </member>
        <member name="F:Vintasoft.Barcode.PdfCompression.Predictor">
            <summary>
            Prediction is used for data compression.
            </summary>
        </member>
        </members>
</doc>
