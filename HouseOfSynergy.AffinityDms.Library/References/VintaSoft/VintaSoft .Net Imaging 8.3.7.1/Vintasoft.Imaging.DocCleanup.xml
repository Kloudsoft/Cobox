<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Vintasoft.Imaging.DocCleanup</name>
    </assembly>
    <members>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Document.AdvancedReplaceColorCommand">
            <summary>
            Replaces color(s), defined as color sphere(s), in an image.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Document.AdvancedReplaceColorCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Document.AdvancedReplaceColorCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Document.AdvancedReplaceColorCommand.#ctor(Vintasoft.Imaging.ImageProcessing.Document.ColorReplaceSphere[])">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Document.AdvancedReplaceColorCommand" /> class.
            </summary>
            <param name="colorReplaceSpheres">Color spheres which defines colors which should be replaced.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Document.AdvancedReplaceColorCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Document.AdvancedReplaceColorCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Document.AdvancedReplaceColorCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Document.AdvancedReplaceColorCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Document.AdvancedReplaceColorCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Processes the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.AdvancedReplaceColorCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.AdvancedReplaceColorCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
            <value>
            Supported formats: Indexed1, Indexed4, Indexed8, Gray8, Bgr24, Bgr32, Bgra32.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.AdvancedReplaceColorCommand.MaskImage">
            <summary>
            Gets or sets the black-white image mask.
            </summary>
            <value>
            <b>null</b> - all pixels of source image will be processed;
            black-white image - source image's pixel will be processed if image mask's pixel,
            in the same position, is set to 1.<br />
            Black-white image mask must have the same size as the source image.
            </value>
            <exception cref="T:System.ArgumentNullException">Thrown if mask image is <b>null</b>.</exception>
            <exception cref="T:System.FormatException">Thrown if mask image is not BlackWhite image.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.AdvancedReplaceColorCommand.ColorReplaceSpheres">
            <summary>
            Gets or sets color spheres which defines colors which should be replaced.
            </summary>
            <value>
            By default the command replaces the red color with radius 100 to
            the green color with interpolation radius 0.5.
            </value>
            <exception cref="T:System.ArgumentNullException">Thrown if old colors is <b>null</b>.</exception>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Document.ColorReplaceSphere">
            <summary>
            Contains information how to replace colors specified by color sphere.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Document.ColorReplaceSphere.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Document.ColorReplaceSphere" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Document.ColorReplaceSphere.#ctor(System.Byte,System.Byte,System.Byte,System.Double,System.Byte,System.Byte,System.Byte,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Document.ColorReplaceSphere" /> class.
            </summary>
            <param name="centerRed">Value of red component of center of color sphere.</param>
            <param name="centerGreen">Value of green component of center of color sphere.</param>
            <param name="centerBlue">Value of blue component of center of color sphere.</param>
            <param name="radius">Radius of color sphere.</param>
            <param name="newColorRed">Value of red component of new color.</param>
            <param name="newColorGreen">Value of green component of new color.</param>
            <param name="newColorBlue">Value of blue component of new color.</param>
            <param name="interpolationRadius">Interpolation radius of color sphere.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Document.ColorReplaceSphere.#ctor(Vintasoft.Imaging.ImageColors.Rgb24Color,System.Double,Vintasoft.Imaging.ImageColors.Rgb24Color,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Document.ColorReplaceSphere" /> class.
            </summary>
            <param name="center">Center of color sphere.</param>
            <param name="radius">Radius of color sphere.</param>
            <param name="newColor">Color which should be used instead of replaced color.</param>
            <param name="interpolationRadius">Interpolation radius of color sphere.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Document.ColorReplaceSphere.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
            <returns>String representation of this object.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.ColorReplaceSphere.NewColor">
            <summary>
            Gets or sets a color which should be used instead of replaced color
            (color specified by <see cref="P:Vintasoft.Imaging.ImageColors.ColorSphere.Center" /> property).
            </summary>
            <value>
            Default value is White.
            </value>
            <exception cref="T:System.ArgumentNullException">Thrown if new color is <b>null</b>.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.ColorReplaceSphere.InterpolationRadius">
            <summary>
            Gets or sets a radius, in range from 0 to 1, which specifies
            when interpolation should be used for color replacement.
            </summary>
            <value>
            Possible values are from 0 to 1:<br />
            <ul>
            <li>0.0 - any color from color sphere
            will be replaced by <see cref="P:Vintasoft.Imaging.ImageProcessing.Document.ColorReplaceSphere.NewColor" /></li>
            <li>0.6 - color of sphere center and
            colors located from the sphere center at a distance (0.4*Radius)
            will be replaced by <see cref="P:Vintasoft.Imaging.ImageProcessing.Document.ColorReplaceSphere.NewColor" />,
            all other colors from color sphere will be interpolated.</li>
            <li>1.0 - color of sphere center will be replaced by <see cref="P:Vintasoft.Imaging.ImageProcessing.Document.ColorReplaceSphere.NewColor" />,
            all other colors from color sphere will be interpolated.</li>
            </ul>
            <br />
            Default value is 0.5.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            value is more than 1.0.</exception>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Document.AutoInvertCommand">
            <summary>
            Automatically inverts an image of document.
            </summary>
            <remarks>
            Here is <b>a "good" sequence of operations for the document image processing</b>:<br />
            1. Invert an inverted image (<see cref="T:Vintasoft.Imaging.ImageProcessing.Document.AutoInvertCommand" />)<br />
            2. Clear a border of an image (<see cref="T:Vintasoft.Imaging.ImageProcessing.Document.BorderClearCommand" />)<br />
            3. Remove halftone from an image (<see cref="T:Vintasoft.Imaging.ImageProcessing.Document.HalftoneRemovalCommand" />)<br />
            4. Deskew an image (<see cref="T:Vintasoft.Imaging.ImageProcessing.Document.DeskewCommand" />)<br />
            5. Remove hole punches from an image (<see cref="T:Vintasoft.Imaging.ImageProcessing.Document.HolePunchRemovalCommand" />)<br />
            6. Remove lines from an image (<see cref="T:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommand" />)<br />
            7. Invert inverted text regions on an image (<see cref="T:Vintasoft.Imaging.ImageProcessing.Document.AutoTextInvertCommand" />)<br />
            8. Despeckle an image (<see cref="T:Vintasoft.Imaging.ImageProcessing.Document.DespeckleCommand" />)<br />
            9. Remove border of an image (<see cref="T:Vintasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand" />)
            </remarks>
            <example>This example shows how to load an image of document from disk, prepare the image
            of document for OCR and save the result to the new image file.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing
            Imports Vintasoft.Imaging.ImageProcessing.Document
            
            Class DocumentCommandsExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("G:\SampleImages\Border.tif")
            
                    Try
                        ' invert an image if image is inverted
                        ExecuteCommand(New AutoInvertCommand(), image)
            
                        ' clear noise on a border of the image
                        ExecuteCommand(New BorderClearCommand(), image)
            
                        ' remove halftone from the image
                        ExecuteCommand(New HalftoneRemovalCommand(), image)
            
                        ' detect the correct orientation of the image
                        ExecuteCommand(New DeskewCommand(), image)
            
                        ' remove hole punches on image
                        ExecuteCommand(New HolePunchRemovalCommand(), image)
            
                        ' remove tables on image
                        ExecuteCommand(New LineRemovalCommand(RemovingLinesType.Tables), image)
            
                        ' invert inverted text regions on an image
                        ExecuteCommand(New AutoTextInvertCommand(), image)
            
                        ' remove noise from the image
                        ExecuteCommand(New DespeckleCommand(), image)
            
                        ' remove border around the image
                        ExecuteCommand(New BorderRemovalCommand(), image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' save the processed image to the new file
                    image.Save("G:\processed-image.tif")
                End Sub
            
                Private Sub ExecuteCommand(command As ProcessingCommandBase, image As VintasoftImage)
                    ' subscribe to the progress event of command
                    AddHandler command.Progress, New EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
            
                    ' execute the command
                    command.ExecuteInPlace(image)
            
                    ' unsubscribe from the progress event of command
                    RemoveHandler command.Progress, New EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
                End Sub
            
                Private Sub command_Progress(sender As Object, e As ImageProcessingProgressEventArgs)
                    ' update progress info using e.Progress property
                    ' ...
            
                    ' cancel execution of command using e.Cancel property if necessary
                    ' ...
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System;
            using System.Windows.Forms;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing;
            using Vintasoft.Imaging.ImageProcessing.Document;
            
            class DocumentCommandsExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage(@"G:\SampleImages\Border.tif");
            
                    try
                    {
                        // invert an image if image is inverted
                        ExecuteCommand(new AutoInvertCommand(), image);
            
                        // clear noise on a border of the image
                        ExecuteCommand(new BorderClearCommand(), image);
            
                        // remove halftone from the image
                        ExecuteCommand(new HalftoneRemovalCommand(), image);
            
                        // detect the correct orientation of the image
                        ExecuteCommand(new DeskewCommand(), image);
            
                        // remove hole punches on image
                        ExecuteCommand(new HolePunchRemovalCommand(), image);
            
                        // remove tables on image
                        ExecuteCommand(new LineRemovalCommand(RemovingLinesType.Tables), image);
            
                        // invert inverted text regions on an image
                        ExecuteCommand(new AutoTextInvertCommand(), image);
            
                        // remove noise from the image
                        ExecuteCommand(new DespeckleCommand(), image);
            
                        // remove border around the image
                        ExecuteCommand(new BorderRemovalCommand(), image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // save the processed image to the new file
                    image.Save(@"G:\processed-image.tif");
                }
            
                void ExecuteCommand(ProcessingCommandBase command, VintasoftImage image)
                {
                    // subscribe to the progress event of command
                    command.Progress += new EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
            
                    // execute the command
                    command.ExecuteInPlace(image);
            
                    // unsubscribe from the progress event of command
                    command.Progress -= new EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
                }
            
                void command_Progress(object sender, ImageProcessingProgressEventArgs e)
                {
                    // update progress info using e.Progress property
                    // ...
            
                    // cancel execution of command using e.Cancel property if necessary
                    // ...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Document.AutoInvertCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Document.AutoInvertCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Document.AutoInvertCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Document.AutoInvertCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Document.AutoInvertCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Document.AutoInvertCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Document.AutoInvertCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Process the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.AutoInvertCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.AutoInvertCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
            <value>
            Supported formats: BlackWhite, Indexed1, Indexed4, Indexed8, Gray8, Gray16,
            Bgr24, Bgr32, Bgr48, Bgra32, Bgra64.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Document.AutoTextOrientationCommand">
            <summary>
            Automatically detects text orientation in a document image and rotates the image if necessary.
            </summary>
            <remarks>
            This processing command is designed to determine orientation of images
            containing mostly text in Roman alphabet which is rotated by multiple of 90 degrees
            (e.g., scanned documents with unknown orientation).<br />
            The command is not designed for:<br />
            <ul>
            <li>non-textual images</li>
            <li>non-Roman text</li>
            <li>Roman text with only capital letters</li>
            <li>rotated text with rotation angle other than multiple of 90 degrees (use <see cref="T:Vintasoft.Imaging.ImageProcessing.Document.DeskewCommand" />)</li>
            <li>images with only few words, insufficient for making a conclusion</li>
            </ul>
            <br />
            Use <see cref="T:Vintasoft.Imaging.ImageProcessing.Document.DeskewCommand" /> prior to this command to align rotated image.
            Use other processing commands prior to this command to improve detection quality of noisy image.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Document.AutoTextOrientationCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Document.AutoTextOrientationCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Document.AutoTextOrientationCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Document.AutoTextOrientationCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Document.AutoTextOrientationCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Document.AutoTextOrientationCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Document.AutoTextOrientationCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Processes the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.AutoTextOrientationCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.AutoTextOrientationCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
            <value>
            Supported formats: BlackWhite, Indexed1, Indexed4, Indexed8, Gray8, Gray16,
            Bgr24, Bgr32, Bgr48, Bgra32, Bgra64.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.AutoTextOrientationCommand.StripWidth">
            <summary>
            Gets or sets the width of strips, in pixels, for image scanning.
            </summary>
            <value>
            0 - width of strips is calculated automatically for each image
            depending on its resolution;<br />
            20 and more - current value is used for width of strips.<br />
            Default value is <b>0</b> (automatically computed width of strips).
            </value>
            <remarks>
            Stripping the image improves orientation determination of documents with:
            <ul>
            <li>mixed textual and nontextual contents (graphics, tables, diagrams, etc)</li>
            <li>slight skew</li>
            <li>border noise</li>
            </ul>
            <br />
            If value of this property is set manually, it must be sufficiently large to cover
            at least 10-15 standard symbols in a text line.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.AutoTextOrientationCommand.MinConfidence">
            <summary>
            Gets or sets the minimum confidence for determined orientation.
            </summary>
            <value>
            Valid values are from 0.0 (0%) to 1.0 (100%).
            Default value is <b>0.3</b> (30%).
            </value>
            <remarks>
            Result will be considered as undetermined and image will not be rotated
            if the determined confidence will be less than value of this property.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.AutoTextOrientationCommand.Binarization">
            <summary>
            Gets or sets a binarization command applied to a not-black-white images.
            </summary>
            <value>
            Default value is <see cref="T:Vintasoft.Imaging.ImageProcessing.BinarizationMode" />.Threshold binarization.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Document.AutoTextInvertCommand">
            <summary>
            Automatically inverts inverted text regions on an image.
            </summary>
            <remarks>
            Here is <b>a "good" sequence of operations for the document image processing</b>:<br />
            1. Invert an inverted image (<see cref="T:Vintasoft.Imaging.ImageProcessing.Document.AutoInvertCommand" />)<br />
            2. Clear a border of an image (<see cref="T:Vintasoft.Imaging.ImageProcessing.Document.BorderClearCommand" />)<br />
            3. Remove halftone from an image (<see cref="T:Vintasoft.Imaging.ImageProcessing.Document.HalftoneRemovalCommand" />)<br />
            4. Deskew an image (<see cref="T:Vintasoft.Imaging.ImageProcessing.Document.DeskewCommand" />)<br />
            5. Remove hole punches from an image (<see cref="T:Vintasoft.Imaging.ImageProcessing.Document.HolePunchRemovalCommand" />)<br />
            6. Remove lines from an image (<see cref="T:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommand" />)<br />
            7. Invert inverted text regions on an image (<see cref="T:Vintasoft.Imaging.ImageProcessing.Document.AutoTextInvertCommand" />)<br />
            8. Despeckle an image (<see cref="T:Vintasoft.Imaging.ImageProcessing.Document.DespeckleCommand" />)<br />
            9. Remove border of an image (<see cref="T:Vintasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand" />)
            </remarks>
            <example>This example shows how to load an image of document from disk, prepare the image
            of document for OCR and save the result to the new image file.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing
            Imports Vintasoft.Imaging.ImageProcessing.Document
            
            Class DocumentCommandsExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("G:\SampleImages\Border.tif")
            
                    Try
                        ' invert an image if image is inverted
                        ExecuteCommand(New AutoInvertCommand(), image)
            
                        ' clear noise on a border of the image
                        ExecuteCommand(New BorderClearCommand(), image)
            
                        ' remove halftone from the image
                        ExecuteCommand(New HalftoneRemovalCommand(), image)
            
                        ' detect the correct orientation of the image
                        ExecuteCommand(New DeskewCommand(), image)
            
                        ' remove hole punches on image
                        ExecuteCommand(New HolePunchRemovalCommand(), image)
            
                        ' remove tables on image
                        ExecuteCommand(New LineRemovalCommand(RemovingLinesType.Tables), image)
            
                        ' invert inverted text regions on an image
                        ExecuteCommand(New AutoTextInvertCommand(), image)
            
                        ' remove noise from the image
                        ExecuteCommand(New DespeckleCommand(), image)
            
                        ' remove border around the image
                        ExecuteCommand(New BorderRemovalCommand(), image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' save the processed image to the new file
                    image.Save("G:\processed-image.tif")
                End Sub
            
                Private Sub ExecuteCommand(command As ProcessingCommandBase, image As VintasoftImage)
                    ' subscribe to the progress event of command
                    AddHandler command.Progress, New EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
            
                    ' execute the command
                    command.ExecuteInPlace(image)
            
                    ' unsubscribe from the progress event of command
                    RemoveHandler command.Progress, New EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
                End Sub
            
                Private Sub command_Progress(sender As Object, e As ImageProcessingProgressEventArgs)
                    ' update progress info using e.Progress property
                    ' ...
            
                    ' cancel execution of command using e.Cancel property if necessary
                    ' ...
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System;
            using System.Windows.Forms;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing;
            using Vintasoft.Imaging.ImageProcessing.Document;
            
            class DocumentCommandsExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage(@"G:\SampleImages\Border.tif");
            
                    try
                    {
                        // invert an image if image is inverted
                        ExecuteCommand(new AutoInvertCommand(), image);
            
                        // clear noise on a border of the image
                        ExecuteCommand(new BorderClearCommand(), image);
            
                        // remove halftone from the image
                        ExecuteCommand(new HalftoneRemovalCommand(), image);
            
                        // detect the correct orientation of the image
                        ExecuteCommand(new DeskewCommand(), image);
            
                        // remove hole punches on image
                        ExecuteCommand(new HolePunchRemovalCommand(), image);
            
                        // remove tables on image
                        ExecuteCommand(new LineRemovalCommand(RemovingLinesType.Tables), image);
            
                        // invert inverted text regions on an image
                        ExecuteCommand(new AutoTextInvertCommand(), image);
            
                        // remove noise from the image
                        ExecuteCommand(new DespeckleCommand(), image);
            
                        // remove border around the image
                        ExecuteCommand(new BorderRemovalCommand(), image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // save the processed image to the new file
                    image.Save(@"G:\processed-image.tif");
                }
            
                void ExecuteCommand(ProcessingCommandBase command, VintasoftImage image)
                {
                    // subscribe to the progress event of command
                    command.Progress += new EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
            
                    // execute the command
                    command.ExecuteInPlace(image);
            
                    // unsubscribe from the progress event of command
                    command.Progress -= new EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
                }
            
                void command_Progress(object sender, ImageProcessingProgressEventArgs e)
                {
                    // update progress info using e.Progress property
                    // ...
            
                    // cancel execution of command using e.Cancel property if necessary
                    // ...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Document.AutoTextInvertCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Document.AutoTextInvertCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Document.AutoTextInvertCommand.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Document.AutoTextInvertCommand" /> class.
            </summary>
            <param name="minWidth">Minimum width, in pixels, of inverted text block.</param>
            <param name="maxWidth">Maximum width, in pixels, of inverted text block.</param>
            <param name="minHeight">Minimum height, in pixels, of inverted text block.</param>
            <param name="maxHeight">Maximum height, in pixels, of inverted text block.</param>
            <param name="minWhitePercentage">Minimum percentage of white pixels in inverted text block.</param>
            <param name="maxWhitePercentage">Maximum percentage of white pixels in inverted text block.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Document.AutoTextInvertCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Document.AutoTextInvertCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Document.AutoTextInvertCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Document.AutoTextInvertCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Document.AutoTextInvertCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Processes the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
            <exception cref="T:Vintasoft.Imaging.ImageProcessing.ImageProcessingException">Thrown if
            minimal width of inverted text block is greater than maximal width <b>OR</b>
            minimal height of inverted text block is greater than maximal height <b>OR</b>
            minimal white pixel percentage of inverted text block is greater than maximal white pixel percentage.
            </exception>
            <remarks>
            This method changes the <i>image</i>.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.AutoTextInvertCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.AutoTextInvertCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
            <value>
            Supported formats: BlackWhite, Gray8, Gray16,
            Bgr24, Bgr32, Bgr48, Bgra32, Bgra64.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.AutoTextInvertCommand.MinWidth">
            <summary>
            Gets or sets the minimum width, in pixels, of inverted text block.
            </summary>
            <value>
            Possible values are from 10 to 16384.
            Default value is <b>50</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.AutoTextInvertCommand.MaxWidth">
            <summary>
            Gets or sets the maximum width, in pixels, of inverted text block.
            </summary>
            <value>
            Possible values are from 10 to 16384.
            Default value is <b>1500</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.AutoTextInvertCommand.MinHeight">
            <summary>
            Gets or sets the minimum height, in pixels, of inverted text block.
            </summary>
            <value>
            Possible values are from 10 to 16384.
            Default value is <b>20</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.AutoTextInvertCommand.MaxHeight">
            <summary>
            Gets or sets the maximum height, in pixels, of inverted text block.
            </summary>
            <value>
            Possible values are from 10 to 16384.
            Default value is <b>200</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.AutoTextInvertCommand.MinWhitePercentage">
            <summary>
            Gets or sets the minimum percentage of white pixels in inverted text block.
            </summary>
            <value>
            Possible values are from 0.0 (0%) to 49.0 (49%).
            Default value is <b>1.0</b> (1%).
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.AutoTextInvertCommand.MaxWhitePercentage">
            <summary>
            Gets or sets the maximum percentage of white pixels in inverted text block.
            </summary>
            <value>
            Possible values are from 0.0 (0%) to 49.0 (49%).
            Default value is <b>40.0</b> (40%).
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.AutoTextInvertCommand.BackgroundColor">
            <summary>
            Gets or sets a color for filling of inverted text block background.
            </summary>
            <value>
            Default value is <see cref="T:System.Drawing.Color" />.White.
            </value>
            <remarks>
            Value of this property is valid only if source image is not a black-white image
            (image.PixelFormat != <see cref="T:Vintasoft.Imaging.PixelFormat" />.BlackWhite).
            For images with PixelFormat == <see cref="T:Vintasoft.Imaging.PixelFormat" />.BlackWhite,
            the text of inverted blocks will always become white.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.AutoTextInvertCommand.TextColor">
            <summary>
            Gets or sets a color for filling of inverted text.
            </summary>
            <value>
            Default value is <see cref="T:System.Drawing.Color" />.Black.
            </value>
            <remarks>
            Value of this property is valid only if source image is not a black-white image
            (image.PixelFormat != <see cref="T:Vintasoft.Imaging.PixelFormat" />.BlackWhite).
            For images with PixelFormat == <see cref="T:Vintasoft.Imaging.PixelFormat" />.BlackWhite,
            the inverted text will always become black.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.AutoTextInvertCommand.Binarization">
            <summary>
            Gets or sets a binarization command applied to a not-black-white images.
            </summary>
            <value>
            Default value is <see cref="T:Vintasoft.Imaging.ImageProcessing.BinarizationMode" />.Global binarization.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Document.BorderClearCommand">
            <summary>
            Clears noise on the border of an image.
            </summary>
            <remarks>
            Here is <b>a "good" sequence of operations for the document image processing</b>:<br />
            1. Invert an inverted image (<see cref="T:Vintasoft.Imaging.ImageProcessing.Document.AutoInvertCommand" />)<br />
            2. Clear a border of an image (<see cref="T:Vintasoft.Imaging.ImageProcessing.Document.BorderClearCommand" />)<br />
            3. Remove halftone from an image (<see cref="T:Vintasoft.Imaging.ImageProcessing.Document.HalftoneRemovalCommand" />)<br />
            4. Deskew an image (<see cref="T:Vintasoft.Imaging.ImageProcessing.Document.DeskewCommand" />)<br />
            5. Remove hole punches from an image (<see cref="T:Vintasoft.Imaging.ImageProcessing.Document.HolePunchRemovalCommand" />)<br />
            6. Remove lines from an image (<see cref="T:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommand" />)<br />
            7. Invert inverted text regions on an image (<see cref="T:Vintasoft.Imaging.ImageProcessing.Document.AutoTextInvertCommand" />)<br />
            8. Despeckle an image (<see cref="T:Vintasoft.Imaging.ImageProcessing.Document.DespeckleCommand" />)<br />
            9. Remove border of an image (<see cref="T:Vintasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand" />)
            </remarks>
            <example>This example shows how to load an image of document from disk, prepare the image
            of document for OCR and save the result to the new image file.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing
            Imports Vintasoft.Imaging.ImageProcessing.Document
            
            Class DocumentCommandsExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("G:\SampleImages\Border.tif")
            
                    Try
                        ' invert an image if image is inverted
                        ExecuteCommand(New AutoInvertCommand(), image)
            
                        ' clear noise on a border of the image
                        ExecuteCommand(New BorderClearCommand(), image)
            
                        ' remove halftone from the image
                        ExecuteCommand(New HalftoneRemovalCommand(), image)
            
                        ' detect the correct orientation of the image
                        ExecuteCommand(New DeskewCommand(), image)
            
                        ' remove hole punches on image
                        ExecuteCommand(New HolePunchRemovalCommand(), image)
            
                        ' remove tables on image
                        ExecuteCommand(New LineRemovalCommand(RemovingLinesType.Tables), image)
            
                        ' invert inverted text regions on an image
                        ExecuteCommand(New AutoTextInvertCommand(), image)
            
                        ' remove noise from the image
                        ExecuteCommand(New DespeckleCommand(), image)
            
                        ' remove border around the image
                        ExecuteCommand(New BorderRemovalCommand(), image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' save the processed image to the new file
                    image.Save("G:\processed-image.tif")
                End Sub
            
                Private Sub ExecuteCommand(command As ProcessingCommandBase, image As VintasoftImage)
                    ' subscribe to the progress event of command
                    AddHandler command.Progress, New EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
            
                    ' execute the command
                    command.ExecuteInPlace(image)
            
                    ' unsubscribe from the progress event of command
                    RemoveHandler command.Progress, New EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
                End Sub
            
                Private Sub command_Progress(sender As Object, e As ImageProcessingProgressEventArgs)
                    ' update progress info using e.Progress property
                    ' ...
            
                    ' cancel execution of command using e.Cancel property if necessary
                    ' ...
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System;
            using System.Windows.Forms;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing;
            using Vintasoft.Imaging.ImageProcessing.Document;
            
            class DocumentCommandsExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage(@"G:\SampleImages\Border.tif");
            
                    try
                    {
                        // invert an image if image is inverted
                        ExecuteCommand(new AutoInvertCommand(), image);
            
                        // clear noise on a border of the image
                        ExecuteCommand(new BorderClearCommand(), image);
            
                        // remove halftone from the image
                        ExecuteCommand(new HalftoneRemovalCommand(), image);
            
                        // detect the correct orientation of the image
                        ExecuteCommand(new DeskewCommand(), image);
            
                        // remove hole punches on image
                        ExecuteCommand(new HolePunchRemovalCommand(), image);
            
                        // remove tables on image
                        ExecuteCommand(new LineRemovalCommand(RemovingLinesType.Tables), image);
            
                        // invert inverted text regions on an image
                        ExecuteCommand(new AutoTextInvertCommand(), image);
            
                        // remove noise from the image
                        ExecuteCommand(new DespeckleCommand(), image);
            
                        // remove border around the image
                        ExecuteCommand(new BorderRemovalCommand(), image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // save the processed image to the new file
                    image.Save(@"G:\processed-image.tif");
                }
            
                void ExecuteCommand(ProcessingCommandBase command, VintasoftImage image)
                {
                    // subscribe to the progress event of command
                    command.Progress += new EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
            
                    // execute the command
                    command.ExecuteInPlace(image);
            
                    // unsubscribe from the progress event of command
                    command.Progress -= new EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
                }
            
                void command_Progress(object sender, ImageProcessingProgressEventArgs e)
                {
                    // update progress info using e.Progress property
                    // ...
            
                    // cancel execution of command using e.Cancel property if necessary
                    // ...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Document.BorderClearCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Document.BorderClearCommand" /> class
            with default parameters.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Document.BorderClearCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Document.BorderClearCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Document.BorderClearCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Document.BorderClearCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Document.BorderClearCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Processes the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
            <remarks>
            This method changes the <i>image</i>.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.BorderClearCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.BorderClearCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
            <value>
            Supported values: BlackWhite, Indexed1, Indexed4, Indexed8, Gray8, Gray16,
            Bgr24, Bgr32, Bgr48, Bgra32, Bgra64.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Document.ColorNoiseClearCommand">
            <summary>
            Clears color noise on an image.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Document.ColorNoiseClearCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Document.ColorNoiseClearCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Document.ColorNoiseClearCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Document.ColorNoiseClearCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Document.ColorNoiseClearCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Document.ColorNoiseClearCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Document.ColorNoiseClearCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Processes the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.ColorNoiseClearCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.ColorNoiseClearCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
            <value>
            Supported formats: Indexed1, Indexed4, Indexed8, Gray8, Bgr24, Bgr32, Bgra32.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.ColorNoiseClearCommand.MaskImage">
            <summary>
            Gets or sets the black-white image mask.
            </summary>
            <value>
            <b>null</b> - all pixels of source image will be processed;
            black-white image - source image's pixel will be processed if image mask's pixel,
            in the same position, is set to 1.<br />
            Black-white image mask must have the same size as the source image.
            </value>
            <exception cref="T:System.ArgumentNullException">Thrown if mask image is <b>null</b>.</exception>
            <exception cref="T:System.FormatException">Thrown if mask image is not BlackWhite image.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.ColorNoiseClearCommand.ColorSpheres">
            <summary>
            Gets or sets an array of colors, presented as color spheres, which should be replaced.
            </summary>
            <value>
            Default value is an array with 1 color sphere: Red sphere with radius 0.5.
            </value>
            <exception cref="T:System.ArgumentNullException">Thrown if old colors is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if old colors is empty.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.ColorNoiseClearCommand.InterpolationRadius">
            <summary>
            Gets or sets a radius, in range from 0 to 1, which specifies
            when interpolation should be used for color replacement.
            </summary>
            <value>
            Possible values are from 0 to 1:<br />
            <ul>
            <li>0.0 - any color from color sphere
            will be replaced by <see cref="P:Vintasoft.Imaging.ImageColors.ColorSphere.Center" /></li>
            <li>0.6 - color of sphere center and
            colors located from the sphere center at a distance (0.4*Radius)
            will be replaced by <see cref="P:Vintasoft.Imaging.ImageColors.ColorSphere.Center" />,
            all other colors from color sphere will be interpolated.</li>
            <li>1.0 - color of sphere center will be replaced by <see cref="P:Vintasoft.Imaging.ImageColors.ColorSphere.Center" />,
            all other colors from color sphere will be interpolated.</li>
            </ul>
            <br />
            Default value is 0.5.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            value is more than 1.0.</exception>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Document.DeskewCommand">
            <summary>
            Deskews an image, i.e. detects a correct position of a textual image.
            </summary>
            <remarks>
            Here is <b>a "good" sequence of operations for the document image processing</b>:<br />
            1. Invert an inverted image (<see cref="T:Vintasoft.Imaging.ImageProcessing.Document.AutoInvertCommand" />)<br />
            2. Clear a border of an image (<see cref="T:Vintasoft.Imaging.ImageProcessing.Document.BorderClearCommand" />)<br />
            3. Remove halftone from an image (<see cref="T:Vintasoft.Imaging.ImageProcessing.Document.HalftoneRemovalCommand" />)<br />
            4. Deskew an image (<see cref="T:Vintasoft.Imaging.ImageProcessing.Document.DeskewCommand" />)<br />
            5. Remove hole punches from an image (<see cref="T:Vintasoft.Imaging.ImageProcessing.Document.HolePunchRemovalCommand" />)<br />
            6. Remove lines from an image (<see cref="T:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommand" />)<br />
            7. Invert inverted text regions on an image (<see cref="T:Vintasoft.Imaging.ImageProcessing.Document.AutoTextInvertCommand" />)<br />
            8. Despeckle an image (<see cref="T:Vintasoft.Imaging.ImageProcessing.Document.DespeckleCommand" />)<br />
            9. Remove border of an image (<see cref="T:Vintasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand" />)
            </remarks>
            <example>This example shows how to load an image of document from disk, prepare the image
            of document for OCR and save the result to the new image file.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing
            Imports Vintasoft.Imaging.ImageProcessing.Document
            
            Class DocumentCommandsExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("G:\SampleImages\Border.tif")
            
                    Try
                        ' invert an image if image is inverted
                        ExecuteCommand(New AutoInvertCommand(), image)
            
                        ' clear noise on a border of the image
                        ExecuteCommand(New BorderClearCommand(), image)
            
                        ' remove halftone from the image
                        ExecuteCommand(New HalftoneRemovalCommand(), image)
            
                        ' detect the correct orientation of the image
                        ExecuteCommand(New DeskewCommand(), image)
            
                        ' remove hole punches on image
                        ExecuteCommand(New HolePunchRemovalCommand(), image)
            
                        ' remove tables on image
                        ExecuteCommand(New LineRemovalCommand(RemovingLinesType.Tables), image)
            
                        ' invert inverted text regions on an image
                        ExecuteCommand(New AutoTextInvertCommand(), image)
            
                        ' remove noise from the image
                        ExecuteCommand(New DespeckleCommand(), image)
            
                        ' remove border around the image
                        ExecuteCommand(New BorderRemovalCommand(), image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' save the processed image to the new file
                    image.Save("G:\processed-image.tif")
                End Sub
            
                Private Sub ExecuteCommand(command As ProcessingCommandBase, image As VintasoftImage)
                    ' subscribe to the progress event of command
                    AddHandler command.Progress, New EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
            
                    ' execute the command
                    command.ExecuteInPlace(image)
            
                    ' unsubscribe from the progress event of command
                    RemoveHandler command.Progress, New EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
                End Sub
            
                Private Sub command_Progress(sender As Object, e As ImageProcessingProgressEventArgs)
                    ' update progress info using e.Progress property
                    ' ...
            
                    ' cancel execution of command using e.Cancel property if necessary
                    ' ...
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System;
            using System.Windows.Forms;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing;
            using Vintasoft.Imaging.ImageProcessing.Document;
            
            class DocumentCommandsExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage(@"G:\SampleImages\Border.tif");
            
                    try
                    {
                        // invert an image if image is inverted
                        ExecuteCommand(new AutoInvertCommand(), image);
            
                        // clear noise on a border of the image
                        ExecuteCommand(new BorderClearCommand(), image);
            
                        // remove halftone from the image
                        ExecuteCommand(new HalftoneRemovalCommand(), image);
            
                        // detect the correct orientation of the image
                        ExecuteCommand(new DeskewCommand(), image);
            
                        // remove hole punches on image
                        ExecuteCommand(new HolePunchRemovalCommand(), image);
            
                        // remove tables on image
                        ExecuteCommand(new LineRemovalCommand(RemovingLinesType.Tables), image);
            
                        // invert inverted text regions on an image
                        ExecuteCommand(new AutoTextInvertCommand(), image);
            
                        // remove noise from the image
                        ExecuteCommand(new DespeckleCommand(), image);
            
                        // remove border around the image
                        ExecuteCommand(new BorderRemovalCommand(), image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // save the processed image to the new file
                    image.Save(@"G:\processed-image.tif");
                }
            
                void ExecuteCommand(ProcessingCommandBase command, VintasoftImage image)
                {
                    // subscribe to the progress event of command
                    command.Progress += new EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
            
                    // execute the command
                    command.ExecuteInPlace(image);
            
                    // unsubscribe from the progress event of command
                    command.Progress -= new EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
                }
            
                void command_Progress(object sender, ImageProcessingProgressEventArgs e)
                {
                    // update progress info using e.Progress property
                    // ...
            
                    // cancel execution of command using e.Cancel property if necessary
                    // ...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Document.DeskewCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Document.DeskewCommand" /> class
            with default values.
            </summary>
            <remarks>You can reach better result by setting custom parameters.</remarks>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Document.DeskewCommand.#ctor(Vintasoft.Imaging.ImageProcessing.BorderColorType,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Document.DeskewCommand" /> class.
            </summary>
            <param name="borderColor">Border color.
            Free space around rotated image will be filled with this color.
            Recommended value is <see cref="P:Vintasoft.Imaging.ImageProcessing.Document.DeskewCommand.BorderColorType" />.AutoDetect.</param>
            <param name="scanIntervalX">Scan interval on X axis.</param>
            <param name="scanIntervalY">Scan interval on Y axis.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Document.DeskewCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Document.DeskewCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Document.DeskewCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Document.DeskewCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Document.DeskewCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Processes the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
            <remarks>
            This method changes the <i>image</i>.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.DeskewCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.DeskewCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
            <value>
            Supported formats: BlackWhite, Indexed1, Indexed4, Indexed8, Gray8, Gray16,
            Bgr24, Bgr32, Bgr48, Bgra32, Bgra64.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.DeskewCommand.BorderColorType">
            <summary>
            Gets or sets the type of the border color.
            Free space around rotated image will be filled with this color.
            </summary>
            <value>Default value is <see cref="P:Vintasoft.Imaging.ImageProcessing.Document.DeskewCommand.BorderColorType" />.AutoDetect.</value>
            <remarks>Recommended value is <see cref="P:Vintasoft.Imaging.ImageProcessing.Document.DeskewCommand.BorderColorType" />.AutoDetect.</remarks>
            <seealso cref="P:Vintasoft.Imaging.ImageProcessing.Document.DeskewCommand.BorderColor" />
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.DeskewCommand.BorderColor">
            <summary>
            Gets or sets the color for filling the image border when <see cref="P:Vintasoft.Imaging.ImageProcessing.Document.DeskewCommand.BorderColorType" />
            is set to BorderColorType.Custom.
            </summary>
            <value>Default value is System.Drawing.Color.Black.</value>
            <seealso cref="P:Vintasoft.Imaging.ImageProcessing.Document.DeskewCommand.BorderColorType" />
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.DeskewCommand.ScanIntervalX">
            <summary>
            Gets or sets scan interval on X axis.
            </summary>
            <value>
            Valid values are from 1 to image.Width:
            1 - every column will be scanned, 2 - every second column will be scanned,
            3 - every third column will be scanned, and so on.<br />
            Recommended values are from 1 to 10.<br />
            Default value is 3.
            </value>
            <remarks>
            Big values of this property may speed up deskewing process, but may worsen results.<br />
            <br />
            This property is used only for detection of the rotation angle of an image and
            do not used at rotation of the image.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.DeskewCommand.ScanIntervalY">
            <summary>
            Gets or sets scan interval on Y axis.
            </summary>
            <value>
            Valid values are from 1 to image.Height:
            1 - every row will be scanned, 2 - every second row will be scanned,
            3 - every third row will be scanned, and so on.<br />
            Recommended values are from 1 to 10.<br />
            Default value is 3.
            </value>
            <remarks>
            Big values of this property may speed up deskewing process, but may worsen results.<br />
            <br />
            This property is used only for detection of the rotation angle of an image and
            do not used at rotation of the image.
            </remarks>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Document.DespeckleCommand">
            <summary>
            Removes noise from an image.
            </summary>
            <remarks>
            Here is <b>a "good" sequence of operations for the document image processing</b>:<br />
            1. Invert an inverted image (<see cref="T:Vintasoft.Imaging.ImageProcessing.Document.AutoInvertCommand" />)<br />
            2. Clear a border of an image (<see cref="T:Vintasoft.Imaging.ImageProcessing.Document.BorderClearCommand" />)<br />
            3. Remove halftone from an image (<see cref="T:Vintasoft.Imaging.ImageProcessing.Document.HalftoneRemovalCommand" />)<br />
            4. Deskew an image (<see cref="T:Vintasoft.Imaging.ImageProcessing.Document.DeskewCommand" />)<br />
            5. Remove hole punches from an image (<see cref="T:Vintasoft.Imaging.ImageProcessing.Document.HolePunchRemovalCommand" />)<br />
            6. Remove lines from an image (<see cref="T:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommand" />)<br />
            7. Invert inverted text regions on an image (<see cref="T:Vintasoft.Imaging.ImageProcessing.Document.AutoTextInvertCommand" />)<br />
            8. Despeckle an image (<see cref="T:Vintasoft.Imaging.ImageProcessing.Document.DespeckleCommand" />)<br />
            9. Remove border of an image (<see cref="T:Vintasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand" />)
            <br />
            This class removes noise from image. Current algorithm removes 2 types of noise:<br />
            <br />
            1. "Small" noise - a set of pixels (non background pixels) with quantity of pixels less than
            value of <i>level1</i> parameter. This set of pixels will be replaced to background pixels.<br />
            <br />
            2. "Medium" noise - a set of pixels (non background pixels) with quantity of pixels less than
            value of <i>level2</i> parameter. This set of pixels will be replaced to background pixels if
            around this set of pixels in a region with radius of value of radius parameter there is
            no "good objects". "Good object" - not a noise.<br />
            <br />
            <see cref="P:Vintasoft.Imaging.ImageProcessing.ProcessingCommandWithRegion.RegionOfInterest" /> property can be used for specifying
            the region of interest for this command.
            </remarks>
            <example>This example shows how to load an image of document from disk, prepare the image
            of document for OCR and save the result to the new image file.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing
            Imports Vintasoft.Imaging.ImageProcessing.Document
            
            Class DocumentCommandsExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("G:\SampleImages\Border.tif")
            
                    Try
                        ' invert an image if image is inverted
                        ExecuteCommand(New AutoInvertCommand(), image)
            
                        ' clear noise on a border of the image
                        ExecuteCommand(New BorderClearCommand(), image)
            
                        ' remove halftone from the image
                        ExecuteCommand(New HalftoneRemovalCommand(), image)
            
                        ' detect the correct orientation of the image
                        ExecuteCommand(New DeskewCommand(), image)
            
                        ' remove hole punches on image
                        ExecuteCommand(New HolePunchRemovalCommand(), image)
            
                        ' remove tables on image
                        ExecuteCommand(New LineRemovalCommand(RemovingLinesType.Tables), image)
            
                        ' invert inverted text regions on an image
                        ExecuteCommand(New AutoTextInvertCommand(), image)
            
                        ' remove noise from the image
                        ExecuteCommand(New DespeckleCommand(), image)
            
                        ' remove border around the image
                        ExecuteCommand(New BorderRemovalCommand(), image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' save the processed image to the new file
                    image.Save("G:\processed-image.tif")
                End Sub
            
                Private Sub ExecuteCommand(command As ProcessingCommandBase, image As VintasoftImage)
                    ' subscribe to the progress event of command
                    AddHandler command.Progress, New EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
            
                    ' execute the command
                    command.ExecuteInPlace(image)
            
                    ' unsubscribe from the progress event of command
                    RemoveHandler command.Progress, New EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
                End Sub
            
                Private Sub command_Progress(sender As Object, e As ImageProcessingProgressEventArgs)
                    ' update progress info using e.Progress property
                    ' ...
            
                    ' cancel execution of command using e.Cancel property if necessary
                    ' ...
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System;
            using System.Windows.Forms;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing;
            using Vintasoft.Imaging.ImageProcessing.Document;
            
            class DocumentCommandsExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage(@"G:\SampleImages\Border.tif");
            
                    try
                    {
                        // invert an image if image is inverted
                        ExecuteCommand(new AutoInvertCommand(), image);
            
                        // clear noise on a border of the image
                        ExecuteCommand(new BorderClearCommand(), image);
            
                        // remove halftone from the image
                        ExecuteCommand(new HalftoneRemovalCommand(), image);
            
                        // detect the correct orientation of the image
                        ExecuteCommand(new DeskewCommand(), image);
            
                        // remove hole punches on image
                        ExecuteCommand(new HolePunchRemovalCommand(), image);
            
                        // remove tables on image
                        ExecuteCommand(new LineRemovalCommand(RemovingLinesType.Tables), image);
            
                        // invert inverted text regions on an image
                        ExecuteCommand(new AutoTextInvertCommand(), image);
            
                        // remove noise from the image
                        ExecuteCommand(new DespeckleCommand(), image);
            
                        // remove border around the image
                        ExecuteCommand(new BorderRemovalCommand(), image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // save the processed image to the new file
                    image.Save(@"G:\processed-image.tif");
                }
            
                void ExecuteCommand(ProcessingCommandBase command, VintasoftImage image)
                {
                    // subscribe to the progress event of command
                    command.Progress += new EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
            
                    // execute the command
                    command.ExecuteInPlace(image);
            
                    // unsubscribe from the progress event of command
                    command.Progress -= new EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
                }
            
                void command_Progress(object sender, ImageProcessingProgressEventArgs e)
                {
                    // update progress info using e.Progress property
                    // ...
            
                    // cancel execution of command using e.Cancel property if necessary
                    // ...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Document.DespeckleCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Document.DespeckleCommand" /> class 
            with default parameters.
            </summary>
            <remarks>You can reach better result by setting custom parameters.</remarks>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Document.DespeckleCommand.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Document.DespeckleCommand" /> class.
            </summary>
            <param name="level1">Maximal quantity of pixels in a small noise. Valid values are from 0 to 100, recommended value is 8. What is "small noise" see below.</param>
            <param name="level2">Maximal quantity of pixels in a medium noise. Valid values are from 0 to 100, recommended value is 25. What is "medium noise" see below.</param>
            <param name="radius">Radius of area around medium noise in which there is no "good objects". Vaid values are from 0 to 100, recommended value is 30. What is "good objects" see below.</param>
            <remarks>
            Current algorithm removes two types of noise:<br />
            <br />
            1. "Small" noise - a set of pixels (non background pixels) with quantity of pixels less than
            value of <i>level1</i> parameter. This set of pixels will be replaced to background pixels.<br />
            <br />
            2. "Medium" noise - a set of pixels (non background pixels) with quantity of pixels less than
            value of <i>level2</i> parameter. This set of pixels will be replaced to background pixels if
            around this set of pixels in a region with radius of value of radius parameter there is
            no "good objects". "Good object" - not a noise.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Document.DespeckleCommand.SetBorderDetectionCommand(Vintasoft.Imaging.ImageProcessing.Info.GetBorderColorCommand)">
            <summary>
            Sets the custom border detection command.
            </summary>
            <param name="borderDetectionCommand">Custom border detection command.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Document.DespeckleCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Document.DespeckleCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Document.DespeckleCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Document.DespeckleCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Document.DespeckleCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Processes the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
            <remarks>
            This method changes the <i>image</i>.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.DespeckleCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.DespeckleCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
            <value>
            Supported formats: BlackWhite, Indexed1, Indexed4, Indexed8, Gray8, Gray16,
            Bgr24, Bgr32, Bgr48, Bgra32, Bgra64.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.DespeckleCommand.Level1">
            <summary>
            Gets or sets the maximum pixel amount in a "small" noise object.
            </summary>
            <value>Valid values are from 0 to 100. Default value is 8.</value>
            <remarks>
            Small noise - a set of pixels (non background pixels) with quantity of pixels less than 
            value of <i>Level1</i> parameter. This set of pixels will be replaced to background pixels.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.DespeckleCommand.Level2">
            <summary>
            Gets or sets the maximum pixel amount in a "medium" noise object.
            </summary>
            <value>Valid values are from 0 to 100. Default value is 25.</value>
            <remarks>
            Medium noise - a set of pixels (non background pixels) with quantity of pixels less than 
            value of <i>Level2</i> parameter. This set of pixels will be replaced to background pixels
            if around this set of pixels in a region with radius of value of radius parameter 
            there is no "good objects". "Good object" - not a noise.<br />
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.DespeckleCommand.Radius">
            <summary>
            Gets or sets the radius around a "medium" noise object which does not contain "not-noise" objects.
            </summary>
            <value>Valid values are from 0 to 100. Default value is 30.</value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.DespeckleCommand.Level3">
            <summary>
            Gets or sets the maximum pixel amount in a "boundary" noise.
            </summary>
            <value>Valid values are from 0 to 3000. Default value is 400.</value>
            <remarks>
            "Boundary" noise - a set of pixels (non background pixels) with quantity of pixels less than 
            value of <i>Level3</i> parameter. This set of pixels will be replaced to background pixels 
            if at least one pixel from this set of pixels is located on an image border.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.DespeckleCommand.AutoConfigureLevels">
            <summary>
            Gets or sets a value indicating whether automatic configuration of levels
            and radius should be used.
            </summary>
            <value>
            <b>true</b> if automatic configuration of levels and radius is enabled;
            otherwise, <b>false</b>.
            Default value is <b>true</b>.
            </value>
            <seealso cref="P:Vintasoft.Imaging.ImageProcessing.Document.DespeckleCommand.Level1" />
            <seealso cref="P:Vintasoft.Imaging.ImageProcessing.Document.DespeckleCommand.Level2" />
            <seealso cref="P:Vintasoft.Imaging.ImageProcessing.Document.DespeckleCommand.Radius" />
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Document.HalftoneRemovalCommand">
            <summary>
            Detects halftone regions and removes halftone on an image.
            </summary>
            <remarks>
            Here is <b>a "good" sequence of operations for the document image processing</b>:<br />
            1. Invert an inverted image (<see cref="T:Vintasoft.Imaging.ImageProcessing.Document.AutoInvertCommand" />)<br />
            2. Clear a border of an image (<see cref="T:Vintasoft.Imaging.ImageProcessing.Document.BorderClearCommand" />)<br />
            3. Remove halftone from an image (<see cref="T:Vintasoft.Imaging.ImageProcessing.Document.HalftoneRemovalCommand" />)<br />
            4. Deskew an image (<see cref="T:Vintasoft.Imaging.ImageProcessing.Document.DeskewCommand" />)<br />
            5. Remove hole punches from an image (<see cref="T:Vintasoft.Imaging.ImageProcessing.Document.HolePunchRemovalCommand" />)<br />
            6. Remove lines from an image (<see cref="T:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommand" />)<br />
            7. Invert inverted text regions on an image (<see cref="T:Vintasoft.Imaging.ImageProcessing.Document.AutoTextInvertCommand" />)<br />
            8. Despeckle an image (<see cref="T:Vintasoft.Imaging.ImageProcessing.Document.DespeckleCommand" />)<br />
            9. Remove border of an image (<see cref="T:Vintasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand" />)
            </remarks>
            <example>This example shows how to load an image of document from disk, prepare the image
            of document for OCR and save the result to the new image file.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing
            Imports Vintasoft.Imaging.ImageProcessing.Document
            
            Class DocumentCommandsExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("G:\SampleImages\Border.tif")
            
                    Try
                        ' invert an image if image is inverted
                        ExecuteCommand(New AutoInvertCommand(), image)
            
                        ' clear noise on a border of the image
                        ExecuteCommand(New BorderClearCommand(), image)
            
                        ' remove halftone from the image
                        ExecuteCommand(New HalftoneRemovalCommand(), image)
            
                        ' detect the correct orientation of the image
                        ExecuteCommand(New DeskewCommand(), image)
            
                        ' remove hole punches on image
                        ExecuteCommand(New HolePunchRemovalCommand(), image)
            
                        ' remove tables on image
                        ExecuteCommand(New LineRemovalCommand(RemovingLinesType.Tables), image)
            
                        ' invert inverted text regions on an image
                        ExecuteCommand(New AutoTextInvertCommand(), image)
            
                        ' remove noise from the image
                        ExecuteCommand(New DespeckleCommand(), image)
            
                        ' remove border around the image
                        ExecuteCommand(New BorderRemovalCommand(), image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' save the processed image to the new file
                    image.Save("G:\processed-image.tif")
                End Sub
            
                Private Sub ExecuteCommand(command As ProcessingCommandBase, image As VintasoftImage)
                    ' subscribe to the progress event of command
                    AddHandler command.Progress, New EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
            
                    ' execute the command
                    command.ExecuteInPlace(image)
            
                    ' unsubscribe from the progress event of command
                    RemoveHandler command.Progress, New EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
                End Sub
            
                Private Sub command_Progress(sender As Object, e As ImageProcessingProgressEventArgs)
                    ' update progress info using e.Progress property
                    ' ...
            
                    ' cancel execution of command using e.Cancel property if necessary
                    ' ...
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System;
            using System.Windows.Forms;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing;
            using Vintasoft.Imaging.ImageProcessing.Document;
            
            class DocumentCommandsExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage(@"G:\SampleImages\Border.tif");
            
                    try
                    {
                        // invert an image if image is inverted
                        ExecuteCommand(new AutoInvertCommand(), image);
            
                        // clear noise on a border of the image
                        ExecuteCommand(new BorderClearCommand(), image);
            
                        // remove halftone from the image
                        ExecuteCommand(new HalftoneRemovalCommand(), image);
            
                        // detect the correct orientation of the image
                        ExecuteCommand(new DeskewCommand(), image);
            
                        // remove hole punches on image
                        ExecuteCommand(new HolePunchRemovalCommand(), image);
            
                        // remove tables on image
                        ExecuteCommand(new LineRemovalCommand(RemovingLinesType.Tables), image);
            
                        // invert inverted text regions on an image
                        ExecuteCommand(new AutoTextInvertCommand(), image);
            
                        // remove noise from the image
                        ExecuteCommand(new DespeckleCommand(), image);
            
                        // remove border around the image
                        ExecuteCommand(new BorderRemovalCommand(), image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // save the processed image to the new file
                    image.Save(@"G:\processed-image.tif");
                }
            
                void ExecuteCommand(ProcessingCommandBase command, VintasoftImage image)
                {
                    // subscribe to the progress event of command
                    command.Progress += new EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
            
                    // execute the command
                    command.ExecuteInPlace(image);
            
                    // unsubscribe from the progress event of command
                    command.Progress -= new EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
                }
            
                void command_Progress(object sender, ImageProcessingProgressEventArgs e)
                {
                    // update progress info using e.Progress property
                    // ...
            
                    // cancel execution of command using e.Cancel property if necessary
                    // ...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Document.HalftoneRemovalCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Document.HalftoneRemovalCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Document.HalftoneRemovalCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Document.HalftoneRemovalCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Document.HalftoneRemovalCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Document.HalftoneRemovalCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Document.HalftoneRemovalCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Processes the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
            <remarks>
            This method changes the <i>image</i>.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.HalftoneRemovalCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.HalftoneRemovalCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
            <value>
            Supported formats: BlackWhite.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.HalftoneRemovalCommand.MaxSegmentSize">
            <summary>
            Gets or sets the maximal length, in pixels, of a halftone segment.
            </summary>
            <value>
            Valid values are from 2 to 50.
            Default value is <b>10</b>.
            </value>
            <remarks>
            <i>Halftone segment</i> is a sequence of halftone (black) and non halftone (white) pixels.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.HalftoneRemovalCommand.CellSize">
            <summary>
            Gets or sets the size, in pixels, of cells the image is divided into.
            </summary>
            <value>
            Valid values are from 10 to 500.
            Default value is <b>20</b>.
            </value>
            <remarks>
            <i>The cell</i> is an image region that contains or does not contain a halftone.<br />
            <br />
            <i>Halftone cell</i> is <i>the cell</i> that contains a halftone.<br />
            <br />
            <i>Halftone region</i> is composed from adjacent <i>halftone cells</i>.<br />
            <br />
            The smaller is cell size the better is accuracy of recognized halftone regions contours
            but the slower is recognition.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.HalftoneRemovalCommand.MinHalftoneHeight">
            <summary>
            Gets or sets the minimal height, in pixels, of a halftone region.
            </summary>
            <value>
            Minimal value is 10.
            Default value is <b>25</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.HalftoneRemovalCommand.MinHalftoneWidth">
            <summary>
            Gets or sets the minimal width, in pixels, of a halftone region.
            </summary>
            <value>
            Minimal value is 10.
            Default value is <b>25</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.HalftoneRemovalCommand.BlackPixelRemovalThreshold">
            <summary>
            Gets or sets the threshold, in percents, for black pixels removal.
            </summary>
            <value>
            Valid values are from 0 to 100.
            Default value is <b>33</b>.
            </value>
            <remarks>
            Value of this property has effect only if
            <see cref="P:Vintasoft.Imaging.ImageProcessing.Document.HalftoneRemovalCommand.AutoThreshold" /> == <b>false</b>.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.HalftoneRemovalCommand.WhitePixelRemovalThreshold">
            <summary>
            Gets or sets the threshold, in percents, for white pixels removal.
            </summary>
            <value>
            Valid values are from 0 to 100.
            Default value is <b>33</b>.
            </value>
            <remarks>
            Value of this property has effect only if
            <see cref="P:Vintasoft.Imaging.ImageProcessing.Document.HalftoneRemovalCommand.AutoThreshold" /> == <b>false</b>.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.HalftoneRemovalCommand.AutoThreshold">
            <summary>
            Gets or sets a value indicating whether the black and white
            pixels removal thresholds are calculated automatically.
            </summary>
            <value>
            <b>true</b> - thresholds are calculated automatically;
            <b>false</b> - thresholds are used from <see cref="P:Vintasoft.Imaging.ImageProcessing.Document.HalftoneRemovalCommand.BlackPixelRemovalThreshold" />
            and <see cref="P:Vintasoft.Imaging.ImageProcessing.Document.HalftoneRemovalCommand.WhitePixelRemovalThreshold" /> properties.<br />
            Default value is <b>true</b>.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Document.HolePunchRemovalCommand">
            <summary>
            Removes (fills) hole punches on image automatically.
            </summary>
            <remarks>
            Here is <b>a "good" sequence of operations for the document image processing</b>:<br />
            1. Invert an inverted image (<see cref="T:Vintasoft.Imaging.ImageProcessing.Document.AutoInvertCommand" />)<br />
            2. Clear a border of an image (<see cref="T:Vintasoft.Imaging.ImageProcessing.Document.BorderClearCommand" />)<br />
            3. Remove halftone from an image (<see cref="T:Vintasoft.Imaging.ImageProcessing.Document.HalftoneRemovalCommand" />)<br />
            4. Deskew an image (<see cref="T:Vintasoft.Imaging.ImageProcessing.Document.DeskewCommand" />)<br />
            5. Remove hole punches from an image (<see cref="T:Vintasoft.Imaging.ImageProcessing.Document.HolePunchRemovalCommand" />)<br />
            6. Remove lines from an image (<see cref="T:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommand" />)<br />
            7. Invert inverted text regions on an image (<see cref="T:Vintasoft.Imaging.ImageProcessing.Document.AutoTextInvertCommand" />)<br />
            8. Despeckle an image (<see cref="T:Vintasoft.Imaging.ImageProcessing.Document.DespeckleCommand" />)<br />
            9. Remove border of an image (<see cref="T:Vintasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand" />)
            <br />
            <see cref="P:Vintasoft.Imaging.ImageProcessing.ProcessingCommandWithRegion.RegionOfInterest" /> property can be used for specifying
            the region of interest for this command.
            </remarks>
            <example>This example shows how to load an image of document from disk, prepare the image
            of document for OCR and save the result to the new image file.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing
            Imports Vintasoft.Imaging.ImageProcessing.Document
            
            Class DocumentCommandsExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("G:\SampleImages\Border.tif")
            
                    Try
                        ' invert an image if image is inverted
                        ExecuteCommand(New AutoInvertCommand(), image)
            
                        ' clear noise on a border of the image
                        ExecuteCommand(New BorderClearCommand(), image)
            
                        ' remove halftone from the image
                        ExecuteCommand(New HalftoneRemovalCommand(), image)
            
                        ' detect the correct orientation of the image
                        ExecuteCommand(New DeskewCommand(), image)
            
                        ' remove hole punches on image
                        ExecuteCommand(New HolePunchRemovalCommand(), image)
            
                        ' remove tables on image
                        ExecuteCommand(New LineRemovalCommand(RemovingLinesType.Tables), image)
            
                        ' invert inverted text regions on an image
                        ExecuteCommand(New AutoTextInvertCommand(), image)
            
                        ' remove noise from the image
                        ExecuteCommand(New DespeckleCommand(), image)
            
                        ' remove border around the image
                        ExecuteCommand(New BorderRemovalCommand(), image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' save the processed image to the new file
                    image.Save("G:\processed-image.tif")
                End Sub
            
                Private Sub ExecuteCommand(command As ProcessingCommandBase, image As VintasoftImage)
                    ' subscribe to the progress event of command
                    AddHandler command.Progress, New EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
            
                    ' execute the command
                    command.ExecuteInPlace(image)
            
                    ' unsubscribe from the progress event of command
                    RemoveHandler command.Progress, New EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
                End Sub
            
                Private Sub command_Progress(sender As Object, e As ImageProcessingProgressEventArgs)
                    ' update progress info using e.Progress property
                    ' ...
            
                    ' cancel execution of command using e.Cancel property if necessary
                    ' ...
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System;
            using System.Windows.Forms;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing;
            using Vintasoft.Imaging.ImageProcessing.Document;
            
            class DocumentCommandsExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage(@"G:\SampleImages\Border.tif");
            
                    try
                    {
                        // invert an image if image is inverted
                        ExecuteCommand(new AutoInvertCommand(), image);
            
                        // clear noise on a border of the image
                        ExecuteCommand(new BorderClearCommand(), image);
            
                        // remove halftone from the image
                        ExecuteCommand(new HalftoneRemovalCommand(), image);
            
                        // detect the correct orientation of the image
                        ExecuteCommand(new DeskewCommand(), image);
            
                        // remove hole punches on image
                        ExecuteCommand(new HolePunchRemovalCommand(), image);
            
                        // remove tables on image
                        ExecuteCommand(new LineRemovalCommand(RemovingLinesType.Tables), image);
            
                        // invert inverted text regions on an image
                        ExecuteCommand(new AutoTextInvertCommand(), image);
            
                        // remove noise from the image
                        ExecuteCommand(new DespeckleCommand(), image);
            
                        // remove border around the image
                        ExecuteCommand(new BorderRemovalCommand(), image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // save the processed image to the new file
                    image.Save(@"G:\processed-image.tif");
                }
            
                void ExecuteCommand(ProcessingCommandBase command, VintasoftImage image)
                {
                    // subscribe to the progress event of command
                    command.Progress += new EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
            
                    // execute the command
                    command.ExecuteInPlace(image);
            
                    // unsubscribe from the progress event of command
                    command.Progress -= new EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
                }
            
                void command_Progress(object sender, ImageProcessingProgressEventArgs e)
                {
                    // update progress info using e.Progress property
                    // ...
            
                    // cancel execution of command using e.Cancel property if necessary
                    // ...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Document.HolePunchRemovalCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Document.HolePunchRemovalCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Document.HolePunchRemovalCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Document.HolePunchRemovalCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Document.HolePunchRemovalCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Document.HolePunchRemovalCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Document.HolePunchRemovalCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Processes the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
            <remarks>
            This method changes the <i>image</i>.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.HolePunchRemovalCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.HolePunchRemovalCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
            <value>
            Supported formats: BlackWhite, Indexed1, Indexed4, Indexed8, Gray8, Gray16,
            Bgr24, Bgr32, Bgr48, Bgra32, Bgra64.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.HolePunchRemovalCommand.FillColor">
            <summary>
            Gets or sets a color for filling of hole punches.
            </summary>
            <value>
            Value of this property is detected automatically if
            <see cref="P:Vintasoft.Imaging.ImageProcessing.Document.HolePunchRemovalCommand.FillColorAutoDetection" /> is set to <b>true</b>.
            </value>
            <seealso cref="P:Vintasoft.Imaging.ImageProcessing.Document.HolePunchRemovalCommand.FillColorAutoDetection" />
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.HolePunchRemovalCommand.FillColorAutoDetection">
            <summary>
            Gets a value indicating whether color for filling of hole punches is detected automatically.
            </summary>
            <value>
            <b>true</b> - hole punches are filled with color detected automatically;
            <b>false</b> - hole punches are filled with color specified by <see cref="P:Vintasoft.Imaging.ImageProcessing.Document.HolePunchRemovalCommand.FillColor" />.
            </value>
            <seealso cref="P:Vintasoft.Imaging.ImageProcessing.Document.HolePunchRemovalCommand.FillColor" />
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.HolePunchRemovalCommand.MinHoleSize">
            <summary>
            Gets or sets the minimum size, in pixels, of the holes to be removed.
            </summary>
            <value>
            Valid values are from 6 to 400.
            Default value is <b>20</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.HolePunchRemovalCommand.MaxHoleSize">
            <summary>
            Gets or sets the maximum size, in pixels, of the holes to be removed.
            </summary>
            <value>
            Valid values are from 6 to 600.
            Default value is <b>100</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.HolePunchRemovalCommand.HolePunchLocation">
            <summary>
            Gets or sets the location of the hole punches to remove.
            </summary>
            <value>
            <see cref="P:Vintasoft.Imaging.ImageProcessing.Document.HolePunchRemovalCommand.HolePunchLocation" />.Undefined - hole punches are removed on the whole image if
            region of interest is not specified OR in the region of interest if region of interest
            is specified;<br />
            <see cref="P:Vintasoft.Imaging.ImageProcessing.Document.HolePunchRemovalCommand.HolePunchLocation" />.Left - hole punches are removed in the left part (1/4 of width)
            of the whole image if region of interest is not specified OR in the left part (1/4 of width)
            of the region of interest if region of interest is specified;<br />
            <see cref="P:Vintasoft.Imaging.ImageProcessing.Document.HolePunchRemovalCommand.HolePunchLocation" />.Right - hole punches are removed in the right part (1/4 of width)
            of the whole image if region of interest is not specified OR in the right part (1/4 of width)
            of the region of interest if region of interest is specified;<br />
            <see cref="P:Vintasoft.Imaging.ImageProcessing.Document.HolePunchRemovalCommand.HolePunchLocation" />.Top - hole punches are removed in the top part (1/4 of height)
            of the whole image if region of interest is not specified OR in the top part (1/4 of height)
            of the region of interest if region of interest is specified;<br />
            <see cref="P:Vintasoft.Imaging.ImageProcessing.Document.HolePunchRemovalCommand.HolePunchLocation" />.Bottom - hole punches are removed in the bottom part (1/4 of height)
            of the whole image if region of interest is not specified OR in the bottom part (1/4 of height)
            of the region of interest if region of interest is specified.<br />
            <br />
            Regions of the hole punch location can be combined.<br />
            <br />
            Default value is <see cref="P:Vintasoft.Imaging.ImageProcessing.Document.HolePunchRemovalCommand.HolePunchLocation" />.Left.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Document.LineEndsType">
            <summary>
            Specifies available types of line ends.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.Document.LineEndsType.BothEnds">
            <summary>
            Both line's ends are clear and accurate.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.Document.LineEndsType.OneOrBoth">
            <summary>
            Line may have one inaccurate end at most.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.Document.LineEndsType.Any">
            <summary>
            Line may have both accurate or inaccurate ends.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Document.RemovingLinesType">
            <summary>
            Specifies available types of lines to remove.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.Document.RemovingLinesType.Custom">
            <summary>
            Removing of lines with custom parameters.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.Document.RemovingLinesType.Tables">
            <summary>
            Removing of table's lines.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.Document.RemovingLinesType.FormFieldsLines">
            <summary>
            Removing of form field's lines and lines that underline the text.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.Document.RemovingLinesType.StrikeoutLines">
            <summary>
            Removing of lines that strike-out the text.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.Document.RemovingLinesType.PrinterArtifacts">
            <summary>
            Removing of lines classified as printer/scanner artifacts.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.Document.RemovingLinesType.NoiseLines">
            <summary>
            Removing of lines classified as noise.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommand">
            <summary>
            Removes (fills) lines on document image automatically (lines of forms, tables,
            underlining/strikethrough of text, noise).
            </summary>
            <remarks>
            Here is <b>a "good" sequence of operations for the document image processing</b>:<br />
            1. Invert an inverted image (<see cref="T:Vintasoft.Imaging.ImageProcessing.Document.AutoInvertCommand" />)<br />
            2. Clear a border of an image (<see cref="T:Vintasoft.Imaging.ImageProcessing.Document.BorderClearCommand" />)<br />
            3. Remove halftone from an image (<see cref="T:Vintasoft.Imaging.ImageProcessing.Document.HalftoneRemovalCommand" />)<br />
            4. Deskew an image (<see cref="T:Vintasoft.Imaging.ImageProcessing.Document.DeskewCommand" />)<br />
            5. Remove hole punches from an image (<see cref="T:Vintasoft.Imaging.ImageProcessing.Document.HolePunchRemovalCommand" />)<br />
            6. Remove lines from an image (<see cref="T:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommand" />)<br />
            7. Invert inverted text regions on an image (<see cref="T:Vintasoft.Imaging.ImageProcessing.Document.AutoTextInvertCommand" />)<br />
            8. Despeckle an image (<see cref="T:Vintasoft.Imaging.ImageProcessing.Document.DespeckleCommand" />)<br />
            9. Remove border of an image (<see cref="T:Vintasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand" />)
            <br />
            <see cref="P:Vintasoft.Imaging.ImageProcessing.ProcessingCommandWithRegion.RegionOfInterest" /> property can be used for specifying
            the region of interest for this command.
            </remarks>
            <example>This example shows how to load an image of document from disk, prepare the image
            of document for OCR and save the result to the new image file.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing
            Imports Vintasoft.Imaging.ImageProcessing.Document
            
            Class DocumentCommandsExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("G:\SampleImages\Border.tif")
            
                    Try
                        ' invert an image if image is inverted
                        ExecuteCommand(New AutoInvertCommand(), image)
            
                        ' clear noise on a border of the image
                        ExecuteCommand(New BorderClearCommand(), image)
            
                        ' remove halftone from the image
                        ExecuteCommand(New HalftoneRemovalCommand(), image)
            
                        ' detect the correct orientation of the image
                        ExecuteCommand(New DeskewCommand(), image)
            
                        ' remove hole punches on image
                        ExecuteCommand(New HolePunchRemovalCommand(), image)
            
                        ' remove tables on image
                        ExecuteCommand(New LineRemovalCommand(RemovingLinesType.Tables), image)
            
                        ' invert inverted text regions on an image
                        ExecuteCommand(New AutoTextInvertCommand(), image)
            
                        ' remove noise from the image
                        ExecuteCommand(New DespeckleCommand(), image)
            
                        ' remove border around the image
                        ExecuteCommand(New BorderRemovalCommand(), image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' save the processed image to the new file
                    image.Save("G:\processed-image.tif")
                End Sub
            
                Private Sub ExecuteCommand(command As ProcessingCommandBase, image As VintasoftImage)
                    ' subscribe to the progress event of command
                    AddHandler command.Progress, New EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
            
                    ' execute the command
                    command.ExecuteInPlace(image)
            
                    ' unsubscribe from the progress event of command
                    RemoveHandler command.Progress, New EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
                End Sub
            
                Private Sub command_Progress(sender As Object, e As ImageProcessingProgressEventArgs)
                    ' update progress info using e.Progress property
                    ' ...
            
                    ' cancel execution of command using e.Cancel property if necessary
                    ' ...
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System;
            using System.Windows.Forms;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing;
            using Vintasoft.Imaging.ImageProcessing.Document;
            
            class DocumentCommandsExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage(@"G:\SampleImages\Border.tif");
            
                    try
                    {
                        // invert an image if image is inverted
                        ExecuteCommand(new AutoInvertCommand(), image);
            
                        // clear noise on a border of the image
                        ExecuteCommand(new BorderClearCommand(), image);
            
                        // remove halftone from the image
                        ExecuteCommand(new HalftoneRemovalCommand(), image);
            
                        // detect the correct orientation of the image
                        ExecuteCommand(new DeskewCommand(), image);
            
                        // remove hole punches on image
                        ExecuteCommand(new HolePunchRemovalCommand(), image);
            
                        // remove tables on image
                        ExecuteCommand(new LineRemovalCommand(RemovingLinesType.Tables), image);
            
                        // invert inverted text regions on an image
                        ExecuteCommand(new AutoTextInvertCommand(), image);
            
                        // remove noise from the image
                        ExecuteCommand(new DespeckleCommand(), image);
            
                        // remove border around the image
                        ExecuteCommand(new BorderRemovalCommand(), image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // save the processed image to the new file
                    image.Save(@"G:\processed-image.tif");
                }
            
                void ExecuteCommand(ProcessingCommandBase command, VintasoftImage image)
                {
                    // subscribe to the progress event of command
                    command.Progress += new EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
            
                    // execute the command
                    command.ExecuteInPlace(image);
            
                    // unsubscribe from the progress event of command
                    command.Progress -= new EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
                }
            
                void command_Progress(object sender, ImageProcessingProgressEventArgs e)
                {
                    // update progress info using e.Progress property
                    // ...
            
                    // cancel execution of command using e.Cancel property if necessary
                    // ...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommand" /> class.
            </summary>
            <remarks>
            Removed lines are filled with the background color of the image.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommand.#ctor(System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommand" /> class.
            </summary>
            <param name="fillColor">Color for filling of lines.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommand.#ctor(Vintasoft.Imaging.ImageProcessing.Document.RemovingLinesType)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommand" /> class.
            </summary>
            <param name="linesType">
            A <see cref="T:Vintasoft.Imaging.ImageProcessing.Document.RemovingLinesType" /> that determines what kind of lines to remove.
            </param>
            <remarks>
            Removed lines are filled with the background color of the image.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommand.#ctor(System.Drawing.Color,Vintasoft.Imaging.ImageProcessing.Document.RemovingLinesType)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommand" /> class.
            </summary>
            <param name="fillColor">Color for filling of lines.</param>
            <param name="linesType">
            A <see cref="T:Vintasoft.Imaging.ImageProcessing.Document.RemovingLinesType" /> that determines what kind of lines to remove.
            </param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Processes the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
            <exception cref="T:Vintasoft.Imaging.ImageProcessing.ImageProcessingException">Thrown if
            minimal length of line is greater than maximal length <b>OR</b>
            maximal width of line is greater than minimal length <b>OR</b>
            minimal width of line is greater than maximal width.</exception>
            <remarks>
            This method changes the <i>image</i>.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
            <value>
            Supported formats: BlackWhite, Indexed1, Indexed4, Indexed8, Gray8, Gray16,
            Bgr24, Bgr32, Bgr48, Bgra32, Bgra64.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommand.LinesType">
            <summary>
            Gets or sets the type of lines to remove.
            </summary>
            <value>
            RemovingLinesType.Tables - command sets values of <see cref="P:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommand.MinLength" />,
            <see cref="P:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommand.MaxLength" />, <see cref="P:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommand.MinWidth" /> and <see cref="P:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommand.MaxWidth" /> properties
            to 0, values of properties can be changed by user later;<br />
            RemovingLinesType.FormFieldsLines - command sets values of <see cref="P:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommand.MinLength" />,
            <see cref="P:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommand.MaxLength" />, <see cref="P:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommand.MinWidth" /> and <see cref="P:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommand.MaxWidth" /> properties
            to 0, values of properties can be changed by user later;<br />
            RemovingLinesType.StrikeoutLines - command sets values of <see cref="P:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommand.MinLength" />,
            <see cref="P:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommand.MaxLength" />, <see cref="P:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommand.MinWidth" /> and <see cref="P:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommand.MaxWidth" /> properties
            to 0, values of properties can be changed by user later;<br />
            RemovingLinesType.PrinterArtifacts - command sets values of <see cref="P:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommand.MinLength" />,
            <see cref="P:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommand.MaxLength" />, <see cref="P:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommand.MinWidth" /> and <see cref="P:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommand.MaxWidth" /> properties
            to 0, values of properties can be changed by user later;<br />
            RemovingLinesType.NoiseLines - command sets values of <see cref="P:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommand.MinLength" />,
            <see cref="P:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommand.MaxLength" />, <see cref="P:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommand.MinWidth" /> and <see cref="P:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommand.MaxWidth" /> properties
            to 0, values of properties can be changed by user later;<br />
            RemovingLinesType.Custom - command sets values of <see cref="P:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommand.MinLength" />,
            <see cref="P:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommand.MaxLength" />, <see cref="P:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommand.MinWidth" /> and <see cref="P:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommand.MaxWidth" /> properties
            to default values, values of properties can be changed by user later.<br />
            <br />
            Default value is <see cref="T:Vintasoft.Imaging.ImageProcessing.Document.RemovingLinesType" />.Custom.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommand.MinWidth">
            <summary>
            Gets or sets the minimum width of line.
            </summary>
            <value>
            0 - minimal width of line is calculated automatically
            if <see cref="P:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommand.LinesType" /> != RemovingLinesType.Custom;<br />
            1 and more - minimum width of line.<br />
            Default value is <b>1</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommand.MaxWidth">
            <summary>
            Gets or sets the maximum width of line.
            </summary>
            <value>
            0 - maximum width of line is calculated automatically
            if <see cref="P:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommand.LinesType" /> != RemovingLinesType.Custom;<br />
            1 and more - maximum width of line.<br />
            Default value is <b>15</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommand.MinLength">
            <summary>
            Gets or sets the minimum length of line.
            </summary>
            <value>
            0 - minimal length of line is calculated automatically
            if <see cref="P:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommand.LinesType" /> != RemovingLinesType.Custom;<br />
            1 and more - minimum length of line.<br />
            Default value is <b>100</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommand.MaxLength">
            <summary>
            Gets or sets the maximum length of line.
            </summary>
            <value>
            0 - maximum length of line is calculated automatically
            if <see cref="P:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommand.LinesType" /> != RemovingLinesType.Custom;<br />
            1 and more - maximum length of line.<br />
            Default value is <b>3000</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommand.MinSizeRatio">
            <summary>
            Gets or sets the minimum length-to-width ratio of line.
            </summary>
            <value>
            Valid values are 1.0 and more.
            Default value is <b>1.0</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommand.MinConfidence">
            <summary>
            Gets or sets the minimum confidence of line.
            </summary>
            <value>
            Valid values are from 0.0 (0%) to 1.0 (100%).
            Default value is <b>0.75</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommand.Direction">
            <summary>
            Gets or sets the direction of lines.
            </summary>
            <value>
            Default value is horizontal and vertical direction.
            </value>
            <remarks>
            The maximum deviation from direction can be set with
            the <see cref="P:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommand.MaxDeviationAngle" /> property.
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommand.MaxDeviationAngle" />
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommand.MaxCurvature">
            <summary>
            Gets or sets the maximum curvature of line.
            </summary>
            <value>
            Valid values are from 0.0 to 1.0.<br />
            Default value is <b>0.1</b>.<br />
            <br />
            0 - ideal line (without curvature);
            1 - curve with radius of line length.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommand.ReconnectBrokenObjects">
            <summary>
            Gets or sets the value indicating whether
            the line removal process reconnects objects that are broken
            after removing of the intersecting lines.
            </summary>
            <value>
            <b>true</b> - reconnect broken objects;
            <b>false</b> - remove line entirely.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommand.MaxDeviationAngle">
            <summary>
            Gets or sets the maximum angle, in degrees,
            of line deviation from the <see cref="P:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommand.Direction" />.
            </summary>
            <value>
            Valid values are from 0 to 45.
            Default value is <b>5</b>.
            </value>
            <seealso cref="P:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommand.Direction" />
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommand.LineEndsType">
            <summary>
            Gets or sets the type of lines ends.
            </summary>
            <value>
            Default value is <see cref="P:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommand.LineEndsType" />.Any.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommand.FillColor">
            <summary>
            Gets or sets a color for filling of lines.
            </summary>
            <value>
            Value of this property is detected automatically if
            <see cref="P:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommand.FillColorAutoDetection" /> is set to <b>true</b>.
            </value>
            <seealso cref="P:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommand.FillColorAutoDetection" />
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommand.FillColorAutoDetection">
            <summary>
            Gets a value indicating whether color for filling of lines is detected automatically.
            </summary>
            <value>
            <b>true</b> - lines are filled with color detected automatically;
            <b>false</b> - lines are filled with color specified by <see cref="P:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommand.FillColor" />.
            </value>
            <seealso cref="P:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommand.FillColor" />
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommand.Binarization">
            <summary>
            Gets or sets a binarization command applied to a not-black-white images.
            </summary>
            <value>
            Default value is <see cref="T:Vintasoft.Imaging.ImageProcessing.BinarizationMode" />.Global binarization.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Document.OcrPreprocessingCommand">
            <summary>
            Command that executes typical sequence of image processing commands necessary
            to prepare an image for optical character recognition.
            </summary>
            <remarks>
            Standard sequence of commands: Binarization, AutoInvert, HalftoneRemoval, BorderClear, Deskew, HolePunchRemoval,
            Despeckle, AutoOrientation, Segmentation.
            </remarks>
            <example>
            This example demonstrates how to preprocess and recognize an image.
            <code lang="VB.NET">
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing.Document
            Imports Vintasoft.Imaging.Ocr
            Imports Vintasoft.Imaging.Ocr.Results
            Imports Vintasoft.Imaging.Ocr.Tesseract
            
            Class OcrPreprocessingCommandExample
                ' Required assemblies to run this code:
                ' Vintasoft.Imaging.dll, Vintasoft.Imaging.Ocr.dll, Vintasoft.Imaging.Ocr.Tesseract.dll,
                ' Vintasoft.Imaging.DocCleanup.dll
                Public Shared Sub PreprocessAndOcrImages(language As OcrLanguage, filename As String)
                    ' load image(s)
                    Dim images As New ImageCollection()
                    images.Add(filename)
            
                    Console.WriteLine("Create Tesseract OCR engine...")
                    Using tesseractOcr As New TesseractOcr()
                        ' create OCR engine manager
                        Dim engineManager As New OcrEngineManager(tesseractOcr)
            
                        Dim settings As New OcrEngineSettings(language)
            
                        ' foreach image
                        For Each image As VintasoftImage In images
                            Console.WriteLine("Preprocess image:")
                            Console.WriteLine("BorderClear, Despeckle, Deskew, Segmentation...")
                            Dim preprocessing As New OcrPreprocessingCommand()
                            preprocessing.Binarization = Nothing
                            preprocessing.ExecuteInPlace(image)
            
                            Console.WriteLine("Recognize image...")
                            Dim page As OcrPage = engineManager.Recognize(image, settings, preprocessing.SegmentationTextRegions)
            
                            Console.WriteLine("Page Text:")
                            Console.WriteLine(page.GetText())
                            Console.WriteLine()
                        Next
                    End Using
            
                    ' free resources
                    images.ClearAndDisposeItems()
                    images.Dispose()
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing.Document;
            using Vintasoft.Imaging.Ocr;
            using Vintasoft.Imaging.Ocr.Results;
            using Vintasoft.Imaging.Ocr.Tesseract;
            
            class OcrPreprocessingCommandExample
            {
                // Required assemblies to run this code:
                // Vintasoft.Imaging.dll, Vintasoft.Imaging.Ocr.dll, Vintasoft.Imaging.Ocr.Tesseract.dll,
                // Vintasoft.Imaging.DocCleanup.dll
                public static void PreprocessAndOcrImages(OcrLanguage language, string filename)
                {
                    // load image(s)
                    ImageCollection images = new ImageCollection();
                    images.Add(filename);
            
                    Console.WriteLine("Create Tesseract OCR engine...");
                    using (TesseractOcr tesseractOcr = new TesseractOcr())
                    {
                        // create OCR engine manager
                        OcrEngineManager engineManager =
                            new OcrEngineManager(tesseractOcr);
            
                        OcrEngineSettings settings = new OcrEngineSettings(language);
            
                        // foreach image
                        foreach (VintasoftImage image in images)
                        {
                            Console.WriteLine("Preprocess image:");
                            Console.WriteLine("BorderClear, Despeckle, Deskew, Segmentation...");
                            OcrPreprocessingCommand preprocessing = new OcrPreprocessingCommand();
                            preprocessing.Binarization = null;
                            preprocessing.ExecuteInPlace(image);
            
                            Console.WriteLine("Recognize image...");
                            OcrPage page = engineManager.Recognize(image, settings, preprocessing.SegmentationTextRegions);
            
                            Console.WriteLine("Page Text:");
                            Console.WriteLine(page.GetText());
                            Console.WriteLine();
                        }
                    }
            
                    // free resources
                    images.ClearAndDisposeItems();
                    images.Dispose();
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Document.OcrPreprocessingCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Document.OcrPreprocessingCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Document.OcrPreprocessingCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Executes the image processing command in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
            <remarks>
            This method changes the <i>image</i>.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Document.OcrPreprocessingCommand.ProcessImage(Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.VintasoftImage@)">
            <summary>
            Processes the image.
            </summary>
            <param name="sourceImage">The source image.</param>
            <param name="processedImage">The processed image.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
            <remarks>
            This method does not change the <i>sourceImage</i>.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.OcrPreprocessingCommand.Binarization">
            <summary>
            Gets or sets a command for binarization of image.
            </summary>
            <value>Default value is <see cref="T:Vintasoft.Imaging.ImageProcessing.BinarizationMode" />.Adaptive binarization.</value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.OcrPreprocessingCommand.AutomaticalInvert">
            <summary>
            Gets or sets a command for automatic inversion of image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.OcrPreprocessingCommand.HalftoneRemoval">
            <summary>
            Gets or sets a command for detecting and removing halftones from image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.OcrPreprocessingCommand.BorderClear">
            <summary>
            Gets or sets a command for border removing of image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.OcrPreprocessingCommand.Despeckle">
            <summary>
            Gets or sets a command for noise removing from an image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.OcrPreprocessingCommand.Deskew">
            <summary>
            Gets or sets a command for automatic rotation of image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.OcrPreprocessingCommand.HolePunchRemoval">
            <summary>
            Gets or sets a command for removing of hole punches from image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.OcrPreprocessingCommand.AutomaticalOrientation">
            <summary>
            Gets or sets a command for automatic orientaion of image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.OcrPreprocessingCommand.Segmentation">
            <summary>
            Gets or sets a command for the document segmentation of image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.OcrPreprocessingCommand.SegmentationTextRegions">
            <summary>
            Gets a results of the document segmentation.
            </summary>
            <remarks>Results contains only text regions.</remarks>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Document.RestoreTextFromHalftoneCommand">
            <summary>
            Clears halftone and improves text quality of a black-white image.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Document.RestoreTextFromHalftoneCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Document.RestoreTextFromHalftoneCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Document.RestoreTextFromHalftoneCommand.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Document.RestoreTextFromHalftoneCommand" /> class.
            </summary>
            <param name="autoThreshold">
            Indicates whether the black and white pixels removal thresholds are calculated automatically.
            </param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Document.RestoreTextFromHalftoneCommand.#ctor(System.Int32,System.Int32,System.Collections.Generic.List{System.Drawing.Point[]})">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Document.RestoreTextFromHalftoneCommand" /> class.
            </summary>
            <param name="blackPixelRemovalThreshold">Threshold, in percents, for black pixels removal.</param>
            <param name="whitePixelRemovalThreshold">Threshold, in percents, for white pixels removal.</param>
            <param name="halftoneRegions">
            List of regions to process.
            Value of this parameter can be <b>null</b>, in that case
            entire image or region of interest will be processed.
            </param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Document.RestoreTextFromHalftoneCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Document.RestoreTextFromHalftoneCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Document.RestoreTextFromHalftoneCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Document.RestoreTextFromHalftoneCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Document.RestoreTextFromHalftoneCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Processes the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
            <remarks>
            This method changes the <i>image</i>.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.RestoreTextFromHalftoneCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.RestoreTextFromHalftoneCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
            <value>
            Supported formats: BlackWhite.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.RestoreTextFromHalftoneCommand.BlackPixelRemovalThreshold">
            <summary>
            Gets or sets the threshold, in percents, for black pixels removal.
            </summary>
            <value>
            Valid values are from 0 to 100.
            Default value is <b>33</b>.
            </value>
            <remarks>
            Value of this property has effect only if
            <see cref="P:Vintasoft.Imaging.ImageProcessing.Document.RestoreTextFromHalftoneCommand.AutoThreshold" /> == <b>false</b>.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.RestoreTextFromHalftoneCommand.WhitePixelRemovalThreshold">
            <summary>
            Gets or sets the threshold, in percents, for white pixels removal.
            </summary>
            <value>
            Valid values are from 0 to 100.
            Default value is <b>33</b>.
            </value>
            <remarks>
            Value of this property has effect only if
            <see cref="P:Vintasoft.Imaging.ImageProcessing.Document.RestoreTextFromHalftoneCommand.AutoThreshold" /> == <b>false</b>.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.RestoreTextFromHalftoneCommand.AutoThreshold">
            <summary>
            Gets or sets a value indicating whether the black and white
            pixels removal thresholds are calculated automatically.
            </summary>
            <value>
            <b>true</b> - thresholds are calculated automatically;
            <b>false</b> - thresholds are used from <see cref="P:Vintasoft.Imaging.ImageProcessing.Document.RestoreTextFromHalftoneCommand.BlackPixelRemovalThreshold" />
            and <see cref="P:Vintasoft.Imaging.ImageProcessing.Document.RestoreTextFromHalftoneCommand.WhitePixelRemovalThreshold" /> properties.<br />
            Default value is <b>true</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.RestoreTextFromHalftoneCommand.HalftoneRegions">
            <summary>
            Gets or sets the list of regions to process.
            </summary>
            <value>
            Value of this parameter can be <b>null</b>, in that case
            entire image or region of interest will be processed.
            Each element of the list is an array of points
            describing a polygon of halftone contour.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Document.SmoothingCommand">
            <summary>
            Applies a smoothing effect to a 1 bit-per-pixel image.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Document.SmoothingCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Document.SmoothingCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Document.SmoothingCommand.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Document.SmoothingCommand" /> class.
            </summary>
            <param name="bumpSize">Maximum size, in pixels, of the bumps to be removed.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Document.SmoothingCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Document.SmoothingCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Document.SmoothingCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Document.SmoothingCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Document.SmoothingCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Processes the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
            <remarks>
            This method changes the <i>image</i>.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.SmoothingCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.SmoothingCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
            <value>
            Supported formats: BlackWhite, Indexed1.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.SmoothingCommand.BumpSize">
            <summary>
            Gets or sets the maximum size, in pixels, of the bumps to be removed.
            </summary>
            <value>
            Valid values are from 1 to 512.
            Default value is <b>1</b>.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Document.HolePunchLocation">
            <summary>
            Specifies possible location of hole punch on the image.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.Document.HolePunchLocation.Left">
            <summary>
            Left of the image.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.Document.HolePunchLocation.Right">
            <summary>
            Right of the image.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.Document.HolePunchLocation.Top">
            <summary>
            Top of the image.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.Document.HolePunchLocation.Bottom">
            <summary>
            Bottom of the image.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.Document.HolePunchLocation.Undefined">
            <summary>
            Entire image.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Info.DocumentSegmentationCommand">
            <summary>
            Detects regions of various types of a document image.
            </summary>
            <example>This example demonstrates how to segment and OCR an image.
            <code lang="VB.NET">
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing.Info
            Imports Vintasoft.Imaging.Ocr
            Imports Vintasoft.Imaging.Ocr.Results
            Imports Vintasoft.Imaging.Ocr.Tesseract
            
            Class OcrEngineManagerExample
                ' Required assemblies to run this code:
                ' Vintasoft.Imaging.dll, Vintasoft.Imaging.Ocr.dll, Vintasoft.Imaging.Ocr.Tesseract.dll,
                ' Vintasoft.Imaging.DocCleanup.dll
                Public Shared Sub SegmentsAndOcrImages(language As OcrLanguage, filename As String)
                    ' load image(s)
                    Dim images As New ImageCollection()
                    images.Add(filename)
            
                    Console.WriteLine("Create Tesseract OCR engine...")
                    Using tesseractOcr As New TesseractOcr()
                        ' create OCR engine manager
                        Dim engineManager As New OcrEngineManager(tesseractOcr)
            
                        Dim settings As New OcrEngineSettings(language)
            
                        ' foreach image
                        For Each image As VintasoftImage In images
                            Console.WriteLine("Segmentation of the image...")
                            Dim segmentation As New DocumentSegmentationCommand()
                            segmentation.ExecuteInPlace(image)
            
                            Console.WriteLine("Recognize the image...")
                            Dim page As OcrPage = engineManager.Recognize(image, settings, segmentation.Regions)
            
                            Console.WriteLine("Page Text:")
                            Console.WriteLine(page.GetText())
                            Console.WriteLine()
                        Next
                    End Using
            
                    ' free resources
                    images.ClearAndDisposeItems()
                    images.Dispose()
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing.Info;
            using Vintasoft.Imaging.Ocr;
            using Vintasoft.Imaging.Ocr.Results;
            using Vintasoft.Imaging.Ocr.Tesseract;
            
            class OcrEngineManagerExample
            {
                // Required assemblies to run this code:
                // Vintasoft.Imaging.dll, Vintasoft.Imaging.Ocr.dll, Vintasoft.Imaging.Ocr.Tesseract.dll,
                // Vintasoft.Imaging.DocCleanup.dll
                public static void SegmentsAndOcrImages(OcrLanguage language, string filename)
                {
                    // load image(s)
                    ImageCollection images = new ImageCollection();
                    images.Add(filename);
            
                    Console.WriteLine("Create Tesseract OCR engine...");
                    using (TesseractOcr tesseractOcr = new TesseractOcr())
                    {
                        // create OCR engine manager
                        OcrEngineManager engineManager =
                            new OcrEngineManager(tesseractOcr);
            
                        OcrEngineSettings settings = new OcrEngineSettings(language);
            
                        // foreach image
                        foreach (VintasoftImage image in images)
                        {
                            Console.WriteLine("Segmentation of the image...");
                            DocumentSegmentationCommand segmentation = new DocumentSegmentationCommand();
                            segmentation.ExecuteInPlace(image);
            
                            Console.WriteLine("Recognize the image...");
                            OcrPage page = engineManager.Recognize(image, settings, segmentation.Regions);
            
                            Console.WriteLine("Page Text:");
                            Console.WriteLine(page.GetText());
                            Console.WriteLine();
                        }
                    }
            
                    // free resources
                    images.ClearAndDisposeItems();
                    images.Dispose();
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.DocumentSegmentationCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.DocumentSegmentationCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.DocumentSegmentationCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.DocumentSegmentationCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.DocumentSegmentationCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.DocumentSegmentationCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.DocumentSegmentationCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Processes the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            Always returns <b>false</b> because this command does not change the <i>image</i>.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.DocumentSegmentationCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.DocumentSegmentationCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
            <value>
            Supported formats: BlackWhite, Indexed1, Indexed4, Indexed8, Gray8, Gray16,
            Bgr24, Bgr32, Bgr48, Bgra32, Bgra64.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.DocumentSegmentationCommand.CanModifyImage">
            <summary>
            Gets the value indicating whether this command modifies image.
            </summary>
            <value>Always return <b>false</b>.</value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.DocumentSegmentationCommand.BorderSize">
            <summary>
            Gets or sets the border size of each image region.
            </summary>
            <value>
            Minimal value is 0.
            Default value is <b>1</b>.
            </value>
            <remarks>
            Rectangle of each found region is inflated by this value.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.DocumentSegmentationCommand.MinTextLineHeight">
            <summary>
            Gets or sets the minimal height, in pixels, of text line.
            </summary>
            <value>
            Minimal value is 1.
            Default value is <b>6</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.DocumentSegmentationCommand.Regions">
            <summary>
            Gets the list of regions on an image.
            </summary>
            <value>Value of this property has correct value only after execution of
            the <see cref="M:Vintasoft.Imaging.ImageProcessing.ProcessingCommandBase.Execute(Vintasoft.Imaging.VintasoftImage)" /> or
            <see cref="M:Vintasoft.Imaging.ImageProcessing.ProcessingCommandBase.ExecuteInPlace(Vintasoft.Imaging.VintasoftImage)" /> method.</value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Info.HalftoneRecognitionCommand">
            <summary>
            Detects regions of halftone of a black-white image.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.HalftoneRecognitionCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.HalftoneRecognitionCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.HalftoneRecognitionCommand.#ctor(System.Int32,System.Int32,System.Drawing.Size)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.HalftoneRecognitionCommand" /> class.
            </summary>
            <param name="maxSegmentSize">Maximal length, in pixels, of a halftone segment.</param>
            <param name="cellSize">Size, in pixels, of cells the image is divided into.</param>
            <param name="minHalftoneSize">Minimal size, in pixels, of a halftone region.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.HalftoneRecognitionCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.HalftoneRecognitionCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.HalftoneRecognitionCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.HalftoneRecognitionCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.HalftoneRecognitionCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Processes the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            Always returns <b>false</b> because this command does not change the <i>image</i>.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.HalftoneRecognitionCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.HalftoneRecognitionCommand.CanModifyImage">
            <summary>
            Gets the value indicating whether this command modifies image.
            </summary>
            <value>Always return <b>false</b>.</value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.HalftoneRecognitionCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
            <value>
            Supported formats: BlackWhite.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.HalftoneRecognitionCommand.MaxSegmentSize">
            <summary>
            Gets or sets the maximal length, in pixels, of a halftone segment.
            </summary>
            <value>
            Valid values are from 2 to 50.
            Default value is <b>10</b>.
            </value>
            <remarks>
            <i>Halftone segment</i> is a sequence of halftone (black) and non halftone (white) pixels.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.HalftoneRecognitionCommand.CellSize">
            <summary>
            Gets or sets the size, in pixels, of cells the image is divided into.
            </summary>
            <value>
            Valid values are from 10 to 500.
            Default value is <b>20</b>.
            </value>
            <remarks>
            <i>The cell</i> is an image region that contains or does not contain a halftone.<br />
            <br />
            <i>Halftone cell</i> is <i>the cell</i> that contains a halftone.<br />
            <br />
            <i>Halftone region</i> is composed from adjacent <i>halftone cells</i>.<br />
            <br />
            The smaller is cell size the better is accuracy of recognized halftone regions contours
            but the slower is recognition.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.HalftoneRecognitionCommand.MinHalftoneHeight">
            <summary>
            Gets or sets the minimal height, in pixels, of a halftone region.
            </summary>
            <value>
            Minimal value is 10.
            Default value is <b>25</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.HalftoneRecognitionCommand.MinHalftoneWidth">
            <summary>
            Gets or sets the minimal width, in pixels, of a halftone region.
            </summary>
            <value>
            Minimal value is 10.
            Default value is <b>25</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.HalftoneRecognitionCommand.HalftoneRegions">
            <summary>
            Gets the list of halftone regions on an image.
            </summary>
            <value>
            Each element of the list is an array of points describing a polygon of halftone contour.<br />
            Value of this property has correct value only after execution of
            the <see cref="M:Vintasoft.Imaging.ImageProcessing.ProcessingCommandBase.Execute(Vintasoft.Imaging.VintasoftImage)" /> or
            <see cref="M:Vintasoft.Imaging.ImageProcessing.ProcessingCommandBase.ExecuteInPlace(Vintasoft.Imaging.VintasoftImage)" /> method.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Info.ImageSegmentationCommand">
            <summary>
            Detects image regions on a color document image.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.ImageSegmentationCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.ImageSegmentationCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.ImageSegmentationCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.ImageSegmentationCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.ImageSegmentationCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.ImageSegmentationCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.ImageSegmentationCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Process the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.ImageSegmentationCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.ImageSegmentationCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
            <value>
            Supported formats: Bgr24.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.ImageSegmentationCommand.CanModifyImage">
            <summary>
            Gets the value indicating whether this command can modify the image.
            </summary>
            <value>Always returns <b>false</b>.</value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.ImageSegmentationCommand.RectangeAccuracy">
            <summary>
            Gets or sets the accuracy of approximating image region using rectangles.
            </summary>
            <value>
            Valid value is any value more than 1.
            Default value is 5.
            </value>
            <exception cref="T:System.ArgumentException">Thrown if value is less than 2.</exception>
            <remarks>
            Low value of this property will increase the image segmentation quality
            but also will decrease the command speed.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.ImageSegmentationCommand.WindowSize">
            <summary>
            Gets or sets a window size of the command.
            </summary>
            <value>
            Valid value is any value more than 0.
            Default value is 7.
            </value>
            <exception cref="T:System.ArgumentException">Thrown if value is less than 1.</exception>
            <remarks>
            Big value of this property will increase the command sensitivity
            but also will decrease the command accuracy.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.ImageSegmentationCommand.ColorLowThreshold">
            <summary>
            Gets or sets the minimum allowable difference between colors for image region
            in the source document image.
            </summary>
            <value>
            Valid values are from 0 to 255.
            Default value is 3.
            </value>
            <remarks>
            Region of source document image will be classified as image region
            if difference between 2 any colors in region is more than value
            of this property.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.ImageSegmentationCommand.ColorHiThreshold">
            <summary>
            Gets or sets the maximum allowable difference between colors for image region
            in the source document image.
            </summary>
            <value>
            Valid values are from 0 to 255.
            Default value is 120.
            </value>
            <remarks>
            Region of source document image will be classified as image region
            if difference between 2 any colors in region is less than value
            of this property.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.ImageSegmentationCommand.Sensitivity">
            <summary>
            Gets or sets the sensitivity of the command.
            </summary>
            <value>
            Valid values are from 0 to 765.
            Default value is 15.
            </value>
            <remarks>
            Big value of this property will increase the algorithm sensitivity
            but also will increase the noise count.
            </remarks>
            <value>Default value is <b>15</b>.</value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.ImageSegmentationCommand.NoiseRemovalWindowSize">
            <summary>
            Gets or sets the window size for noise removal algorithm.
            </summary>
            <value>
            Valid value is any positive odd value.
            Default value is 11.
            </value>
            <exception cref="T:System.ArgumentException">Thrown if
            value is negative <b>OR</b>
            value is not an odd value.</exception>
            <remarks>
            Big value of this property will remove more noise from source document image
            but also will decrease the command speed.
            </remarks>
            <value>Default value is <b>11</b>.</value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.ImageSegmentationCommand.MinimumRegionArea">
            <summary>
            Gets or sets the minimum region area.
            </summary>
            <value>
            Default value is 0.
            </value>
            <exception cref="T:System.ArgumentException">Thrown if
            value is negative.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.ImageSegmentationCommand.Regions">
            <summary>
            Gets the result of image segmentation.
            </summary>
            <value>
            The read-only collection of rectangles that defines image regions
            on the source document image.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Info.ImageSegmentationCommandResult">
            <summary>
            Stores an execution result of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.ImageSegmentationCommand" />.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.ImageSegmentationCommandResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.ImageSegmentationCommandResult" /> class.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.ImageSegmentationCommandResult.Regions">
            <summary>
            Gets the list of image regions on the color document image.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Info.IsDocumentImageInvertedCommand">
            <summary>
            Checks whether a document image is inverted.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.IsDocumentImageInvertedCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.IsDocumentImageInvertedCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.IsDocumentImageInvertedCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.IsDocumentImageInvertedCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.IsDocumentImageInvertedCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.IsDocumentImageInvertedCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.IsDocumentImageInvertedCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Processes the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            Always returns <b>false</b> because this command does not change the <i>image</i>.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.IsDocumentImageInvertedCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.IsDocumentImageInvertedCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
            <value>
            Supported formats: BlackWhite, Indexed1, Indexed4, Indexed8, Gray8, Gray16,
            Bgr24, Bgr32, Bgr48, Bgra32, Bgra64.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.IsDocumentImageInvertedCommand.CanModifyImage">
            <summary>
            Gets the value indicating whether this command modifies image.
            </summary>
            <value>
            Always returns <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.IsDocumentImageInvertedCommand.IsDocumentImage">
            <summary>
            Gets a value indicating whether the image is document image.
            </summary>
            <value>
            <b>true</b> - image is document image;
            <b>false</b> - image is not a document image.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.IsDocumentImageInvertedCommand.Result">
            <summary>
            Gets a value indicating whether the image is inverted document image.
            </summary>
            <value>
            <b>true</b> - image is inverted document image;
            <b>false</b> - image is not inverted document image.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Document.AutoTextOrientationCommandResult">
            <summary>
            Stores an execution result of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Document.AutoTextOrientationCommand" />.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.AutoTextOrientationCommandResult.IsOrientationDetermined">
            <summary>
            Gets a value indicating whether orientation of the image is determined.
            </summary>
            <value>
            <b>true</b> - orientation of the image is determined;
            <b>false</b> - orientation of the image is not determined.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.AutoTextOrientationCommandResult.AppliedRotation">
            <summary>
            Gets the rotation applied to the image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.AutoTextOrientationCommandResult.Confidence">
            <summary>
            Gets the confidence of result.
            </summary>
            <value>
            Valid values are from 0.0 (0%) to 1.0 (100%).
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Info.DocumentSegmentationCommandResult">
            <summary>
            Stores an execution result of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.DocumentSegmentationCommand" />.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.DocumentSegmentationCommandResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.DocumentSegmentationCommandResult" /> class.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.DocumentSegmentationCommandResult.Regions">
            <summary>
            Gets the list of regions on the image.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommandResult">
            <summary>
            Stores result of execution of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommand" />.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommandResult.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommandResult" /> class.
            </summary>
            <param name="minWidth">
            Value of line's minimum width was used by <see ref="LineRemovalCommand" />
            for removing of lines.
            </param>
            <param name="maxWidth">
            Value of line's maximum width was used by <see ref="LineRemovalCommand" />
            for removing of lines.
            </param>
            <param name="minLength">
            Value of line's minimum length was used by <see ref="LineRemovalCommand" />
            for removing of lines.
            </param>
            <param name="maxLength">
            Value of line's maximum length was used by <see ref="LineRemovalCommand" />
            for removing of lines.
            </param>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommandResult.MinWidth">
            <summary>
            Gets the value of line's minimum width was used by <see ref="LineRemovalCommand" />
            for removing of lines.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommandResult.MaxWidth">
            <summary>
            Gets the value of line's maximum width was used by <see ref="LineRemovalCommand" />
            for removing of lines.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommandResult.MinLength">
            <summary>
            Gets the value of line's minimum length was used by <see ref="LineRemovalCommand" />
            for removing of lines.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.LineRemovalCommandResult.MaxLength">
            <summary>
            Gets the value of line's maximum length was used by <see ref="LineRemovalCommand" />
            for removing of lines.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Info.HalftoneRecognitionCommandResult">
            <summary>
            Stores an execution result of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.HalftoneRecognitionCommand" />.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.HalftoneRecognitionCommandResult.HalftoneRegions">
            <summary>
            Gets the list of halftone regions on the image.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Info.IsDocumentImageInvertedCommandResult">
            <summary>
            Stores result of execution of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.IsDocumentImageInvertedCommand" />.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.IsDocumentImageInvertedCommandResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.IsDocumentImageInvertedCommandResult" /> class.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.IsDocumentImageInvertedCommandResult.IsDocumentImage">
            <summary>
            Gets a value indicating whether the image is document image.
            </summary>
            <value>
            <b>true</b> - image is document image;
            <b>false</b> - image is not a document image.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.IsDocumentImageInvertedCommandResult.IsImageInverted">
            <summary>
            Gets a value indicating whether the image is inverted.
            </summary>
            <value>
            <b>true</b> - image is inverted document image;
            <b>false</b> - image is not inverted document image.
            </value>
        </member>
    </members>
</doc>
