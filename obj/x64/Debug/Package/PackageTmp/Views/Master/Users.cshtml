@model IEnumerable<HouseOfSynergy.AffinityDms.WebRole.Models.Master.MasterUserViewModel>
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_LayoutMasterPrivate.cshtml";
}

@{
    var errormessage = (ViewBag.ErrorMessage != null) ? (ViewBag.ErrorMessage) : (string.Empty);
    var successmessage = (ViewBag.SuccessMessage != null) ? (ViewBag.SuccessMessage) : (string.Empty);
    string displayError = "none", displaySuccess = "none";
    if (!(string.IsNullOrEmpty(errormessage)))
    {
        displayError = "";
    }
    if (!(string.IsNullOrEmpty(successmessage)))
    {
        displaySuccess = "";
    }
    <div id="UsersErrorMessage" style="display:@displayError">
        <div class="alert alert-danger" style="overflow:auto">
            <div style="float:right;" class="col-sm-12 col-md-12 col-lg-12"><b style="float:right;cursor:pointer" data-hideMessageDiv="#UsersErrorMessage" id="hideErrorMessageDiv">X</b></div>
            <div style="word-wrap: break-word;margin-right:30px" id="UsersErrorMessageText">@errormessage</div>
        </div>
    </div>
    <div id="UsersSuccessMessage" style="display:@displaySuccess">
        <div class="alert alert-success" style="overflow:auto">
            <div style="float:right;" class="col-sm-12 col-md-12 col-lg-12"><b style="float:right;cursor:pointer" data-hideMessageDiv="#UsersSuccessMessage" id="hideSuccessMessageDiv">X</b></div>
            <div style="word-wrap: break-word;margin-right:30px" id="UserSuccessMessageText">@successmessage</div>
        </div>
    </div>

}
<script type="text/javascript">

    function RoleChange(event) {
        var chkbox = event.currentTarget;
        if (chkbox.checked) {
            chkbox.setAttribute("checked", "checked");
            chkbox.setAttribute("value", "true");
        }
        else {
            chkbox.removeAttribute("checked");
            chkbox.setAttribute("value", "false");
        }

    }

</script>
@using (Html.BeginForm("Index", "MasterUsers", FormMethod.Post))
{
    <div style="margin-bottom:20px;">
        <input type="submit" value="Submit" class="btn btn-primary" style="float:right;display:inline-block;margin-right: 20px;" />
        <input type="button" value="Create" class="btn btn-primary" style="float:right;display:inline-block;margin-right: 10px;" onclick="javascript: window.location.href='@Url.Action("Index","MasterUser")'" />
    </div>
        <div class="col-md-12">

            @{int idcount = 0, RoleAdministrator = 0, RoleReporting = 0, RoleCustom = 0, RoleNone = 0;}
            @(
                 Html.Kendo().Grid(Model).Name("MasterUserListGrid").Columns
                        (
                        columns =>
                        {

                            columns.Template(item => (item.Id > 0) ? ("<input type='hidden' name='item[" + (idcount) + "].Id' id='item[" + (idcount++) + "].Id' value='" + item.Id + "'></span>") : (string.Empty)).Hidden();
                            columns.Template(item => (item.NameGiven + " " + item.NameFamily)).Title("Name");
                            columns.Bound(item => (item.Email)).Title("Email");
                            columns.Bound(item => (item.UserName)).Title("Username");
                            columns.Bound(item => (item.AuthenticationType)).Title("Authentication Type");
                            columns.Group(group => group
                            .Title("Roles")
                            .HeaderHtmlAttributes(new { @style = "text-align: center" })
                            .Columns(roleitem =>
                            {
                                roleitem.Template(item => ((item.RoleAdministrator) ? ("<input type='checkbox' class='check-box' checked='checked' value='" + item.RoleAdministrator + "' name='item[" + (RoleAdministrator) + "].RoleAdministrator' id='item[" + (RoleAdministrator) + "].RoleAdministrator' onchange='RoleChange(event)'><input name='item[" + (RoleAdministrator++) + "].RoleAdministrator' type='hidden' value='false' />") : ("<input type='checkbox' class='check-box' value='" + item.RoleAdministrator + "' name='item[" + (RoleAdministrator) + "].RoleAdministrator' id='item[" + (RoleAdministrator) + "].RoleAdministrator' onchange='RoleChange(event)'><input name='item[" + (RoleAdministrator++) + "].RoleAdministrator' type='hidden' value='false' />"))).Title("Administrator");
                                roleitem.Template(item => ((item.RoleReporting) ? ("<input type='checkbox' class='check-box' checked='checked' value='" + item.RoleReporting + "' name='item[" + (RoleReporting) + "].RoleReporting' id='item[" + (RoleReporting) + "].RoleReporting' onchange='RoleChange(event)'><input name='item[" + (RoleReporting++) + "].RoleReporting' type='hidden' value='false' />") : ("<input type='checkbox' class='check-box' value='" + item.RoleReporting + "' name='item[" + (RoleReporting) + "].RoleReporting' id='item[" + (RoleReporting) + "].RoleReporting' onchange='RoleChange(event)'><input name='item[" + (RoleReporting++) + "].RoleReporting' type='hidden' value='false' />"))).Title("Reporting");
                                roleitem.Template(item => ((item.RoleCustom) ? ("<input type='checkbox' class='check-box' checked='checked' value='" + item.RoleCustom + "' name='item[" + (RoleCustom) + "].RoleCustom' id='item[" + (RoleCustom) + "].RoleCustom' onchange='RoleChange(event)'><input name='item[" + (RoleCustom++) + "].RoleCustom' type='hidden' value='false' />") : ("<input type='checkbox' class='check-box' value='" + item.RoleCustom + "' name='item[" + (RoleCustom) + "].RoleCustom' id='item[" + (RoleCustom) + "].RoleCustom' onchange='RoleChange(event)'><input name='item[" + (RoleCustom++) + "].RoleCustom' type='hidden' value='false' />"))).Title("Custom");
                            }));

                            columns.Template(item => (
                                (
                                     "<a href='" + @Url.Action("index", "masteruser", new { id = item.Id }) + "'><img src='/Images/EditTemplate.jpg' title='Edit' style='height:20px;width:20px' id='" + item.Id + "'  ></a>"
                                ).ToString())).Title("Actions");
                        }
                        )
                        .Resizable(resize => resize.Columns(true))
                        .Filterable()
                        .Scrollable(scr => scr.Height(300))
                            )
            </div>
    }
