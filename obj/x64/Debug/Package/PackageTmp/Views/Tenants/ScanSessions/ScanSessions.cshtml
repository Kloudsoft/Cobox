@model List<HouseOfSynergy.AffinityDms.Entities.Tenants.ScanSession>
@{
    this.Layout = "~/Views/Shared/_LayoutTenantThemePrivate.cshtml";
    this.ViewBag.IsScanSessionsList = true;
    this.ViewBag.BreadCrumbsPath = "<li><a href='../../Tenantscansessions/index'>Capture</a></li>";
    var errormessage = (ViewBag.ErrorMessage != null) ? (ViewBag.ErrorMessage) : (string.Empty);
    var successmessage = (ViewBag.SuccessMessage != null) ? (ViewBag.SuccessMessage) : (string.Empty);
    string displayError = "none", displaySuccess = "none";
    if (!(string.IsNullOrEmpty(errormessage)))
    {
        displayError = "";
    }
    if (!(string.IsNullOrEmpty(successmessage)))
    {
        displaySuccess = "";
    }
    <div id="ScanSessionsErrorMessage" style="display:@displayError">
        <div class="alert alert-danger" style="overflow:auto">
            <div style="float:right;" class="col-sm-12 col-md-12 col-lg-12"><b style="float:right;cursor:pointer" data-hideMessageDiv="#ScanSessionsErrorMessage" id="hideErrorMessageDiv">X</b></div>
            <div style="word-wrap: break-word;margin-right:30px" id="ScanSessionsErrorMessageText">@errormessage</div>
        </div>
    </div>
    <div id="ScanSessionsErrorMessage" style="display:@displaySuccess">
        <div class="alert alert-success" style="overflow:auto">
            <div style="float:right;" class="col-sm-12 col-md-12 col-lg-12"><b style="float:right;cursor:pointer" data-hideMessageDiv="#ScanSessionsErrorMessage" id="hideSuccessMessageDiv">X</b></div>
            <div style="word-wrap: break-word;margin-right:30px" id="ScanSessionsErrorMessageText">@successmessage</div>
        </div>
    </div>

}

<style>
    #ScanSessionListGrid > table /* header + data table */ {
        table-layout: auto;
    }

    /*#ScanSessionListGrid tbody tr:hover td {
        background: #3a9cc1;
        color: white !important;
    }*/

        /*#ScanSessionListGrid tbody tr:hover td a {
            color: white !important;
        }*/
</style>
@using HouseOfSynergy.AffinityDms.Entities.Lookup

<div class="widget-box transparent">
    <div class="widget-body">
        <div class="widget-main no-padding">
            <div id="sessionsHolderDiv">
                @(Html
                        .Kendo()
                        .Grid(this.Model)
                        .Name("ScanSessionListGrid")
                        .Columns
                        (
                            column =>
                            {
                                column.Bound(item => item.Id).Hidden();
                                column.Template(item => "<input type='checkbox' class='ScanSessionCheckboxes' data-id='" + item.Id + "' value='false'>")
                                .HeaderTemplate("<input type='checkbox'id='ScanSessionChkbox' value='false'>")
                                .HeaderHtmlAttributes(new { style = "font-family: 'Lato', sans-serif!important;color:#707070!important;background-color: white;" })
                                .Width(50);
                                column.Template(item => "<p style='cursor:pointer' class='font-16' data-id='" + item.Id + "' onclick='javascript:window.location.href=\"" + Url.Action("Index", "TenantScanSession", new { id = item.Id }) + "\"'><a data-id='" + item.Id + "'><i class='fa fa-folder' aria-hidden='true'></i></a> " + item.Name + "</p>")
                                .HeaderTemplate("<p class='font-16'><strong>Batch Name</strong></p>")
                                .HeaderHtmlAttributes(new { style = "font-family: 'Lato', sans-serif!important;color:#707070!important;background-color: white;" })
                                .Width(200);
                                column.Template(item => ((item.Documents != null) ? (item.Documents.Where(x => (!((x.State == DocumentState.None) || (x.State == DocumentState.Uploading) || (x.State == DocumentState.Processing)))).ToList().Count.ToString()) : ("0")) + "/" + item.Documents.Count)
                                .HeaderTemplate("Quantity")
                                .HeaderHtmlAttributes(new { style = "font-weight: bold;font-family: 'Lato', sans-serif!important;color:#707070!important;background-color: white;" })
                                .Width(100);
                                column.Template(item => ((item.Documents != null) ? (item.Documents.Where(x => (x.State == DocumentState.Matched) || (x.State == DocumentState.MatchedMultiple) || (x.State == DocumentState.Verified) || (x.State == DocumentState.MatchedUnverified)).ToList().Count.ToString()) : ("0")))
                                .HeaderTemplate("Classified")
                                .HeaderHtmlAttributes(new { style = "font-weight: bold;font-family: 'Lato', sans-serif!important;color:#707070!important;background-color: white;" })
                                .Width(100);
                                column.Template(item => ((item.Documents != null) ? (item.Documents.Where(x => (!((x.State == DocumentState.Matched) || (x.State == DocumentState.MatchedMultiple) || (x.State == DocumentState.Verified) || (x.State == DocumentState.MatchedUnverified)))).ToList().Count.ToString()) : ("0")))
                                .HeaderTemplate("Unclassified")
                                .HeaderHtmlAttributes(new { style = "font-weight: bold;font-family: 'Lato', sans-serif!important;color:#707070!important;background-color: white;" })
                                .Width(100);
                                column.Template(item => ((item.Documents != null) ? (item.Documents.Where(x => x.IndexingLevel > 0).ToList().Count.ToString()) : ("0")))
                                .HeaderTemplate("Indexed")
                                .HeaderHtmlAttributes(new { style = "font-weight: bold;font-family: 'Lato', sans-serif!important;color:#707070!important;background-color: white;" })
                                .Width(100);
                                column.Template(item => ((item.Documents != null) ? (item.Documents.Where(x => x.IndexingLevel <= 0).ToList().Count.ToString()) : ("0")))
                                .HeaderTemplate("Non Indexed")
                                .HeaderHtmlAttributes(new { style = "font-weight: bold;font-family: 'Lato', sans-serif!important;color:#707070!important;background-color: white;" })
                                .Width(100);
                                column.Bound(item => item.User.NameFull)
                                .HeaderTemplate("Upload by")
                                .HeaderHtmlAttributes(new { style = "font-weight: bold;font-family: 'Lato', sans-serif!important;color:#707070!important;background-color: white;" })
                                .Width(150);
                                column.Template
                                (
                                    item =>
                                            "<a data-toggle='modal' href='#myModal3' class='btn btn-blu01 btn-white ' style='background:#2074ca !important; color:#fff !important;'>Add</a> &nbsp;" +
                                            "<a href='index.html' class='btn btn-white version'>Index</a>&nbsp;" +
                                            "<button type='button' class='btn btn-white version'>" +
                                            "<i class='fa fa-trash' aria-hidden='true'></i>" +
                                            "</button>"
                                )
                                .HeaderTemplate("<p class='font-16'><strong>Action</strong></p>")
                                .HeaderHtmlAttributes(new { style = "font-family: 'Lato', sans-serif!important;color:#707070!important;background-color: white;" });
                                //column.Bound(item => item.Documents.Where(x=>x.))
                                //   .HeaderTemplate("<p class='font-16'><strong></strong>Indexed by</p>");
                            }
                        )
                        .Scrollable(x => x.Height(450))
                        .HtmlAttributes(new { style = "margin:10px" })
                )
            </div>
        </div>
    </div>
    <!-- /.widget-body -->
</div>
<script type="text/javascript">
    $(document).ready(function (e) {
        //
        $("input#ScanSessionChkbox").on("change", function () {
            SelectAllRelatedCheckboxesByClass("ScanSessionChkbox", "ScanSessionCheckboxes");
            validateScanSessionCheckboxes();
        });
        $("input.ScanSessionCheckboxes").on("change", function () {
            validateScanSessionCheckboxes();
        });

        function validateScanSessionCheckboxes()
        {
            var ScanSessionCheckboxes = document.getElementsByClassName("ScanSessionCheckboxes");
            var checkedCount = 0;
            for (var i = 0; i < ScanSessionCheckboxes.length; i++) {
                if (ScanSessionCheckboxes[i].checked) {
                    checkedCount++;
                }
            }
            if (ScanSessionCheckboxes.length != checkedCount) {
                var ScanSessionChkbox = document.getElementById("ScanSessionChkbox");
                ScanSessionChkbox.checked = "";
            }
            if (checkedCount > 1) {
                var mergeBatchBtn = document.getElementById("mergeBatchBtn");
                mergeBatchBtn.removeAttribute("disabled");
            }
            else if (checkedCount <= 1) {
                var mergeBatchBtn = document.getElementById("mergeBatchBtn");
                mergeBatchBtn.setAttribute("disabled","");
            }
        }
        if ($("ScanSessionsErrorMessageText") != null) {
            if ($("#ScanSessionsErrorMessageText").text() != null || $("#ScanSessionsErrorMessageText").text() != "") {
                setTimeout(function () {
                    $('#ScanSessionsErrorMessage').fadeOut('fast');
                    $("#ScanSessionsErrorMessage").css("display", "none");
                    $("#ScanSessionsErrorMessageText").text("");
                }, AffinityDms.Settings.Constants.PopUpNotificationTimer);
            }
        }
        if ($("ScanSessionsSuccessMessageText") != null) {
            if ($("#ScanSessionsSuccessMessageText").text() != null || $("#ScanSessionsSuccessMessageText").text() != "") {
                setTimeout(function () {
                    $('#ScanSessionsSuccessMessage').fadeOut('fast');
                    $("#ScanSessionsSuccessMessage").css("display", "none");
                    $("#ScanSessionsSuccessMessageText").text("");
                }, AffinityDms.Settings.Constants.PopUpNotificationTimer);
            }
        }
    });
</script>
