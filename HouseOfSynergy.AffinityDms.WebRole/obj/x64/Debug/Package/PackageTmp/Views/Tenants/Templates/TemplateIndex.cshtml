@model HouseOfSynergy.AffinityDms.WebRole.Models.Tenants.TemplateElementListAndElementDetailListViewModel

@{
    ViewBag.Title = "Template Indexing";
    this.Layout = "~/Views/Shared/_LayoutTenantThemePrivate.cshtml";
}

<table width="100%">
    <tr>
        <td align="left"><h2>Template Indexing</h2></td>
        <td align="center"><a  id="btnback" class="=btn btn-primary btn-radius" href='@Url.Action("Index", "TenantTemplates")'>&nbsp;&nbsp;Back&nbsp;&nbsp;</a></td>
        <td align="right"><input type="button" id="btnprocessocr" value="PROCESS OCR" class="=btn btn-primary btn-radius" style="width:200px" /></td>
    </tr>
</table>
@Scripts.Render("~/bundles/TypeScript")

<input type="hidden" name="H_Templateid" value="@Model.template.Id" id="h_templateid">

<script type="text/javascript">
    var designer = new AffinityDms.Entities.FormDesigner();
</script>
@*@Html.BeginForm("Index","TemplateDesigner",FormMethod.Post){*@

<style>

    .side-content {
        height: 487px;width: 1125px;
        overflow: 
    }

</style>


<div id="DivBody">
    @*<div id="coords"></div>*@



    @{

        if (ViewBag.ModelTemplateImage != null)
        {
            var img = (System.Drawing.Image)ViewBag.ModelTemplateImage;
            byte[] imgbytearray = ViewBag.ModelTemplateImageByteArray;
            string imageBase64Data = Convert.ToBase64String(imgbytearray);
            string imageDataURL = string.Format("data:image/png;base64,{0}", imageBase64Data);
            //string RequireWidth = "900px";
            //string RequireHeight = "1273px";
            if (img.Size.Width > 0)
            {
                //if (img.Size.Width >= 900){ RequireWidth= "900px"; } else { RequireWidth = img.Size.Width.ToString();}
                //if (img.Size.Height >= 1273){RequireHeight = "1273px";}else{ RequireHeight = img.Size.Height.ToString();}

                <div id="MainContainer" class="col-md-8" style="border:1px solid #e0e0e0;overflow:scroll;width:880px;height:390px">
                <svg id="mySVG" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="@img.Size.Width"  height="@img.Size.Height"  
                         style="background-image:url(@imageDataURL); background-size:cover;background-repeat:no-repeat;background-position:center;">

                    </svg>
                </div>
                
            }
        }
    }

    @*<img src="@imageDataURL" draggable="false" id="TemplateImage"  style="z-index:3;position: relative;" width="@img.Size.Width.ToString()px" height="@img.Size.Height.ToString()px"/>*@

    <div id="DivPropertiesBox" style="display:inline-block;margin-left: 5px;top:5%;width:200px; height:100%; background-color: steelblue;float:right;z-index:1500">
        <div style="margin-left: 7px; margin-top: 10px;margin-right: auto">
            <div id="addnamedivid" style="display: block;margin: 10px;">
                <label class="PropertyLabel">Name:</label>
                <input type="text" placeholder="Name" id="addnameid" class="PropertyElement">
            </div>


            <div id="addindexlabeldivid" style="display: block;margin: 10px;">
                <label class="PropertyLabel">Value:</label>
                <input type="text" placeholder="Value" id="addindexvalue" class="PropertyElement">
            </div>


            <div id="addxdivid" style="display: block;margin: 10px;">
                <label class="PropertyLabel">X-Axis:</label>
                <input type="number" placeholder="X-Axis" id="addxid" class="PropertyElement">
            </div>
            <div id="addydivid" style="display: block;margin: 10px;">
                <label class="PropertyLabel">Y-Axis:</label>
                <input type="number" placeholder="Y-Axis" id="addyid" class="PropertyElement">
            </div>

            <div id="addx2divid" style="display: block;margin: 10px;">
                <label class="PropertyLabel">X2-Axis:</label>
                <input type="number" placeholder="X2-Axis" id="addx2id" class="PropertyElement">
            </div>
            <div id="addy2divid" style="display: block;margin: 10px;">
                <label class="PropertyLabel">Y2-Axis:</label>
                <input type="number" placeholder="Y2-Axis" id="addy2id" class="PropertyElement">
            </div>


            <div id="addcolumndivid" style="display: block;margin: 10px;">
                @*<input type="button" value="Add Column" id="addcolumnid" style="width: auto;" onclick="javascript: designer.AddColumnToOCRTableZone(event)">*@
                @*<img id="addcolumnid" src="@Url.Content("~/Images/AddColumn.png")" title="Add Index" style="width:25px;margin-right: auto;margin-left:auto" onclick="javascript: designer.AddColumnToOCRTableZone(event)">*@
                @*<label class="PropertyLabel" onclick="">Add Index</label>*@
                <input type="button" id="btnaddindex" value="Add Index" class="=btn btn-primary btn-radius" />
            </div>
            <div id="adddeletecolumnbtndivid" style="display: none;margin: 10px;">
                @*<input type="button" value="Delete Column" id="adddeletecolumnbtnid" style="width: auto;" onclick="javascript: designer.DeleteColumnElement(event)">*@
                @*<img id="adddeletecolumnbtnid" src="@Url.Content("~/Images/RemoveColumn.png")" title="Remove Column" style="width:25px;margin-right: auto;margin-left:auto" onclick="javascript: designer.DeleteColumnElement(event)">*@
                <label class="PropertyLabel" onclick="javascript: designer.DeleteColumnElement(event)">Remove Index</label>
            </div>
            <div id="adddeletebtndivid" style="display: none;margin: 10px;">
                <img id="adddeletebtnid" src="~/Images/Delete.png" title="Delete Zone" style="width:25px;margin-right: auto;margin-left:auto" onclick="javascript: designer.DeleteElement(event)">
                <label class="PropertyLabel" onclick="javascript: designer.DeleteElement(event)">Delete </label>
                @*<input type="button" value="Delete" id="adddeletebtnid" style="width: auto;" onclick="javascript: designer.DeleteElement(event)">*@
            </div>

            <div id="divindexadded"></div>
        </div>

    </div>

</div>

<input type="hidden" id="colcounter" value="0" />
<input type="hidden" id="divcounter" value="0" />
<input type="hidden" id="Hidfind" value="0" />
<input type="hidden" id="CurTarget" value="0" />
<input type="hidden" id="TempType" value="Template">
<input type="hidden" id="ImageMove" value="false">


<input id="Hidden1" type="hidden" value="@TempData["TDOcrresult"]" />

@if (Model != null)
{
    <script type="text/javascript">
        @{
                                System.Web.Script.Serialization.JavaScriptSerializer serialize = new System.Web.Script.Serialization.JavaScriptSerializer();
                                serialize.MaxJsonLength = int.MaxValue;
                                var serializeddata = serialize.Serialize(Model);
                            }
       // document.onload = designer.editTemplateDesign('@Html.Raw(serializeddata)');//Json.Encode(Model))');

    </script>
    }

<script>

    //----------------------------------SVG START-----------------------------------

</script>





@if (TempData["TDOcrresult"] != null)
{


    <script>


    alert("OCR Processed successfully!");

                             alert($("#Hidden1").val());
                            var svgNS = "http://www.w3.org/2000/svg";

                            var OCRTEXT=JSON.parse($("#Hidden1").val());
                            //    alert(OCRTEXT.Language);
                            //    alert(OCRTEXT.Regions[3].Lines[0].Words[0].Text);
                            //   alert(OCRTEXT.Regions[5].Lines[1].Words[0].Rectangle.Left);

                            var jsonObj = OCRTEXT;

                            var jsonleft=0;
                            var jsontop=0;

                            var ob = jsonObj;

                            //  alert(ob.Regions.length);

                            for(i=0;i< ob.Regions.length;i++){
                                for(j=0;j< ob.Regions[i].Lines.length;j++){
                                    for(k=0;k< ob.Regions[i].Lines[j].Words.length;k++){




                                        var left=  OCRTEXT.Regions[i].Lines[j].Words[k].Rectangle.Left;
                                        var toppp= OCRTEXT.Regions[i].Lines[j].Words[k].Rectangle.Top;
                                        var width= OCRTEXT.Regions[i].Lines[j].Words[k].Rectangle.Width;
                                        var height= OCRTEXT.Regions[i].Lines[j].Words[k].Rectangle.Height;

                                        var rectElement = document.createElementNS(svgNS,"rect");

                                        rectElement.setAttributeNS(null,"id","rectElement1");
                                        rectElement.setAttributeNS(null,"x",left);
                                        rectElement.setAttributeNS(null,"y",toppp);
                                        rectElement.setAttributeNS(null,"height",height);
                                        rectElement.setAttributeNS(null,"width",width);
                                        //rectElement.setAttributeNS(null,"onclick",showelement(left));

                                        rectElement.setAttributeNS(null,"fill","rgba(255,255,255,0.1)");
                                        rectElement.setAttributeNS(null,'onclick', "domousedown(this)");

                                        mySVGelement=document.getElementById("mySVG");

                                        mySVGelement.appendChild(rectElement);

                                    }
                                }
                            }
                            // alert("DOne");




                            //--------------- funcitons
                            function showelement(left)
                            {

                                //   alert(left);
                            }




                            function init()
                            {
                                debugger;
                                // alert("");
                                var c = document.getElementById("mySVG");
                                c.addEventListener("mousedown",domousedown,false);
                            }

                            function domousedown(event)
                            {
                                //  alert("mouse");
                                //  alert(event.getAttributeNS(null, "x"));

                                if(confirm("Are you sure, Do you want to add this INDEX?"))
                                {
                                    fnSearch(event.getAttributeNS(null, "x"),event.getAttributeNS(null, "y"),event.getAttributeNS(null, "height"),event.getAttributeNS(null, "width"),event)
            }
                                else{
                                    return false;
                                }
                            }


                            function fnSearch(l,t,h,w,event)
                            {
                                //       alert("in1");
                                var jsonObj = OCRTEXT;

                                var jsonleft=0;
                                var jsontop=0;

                                var ob = jsonObj;

                                //  alert(ob.Regions.length);

                                for(i=0;i< ob.Regions.length;i++){
                                    for(j=0;j< ob.Regions[i].Lines.length;j++){
                                        for(k=0;k< ob.Regions[i].Lines[j].Words.length;k++){

                                            jsonleft=ob.Regions[i].Lines[j].Words[k].Rectangle.Left;
                                            jsontop= ob.Regions[i].Lines[j].Words[k].Rectangle.Top;
                                            jsonwidth= ob.Regions[i].Lines[j].Words[k].Rectangle.Width;
                                            jsonheight= ob.Regions[i].Lines[j].Words[k].Rectangle.Height;

                                            if((l==jsonleft) && (t==jsontop)){
                                $('#addindexvalue').val(ob.Regions[i].Lines[j].Words[k].Text);

                                $('#addxid').val(jsonleft);
                                $('#addyid').val(jsontop);
                                $('#addx2id').val(jsonwidth);
                                $('#addy2id').val(jsonheight);


                                            event.setAttributeNS(null,"stroke","rgba(237,218,80,0.5)");
                                            event.setAttributeNS(null,"stroke-linecap","round");
                                            event.setAttributeNS(null,"stroke-linejoin","round");
                                            event.setAttributeNS(null,"stroke-width","20");

                                                break;
                                            }
                                        }

                                    }
                                }


                            }



    //------------functions end


// document.onload=init();
    </script>

}
else
{
    <script>
  //  alert("Temp data is Null");
    </script>
}

<script>

    //----------------------------------SVG END-----------------------------------

</script>


<script>
    $(document).ready(function() {

        $('#TemplateImage').mousedown(function(e) {

                            document.getElementById("addindexyradioid").checked=true;

                            var offset = $(this).offset();

                            var X = (e.pageX - offset.left);
                            var Y = (e.pageY - offset.top);

                            // $('#coords').text('X: ' + X + ', Y: ' + Y);

                            //  alert(document.getElementById("addindexyradioid").checked);

                            if(document.getElementById("addindexyradioid").checked)
                {
                $('#addxid').val(X);
                $('#addyid').val(Y);
                                }
                                document.getElementById("addindexy2radioid").checked=true;

                                //if(document.getElementById("addindexy2radioid").checked)
                                //{
                                //$('#addx2id').val(X);
                                //$('#addy2id').val(Y);
                                //}

                                });
                                });
</script>

<script>
                   $(document).ready(function() {

        $('#TemplateImage').mouseup(function(e) {

                                    var offset = $(this).offset();

                                    var X = (e.pageX - offset.left);
                                    var Y = (e.pageY - offset.top);

                                    // $('#coords').text('X: ' + X + ', Y: ' + Y);

                                    //  alert(document.getElementById("addindexyradioid").checked);

                                    //    if(document.getElementById("addindexyradioid").checked)
                                    //    {
                                    //    $('#addxid').val(X);
                                    //  $('#addyid').val(Y);
                                    //   }

                                    if(document.getElementById("addindexy2radioid").checked)
                {
                $('#addx2id').val(X);
                $('#addy2id').val(Y);
                                        }

                                        document.getElementById("addindexyradioid").checked=true;

                                        });
                                        });


                                    var url = "@Url.Action("ProcessOcr", "TenantTemplateIndex")";



$(function(){
  $("#btnprocessocr").click(function(){

                                            //  alert("calling");
                                            var id = $("#h_templateid").val();
                                            // alert(url + "?id=" + id);
                                            window.location = url + "?id=" + id;
                                        });
                                    });


</script>
<script>

     var urll = "@Url.Action("processindex", "TenantTemplateIndex")";

                                    var id = $("#h_templateid").val();
        $(function () {
            $('#btnaddindex').click(function (e) {
                $.ajax({
                                                url: urll,
                    type: "POST",
                //contentType: "application/json",
                dataType: "json",
                    data: {id: id, desc: $("#addnameid").val(), val: $("#addindexvalue").val(), x:$("#addxid").val(), y:$("#addyid").val(), w:$("#addx2id").val(), h:$("#addy2id").val() },

                   error: function (response) {
                                                    alert("error");

                                                },
                    success: function (response) {

    alert("Selected field INDEXED successfully!");
                                //JsonpCallback(response);

                                                }
                                            });
                                        });
                                    });


    function JsonpCallback(json)  {


    document.getElementById('divindexadded').innerHTML = JSON.parse(json);
}


</script>


@if (TempData["TDOcrresult"] != null)
{


    @*<script>
                alert($("#Hidden1").val());

                var OCRTEXT=JSON.parse($("#Hidden1").val());
            //    alert(OCRTEXT.Language);
            //    alert(OCRTEXT.Regions[3].Lines[0].Words[0].Text);

                var c = document.getElementById("myCanvas");
                var ctx = c.getContext("2d");

                alert(OCRTEXT.Regions[5].Lines[1].Words[0].Rectangle.Left);

                var left=  OCRTEXT.Regions[5].Lines[1].Words[0].Rectangle.Left;
                var toppp= OCRTEXT.Regions[5].Lines[1].Words[0].Rectangle.Top;
                var width= OCRTEXT.Regions[5].Lines[1].Words[0].Rectangle.Width;
                var height= OCRTEXT.Regions[5].Lines[1].Words[0].Rectangle.Height;

                ctx.globalAlpha = 0.5
                ctx.fillStyle = "#ffeb99";
                ctx.fillRect(left,toppp,width,height);






                function init()
                {
                debugger;
                alert("");
                 var c = document.getElementById("myCanvas");
                 c.addEventListener("mousedown",domousedown,false);
                }

                function domousedown(event)
                {

                alert("domousedown");

             //   alert("called");
                alert(event.layerX);
             //   alert("X=" + event.pageX + "  " + "Y=" + event.pageY);
                lastPos = getMousePos(c, event);
             //   alert(lastPos.x);
              //  alert(lastPos.y);
             //   alert(lastPos.h);
              //  alert(lastPos.w);
             //   alert(lastPos.r);
             //   alert(lastPos.b);
                   alert(lastPos.x);
                   alert(lastPos.y);
                   fnSearch(lastPos.x,lastPos.y);

                }

                function getMousePos(canvasDom, mouseEvent)
                {
               // alert("IN");
                    var rect = canvasDom.getBoundingClientRect();
                return {
                    x: mouseEvent.clientX - rect.left,
                    y: mouseEvent.clientY - rect.top,
                    h: rect.height,
                    w: rect.width,
                    r: rect.right,
                    b: rect.bottom,
                    l: rect.left,
                    t: rect.top
                        };
                }



                function fnSearch(l,t)
                {
                alert("in1");
                var jsonObj = OCRTEXT;

                var jsonleft=0;
                var jsontop=0;

                var ob = jsonObj;

                alert(ob.Regions.length);
                //alert(ob.Regions.Lines.length);
                //alert(ob.Regions.Lines.Words.length);


                for(i=0;i< ob.Regions.length;i++){

               // alert(ob.Regions.length);

                        for(j=0;j< ob.Regions[i].Lines.length;j++){

               // alert(ob.Regions[i].Lines.length)

                            for(k=0;k< ob.Regions[i].Lines[j].Words.length;k++){

              //  alert(ob.Regions[i].Lines[j].Words.length);

                                    //var str = str + " "+ob.regions[i].lines[j].words[k].Left;
                                jsonleft=ob.Regions[i].Lines[j].Words[k].Rectangle.Left;
                                jsontop= ob.Regions[i].Lines[j].Words[k].Rectangle.Top;
                                l=Math.ceil(l);
                                t=Math.ceil(t);

                //alert("Check " + " jsonleft " + jsonleft + " and mouse left" + l);


                                        if(l>jsonleft){
                                                fnFind(jsonleft,jsontop,l,t,ob);
                                                      }
                            }

                        }
                    }


                }



                function fnFind(jsonleft,jsontop,l,t,Obj)
                {

                if(jsonleft==l)
                {
                }
                else
                {
                 var ix = l;
                start:while(true)
                    {
                            ix--;
                            jsonleft=ob.Regions[i].Lines[j].Words[k].Rectangle.Left;

                    }

                }





              //  alert("find");
               // l=Math.ceil(l);
              //  t=Math.ceil(t);

                var i = l;
                start:while(true)
                    {
                            i--;

                         //   alert("l:  " + i );
                         //   alert("jsonleft: " + jsonleft);

                                if(i==jsonleft)
                                {

                                    alert("equal");

                                    alert(jsonleft);
                                    alert(jsontop);
                                    alert(i);
                                    alert(t);
                                    break;


                                }
                                else
                                {
                                   // alert("not equal: " + i + "!="+ jsonleft);
                                    continue start;
                                }

                     }
                }










                 document.onload=init();


        </script>*@


}

