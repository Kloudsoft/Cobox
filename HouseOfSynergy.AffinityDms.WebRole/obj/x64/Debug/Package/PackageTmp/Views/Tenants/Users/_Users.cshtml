@model List<HouseOfSynergy.AffinityDms.WebRole.Models.Tenants.UserViewModel>
<script type="text/javascript">
    function RoleChange(event) {
        var chkbox = event.currentTarget;
        if (chkbox.checked) {
            chkbox.setAttribute("checked", "checked");
            chkbox.setAttribute("value", "true");
        }
        else {
            chkbox.removeAttribute("checked");
            chkbox.setAttribute("value", "false");
        }
    }
</script>

@{
    TenantUserSession tenantUserSession = null;
    Exception exception = null;
    if (!HouseOfSynergy.AffinityDms.WebRole.Classes.Tenants.TenantAuthenticationHelper.ValidateToken(this.Request, HouseOfSynergy.AffinityDms.Entities.Lookup.SessionType.Mvc, out tenantUserSession, out exception)) { this.Response.RedirectToRoute("TenantSignIn"); }
    bool IsUserDeletionEnabled = false;
    string IsUserDeletionEnabledVal = string.Empty;
    if ((IsUserDeletionEnabledVal = System.Configuration.ConfigurationManager.AppSettings["IsUserDeletionEnabled"]) != null)
    {

        var result = bool.TryParse(IsUserDeletionEnabledVal, out IsUserDeletionEnabled);
    }

    var errormessage = (ViewBag.ErrorMessage != null) ? (ViewBag.ErrorMessage) : (string.Empty);
    var successmessage = (ViewBag.SuccessMessage != null) ? (ViewBag.SuccessMessage) : (string.Empty);
    string displayError = "none", displaySuccess = "none";
    if (!(string.IsNullOrEmpty(errormessage)))
    {
        displayError = "";
    }
    if (!(string.IsNullOrEmpty(successmessage)))
    {
        displaySuccess = "";
    }

    <div id="UsersErrorMessage" style="display:@displayError">
        <div class="alert alert-danger" style="overflow:auto">
            <div style="float:right;" class="col-sm-12 col-md-12 col-lg-12"><b style="float:right;cursor:pointer" data-hideMessageDiv="#UsersErrorMessage"  onclick="hideErrorMessageDiv(event)" id="hideErrorMessageDiv">X</b></div>
            <div style="word-wrap: break-word;margin-right:30px" id="UsersErrorMessageText">@errormessage</div>
        </div>
    </div>
    <div id="UsersSuccessMessage" style="display:@displaySuccess">
        <div class="alert alert-success" style="overflow:auto">
            <div style="float:right;" class="col-sm-12 col-md-12 col-lg-12"><b style="float:right;cursor:pointer" data-hideMessageDiv="#UsersSuccessMessage"  onclick="hideSuccessMessageDiv(event)" id="hideSuccessMessageDiv">X</b></div>
            <div style="word-wrap: break-word;margin-right:30px" id="UsersSuccessMessageText">@successmessage</div>
        </div>
    </div>
}




@using (Html.BeginForm((string)this.ViewBag.Action, (string)this.ViewBag.Controller, FormMethod.Post))
{
    <div style="margin-bottom:20px;display: block;float: right;">
        <input type="button" value="Sync AD" class="btn btn-primary" style="margin-right: 20px;" onclick="javascript: window.location.href=' @Url.Action("SyncFromAD", "TenantUsers")'" />
        <input type="button" value="Create" class="btn btn-primary" style="margin-right: 20px;" onclick="javascript: window.location.href='@Url.Action("Index", "TenantUser")'" />
        <input type="submit" value="Submit" class="btn btn-primary" style="margin-right: 10px;" />
    </div>
    <div class="col-md-12">

        @{int idcount = 0, RoleSSOAD = 0, RoleHQAP = 0,  RoleSiteManager = 0, RoleSitePO = 0, RolePoftfolioManager = 0, RoleAdministrator = 0, RoleReporting = 0, RoleCustom = 0, RoleScanner = 0, RoleUploader = 0, RoleIndexer = 0, RoleTemplateCreator = 0, RoleFormCreator = 0, RoleWorkflowActor = 0, RoleWorkflowCreator = 0;}
        @(


                 Html.Kendo().Grid(Model).Name("TenantUserListGrid").Columns
                        (
                        columns =>
                        {

                            columns.Template(item => (item.Id > 0) ? ("<input type='hidden' name='item[" + (idcount) + "].Id' id='item[" + (item.Id) + "].Id' value='" + item.Id + "'></span>") : (string.Empty)).Hidden();
                            columns.Template(item => (item.NameGiven + " " + item.NameFamily)).Title("Name");

                            columns.Bound(item => (item.Email)).Title("Email");
                            columns.Bound(item => (item.UserName)).Title("Username");
                            columns.Bound(item => (item.AuthenticationType)).Title("Authentication Type");

                            columns.Group(group => group
                                .Title("Roles")
                                .HeaderHtmlAttributes(new { @style = "text-align: center" })
                                .Columns(roleitem =>
                                {
                                    roleitem.Template(item => ((item.RoleAdministrator) ? ("<input type='checkbox' class='check-box' checked='checked' value='" + item.RoleAdministrator + "' name='item[" + (RoleAdministrator) + "].RoleAdministrator' id='item[" + (RoleAdministrator) + "].RoleAdministrator' onchange='RoleChange(event)'><input name='item[" + (RoleAdministrator++) + "].RoleAdministrator' type='hidden' value='false' />") : ("<input type='checkbox' class='check-box' value='" + item.RoleAdministrator + "' name='item[" + (RoleAdministrator) + "].RoleAdministrator' id='item[" + (RoleAdministrator) + "].RoleAdministrator' onchange='RoleChange(event)'><input name='item[" + (RoleAdministrator++) + "].RoleAdministrator' type='hidden' value='false' />"))).Title("Administrator");

                                    roleitem.Template(item => ((item.RoleSiteManager) ? ("<input type='checkbox' class='check-box' checked='checked' value='" + item.RoleSiteManager + "' name='item[" + (RoleSiteManager) + "].RoleSiteManager' id='item[" + (RoleSiteManager) + "].RoleSiteManager' onchange='RoleChange(event)'><input name='item[" + (RoleSiteManager++) + "].RoleSiteManager' type='hidden' value='false' />") : ("<input type='checkbox' class='check-box' value='" + item.RoleSiteManager + "' name='item[" + (RoleSiteManager) + "].RoleSiteManager' id='item[" + (RoleReporting) + "].RoleSiteManager' onchange='RoleChange(event)'><input name='item[" + (RoleSiteManager++) + "].RoleSiteManager' type='hidden' value='false' />"))).Title("Site Manager");
                                    roleitem.Template(item => ((item.RoleSitePO) ? ("<input type='checkbox' class='check-box' checked='checked' value='" + item.RoleSitePO + "' name='item[" + (RoleSitePO) + "].RoleSitePO' id='item[" + (RoleSitePO) + "].RoleSitePO' onchange='RoleChange(event)'><input name='item[" + (RoleSitePO++) + "].RoleSitePO' type='hidden' value='false' />") : ("<input type='checkbox' class='check-box' value='" + item.RoleSitePO + "' name='item[" + (RoleSitePO) + "].RoleSitePO' id='item[" + (RoleSitePO) + "].RoleSitePO' onchange='RoleChange(event)'><input name='item[" + (RoleSitePO++) + "].RoleSitePO' type='hidden' value='false' />"))).Title("Site PO");
                                    roleitem.Template(item => ((item.RolePoftfolioManager) ? ("<input type='checkbox' class='check-box' checked='checked' value='" + item.RolePoftfolioManager + "' name='item[" + (RolePoftfolioManager) + "].RolePoftfolioManager' id='item[" + (RolePoftfolioManager) + "].RolePoftfolioManager' onchange='RoleChange(event)'><input name='item[" + (RolePoftfolioManager++) + "].RolePoftfolioManager' type='hidden' value='false' />") : ("<input type='checkbox' class='check-box' value='" + item.RolePoftfolioManager + "' name='item[" + (RolePoftfolioManager) + "].RolePoftfolioManager' id='item[" + (RolePoftfolioManager) + "].RolePoftfolioManager' onchange='RoleChange(event)'><input name='item[" + (RolePoftfolioManager++) + "].RolePoftfolioManager' type='hidden' value='false' />"))).Title("Poftfolio Manager");

                                    roleitem.Template(item => ((item.RoleSSOAD) ? ("<input type='checkbox' class='check-box' checked='checked' value='" + item.RoleSSOAD + "' name='item[" + (RoleSSOAD) + "].RoleSSOAD' id='item[" + (RoleSSOAD) + "].RoleSSOAD' onchange='RoleChange(event)'><input name='item[" + (RoleSSOAD++) + "].RoleSSOAD' type='hidden' value='false' />") : ("<input type='checkbox' class='check-box' value='" + item.RoleSSOAD + "' name='item[" + (RoleSSOAD) + "].RoleSSOAD' id='item[" + (RoleSSOAD) + "].RoleSSOAD' onchange='RoleChange(event)'><input name='item[" + (RoleSSOAD++) + "].RoleSSOAD' type='hidden' value='false' />"))).Title("SSOAD");
                                    roleitem.Template(item => ((item.RoleHQAP) ? ("<input type='checkbox' class='check-box' checked='checked' value='" + item.RoleHQAP + "' name='item[" + (RoleHQAP) + "].RoleHQAP' id='item[" + (RoleHQAP) + "].RoleHQAP' onchange='RoleChange(event)'><input name='item[" + (RoleHQAP++) + "].RoleHQAP' type='hidden' value='false' />") : ("<input type='checkbox' class='check-box' value='" + item.RoleHQAP + "' name='item[" + (RoleHQAP) + "].RoleHQAP' id='item[" + (RoleHQAP) + "].RoleHQAP' onchange='RoleChange(event)'><input name='item[" + (RoleHQAP++) + "].RoleHQAP' type='hidden' value='false' />"))).Title("HQAP");

                                    roleitem.Template(item => ((item.RoleReporting) ? ("<input type='checkbox' class='check-box' checked='checked' value='" + item.RoleReporting + "' name='item[" + (RoleReporting) + "].RoleReporting' id='item[" + (RoleReporting) + "].RoleReporting' onchange='RoleChange(event)'><input name='item[" + (RoleReporting++) + "].RoleReporting' type='hidden' value='false' />") : ("<input type='checkbox' class='check-box' value='" + item.RoleReporting + "' name='item[" + (RoleReporting) + "].RoleReporting' id='item[" + (RoleReporting) + "].RoleReporting' onchange='RoleChange(event)'><input name='item[" + (RoleReporting++) + "].RoleReporting' type='hidden' value='false' />"))).Title("Reporting");
                                    roleitem.Template(item => ((item.RoleScanner) ? ("<input type='checkbox' class='check-box' checked='checked' value='" + item.RoleScanner + "' name='item[" + (RoleScanner) + "].RoleScanner' id='item[" + (RoleScanner) + "].RoleScanner' onchange='RoleChange(event)'><input name='item[" + (RoleScanner++) + "].RoleScanner' type='hidden' value='false' />") : ("<input type='checkbox' class='check-box' value='" + item.RoleScanner + "' name='item[" + (RoleScanner) + "].RoleScanner' id='item[" + (RoleScanner) + "].RoleScanner' onchange='RoleChange(event)'><input name='item[" + (RoleScanner++) + "].RoleScanner' type='hidden' value='false' />"))).Title("Scanner");
                                    roleitem.Template(item => ((item.RoleUploader) ? ("<input type='checkbox' class='check-box' checked='checked' value='" + item.RoleUploader + "' name='item[" + (RoleUploader) + "].RoleUploader' id='item[" + (RoleUploader) + "].RoleUploader' onchange='RoleChange(event)'><input name='item[" + (RoleUploader++) + "].RoleUploader' type='hidden' value='false' />") : ("<input type='checkbox' class='check-box' value='" + item.RoleUploader + "' name='item[" + (RoleUploader) + "].RoleUploader' id='item[" + (RoleUploader) + "].RoleUploader' onchange='RoleChange(event)'><input name='item[" + (RoleUploader++) + "].RoleUploader' type='hidden' value='false' />"))).Title("Uploader");
                                    roleitem.Template(item => ((item.RoleIndexer) ? ("<input type='checkbox' class='check-box' checked='checked' value='" + item.RoleIndexer + "' name='item[" + (RoleIndexer) + "].RoleIndexer' id='item[" + (RoleIndexer) + "].RoleIndexer' onchange='RoleChange(event)'><input name='item[" + (RoleIndexer++) + "].RoleIndexer' type='hidden' value='false' />") : ("<input type='checkbox' class='check-box' value='" + item.RoleIndexer + "' name='item[" + (RoleIndexer) + "].RoleIndexer' id='item[" + (RoleIndexer) + "].RoleIndexer' onchange='RoleChange(event)'><input name='item[" + (RoleIndexer++) + "].RoleIndexer' type='hidden' value='false' />"))).Title("Indexer");
                                    roleitem.Template(item => ((item.RoleTemplateCreator) ? ("<input type='checkbox' class='check-box' checked='checked' value='" + item.RoleTemplateCreator + "' name='item[" + (RoleTemplateCreator) + "].RoleTemplateCreator' id='item[" + (RoleTemplateCreator) + "].RoleTemplateCreator' onchange='RoleChange(event)'><input name='item[" + (RoleTemplateCreator++) + "].RoleTemplateCreator' type='hidden' value='false' />") : ("<input type='checkbox' class='check-box' value='" + item.RoleTemplateCreator + "' name='item[" + (RoleTemplateCreator) + "].RoleTemplateCreator' id='item[" + (RoleTemplateCreator) + "].RoleTemplateCreator' onchange='RoleChange(event)'><input name='item[" + (RoleTemplateCreator++) + "].RoleTemplateCreator' type='hidden' value='false' />"))).Title("Template Creator").Hidden(true);
                                    roleitem.Template(item => ((item.RoleFormCreator) ? ("<input type='checkbox' class='check-box' checked='checked' value='" + item.RoleFormCreator + "' name='item[" + (RoleFormCreator) + "].RoleFormCreator' id='item[" + (RoleFormCreator) + "].RoleFormCreator' onchange='RoleChange(event)'><input name='item[" + (RoleFormCreator++) + "].RoleFormCreator' type='hidden' value='false' />") : ("<input type='checkbox' class='check-box' value='" + item.RoleFormCreator + "' name='item[" + (RoleFormCreator) + "].RoleFormCreator' id='item[" + (RoleFormCreator) + "].RoleFormCreator' onchange='RoleChange(event)'><input name='item[" + (RoleFormCreator++) + "].RoleFormCreator' type='hidden' value='false' />"))).Title("Form Creator").Hidden(true);
                                    roleitem.Template(item => ((item.RoleWorkflowActor) ? ("<input type='checkbox' class='check-box' checked='checked' value='" + item.RoleWorkflowActor + "' name='item[" + (RoleWorkflowActor) + "].RoleWorkflowActor' id='item[" + (RoleWorkflowActor) + "].RoleWorkflowActor' onchange='RoleChange(event)'><input name='item[" + (RoleWorkflowActor++) + "].RoleWorkflowActor' type='hidden' value='false' />") : ("<input type='checkbox' class='check-box' value='" + item.RoleWorkflowActor + "' name='item[" + (RoleWorkflowActor) + "].RoleWorkflowActor' id='item[" + (RoleWorkflowActor) + "].RoleWorkflowActor' onchange='RoleChange(event)'><input name='item[" + (RoleWorkflowActor++) + "].RoleWorkflowActor' type='hidden' value='false' />"))).Title("Workflow Actor").Hidden(true);
                                    roleitem.Template(item => ((item.RoleWorkflowCreator) ? ("<input type='checkbox' class='check-box' checked='checked' value='" + item.RoleWorkflowCreator + "' name='item[" + (RoleWorkflowCreator) + "].RoleWorkflowCreator' id='item[" + (RoleWorkflowCreator) + "].RoleWorkflowCreator' onchange='RoleChange(event)'><input name='item[" + (RoleWorkflowCreator++) + "].RoleWorkflowCreator' type='hidden' value='false' />") : ("<input type='checkbox' class='check-box' value='" + item.RoleWorkflowCreator + "' name='item[" + (RoleWorkflowCreator) + "].RoleWorkflowCreator' id='item[" + (RoleWorkflowCreator) + "].RoleWorkflowCreator' onchange='RoleChange(event)'><input name='item[" + (RoleWorkflowCreator++) + "].RoleWorkflowCreator' type='hidden' value='false' />"))).Title("Workflow Creator").Hidden(true);
                                    roleitem.Template(item => ((item.RoleCustom) ? ("<input type='checkbox' class='check-box' checked='checked' value='" + item.RoleCustom + "' name='item[" + (RoleCustom) + "].RoleCustom' id='item[" + (RoleCustom) + "].RoleCustom' onchange='RoleChange(event)'><input name='item[" + (RoleCustom++) + "].RoleCustom' type='hidden' value='false' />") : ("<input type='checkbox' class='check-box' value='" + item.RoleCustom + "' name='item[" + (RoleCustom) + "].RoleCustom' id='item[" + (RoleCustom) + "].RoleCustom' onchange='RoleChange(event)'><input name='item[" + (RoleCustom++) + "].RoleCustom' type='hidden' value='false' />"))).Title("Custom").Hidden(true);
                                })
                            );
                            columns.Template(item => Html.CheckBox("item[" + (idcount++) + "].IsActive", item.IsActive)).Title("Status");// ((item.IsActive) ? ("<input type='checkbox' class='check-box' checked='checked' onclick='RoleChange(event)' value='" + item.IsActive + "' name='item[" + (idcount) + "].IsActive' id='item[" + (idcount) + "].IsActive' ><input name='item[" + (idcount++) + "].IsActive' type='hidden' value='false' />") : ("<input type='checkbox' class='check-box' value='" + item.IsActive + "' name='item[" + (idcount) + "].IsActive' id='item[" + (idcount) + "].IsActive' onclick='RoleChange(event)' ><input name='item[" + (idcount++) + "].IsActive' type='hidden' value='false' />"))).Title("IsActive");
                            columns.Template(item => (
                                (
                                     "<a href='" + Url.Action("Index", "TenantUser", new { id = item.Id }) + "'><img src='/Images/EditTemplate.jpg' title='Edit' style='height:20px;width:20px' id='edit_" + item.Id + "'  ></a>" +

                                     (
                                        (tenantUserSession != null && ((IsUserDeletionEnabled)))
                                        ?
                                        (
                                         (tenantUserSession.User.UserRoles.Any(x => x.RoleId == (int)HouseOfSynergy.AffinityDms.Entities.Lookup.TenantRoleType.Administrator))
                                         ?
                                         (
                                             (item.InviteGuid != null)
                                             ?
                                                ("&nbsp;<a onclick='javascript:RemoveUser(" + item.Id + ")'><img src='/Images/user_delete.png' title='Remove' style='height:20px;width:20px' id='remove_" + item.Id + "'  ></a>")
                                             :
                                                ("")
                                         )
                                         :
                                         ("")

                                        )
                                        :
                                        ("")


                                     )
                                ).ToString())).Title("Actions");
                            //columns.Command(command =>
                            //{
                            //    command.Custom("Delete").Click("deleteIt");
                            //}).Width(166);
                        }
        )
        .Resizable(resize => resize.Columns(true))
        .Filterable()
        .Sortable()
        .Scrollable(x => x.Height(300))
        .DataSource(dataSource => dataSource
        .Server()
        .Model(model => model.Id(x => x.Id)))
        )
    </div>
            }
<input type="hidden" value="0" id="SelectedUser">
<script type="text/javascript">
    function RemoveUser(id) {
        var users = new AffinityDms.Entities.TenantUsers();
        users.RemoveUser(id, "TenantUserListGrid");
    }
</script>