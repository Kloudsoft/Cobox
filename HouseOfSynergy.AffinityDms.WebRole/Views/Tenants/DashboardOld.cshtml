@model HouseOfSynergy.AffinityDms.WebRole.Models.Tenants.DashboardViewModel

@using HouseOfSynergy.AffinityDms.ResourceProvider

@{
    this.Layout = "~/Views/Shared/_LayoutTenantThemePrivate.cshtml";
    this.ViewBag.Title = ResourceManagement.DesktopClient_ProductName + " - Dashboard";
}

<h1>Dashboard</h1>

<br />
<form id="FormMain">
	<div style="float: left;">
		<table style="width: 200px;">
			<tr>
				<td>
                    <div class="DivDashboardTileKpi AutoWidthHeight" onmouseover="javascript: DivMouseOver(this, true);" onmouseout="javascript: DivMouseOver(this, false);">
						<div id="DivDashboardTileTemplatesLabel" class="DivDashboardTileLabel">Templates</div>
						<div id="DivDashboardTileTemplatesValue" class="DivDashboardTileValue">0%</div>
						<div id="DivDashboardTileTemplatesProgress" class="DivDashboardTileProgress"></div>
					</div>
				</td>
				<td>
                    <div class="DivDashboardTileKpi AutoWidthHeight" onmouseover="javascript: DivMouseOver(this, true);" onmouseout="javascript: DivMouseOver(this, false);">
						<div id="DivDashboardTileDocumentsLabel" class="DivDashboardTileLabel">Documents</div>
						<div id="DivDashboardTileDocumentsValue" class="DivDashboardTileValue">0%</div>
						<div id="DivDashboardTileDocumentsProgress" class="DivDashboardTileProgress"></div>
					</div>
				</td>
			</tr>
			<tr>
				<td>
					<div class="DivDashboardTileKpi AutoWidthHeight" onmouseover="javascript: DivMouseOver(this, true);" onmouseout="javascript: DivMouseOver(this, false);">
						<div id="DivDashboardTileFormsLabel" class="DivDashboardTileLabel">Forms</div>
						<div id="DivDashboardTileFormsValue" class="DivDashboardTileValue">0%</div>
						<div id="DivDashboardTileFormsProgress" class="DivDashboardTileProgress"></div>
					</div>
				</td>
				<td>
					<div class="DivDashboardTileKpi AutoWidthHeight" onmouseover="javascript: DivMouseOver(this, true);" onmouseout="javascript: DivMouseOver(this, false);">
						<div id="DivDashboardTileScansLabel" class="DivDashboardTileLabel">Scans</div>
						<div id="DivDashboardTileScansValue" class="DivDashboardTileValue">0%</div>
						<div id="DivDashboardTileScansProgress" class="DivDashboardTileProgress"></div>
					</div>
				</td>
			</tr>
			<tr>
				<td>
					<div class="DivDashboardTileStatus" onmouseover="javascript: DivMouseOver(this, true);" onmouseout="javascript: DivMouseOver(this, false);">
					</div>
				</td>
				<td>
					<div class="DivDashboardTileStatus" onmouseover="javascript: DivMouseOver(this, true);" onmouseout="javascript: DivMouseOver(this, false);">
					</div>
				</td>
			</tr>
			<tr>
				<td>
					<div class="DivDashboardTileAlert" onmouseover="javascript: DivMouseOver(this, true);" onmouseout="javascript: DivMouseOver(this, false);">
					</div>
				</td>
				<td>
					<div class="DivDashboardTileAlert" onmouseover="javascript: DivMouseOver(this, true);" onmouseout="javascript: DivMouseOver(this, false);">
					</div>
				</td>
			</tr>
		</table>
	</div>
	<div style="position: absolute; margin-left: 300px; margin-right: 0px;">
		<div id="DivKendoGaugeRadial">
			@(Html.Kendo().RadialGauge()
						.Name("KendoGaugeRadial")
						.Pointer(pointer => pointer.Value(0))
						.Scale
						(
							scale => scale
								.MinorUnit(5)
								.StartAngle(-30)
								.EndAngle(210)
								.Max(180)
						)
			)
		</div>
	</div>

	<audio id="AudioMessages" preload="auto">
		<source src="~/Multimedia/Audio/Alert.mp3" type="audio/mpeg">
	</audio>

	<audio id="AudioAlerts" preload="auto">
		<source src="~/Multimedia/Audio/Message.mp3" type="audio/mpeg">
	</audio>

</form>


<script type="text/javascript">

	var Quota = {};
	const DelayMinimum = 02000;
	const DelayMaximum = 10000;
	const Labels = ["Templates", "Documents", "Forms", "Scans"];

	// TODO: Fetch via Ajax call to get a DashboardViewModel object.

	for (var i = 0; i < Labels.length; i++)
	{
		var label = Labels[i];

		Quota[label] = {};
		Quota[label].Used = 0;
		Quota[label].Allowed = 0;
	}

	function UpdateTiles()
	{
		for (var i = 0; i < Labels.length; i++)
		{
			var label = Labels[i];
			UpdateTile(label, "DivDashboardTile" + label + "Label", "DivDashboardTile" + label + "Value", "DivDashboardTile" + label + "Progress");
		}
	}

	function UpdateTile(label, divNameLabel, divNameValue, divNameProgress)
	{
		var width = 0;
		var delay = 0;
		var percentage = 0;

		var countUsed = Quota[label].Used;
		var countAllowed = Quota[label].Allowed;

		percentage = ((countAllowed == 0) ? 0 : Math.floor(countUsed / countAllowed * 100));
		width = Math.floor(80 * (percentage / 100));
		document.getElementById(divNameLabel).innerHTML = label + "<br />" + countUsed.toString() + " / " + countAllowed.toString();
		document.getElementById(divNameValue).innerText = percentage.toString() + "%";
		$("div#" + divNameProgress).animate({ width: width.toString() + "px", }, DelayMinimum);

		if (percentage > 90) { $(document.getElementById(divNameLabel).parentNode).animate({ backgroundColor: "#FF0000", }, DelayMinimum); }
		else if (percentage > 75) { $(document.getElementById(divNameLabel).parentNode).animate({ backgroundColor: "#F10100", }, DelayMinimum); }
		else if (percentage > 50) { $(document.getElementById(divNameLabel).parentNode).animate({ backgroundColor: "#EF7B00", }, DelayMinimum); }
		else { $(document.getElementById(divNameLabel).parentNode).animate({ backgroundColor: "#428C94", }, DelayMinimum); }

		delay = Math.floor((Math.random() * (DelayMaximum - DelayMinimum)) + DelayMinimum);
		window.setTimeout(function () { UpdateTile(label, divNameLabel, divNameValue, divNameProgress); }, delay);
	}

	function UpdateTileStats()
	{
		var maximum = 1000;
		var percentage = 0;

		for (var i = 0; i < Labels.length; i++)
		{
			var label = Labels[i];

			percentage = Math.round(Math.random() * 100);

			Quota[label].Allowed = Math.floor((Math.random() * maximum) + 1);
			Quota[label].Used = Math.round(Quota[label].Allowed * (percentage / 100));
		}

		window.setTimeout(UpdateTileStats, 500);
	}

	function UpdateKendoGaugeValue(min, max, value)
	{
		var min = 0;
		var max = 100;
		var delay = 0;
		var percentage = 0;
		var redraw = false;
		var gauge = $("div#DivKendoGaugeRadial").data("kendoRadialGauge");

		max = gauge.options.scale.max;
		percentage = Math.floor(Math.random() * 100) + 1;
		if (Math.floor((Math.random() * 100) + 1) > 90) { max = Math.floor((Math.random() * 1000) + 1); }
		value = Math.round(max * (percentage / 100));

		redraw = gauge.options.scale.max != max;
		gauge.options.scale.max = max;
		if (redraw) { gauge.redraw(); }
		gauge.value(value);

		delay = Math.floor((Math.random() * (DelayMaximum - DelayMinimum)) + DelayMinimum);
		window.setTimeout(function () { UpdateKendoGaugeValue(min, max, value); }, delay);
	}

	function UpdateAlertsAndMessages()
	{
		var countAlerts = 0;
		var countMessages = 0;
		var soundPlayed = false;

		var elementAlerts = document.getElementById("SpanMenuNavigationAlerts");
		var elementMessages = document.getElementById("SpanMenuNavigationMessages");
		var countAlertsPrevious = parseInt(elementAlerts.innerText.replace("(", "").replace(")", ""));
		var countMessagesPrevious = parseInt(elementMessages.innerText.replace("(", "").replace(")", ""));

		if (Math.round(Math.random() * 100) < 100) { countAlerts = Math.floor(Math.random() * 20) + 1; }
		if (Math.round(Math.random() * 100) < 100) { countMessages = Math.floor(Math.random() * 20) + 1; }

		var notifyAlert = (countAlerts > countAlertsPrevious);
		var notifyMessage = (countAlerts > countMessagesPrevious);

		if (notifyAlert)
		{
			soundPlayed = true;
			document.getElementById("AudioAlerts").play();
			elementAlerts.innerText = (countAlerts < 10) ? (countAlerts.toString()) : "∞";
			tween = TweenMax.from(".DivMenuNavigationAlerts", 0.5, { y: "-=10px", repeat: 2, yoyo: true, ease: Elastic.easeOut, });
		}

		if ((notifyMessage) && (!soundPlayed))
		{
			soundPlayed = true;
			document.getElementById("AudioMessages").play();
			elementMessages.innerText = (countMessages < 10) ? (countMessages.toString()) : "∞";
			tween = TweenMax.from(".DivMenuNavigationMessages", 0.5, { y: "-=10px", repeat: 2, yoyo: true, ease: Elastic.easeOut, });
		}

		delay = Math.floor((Math.random() * (DelayMaximum - DelayMinimum)) + DelayMinimum);
		window.setTimeout(function () { UpdateAlertsAndMessages(); }, delay);
	}

	function DivMouseOver(div, isMouseOver) { div.style.border = isMouseOver ? "1px solid black" : "1px solid white"; }
	function KendoGaugeCreate() { $("div#DivKendoGaugeRadial").kendoRadialGauge({ pointer: { value: 0, }, scale: { minorUnit: 5, startAngle: -30, endAngle: 210, max: 100, }, }); }

	$(document).ready
	(
		function ()
		{
			KendoGaugeCreate();

			UpdateTiles();
			UpdateTileStats();
			UpdateKendoGaugeValue(0, 100, 0);
			//UpdateAlertsAndMessages();
		}
	);

</script>