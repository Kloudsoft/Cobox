@model HouseOfSynergy.AffinityDms.Entities.Common.Tenant
@{
	ViewBag.Title = "Tenant";
	Layout = "~/Views/Shared/_LayoutMasterPrivate.cshtml";
}
@using (Html.BeginForm("CreateUpdateTenant", "MasterTenant"))
{
	@Html.AntiForgeryToken()

	<th class="form-horizontal">

	@if (this.ViewBag.Exception != null)
    {
        if (!string.IsNullOrEmpty(this.ViewBag.Exception))
        {
            <div style="color:red;">@this.ViewBag.Exception</div>
        }
    }
    else if (this.ViewBag.Message != null)
    {
        if (!string.IsNullOrEmpty(this.ViewBag.Message))
        {
            <div style="color:green">@this.ViewBag.Message</div>
        }
    }

	</th>


	<div class="form-group">
		<div class="col-md-offset-2 col-md-10">
			<input type="submit" value="Save" class="btn btn-default" />
		</div>
	</div>
			@Html.ValidationSummary(true, "", new { @class = "text-danger" })
			@Html.HiddenFor(model => model.Id)

			<div class="form-group">
				@Html.LabelFor(model => model.Domain, htmlAttributes: new { @class = "control-label col-md-2" })
				<div class="col-md-10">
					@Html.EditorFor(model => model.Domain, new { htmlAttributes = new { @class = "form-control" } })
					@Html.ValidationMessageFor(model => model.Domain, "", new { @class = "text-danger" })
				</div>

			</div>

			<div class="form-group">
				@Html.Label("Company", new { @style = "float:left", @class = "control-label col-md-2" })
				<div class="col-md-10">
					@Html.EditorFor(model => model.CompanyName, new { htmlAttributes = new { @class = "form-control" } })
					@Html.ValidationMessageFor(model => model.CompanyName, "", new { @class = "text-danger" })
				</div>
			</div>

			<div class="form-group">
				@Html.Label("URL API", new { @style = "float:left", @class = "control-label col-md-2" })
				<div class="col-md-10">
					@Html.EditorFor(model => model.UrlApi, new { htmlAttributes = new { @class = "form-control" } })
					@Html.ValidationMessageFor(model => model.UrlApi, "", new { @class = "text-danger" })
				</div>
			</div>

			<div class="form-group">
				@Html.Label(" Resource  Group", new { @style = "float:left", @class = "control-label col-md-2" })
				<div class="col-md-10">
					@Html.EditorFor(model => model.UrlResourceGroup, new { htmlAttributes = new { @class = "form-control" } })
					@Html.ValidationMessageFor(model => model.UrlResourceGroup, "", new { @class = "text-danger" })
				</div>
			</div>
			<br /><br />
			<table class="table table-bordered">
				<thead>
					<tr>
						<th><b>Contact Details</b></th>
						<th>Owner</th>
						<th>Administrator</th>
						<th>Technical</th>
						<th>Billing</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>    First Name</td>
						<td>
							@Html.EditorFor(model => model.ContactOwnerNameGiven, new { htmlAttributes = new { @class = "form-control" } })
							@Html.ValidationMessageFor(model => model.ContactOwnerNameGiven, "", new { @class = "text-danger" })
						</td>
						<td>
							@Html.EditorFor(model => model.ContactAdministratorNameGiven, new { htmlAttributes = new { @class = "form-control" } })
							@Html.ValidationMessageFor(model => model.ContactAdministratorNameGiven, "", new { @class = "text-danger" })
						</td>
						<td>
							@Html.EditorFor(model => model.ContactTechnicalNameGiven, new { htmlAttributes = new { @class = "form-control" } })
							@Html.ValidationMessageFor(model => model.ContactTechnicalNameGiven, "", new { @class = "text-danger" })
						</td>
						<td>
							@Html.EditorFor(model => model.ContactBillingNameGiven, new { htmlAttributes = new { @class = "form-control" } })
							@Html.ValidationMessageFor(model => model.ContactBillingNameGiven, "", new { @class = "text-danger" })
						</td>
					</tr>
					<tr>
						<td>Last Name</td>
						<td>
							@Html.EditorFor(model => model.ContactOwnerNameFamily, new { htmlAttributes = new { @class = "form-control" } })
							@Html.ValidationMessageFor(model => model.ContactOwnerNameFamily, "", new { @class = "text-danger" })
						</td>
						<td>
							@Html.EditorFor(model => model.ContactAdministratorNameFamily, new { htmlAttributes = new { @class = "form-control" } })
							@Html.ValidationMessageFor(model => model.ContactAdministratorNameFamily, "", new { @class = "text-danger" })
						</td>
						<td>
							@Html.EditorFor(model => model.ContactTechnicalNameFamily, new { htmlAttributes = new { @class = "form-control" } })
							@Html.ValidationMessageFor(model => model.ContactTechnicalNameFamily, "", new { @class = "text-danger" })
						</td>
						<td>
							@Html.EditorFor(model => model.ContactBillingNameFamily, new { htmlAttributes = new { @class = "form-control" } })
							@Html.ValidationMessageFor(model => model.ContactBillingNameFamily, "", new { @class = "text-danger" })
						</td>
					</tr>
					<tr>
						<td>Address</td>
						<td>
							@Html.EditorFor(model => model.ContactOwnerAddress, new { htmlAttributes = new { @class = "form-control" } })
							@Html.ValidationMessageFor(model => model.ContactOwnerAddress, "", new { @class = "text-danger" })
						</td>
						<td>
							@Html.EditorFor(model => model.ContactAdministratorAddress, new { htmlAttributes = new { @class = "form-control" } })
							@Html.ValidationMessageFor(model => model.ContactAdministratorAddress, "", new { @class = "text-danger" })
						</td>
						<td>
							@Html.EditorFor(model => model.ContactTechnicalAddress, new { htmlAttributes = new { @class = "form-control" } })
							@Html.ValidationMessageFor(model => model.ContactTechnicalAddress, "", new { @class = "text-danger" })
						</td>
						<td>
							@Html.EditorFor(model => model.ContactBillingAddress, new { htmlAttributes = new { @class = "form-control" } })
							@Html.ValidationMessageFor(model => model.ContactBillingAddress, "", new { @class = "text-danger" })
						</td>
					</tr>
					<tr>
						<td>
							City
						</td>
						<td>
							@Html.EditorFor(model => model.ContactOwnerCity, new { htmlAttributes = new { @class = "form-control" } })
							@Html.ValidationMessageFor(model => model.ContactOwnerCity, "", new { @class = "text-danger" })
						</td>
						<td>
							@Html.EditorFor(model => model.ContactAdministratorCity, new { htmlAttributes = new { @class = "form-control" } })
							@Html.ValidationMessageFor(model => model.ContactAdministratorCity, "", new { @class = "text-danger" })
						</td>
						<td>
							@Html.EditorFor(model => model.ContactTechnicalCity, new { htmlAttributes = new { @class = "form-control" } })
							@Html.ValidationMessageFor(model => model.ContactTechnicalCity, "", new { @class = "text-danger" })
						</td>
						<td>
							@Html.EditorFor(model => model.ContactBillingCity, new { htmlAttributes = new { @class = "form-control" } })
							@Html.ValidationMessageFor(model => model.ContactBillingCity, "", new { @class = "text-danger" })
						</td>

					</tr>
					<tr>
						<td>
							State
						</td>
						<td>
							@Html.EditorFor(model => model.ContactOwnerState, new { htmlAttributes = new { @class = "form-control" } })
							@Html.ValidationMessageFor(model => model.ContactOwnerState, "", new { @class = "text-danger" })
						</td>
						<td>
							@Html.EditorFor(model => model.ContactAdministratorState, new { htmlAttributes = new { @class = "form-control" } })
							@Html.ValidationMessageFor(model => model.ContactAdministratorState, "", new { @class = "text-danger" })
						</td>
						<td>
							@Html.EditorFor(model => model.ContactTechnicalState, new { htmlAttributes = new { @class = "form-control" } })
							@Html.ValidationMessageFor(model => model.ContactTechnicalState, "", new { @class = "text-danger" })
						</td>
						<td>
							@Html.EditorFor(model => model.ContactBillingState, new { htmlAttributes = new { @class = "form-control" } })
							@Html.ValidationMessageFor(model => model.ContactBillingState, "", new { @class = "text-danger" })
						</td>
					</tr>
					<tr>
						<td>
							Country
						</td>
						<td>
							@Html.EditorFor(model => model.ContactOwnerCountry, new { htmlAttributes = new { @class = "form-control" } })
							@Html.ValidationMessageFor(model => model.ContactOwnerCountry, "", new { @class = "text-danger" })
						</td>
						<td>
							@Html.EditorFor(model => model.ContactAdministratorCountry, new { htmlAttributes = new { @class = "form-control" } })
							@Html.ValidationMessageFor(model => model.ContactAdministratorCountry, "", new { @class = "text-danger" })
						</td>
						<td>
							@Html.EditorFor(model => model.ContactTechnicalCountry, new { htmlAttributes = new { @class = "form-control" } })
							@Html.ValidationMessageFor(model => model.ContactTechnicalCountry, "", new { @class = "text-danger" })
						</td>
						<td>
							@Html.EditorFor(model => model.ContactBillingCountry, new { htmlAttributes = new { @class = "form-control" } })
							@Html.ValidationMessageFor(model => model.ContactBillingCountry, "", new { @class = "text-danger" })
						</td>
					</tr>
					<tr>
						<td>Phone</td>
						<td>
							@Html.EditorFor(model => model.ContactOwnerPhone, new { htmlAttributes = new { @class = "form-control" } })
							@Html.ValidationMessageFor(model => model.ContactOwnerPhone, "", new { @class = "text-danger" })
						</td>
						<td>
							@Html.EditorFor(model => model.ContactAdministratorPhone, new { htmlAttributes = new { @class = "form-control" } })
							@Html.ValidationMessageFor(model => model.ContactAdministratorPhone, "", new { @class = "text-danger" })
						</td>
						<td>
							@Html.EditorFor(model => model.ContactTechnicalPhone, new { htmlAttributes = new { @class = "form-control" } })
							@Html.ValidationMessageFor(model => model.ContactTechnicalPhone, "", new { @class = "text-danger" })
						</td>
						<td>
							@Html.EditorFor(model => model.ContactBillingPhone, new { htmlAttributes = new { @class = "form-control" } })
							@Html.ValidationMessageFor(model => model.ContactBillingPhone, "", new { @class = "text-danger" })
						</td>
					</tr>
					<tr>
						<td>Fax</td>
						<td>
							@Html.EditorFor(model => model.ContactOwnerFax, new { htmlAttributes = new { @class = "form-control" } })
							@Html.ValidationMessageFor(model => model.ContactOwnerFax, "", new { @class = "text-danger" })
						</td>
						<td>
							@Html.EditorFor(model => model.ContactAdministratorFax, new { htmlAttributes = new { @class = "form-control" } })
							@Html.ValidationMessageFor(model => model.ContactAdministratorFax, "", new { @class = "text-danger" })
						</td>
						<td>
							@Html.EditorFor(model => model.ContactTechnicalFax, new { htmlAttributes = new { @class = "form-control" } })
							@Html.ValidationMessageFor(model => model.ContactTechnicalFax, "", new { @class = "text-danger" })
						</td>
						<td>
							@Html.EditorFor(model => model.ContactBillingFax, new { htmlAttributes = new { @class = "form-control" } })
							@Html.ValidationMessageFor(model => model.ContactBillingFax, "", new { @class = "text-danger" })
						</td>
					</tr>
					<tr>
						<td>Email</td>
						<td>
							@Html.EditorFor(model => model.ContactOwnerEmail, new { htmlAttributes = new { @class = "form-control" } })
							@Html.ValidationMessageFor(model => model.ContactOwnerEmail, "", new { @class = "text-danger" })
						</td>
						<td>
							@Html.EditorFor(model => model.ContactAdministratorEmail, new { htmlAttributes = new { @class = "form-control" } })
							@Html.ValidationMessageFor(model => model.ContactAdministratorEmail, "", new { @class = "text-danger" })
						</td>
						<td>
							@Html.EditorFor(model => model.ContactTechnicalEmail, new { htmlAttributes = new { @class = "form-control" } })
							@Html.ValidationMessageFor(model => model.ContactTechnicalEmail, "", new { @class = "text-danger" })
						</td>
						<td>
							@Html.EditorFor(model => model.ContactBillingEmail, new { htmlAttributes = new { @class = "form-control" } })
							@Html.ValidationMessageFor(model => model.ContactBillingEmail, "", new { @class = "text-danger" })
						</td>
					</tr>
				</tbody>
			</table>

			<table class="table table-bordered">
				<thead>
					<tr style="display: inline-table;" class="col-md-12 ">
						<td class="col-md-12" style="text-align:center">
							<b>Storage</b>
						</td>
					</tr>
				</thead>
				<tbody>
					<tr style="display: inline-table;" class="col-md-12 ">
						<td class="col-md-12"><b>Name</b></td>
					</tr>
					<tr style="display: inline-table;" class="col-md-12 ">
						<td class="col-md-2">  Url(File)</td>
						<td class="col-md-10">
							@Html.EditorFor(model => model.UrlStorageFile, new { htmlAttributes = new { @class = "form-control", @style = "max-width:100% !important" } })
							@Html.ValidationMessageFor(model => model.UrlStorageFile, "", new { @class = "text-danger" })
						</td>
					</tr>
					<tr style="display: inline-table;" class="col-md-12 ">
						<td class="col-md-2">Url(Blob)</td>
						<td class="col-md-10">
							@Html.EditorFor(model => model.UrlStorageBlob, new { htmlAttributes = new { @class = "form-control", @style = "max-width:100% !important" } })
							@Html.ValidationMessageFor(model => model.UrlStorageBlob, "", new { @class = "text-danger" })
						</td>
					</tr>
					<tr style="display: inline-table;" class="col-md-12 ">
						<td class="col-md-2">Url(Table)</td>
						<td class="col-md-10">
							@Html.EditorFor(model => model.UrlStorageTable, new { htmlAttributes = new { @class = "form-control", @style = "max-width:100% !important" } })
							@Html.ValidationMessageFor(model => model.UrlStorageTable, "", new { @class = "text-danger" })
						</td>
					</tr>
					<tr style="display: inline-table;" class="col-md-12 ">
						<td class="col-md-2">Url(Queue)</td>
						<td class="col-md-10">
							@Html.EditorFor(model => model.UrlStorageQueue, new { htmlAttributes = new { @class = "form-control", @style = "max-width:100% !important" } })
							@Html.ValidationMessageFor(model => model.UrlStorageQueue, "", new { @class = "text-danger" })
						</td>
					</tr>
					<tr style="display: inline-table;" class="col-md-12 ">
						<td class="col-md-2">Access Key (Primary)</td>
						<td class="col-md-10">
							@Html.EditorFor(model => model.StorageAccessKeyPrimary, new { htmlAttributes = new { @class = "form-control", @style = "max-width:100% !important" } })
							@Html.ValidationMessageFor(model => model.StorageAccessKeyPrimary, "", new { @class = "text-danger" })
						</td>
					</tr>
					<tr style="display: inline-table;" class="col-md-12 ">
						<td class="col-md-2"> Connection String (Primary)</td>
						<td class="col-md-10">
							@Html.EditorFor(model => model.StorageConnectionStringPrimary, new { htmlAttributes = new { @class = "form-control", @style = "max-width:100% !important" } })
							@Html.ValidationMessageFor(model => model.StorageConnectionStringPrimary, "", new { @class = "text-danger" })
						</td>
					</tr>
					<tr style="display: inline-table;" class="col-md-12 ">
						<td class="col-md-2">   Access Key (Secondary)</td>
						<td class="col-md-10">
							@Html.EditorFor(model => model.StorageAccessKeySecondary, new { htmlAttributes = new { @class = "form-control", @style = "max-width:100% !important" } })
							@Html.ValidationMessageFor(model => model.StorageAccessKeySecondary, "", new { @class = "text-danger" })
						</td>
					</tr>
					<tr style="display: inline-table;" class="col-md-12 ">
						<td class="col-md-2"> Connection String (Secondary)</td>
						<td class="col-md-10">
							@Html.EditorFor(model => model.StorageConnectionStringSecondary, new { htmlAttributes = new { @class = "form-control", @style = "max-width:100% !important" } })
							@Html.ValidationMessageFor(model => model.StorageConnectionStringSecondary, "", new { @class = "text-danger" })
						</td>
					</tr>

				</tbody>
			</table>

			<table class="table table-bordered">
				<thead>
					<tr style="display: inline-table;" class="col-md-12 ">
						<td colspan="5" style="text-align:center">
							<b>Database</b>
						</td>
					</tr>
				</thead>
				<tbody>
					<tr style="display: inline-table;" class="col-md-12 ">
						<td class="col-md-2"> Connection String</td>
						<td class="col-md-10">
							@Html.EditorFor(model => model.DatabaseConnectionString, new { htmlAttributes = new { @class = "form-control" } })
							@Html.ValidationMessageFor(model => model.DatabaseConnectionString, "", new { @class = "text-danger" })
						</td>
					</tr>
				</tbody>
			</table>

			<table class="table table-bordered">
				<thead>
					<tr style="display: inline-table;" class="col-md-12 ">
						<td colspan="5" style="text-align:center">
							<b>Security</b>
						</td>
					</tr>
				</thead>
				<tbody>
					<tr style="display: inline-table;" class="col-md-12 ">
						<td class="col-md-2">    RSA Key (Private)</td>
						<td class="col-md-10">
							@Html.LabelFor(model => model.RsaKeyPrivate, htmlAttributes: new { @class = "control-label col-md-2" })

							<div id="RsaKeyPrivate" style="display:none">@Model.RsaKeyPrivate</div>
							<input type="button" value="Copy" onclick="javascript: CopyToClipboard('RsaKeyPrivate');" />
						</td>
					</tr>
					<tr style="display: inline-table;" class="col-md-12 ">
						<td class="col-md-2">    RSA Key (Public)</td>
						<td class="col-md-10">
							@Html.LabelFor(model => model.RsaKeyPublic, htmlAttributes: new { @class = "control-label col-md-2" })

							<div id="RsaKeyPublic" style="display:none">@Model.RsaKeyPublic</div>
							<input type="button" value="Copy" onclick="javascript: CopyToClipboard('RsaKeyPublic');" />
						</td>
					</tr>
				</tbody>
			</table>







			}

<div>
	@Html.ActionLink("Back to List", "Index")
</div>
<script type="text/javascript">

	var RsaKeyCopying = false;

	document.addEventListener
	(
		'copy',
		function (e) {
			if (RsaKeyCopying) {
				alert("Key copied!");
				RsaKeyCopying = false;
			}
		}
	 )
	function CopyToClipboard(elementName) {
		RsaKeyCopying = true;
		var element = document.getElementById(elementName);

		// Create a temporary element
		var $tmp = $("<input />");
		// Add the temporary element to the DOM.
		$("body").append($tmp);
		// Add the text to the temporary element and select it.
		$tmp.val(element.textContent).select();
		// Tell the broswer to copy the selection.
		document.execCommand("copy");
		// Remove the temporary element.
		$tmp.remove();
	}

</script>
