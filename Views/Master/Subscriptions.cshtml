@model List<HouseOfSynergy.AffinityDms.Entities.Common.Subscription>

@{
	this.Layout = "~/Views/Shared/_LayoutMasterPrivate.cshtml";
}
<h1>Subscriptions</h1>

<script>

	function RedirectToCreateSubscription() {
		window.location.href = "../mastersubscription/index";
	}

</script>

@if (this.ViewBag.Exception != null)
{
    if (!string.IsNullOrEmpty(this.ViewBag.Exception))
    {
        <div style="color:red;">@this.ViewBag.Exception</div>
    }
}


<div class="form-group" style="float:left">
	<div class="col-md-offset-2 col-md-10">
		<input title="Create" value="Create" class="btn btn-default" type="button" onclick="RedirectToCreateSubscription(); return false" />
	</div>
</div>

<div class="col-md-12">
	@(Html.Kendo().Grid(Model) //Bind the grid to ViewBag.Products
			  .Name("SubscriptionGrid")
			  .Columns(columns =>
			  {
				  columns.Bound(item => item.Id).Hidden().HtmlAttributes(new { @name = "SubscriptionId" });
				  columns.Bound(item => item.Description);
				  columns.Group(

					  groupitem =>
					  {
						  groupitem
						  .Title("Allowed")
						  .Columns(
							  columnitem =>
							  {
								  columnitem.Bound(item => item.NumberOfFormsAllowed).Title("Forms");
								  columnitem.Bound(item => item.NumberOfPagesAllowed).Title("Pages");
								  columnitem.Bound(item => item.NumberOfUsersAllowed).Title("Users");
								  columnitem.Bound(item => item.NumberOfTemplatesAllowed).Title("Templates");
							  }
							  );
					  }
					  );
				  columns.Group(

					 groupitem =>
					 {
						 groupitem
						 .Title("Used")
						 .Columns(
							 columnitem =>
							 {
								 columnitem.Bound(item => item.NumberOfFormsUsed).Title("Forms");
								 columnitem.Bound(item => item.NumberOfPagesUsed).Title("Pages");
								 columnitem.Bound(item => item.NumberOfTemplatesUsed).Title("Template");
							 }
							 );
					 }
					 );
				  //columns.Bound(item => item.NumberOfFormsAllowed);
				  //columns.Bound(item => item.NumberOfPagesAllowed);
				  //columns.Bound(item => item.NumberOfUsersAllowed);
				  //columns.Bound(item => item.NumberOfTemplatesAllowed);
				  //columns.Bound(item => item.NumberOfFormsUsed);
				  //columns.Bound(item => item.NumberOfPagesUsed);
				  //columns.Bound(item => item.NumberOfTemplatesUsed);

				  columns.Bound(item => item.AllowScanning);
				  columns.Bound(item => item.AllowBranding);
				  columns.Bound(item => item.AllowTemplateWorkflows);

				  columns.Template(item => ((item.IsDemo) ? ("Yes") : ("No"))).Title("Demo");
				  columns.Template(item => ((item.IsActive) ? ("Active") : ("InActive"))).Title("Status");
				  columns.Template(item => (
					  (
					  "<a href='" + @Url.Action("index", "mastersubscription", new { id = item.Id }) + "'><img src='/Images/EditTemplate.jpg' title='Edit' style='height:20px;width:20px' id='" + item.Id + "'  ></a>" +
					  "<a href='" + @Url.Action("index", "mastertenantsubscription", new { id = item.Id }) + "'><img src='/Images/head_icon2.png' title='Tenant Subscription' style='height:20px;width:20px' id='" + item.Id + "'  ></a>"
					  ).ToString()
					  )
					  ).Title("Actions");


			  })
			   .Pageable()
			  .Sortable()
			  .Scrollable(x => x.Height(350))
			  .Resizable(x => x.Columns(true))

	)

</div>